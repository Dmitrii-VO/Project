#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ CHECK constraint –≤ —Ç–∞–±–ª–∏—Ü–µ offers
"""

import sqlite3

DATABASE_PATH = 'telegram_mini_app.db'

def check_offers_constraints():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã offers"""
    
    try:
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º SQL —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã offers
        cursor.execute("""
            SELECT sql FROM sqlite_master 
            WHERE type='table' AND name='offers'
        """)
        
        result = cursor.fetchone()
        if result:
            print("üìã SQL —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã offers:")
            print("-" * 60)
            print(result[0])
            print("-" * 60)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ CHECK constraint
            if 'CHECK' in result[0]:
                print("‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω CHECK constraint –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤!")
                if "status IN" in result[0]:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
                    import re
                    match = re.search(r"status IN \((.*?)\)", result[0])
                    if match:
                        allowed_statuses = match.group(1)
                        print(f"   –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã: {allowed_statuses}")
            else:
                print("‚úÖ CHECK constraint –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã –≤ —Ç–∞–±–ª–∏—Ü–µ
        cursor.execute("SELECT DISTINCT status FROM offers")
        statuses = cursor.fetchall()
        
        print(f"\nüìä –¢–µ–∫—É—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã –æ—Ñ—Ñ–µ—Ä–æ–≤ –≤ –±–∞–∑–µ:")
        for status in statuses:
            cursor.execute("SELECT COUNT(*) FROM offers WHERE status = ?", (status[0],))
            count = cursor.fetchone()[0]
            print(f"   {status[0]}: {count} –∑–∞–ø–∏—Å–µ–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("PRAGMA table_info(offers)")
        columns = cursor.fetchall()
        
        print(f"\nüìã –ü–æ–ª—è —Ç–∞–±–ª–∏—Ü—ã offers:")
        for col in columns:
            print(f"   {col[1]} ({col[2]}) {'NOT NULL' if col[3] else 'NULL'} {f'DEFAULT {col[4]}' if col[4] else ''}")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    check_offers_constraints()
