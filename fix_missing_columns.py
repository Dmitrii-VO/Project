#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import os
import sys
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app.models.database import execute_db_query

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def fix_channels_table():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É channels, –¥–æ–±–∞–≤–ª—è—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏"""
    logger.info("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã channels...")
    
    # –°–ø–∏—Å–æ–∫ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã channels
    missing_columns = [
        ("subscribers", "INTEGER DEFAULT 0"),
        ("description", "TEXT DEFAULT ''"),
        ("channel_type", "TEXT DEFAULT 'public'"),
        ("language", "TEXT DEFAULT 'ru'"),
        ("created_at", "TIMESTAMP DEFAULT CURRENT_TIMESTAMP"),
        ("updated_at", "TIMESTAMP DEFAULT CURRENT_TIMESTAMP"),
    ]
    
    success_count = 0
    
    for column_name, column_definition in missing_columns:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–ª–æ–Ω–∫–∞
            result = execute_db_query(f"PRAGMA table_info(channels)")
            existing_columns = [row['name'] for row in result] if result else []
            
            if column_name in existing_columns:
                logger.info(f"‚úÖ –ö–æ–ª–æ–Ω–∫–∞ channels.{column_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                success_count += 1
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É
                sql = f"ALTER TABLE channels ADD COLUMN {column_name} {column_definition}"
                execute_db_query(sql)
                logger.info(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ channels.{column_name}")
                success_count += 1
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å –∫–æ–ª–æ–Ω–∫–æ–π channels.{column_name}: {e}")
    
    return success_count == len(missing_columns)

def fix_offers_table():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É offers"""
    logger.info("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã offers...")
    
    missing_columns = [
        ("created_at", "TIMESTAMP DEFAULT CURRENT_TIMESTAMP"),
        ("updated_at", "TIMESTAMP DEFAULT CURRENT_TIMESTAMP"),
    ]
    
    success_count = 0
    
    for column_name, column_definition in missing_columns:
        try:
            result = execute_db_query(f"PRAGMA table_info(offers)")
            existing_columns = [row['name'] for row in result] if result else []
            
            if column_name in existing_columns:
                logger.info(f"‚úÖ –ö–æ–ª–æ–Ω–∫–∞ offers.{column_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                success_count += 1
            else:
                sql = f"ALTER TABLE offers ADD COLUMN {column_name} {column_definition}"
                execute_db_query(sql)
                logger.info(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ offers.{column_name}")
                success_count += 1
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å –∫–æ–ª–æ–Ω–∫–æ–π offers.{column_name}: {e}")
    
    return success_count == len(missing_columns)

def test_fixed_database():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        # –¢–µ—Å—Ç –∫–∞–Ω–∞–ª–æ–≤ —Å –Ω–æ–≤–æ–π –∫–æ–ª–æ–Ω–∫–æ–π subscribers
        channels = execute_db_query('SELECT id, title, subscribers FROM channels LIMIT 3', fetch_all=True)
        if channels:
            logger.info(f"‚úÖ –ö–∞–Ω–∞–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(channels)}")
            for channel in channels:
                logger.info(f"   ID: {channel['id']}, –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {channel['subscribers']}")
        else:
            logger.info("‚ÑπÔ∏è –ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç –æ—Ñ—Ñ–µ—Ä–æ–≤
        offers = execute_db_query('SELECT id, title, price FROM offers LIMIT 3', fetch_all=True)
        logger.info(f"‚úÖ –û—Ñ—Ñ–µ—Ä—ã: –Ω–∞–π–¥–µ–Ω–æ {len(offers) if offers else 0}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    logger.info("üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ï–î–û–°–¢–ê–Æ–©–ò–• –ö–û–õ–û–ù–û–ö")
    logger.info("="*50)
    
    try:
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        channels_ok = fix_channels_table()
        offers_ok = fix_offers_table()
        
        if channels_ok and offers_ok:
            logger.info("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º
            if test_fixed_database():
                logger.info("üéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
                logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–ø–µ—Ä—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞")
                return True
            else:
                logger.error("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫–∞–∑–∞–ª–æ –ø—Ä–æ–±–ª–µ–º—ã")
                return False
        else:
            logger.error("‚ùå –ù–µ –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

if __name__ == '__main__':
    success = main()
    if not success:
        sys.exit(1)