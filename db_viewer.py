#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–æ—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü –ë–î
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è SQL –∑–∞–ø—Ä–æ—Å–æ–≤
"""

import sqlite3
import os

DB_PATH = 'telegram_mini_app.db'

def get_table_structure(table_name):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        cursor.execute(f"PRAGMA table_info({table_name})")
        columns = cursor.fetchall()
        
        conn.close()
        return columns
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã {table_name}: {e}")
        return []

def check_required_tables_for_proposals():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü –Ω—É–∂–Ω—ã—Ö –¥–ª—è proposals/incoming"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –¢–ê–ë–õ–ò–¶ –î–õ–Ø API /proposals/incoming")
    print("=" * 70)
    
    required_tables = ['offer_proposals', 'channels', 'offers', 'users']
    
    for table in required_tables:
        print(f"\nüìã –¢–ê–ë–õ–ò–¶–ê: {table.upper()}")
        print("-" * 50)
        
        columns = get_table_structure(table)
        
        if not columns:
            print(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ {table} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            continue
            
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è:")
        for i, col in enumerate(columns):
            # (cid, name, type, notnull, dflt_value, pk)
            name = col[1]
            col_type = col[2]
            not_null = "NOT NULL" if col[3] else "NULL"
            default = f"DEFAULT {col[4]}" if col[4] is not None else ""
            
            print(f"  {i:2d}. {name:<25} {col_type:<15} {not_null:<8} {default}")

def create_correct_sql_query():
    """–°–æ–∑–¥–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π SQL –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
    print("\nüîß –°–û–ó–î–ê–ù–ò–ï –ü–†–ê–í–ò–õ–¨–ù–û–ì–û SQL –ó–ê–ü–†–û–°–ê")
    print("=" * 70)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –ø–æ–ª—è –µ—Å—Ç—å –≤ offers
    offers_columns = get_table_structure('offers')
    offers_fields = [col[1] for col in offers_columns] if offers_columns else []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –ø–æ–ª—è –µ—Å—Ç—å –≤ other tables
    proposals_columns = get_table_structure('offer_proposals')
    proposals_fields = [col[1] for col in proposals_columns] if proposals_columns else []
    
    channels_columns = get_table_structure('channels')
    channels_fields = [col[1] for col in channels_columns] if channels_columns else []
    
    users_columns = get_table_structure('users')
    users_fields = [col[1] for col in users_columns] if users_columns else []
    
    print("\n‚úÖ –î–û–°–¢–£–ü–ù–´–ï –ü–û–õ–Ø –ü–û –¢–ê–ë–õ–ò–¶–ê–ú:")
    print(f"offers: {offers_fields}")
    print(f"offer_proposals: {proposals_fields}")  
    print(f"channels: {channels_fields}")
    print(f"users: {users_fields}")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    print("\nüìù –ü–†–ê–í–ò–õ–¨–ù–´–ô SQL –ó–ê–ü–†–û–°:")
    print("-" * 50)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è offer_proposals
    select_fields = [
        "-- –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
        "op.id, op.offer_id, op.channel_id, op.status",
        "op.created_at, op.responded_at, op.expires_at",
        "op.rejection_reason, op.notified_at"
    ]
    
    # –ü–æ–ª—è offers (—Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ)
    offers_safe_fields = []
    if 'title' in offers_fields:
        offers_safe_fields.append("o.title as offer_title")
    if 'description' in offers_fields:
        offers_safe_fields.append("o.description as offer_description")
    if 'budget_total' in offers_fields:
        offers_safe_fields.append("o.budget_total as offer_budget")
    elif 'price' in offers_fields:
        offers_safe_fields.append("o.price as offer_budget")
    if 'content' in offers_fields:
        offers_safe_fields.append("o.content as offer_content")
    if 'requirements' in offers_fields:
        offers_safe_fields.append("o.requirements as placement_requirements")
    if 'duration_days' in offers_fields:
        offers_safe_fields.append("o.duration_days as placement_duration")
    if 'expected_placement_duration' in offers_fields:
        offers_safe_fields.append("o.expected_placement_duration")
    if 'category' in offers_fields:
        offers_safe_fields.append("o.category as offer_category")
    if 'target_audience' in offers_fields:
        offers_safe_fields.append("o.target_audience")
    if 'currency' in offers_fields:
        offers_safe_fields.append("o.currency")
    
    if offers_safe_fields:
        select_fields.append("-- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ñ—Ñ–µ—Ä–µ")
        select_fields.extend(offers_safe_fields)
    
    # –ü–æ–ª—è channels (—Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ)
    channels_safe_fields = []
    if 'title' in channels_fields:
        channels_safe_fields.append("c.title as channel_title")
    if 'username' in channels_fields:
        channels_safe_fields.append("c.username as channel_username")
    if 'subscriber_count' in channels_fields:
        channels_safe_fields.append("c.subscriber_count")
    if 'category' in channels_fields:
        channels_safe_fields.append("c.category as channel_category")
    
    if channels_safe_fields:
        select_fields.append("-- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ") 
        select_fields.extend(channels_safe_fields)
    
    # –ü–æ–ª—è users (—Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ)
    users_safe_fields = []
    if 'username' in users_fields:
        users_safe_fields.append("u.username as advertiser_username")
    if 'first_name' in users_fields:
        users_safe_fields.append("u.first_name as advertiser_first_name")
    if 'last_name' in users_fields:
        users_safe_fields.append("u.last_name as advertiser_last_name")
    
    if users_safe_fields:
        select_fields.append("-- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ –æ—Ñ—Ñ–µ—Ä–∞")
        select_fields.extend(users_safe_fields)
    
    # –í—ã—á–∏—Å–ª—è–µ–º—ã–µ –ø–æ–ª—è
    select_fields.extend([
        "-- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
        "CASE WHEN op.expires_at < datetime('now') THEN 1 ELSE 0 END as is_expired",
        "CASE WHEN op.expires_at > datetime('now') THEN CAST((julianday(op.expires_at) - julianday('now')) * 24 AS INTEGER) ELSE 0 END as hours_until_expiry"
    ])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    sql_query = f"""
SELECT 
    {','.join([f'    {field}' for field in select_fields if not field.startswith('--')])}
FROM offer_proposals op
JOIN channels c ON op.channel_id = c.id
JOIN offers o ON op.offer_id = o.id
JOIN users u ON o.created_by = u.id
WHERE c.owner_id = ?
ORDER BY 
    CASE op.status
        WHEN 'sent' THEN 1
        WHEN 'accepted' THEN 2
        WHEN 'rejected' THEN 3
        WHEN 'expired' THEN 4
        ELSE 5
    END,
    op.created_at DESC
LIMIT ? OFFSET ?
"""
    
    print(sql_query)
    return sql_query

def test_sql_query():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–π SQL –∑–∞–ø—Ä–æ—Å"""
    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï SQL –ó–ê–ü–†–û–°–ê")
    print("=" * 70)
    
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
        test_query = create_correct_sql_query()
        
        # –ó–∞–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        test_query_with_params = test_query.replace('?', '1', 1).replace('?', '10', 1).replace('?', '0', 1)
        
        cursor.execute(test_query_with_params)
        results = cursor.fetchall()
        
        print(f"‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(results)}")
        
        if results and len(results) > 0:
            print("\nüìã –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏:")
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
            cursor.execute("SELECT * FROM offer_proposals LIMIT 0")
            col_names = [description[0] for description in cursor.description]
            
            for i, value in enumerate(results[0]):
                if i < len(col_names):
                    print(f"  {col_names[i]}: {value}")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –ë–î –î–õ–Ø PROPOSALS/INCOMING API")
    print("=" * 70)
    
    if not os.path.exists(DB_PATH):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {DB_PATH}")
        return
    
    print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–∞: {DB_PATH}")
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤—Å–µ—Ö –Ω—É–∂–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
    check_required_tables_for_proposals()
    
    # 2. –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π SQL –∑–∞–ø—Ä–æ—Å
    create_correct_sql_query()
    
    # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    test_sql_query()
    
    print("\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print("- –ü—Ä–æ–≤–µ—Ä–µ–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü")
    print("- –°–æ–∑–¥–∞–Ω SQL –∑–∞–ø—Ä–æ—Å —Ç–æ–ª—å–∫–æ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏")
    print("- –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    print("\n–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–¥ –≤ proposals_management.py!")

if __name__ == "__main__":
    main()