#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Telegram Mini App
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç SQLite –∏ PostgreSQL
"""

import os
import sys
import sqlite3
from datetime import datetime
from urllib.parse import urlparse

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    print("‚ö†Ô∏è python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DATABASE_URL = os.environ.get('DATABASE_URL', 'sqlite:///telegram_mini_app.db')
SQLITE_PATH = 'telegram_mini_app.db'


def get_database_type():
    """–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    if DATABASE_URL.startswith('sqlite'):
        return 'sqlite'
    elif DATABASE_URL.startswith('postgresql'):
        return 'postgresql'
    else:
        return 'unknown'


def get_sqlite_connection():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite"""
    try:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø—É—Ç–∏ –∫ –ë–î
        possible_paths = [
            SQLITE_PATH,
            'telegram_mini_app.db',
            os.path.join(os.getcwd(), 'telegram_mini_app.db'),
            DATABASE_URL.replace('sqlite:///', ''),
        ]
        
        for path in possible_paths:
            if os.path.exists(path):
                print(f"üìÅ –ù–∞–π–¥–µ–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {path}")
                conn = sqlite3.connect(path)
                conn.row_factory = sqlite3.Row  # –î–ª—è –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
                return conn, path
        
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø—É—Ç—è—Ö: {possible_paths}")
        return None, None
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SQLite: {e}")
        return None, None


def get_postgresql_connection():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL"""
    try:
        import psycopg2
        from psycopg2.extras import RealDictCursor
        
        url = urlparse(DATABASE_URL)
        conn = psycopg2.connect(
            host=url.hostname or 'localhost',
            port=url.port or 5432,
            database=url.path[1:] if url.path else 'postgres',
            user=url.username or 'postgres',
            password=url.password or 'password',
            cursor_factory=RealDictCursor
        )
        return conn, DATABASE_URL
        
    except ImportError:
        print("‚ùå psycopg2 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PostgreSQL")
        return None, None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
        return None, None


def get_database_connection():
    """–ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    db_type = get_database_type()
    
    print(f"üóÑÔ∏è –¢–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {db_type}")
    print(f"üîó URL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {DATABASE_URL}")
    
    if db_type == 'sqlite':
        return get_sqlite_connection()
    elif db_type == 'postgresql':
        return get_postgresql_connection()
    else:
        print(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –ë–î: {db_type}")
        return None, None


def get_tables_list(conn, db_type):
    """–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü"""
    cursor = conn.cursor()
    
    try:
        if db_type == 'sqlite':
            cursor.execute("""
                SELECT name FROM sqlite_master 
                WHERE type='table' AND name NOT LIKE 'sqlite_%'
                ORDER BY name
            """)
        else:  # PostgreSQL
            cursor.execute("""
                SELECT tablename as name FROM pg_tables 
                WHERE schemaname = 'public'
                ORDER BY tablename
            """)
        
        tables = [row[0] if isinstance(row, tuple) else row['name'] for row in cursor.fetchall()]
        return tables
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü: {e}")
        return []


def get_table_schema(conn, table_name, db_type):
    """–ü–æ–ª—É—á–∞–µ–º —Å—Ö–µ–º—É —Ç–∞–±–ª–∏—Ü—ã"""
    cursor = conn.cursor()
    
    try:
        if db_type == 'sqlite':
            cursor.execute(f"PRAGMA table_info({table_name})")
            columns = cursor.fetchall()
            
            schema = []
            for col in columns:
                schema.append({
                    'column': col[1],
                    'type': col[2],
                    'not_null': bool(col[3]),
                    'default': col[4],
                    'primary_key': bool(col[5])
                })
        else:  # PostgreSQL
            cursor.execute("""
                SELECT column_name, data_type, is_nullable, column_default
                FROM information_schema.columns
                WHERE table_name = %s
                ORDER BY ordinal_position
            """, (table_name,))
            
            columns = cursor.fetchall()
            schema = []
            for col in columns:
                schema.append({
                    'column': col[0],
                    'type': col[1],
                    'not_null': col[2] == 'NO',
                    'default': col[3],
                    'primary_key': False  # –ù—É–∂–µ–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è PK
                })
        
        return schema
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ö–µ–º—ã —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}")
        return []


def get_table_count(conn, table_name):
    """–ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ"""
    cursor = conn.cursor()
    
    try:
        cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
        count = cursor.fetchone()[0]
        return count
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∑–∞–ø–∏—Å–µ–π –≤ {table_name}: {e}")
        return 0


def get_table_sample(conn, table_name, limit=5):
    """–ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã"""
    cursor = conn.cursor()
    
    try:
        cursor.execute(f"SELECT * FROM {table_name} LIMIT {limit}")
        rows = cursor.fetchall()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
        if rows:
            if hasattr(rows[0], 'keys'):  # sqlite3.Row –∏–ª–∏ psycopg2.RealDictRow
                return [dict(row) for row in rows]
            else:  # –æ–±—ã—á–Ω—ã–µ –∫–æ—Ä—Ç–µ–∂–∏
                columns = [desc[0] for desc in cursor.description]
                return [dict(zip(columns, row)) for row in rows]
        
        return []
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ –∏–∑ {table_name}: {e}")
        return []


def print_table_info(conn, table_name, db_type):
    """–í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–µ"""
    print(f"\n" + "="*60)
    print(f"üìã –¢–ê–ë–õ–ò–¶–ê: {table_name.upper()}")
    print("="*60)
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    count = get_table_count(conn, table_name)
    print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {count}")
    
    # –°—Ö–µ–º–∞ —Ç–∞–±–ª–∏—Ü—ã
    schema = get_table_schema(conn, table_name, db_type)
    if schema:
        print(f"\nüìã –°–¢–†–£–ö–¢–£–†–ê –¢–ê–ë–õ–ò–¶–´ '{table_name}':")
        print("-" * 80)
        print(f"{'#':<3} {'–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è':<25} {'–¢–∏–ø':<15} {'NOT NULL':<10} {'–ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é':<20}")
        print("-" * 80)
        
        for i, col in enumerate(schema):
            pk_mark = " (PK)" if col['primary_key'] else ""
            not_null = "YES" if col['not_null'] else "NO"
            default = str(col['default']) if col['default'] is not None else ""
            
            print(f"{i:<3} {col['column']:<25} {col['type']:<15} {not_null:<10} {default:<20}")
        
        print("-" * 80)
        print(f"–í—Å–µ–≥–æ –ø–æ–ª–µ–π: {len(schema)}")
    
    # –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    if count > 0:
        print(f"\nüìÑ –ü–†–ò–ú–ï–†–´ –î–ê–ù–ù–´–• (–ø–µ—Ä–≤—ã–µ 5 –∑–∞–ø–∏—Å–µ–π):")
        print("-" * 80)
        
        samples = get_table_sample(conn, table_name)
        for i, row in enumerate(samples, 1):
            print(f"\nüìù –ó–∞–ø–∏—Å—å #{i}:")
            for key, value in row.items():
                # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                display_value = str(value)
                if len(display_value) > 50:
                    display_value = display_value[:47] + "..."
                print(f"   {key}: {display_value}")
    else:
        print(f"\nüìÑ –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞")


def analyze_offers_system(conn, tables, db_type):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –æ—Ñ—Ñ–µ—Ä–æ–≤"""
    print(f"\n" + "="*60)
    print(f"üéØ –ê–ù–ê–õ–ò–ó –°–ò–°–¢–ï–ú–´ –û–§–§–ï–†–û–í")
    print("="*60)
    
    # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –æ—Ñ—Ñ–µ—Ä–∞–º–∏
    offer_tables = [t for t in tables if 'offer' in t.lower()]
    
    if offer_tables:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ç–∞–±–ª–∏—Ü—ã –æ—Ñ—Ñ–µ—Ä–æ–≤: {offer_tables}")
        for table in offer_tables:
            count = get_table_count(conn, table)
            print(f"   üìä {table}: {count} –∑–∞–ø–∏—Å–µ–π")
    else:
        print(f"‚ùå –¢–∞–±–ª–∏—Ü—ã –æ—Ñ—Ñ–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã: {tables}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if 'users' in tables:
        user_count = get_table_count(conn, 'users')
        print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ: {user_count}")
        
        if user_count > 0:
            print(f"üë§ –ü—Ä–∏–º–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
            users = get_table_sample(conn, 'users', 3)
            for user in users:
                print(f"   ID: {user.get('id')} | Telegram: {user.get('telegram_id')} | Username: {user.get('username', 'N/A')}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª—ã
    if 'channels' in tables:
        channel_count = get_table_count(conn, 'channels')
        print(f"üì∫ –ö–∞–Ω–∞–ª–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {channel_count}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üóÑÔ∏è –ü–†–û–°–ú–û–¢–† –ë–ê–ó–´ –î–ê–ù–ù–´–• TELEGRAM MINI APP")
    print("="*60)
    print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
    conn, db_path = get_database_connection()
    if not conn:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    db_type = get_database_type()
    print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {db_path}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
        tables = get_tables_list(conn, db_type)
        
        if not tables:
            print("‚ùå –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return
        
        print(f"\nüìã –ù–ê–ô–î–ï–ù–ù–´–ï –¢–ê–ë–õ–ò–¶–´ ({len(tables)}):")
        for i, table in enumerate(tables, 1):
            count = get_table_count(conn, table)
            print(f"   {i:2d}. {table} ({count} –∑–∞–ø–∏—Å–µ–π)")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –æ—Ñ—Ñ–µ—Ä–æ–≤
        analyze_offers_system(conn, tables, db_type)
        
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        print(f"\n" + "="*60)
        print("üîç –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –†–ï–ñ–ò–ú")
        print("="*60)
        print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É:")
        print("   - —á–∏—Å–ª–æ (1-{}): –ø–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É".format(len(tables)))
        print("   - 'all': –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã")
        print("   - 'offers': –∞–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º—ã –æ—Ñ—Ñ–µ—Ä–æ–≤") 
        print("   - 'exit': –≤—ã—Ö–æ–¥")
        
        while True:
            try:
                user_input = input(f"\n> ").strip().lower()
                
                if user_input == 'exit':
                    break
                elif user_input == 'all':
                    for table in tables:
                        print_table_info(conn, table, db_type)
                elif user_input == 'offers':
                    analyze_offers_system(conn, tables, db_type)
                elif user_input.isdigit():
                    table_num = int(user_input)
                    if 1 <= table_num <= len(tables):
                        table_name = tables[table_num - 1]
                        print_table_info(conn, table_name, db_type)
                    else:
                        print(f"‚ùå –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ {len(tables)}")
                else:
                    print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
                    
            except KeyboardInterrupt:
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    finally:
        conn.close()
        print(f"\nüëã –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")


if __name__ == '__main__':
    main()