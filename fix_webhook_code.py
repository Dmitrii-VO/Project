#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ webhook –∫–æ–¥–∞ –≤ app/api/channels.py
–ó–∞–º–µ–Ω—è–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ
"""

import os
import re

def fix_webhook_imports():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∏–º–ø–æ—Ä—Ç—ã –≤ webhook –∫–æ–¥–µ"""
    
    channels_api_path = 'app/api/channels.py'
    
    if not os.path.exists(channels_api_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {channels_api_path}")
        return False
    
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    with open(channels_api_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_path = f"{channels_api_path}.backup_fix"
    with open(backup_path, 'w', encoding='utf-8') as f:
        f.write(content)
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º webhook –∫–æ–¥ - –∑–∞–º–µ–Ω—è–µ–º –≤–µ—Å—å –±–ª–æ–∫
    old_webhook_pattern = r"@channels_bp\.route\('/webhook'.*?return jsonify\(\{'ok': True\}\)"
    
    new_webhook_code = '''@channels_bp.route('/webhook', methods=['POST'])
def telegram_webhook():
    """Webhook –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤"""
    try:
        from datetime import datetime
        from app.models.database import db_manager
        import logging
        
        logger = logging.getLogger(__name__)
        data = request.get_json()
        
        if not data:
            return jsonify({'ok': True})
        
        logger.info(f"üì® Webhook –ø–æ–ª—É—á–µ–Ω: {data.get('update_id', 'N/A')}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–∞—Ö
        if 'channel_post' in data:
            message = data['channel_post']
            chat = message.get('chat', {})
            chat_id = str(chat.get('id'))
            text = message.get('text', '')
            
            logger.info(f"üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ {chat_id}: {text[:50]}...")
            
            # –ò—â–µ–º –∫–∞–Ω–∞–ª—ã —Å –∫–æ–¥–∞–º–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
            channels = db_manager.execute_query("""
                SELECT id, username, verification_code, telegram_id
                FROM channels 
                WHERE status = 'pending_verification' 
                AND verification_code IS NOT NULL
            """, fetch_all=True)
            
            if channels:
                logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(channels)} –∫–∞–Ω–∞–ª–æ–≤ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ")
                
                verification_found = False
                
                for channel in channels:
                    verification_code = channel['verification_code']
                    if verification_code and verification_code in text:
                        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∫–∞–Ω–∞–ª
                        success = db_manager.execute_query("""
                            UPDATE channels 
                            SET status = 'verified', verified_at = ?, is_verified = 1
                            WHERE id = ?
                        """, (datetime.now().isoformat(), channel['id']))
                        
                        if success:
                            logger.info(f"‚úÖ –ö–∞–Ω–∞–ª {channel['username']} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω —Å –∫–æ–¥–æ–º {verification_code}!")
                            verification_found = True
                        else:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ {channel['id']}")
                
                if verification_found:
                    logger.info("üéâ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                else:
                    logger.info("‚ÑπÔ∏è –ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
            else:
                logger.info("‚ÑπÔ∏è –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –æ–∂–∏–¥–∞—é—â–∏—Ö –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        
        return jsonify({'ok': True})
        
    except Exception as e:
        logger = logging.getLogger(__name__)
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ webhook: {e}")
        import traceback
        traceback.print_exc()
        return jsonify({'ok': True})  # –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ok –¥–ª—è Telegram'''
    
    # –ó–∞–º–µ–Ω—è–µ–º webhook –∫–æ–¥
    new_content = re.sub(old_webhook_pattern, new_webhook_code, content, flags=re.DOTALL)
    
    # –ï—Å–ª–∏ –∑–∞–º–µ–Ω–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü
    if '@channels_bp.route(\'/webhook\'' not in new_content:
        new_content += '\n\n' + new_webhook_code
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open(channels_api_path, 'w', encoding='utf-8') as f:
        f.write(new_content)
    
    print(f"‚úÖ Webhook –∫–æ–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –≤ {channels_api_path}")
    print(f"üìÑ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
    
    return True

def add_required_imports():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞"""
    
    channels_api_path = 'app/api/channels.py'
    
    with open(channels_api_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
    required_imports = [
        'from flask import Blueprint, request, jsonify',
        'from app.models.database import db_manager',
        'from datetime import datetime',
        'import logging'
    ]
    
    lines = content.split('\n')
    import_section_end = 0
    
    # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü —Å–µ–∫—Ü–∏–∏ –∏–º–ø–æ—Ä—Ç–æ–≤
    for i, line in enumerate(lines):
        if line.strip().startswith(('import ', 'from ')) and not line.strip().startswith('#'):
            import_section_end = i + 1
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∏–º–ø–æ—Ä—Ç—ã
    imports_added = []
    for imp in required_imports:
        if imp not in content:
            lines.insert(import_section_end, imp)
            imports_added.append(imp)
            import_section_end += 1
    
    if imports_added:
        new_content = '\n'.join(lines)
        with open(channels_api_path, 'w', encoding='utf-8') as f:
            f.write(new_content)
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –∏–º–ø–æ—Ä—Ç—ã: {imports_added}")
    
    return True

def test_webhook_manually():
    """–†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook...")
    
    import requests
    
    webhook_url = "https://lesson-bed-cent-concentration.trycloudflare.com/api/channels/webhook"
    
    test_data = {
        "update_id": 123456789,
        "channel_post": {
            "message_id": 1,
            "chat": {
                "id": "-1001000000999",
                "type": "channel",
                "title": "–¢–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª"
            },
            "date": 1640995200,
            "text": "#addmkg2x0 - —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–¥ –∏–∑ –ª–æ–≥–æ–≤
        }
    }
    
    try:
        response = requests.post(webhook_url, json=test_data, timeout=10)
        
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"–û—Ç–≤–µ—Ç: {response.json()}")
        
        if response.status_code == 200:
            result = response.json()
            if result.get('ok'):
                print("‚úÖ Webhook —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
                return True
        
        print("‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç")
        return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def main():
    print("=" * 50)
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï WEBHOOK")
    print("=" * 50)
    
    # 1. –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
    print("1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    add_required_imports()
    
    # 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º webhook –∫–æ–¥
    print("2Ô∏è‚É£ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ webhook...")
    if fix_webhook_imports():
        print("‚úÖ Webhook –∫–æ–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω")
        
        # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º
        print("3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...")
        test_webhook_manually()
        
        print("\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print("üìã –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ:")
        print("1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä")
        print("2. –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –∏ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥")
        print("3. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –≤ –∫–∞–Ω–∞–ª")
        
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å webhook")

if __name__ == '__main__':
    main()
