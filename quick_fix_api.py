#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ API –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–æ–≤
"""

import os
import shutil
from datetime import datetime

def backup_and_fix_api():
    """–°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º API"""
    
    print("üîß –ë–´–°–¢–†–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï API")
    print("-" * 40)
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    try:
        backup_file = f'app/api/offers_backup_fix_{datetime.now().strftime("%H%M%S")}.py'
        shutil.copy2('app/api/offers.py', backup_file)
        print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_file}")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é: {e}")
    
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π API –∫–æ–¥
    fixed_api = '''# app/api/offers.py - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–æ–≤
from datetime import datetime

from flask import Blueprint, request, jsonify
from app.models.database import db_manager
from app.config.settings import Config
import logging
import os
import sys

logger = logging.getLogger(__name__)
offers_bp = Blueprint('offers', __name__)

def get_user_id_from_request():
    """–ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ auth_service)"""
    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    user_id = request.headers.get('X-Telegram-User-Id')
    if user_id:
        try:
            return int(user_id)
        except (ValueError, TypeError):
            pass
    
    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ JSON –¥–∞–Ω–Ω—ã—Ö
    data = request.get_json() or {}
    user_id = data.get('user_id') or data.get('telegram_user_id')
    if user_id:
        try:
            return int(user_id)
        except (ValueError, TypeError):
            pass
    
    # Fallback –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–∑ .env
    fallback_id = os.environ.get('YOUR_TELEGRAM_ID')
    if fallback_id:
        try:
            return int(fallback_id)
        except (ValueError, TypeError):
            pass
    
    return None

@offers_bp.route('', methods=['POST'])
def create_offer():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ—Ñ—Ñ–µ—Ä–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –≤–∫–ª—é—á–µ–Ω–∞
        offers_enabled = getattr(Config, 'OFFERS_SYSTEM_ENABLED', True)
        if not offers_enabled:
            return jsonify({'success': False, 'error': '–°–∏—Å—Ç–µ–º–∞ –æ—Ñ—Ñ–µ—Ä–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞'}), 503

        data = request.get_json()
        if not data:
            return jsonify({'success': False, 'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}), 400

        # –ü–æ–ª—É—á–∞–µ–º user_id
        telegram_user_id = get_user_id_from_request()
        if not telegram_user_id:
            return jsonify({'success': False, 'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}), 400

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
            sys.path.insert(0, os.getcwd())
            from add_offer import add_offer
            result = add_offer(telegram_user_id, data)

            if result['success']:
                logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –æ—Ñ—Ñ–µ—Ä {result.get('offer_id')} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {telegram_user_id}")
                return jsonify(result), 201
            else:
                return jsonify(result), 400

        except ImportError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ add_offer: {e}")
            return jsonify({
                'success': False,
                'error': '–ú–æ–¥—É–ª—å —Å–∏—Å—Ç–µ–º—ã –æ—Ñ—Ñ–µ—Ä–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
            }), 503

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞: {e}")
        return jsonify({'success': False, 'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}), 500


@offers_bp.route('/my', methods=['GET'])
def get_my_offers():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–∏—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    try:
        logger.info("–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –º–æ–∏—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤")
        
        # –ü–æ–ª—É—á–∞–µ–º user_id
        telegram_user_id = get_user_id_from_request()
        logger.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω user_id: {telegram_user_id}")
        
        if not telegram_user_id:
            return jsonify({
                'success': False, 
                'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                'debug_headers': dict(request.headers),
                'debug_env': os.environ.get('YOUR_TELEGRAM_ID')
            }), 400

        status = request.args.get('status')
        logger.info(f"–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É: {status}")

        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
            sys.path.insert(0, os.getcwd())
            from add_offer import get_user_offers
            
            logger.info("–í—ã–∑—ã–≤–∞–µ–º get_user_offers")
            offers = get_user_offers(telegram_user_id, status)
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –æ—Ñ—Ñ–µ—Ä–æ–≤: {len(offers)}")
            
            return jsonify({
                'success': True, 
                'offers': offers, 
                'count': len(offers),
                'user_id': telegram_user_id
            })

        except ImportError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ get_user_offers: {e}")
            return jsonify({
                'success': False,
                'error': f'–ú–æ–¥—É–ª—å —Å–∏—Å—Ç–µ–º—ã –æ—Ñ—Ñ–µ—Ä–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {str(e)}'
            }), 503
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ get_user_offers: {e}")
            import traceback
            traceback.print_exc()
            return jsonify({
                'success': False,
                'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–æ–≤: {str(e)}'
            }), 500

    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ get_my_offers: {e}")
        import traceback
        traceback.print_exc()
        return jsonify({
            'success': False, 
            'error': f'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'
        }), 500


@offers_bp.route('/detail/<int:offer_id>', methods=['GET'])
def get_offer_detail(offer_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ñ—Ñ–µ—Ä–µ"""
    try:
        include_responses = request.args.get('include_responses', 'false').lower() == 'true'

        try:
            sys.path.insert(0, os.getcwd())
            from add_offer import get_offer_by_id
            offer = get_offer_by_id(offer_id, include_responses)

            if offer:
                return jsonify({'success': True, 'offer': offer})
            else:
                return jsonify({'success': False, 'error': '–û—Ñ—Ñ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404

        except ImportError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ get_offer_by_id: {e}")
            return jsonify({
                'success': False,
                'error': '–ú–æ–¥—É–ª—å —Å–∏—Å—Ç–µ–º—ã –æ—Ñ—Ñ–µ—Ä–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
            }), 503

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞ {offer_id}: {e}")
        return jsonify({'success': False, 'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞'}), 500


@offers_bp.route('/stats', methods=['GET'])
def get_offers_stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ñ—Ñ–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º user_id
        telegram_user_id = get_user_id_from_request()
        if not telegram_user_id:
            return jsonify({'success': False, 'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}), 400

        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        user = db_manager.execute_query(
            'SELECT id FROM users WHERE telegram_id = ?',
            (telegram_user_id,),
            fetch_one=True
        )

        if not user:
            return jsonify({'success': False, 'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'})

        user_db_id = user['id']

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ñ—Ñ–µ—Ä–æ–≤
        stats_queries = {
            'total_offers': """SELECT COUNT(*) as count
                               FROM offers
                               WHERE created_by = ?""",
            'active_offers': """SELECT COUNT(*) as count
                                FROM offers
                                WHERE created_by = ? AND status = 'active' """,
            'total_spent': """SELECT COALESCE(SUM(price), 0) as total
                              FROM offers
                              WHERE created_by = ?
                                AND status IN ('completed', 'active')"""
        }

        stats = {}
        for key, query in stats_queries.items():
            result = db_manager.execute_query(query, (user_db_id,), fetch_one=True)
            if key == 'total_spent':
                stats[key] = float(result['total']) if result else 0
            else:
                stats[key] = result['count'] if result else 0

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∫–ª–∏–∫–æ–≤
        response_stats = db_manager.execute_query("""
            SELECT COUNT(*) as total_responses,
                   COUNT(CASE WHEN or_resp.status = 'accepted' THEN 1 END) as accepted_responses
            FROM offer_responses or_resp
            JOIN offers o ON or_resp.offer_id = o.id
            WHERE o.created_by = ?
        """, (user_db_id,), fetch_one=True)

        stats.update({
            'total_responses': response_stats['total_responses'] if response_stats else 0,
            'accepted_responses': response_stats['accepted_responses'] if response_stats else 0
        })

        return jsonify({
            'success': True,
            'stats': stats
        })

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ñ—Ñ–µ—Ä–æ–≤: {e}")
        return jsonify({'success': False, 'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'}), 500


@offers_bp.route('/available', methods=['GET'])
def get_available_offers():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –∫–∞–Ω–∞–ª–æ–≤"""
    try:
        page = int(request.args.get('page', 1))
        limit = int(request.args.get('limit', 20))
        category = request.args.get('category')
        min_budget = request.args.get('min_budget', type=float)
        max_budget = request.args.get('max_budget', type=float)

        filters = {
            'category': category,
            'min_budget': min_budget,
            'max_budget': max_budget,
            'limit': limit
        }
        
        # –£–±–∏—Ä–∞–µ–º None –∑–Ω–∞—á–µ–Ω–∏—è
        filters = {k: v for k, v in filters.items() if v is not None}

        try:
            sys.path.insert(0, os.getcwd())
            from add_offer import get_available_offers
            offers = get_available_offers(filters)
            return jsonify({'success': True, 'offers': offers, 'count': len(offers)})

        except ImportError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ get_available_offers: {e}")
            return jsonify({
                'success': False,
                'error': '–ú–æ–¥—É–ª—å —Å–∏—Å—Ç–µ–º—ã –æ—Ñ—Ñ–µ—Ä–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
            }), 503

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤: {e}")
        return jsonify({'success': False, 'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–æ–≤'}), 500

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
@offers_bp.route('/debug/user', methods=['GET', 'POST'])
def debug_current_user():
    """–û—Ç–ª–∞–¥–æ—á–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = get_user_id_from_request()
        
        return jsonify({
            'success': True,
            'user_id': user_id,
            'headers': dict(request.headers),
            'method': request.method,
            'args': dict(request.args),
            'env_telegram_id': os.environ.get('YOUR_TELEGRAM_ID')
        })
        
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)})

@offers_bp.route('/debug/test', methods=['GET'])
def debug_test_offers():
    """–¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–æ–≤"""
    try:
        # –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ –ë–î
        user_id = 373086959  # –í–∞—à ID
        
        sys.path.insert(0, os.getcwd())
        from add_offer import get_user_offers
        
        offers = get_user_offers(user_id)
        
        return jsonify({
            'success': True,
            'test_user_id': user_id,
            'offers_count': len(offers),
            'offers': offers[:3]  # –ü–µ—Ä–≤—ã–µ 3 –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        })
        
    except Exception as e:
        import traceback
        return jsonify({
            'success': False, 
            'error': str(e),
            'traceback': traceback.format_exc()
        })
'''

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    try:
        with open('app/api/offers.py', 'w', encoding='utf-8') as f:
            f.write(fixed_api)
        
        print("‚úÖ API –∏—Å–ø—Ä–∞–≤–ª–µ–Ω!")
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ")
        print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç add_offer")
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã debug –º–∞—Ä—à—Ä—É—Ç—ã")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ë–´–°–¢–†–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ –° –û–§–§–ï–†–ê–ú–ò")
    print("=" * 50)
    
    if backup_and_fix_api():
        print("\nüéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–ò–ú–ï–ù–ï–ù–û!")
        print("\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print("1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: Ctrl+C, –∑–∞—Ç–µ–º python working_app.py")
        print("2. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ (F5)")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞")
        print("4. –î–ª—è –æ—Ç–ª–∞–¥–∫–∏: http://localhost:5000/api/offers/debug/test")
    else:
        print("\n‚ùå –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ï –£–î–ê–õ–û–°–¨")

if __name__ == '__main__':
    main()
