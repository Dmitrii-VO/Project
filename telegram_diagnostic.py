#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Telegram Mini App
–∏ –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å —Ñ—É–Ω–∫—Ü–∏–µ–π requestVerification
"""

import os
import re
from pathlib import Path

class TelegramAppDiagnostic:
    def __init__(self, project_path="."):
        self.project_path = Path(project_path)
        self.issues = []
        self.files_analyzed = []
        
    def analyze_project_structure(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞"""
        print("üîç –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –ü–†–û–ï–ö–¢–ê")
        print("=" * 50)
        
        # –û–∂–∏–¥–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è Telegram Mini App
        expected_files = [
            "app.py",
            "main.py", 
            "run.py",
            "requirements.txt",
            "config.py",
            "database.py",
            "models.py"
        ]
        
        expected_dirs = [
            "templates",
            "static",
            "static/js",
            "static/css"
        ]
        
        print("üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π:")
        for root, dirs, files in os.walk(self.project_path):
            level = root.replace(str(self.project_path), '').count(os.sep)
            indent = ' ' * 2 * level
            print(f"{indent}{os.path.basename(root)}/")
            subindent = ' ' * 2 * (level + 1)
            for file in files:
                print(f"{subindent}{file}")
                
        print("\n‚úÖ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–π–ª—ã:")
        for file in expected_files:
            file_path = self.project_path / file
            if file_path.exists():
                print(f"  ‚úì {file}")
            else:
                print(f"  ‚úó {file} - –û–¢–°–£–¢–°–¢–í–£–ï–¢")
                self.issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª: {file}")
                
        print("\nüìÇ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:")
        for dir_name in expected_dirs:
            dir_path = self.project_path / dir_name
            if dir_path.exists():
                print(f"  ‚úì {dir_name}/")
            else:
                print(f"  ‚úó {dir_name}/ - –û–¢–°–£–¢–°–¢–í–£–ï–¢")
                self.issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_name}")
    
    def find_verification_function(self):
        """–ò—â–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ requestVerification"""
        print("\nüîç –ü–û–ò–°–ö –§–£–ù–ö–¶–ò–ò requestVerification")
        print("=" * 50)
        
        js_files = []
        html_files = []
        
        # –ü–æ–∏—Å–∫ JS –∏ HTML —Ñ–∞–π–ª–æ–≤
        for root, dirs, files in os.walk(self.project_path):
            for file in files:
                if file.endswith('.js'):
                    js_files.append(Path(root) / file)
                elif file.endswith('.html'):
                    html_files.append(Path(root) / file)
        
        print(f"üìÑ –ù–∞–π–¥–µ–Ω–æ JS —Ñ–∞–π–ª–æ–≤: {len(js_files)}")
        print(f"üìÑ –ù–∞–π–¥–µ–Ω–æ HTML —Ñ–∞–π–ª–æ–≤: {len(html_files)}")
        
        # –ê–Ω–∞–ª–∏–∑ JS —Ñ–∞–π–ª–æ–≤
        verification_found = False
        for js_file in js_files:
            try:
                with open(js_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                    if 'requestVerification' in content:
                        print(f"\n‚úÖ –§—É–Ω–∫—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞ –≤: {js_file}")
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏
                        lines = content.split('\n')
                        for i, line in enumerate(lines):
                            if 'requestVerification' in line:
                                start = max(0, i-3)
                                end = min(len(lines), i+10)
                                print(f"üìù –ö–æ–Ω—Ç–µ–∫—Å—Ç (—Å—Ç—Ä–æ–∫–∏ {start+1}-{end}):")
                                for j in range(start, end):
                                    prefix = ">>> " if j == i else "    "
                                    print(f"{prefix}{j+1:3}: {lines[j]}")
                                print()
                        verification_found = True
                    self.files_analyzed.append(str(js_file))
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {js_file}: {e}")
        
        # –ê–Ω–∞–ª–∏–∑ HTML —Ñ–∞–π–ª–æ–≤ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
        verification_calls = []
        for html_file in html_files:
            try:
                with open(html_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                    if 'requestVerification' in content:
                        verification_calls.append(html_file)
                        # –ù–∞–π–¥–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –≤—ã–∑–æ–≤–∞–º–∏
                        lines = content.split('\n')
                        for i, line in enumerate(lines):
                            if 'requestVerification' in line:
                                print(f"\nüìû –í—ã–∑–æ–≤ –Ω–∞–π–¥–µ–Ω –≤ {html_file}, —Å—Ç—Ä–æ–∫–∞ {i+1}:")
                                print(f"    {line.strip()}")
                    self.files_analyzed.append(str(html_file))
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {html_file}: {e}")
        
        if not verification_found:
            print("\n‚ùå –ü–†–û–ë–õ–ï–ú–ê: –§—É–Ω–∫—Ü–∏—è requestVerification –ù–ï –ù–ê–ô–î–ï–ù–ê –≤ JS —Ñ–∞–π–ª–∞—Ö!")
            self.issues.append("–§—É–Ω–∫—Ü–∏—è requestVerification –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞")
            
        if verification_calls and not verification_found:
            print(f"\n‚ö†Ô∏è  –ö–û–ù–§–õ–ò–ö–¢: –§—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ {len(verification_calls)} —Ñ–∞–π–ª–∞—Ö, –Ω–æ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞!")
            
        return verification_found, verification_calls
    
    def check_telegram_web_app_integration(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Telegram WebApp API"""
        print("\nüîç –ü–†–û–í–ï–†–ö–ê TELEGRAM WEBAPP API")
        print("=" * 50)
        
        telegram_script_found = False
        webapp_ready_found = False
        
        for html_file in Path(self.project_path).rglob("*.html"):
            try:
                with open(html_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Telegram WebApp —Å–∫—Ä–∏–ø—Ç–∞
                    if 'telegram-web-app.js' in content:
                        telegram_script_found = True
                        print(f"‚úÖ Telegram WebApp —Å–∫—Ä–∏–ø—Ç –Ω–∞–π–¥–µ–Ω –≤: {html_file}")
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebApp
                    if 'Telegram.WebApp' in content:
                        webapp_ready_found = True
                        print(f"‚úÖ Telegram WebApp API –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤: {html_file}")
                        
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {html_file}: {e}")
        
        if not telegram_script_found:
            print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–µ –Ω–∞–π–¥–µ–Ω —Å–∫—Ä–∏–ø—Ç telegram-web-app.js")
            self.issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ telegram-web-app.js")
            
        if not webapp_ready_found:
            print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Telegram.WebApp API")
            self.issues.append("–ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Telegram.WebApp API")
    
    def check_flask_routes(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç Flask –º–∞—Ä—à—Ä—É—Ç—ã"""
        print("\nüîç –ü–†–û–í–ï–†–ö–ê FLASK –ú–ê–†–®–†–£–¢–û–í")
        print("=" * 50)
        
        python_files = list(Path(self.project_path).rglob("*.py"))
        routes_found = []
        
        for py_file in python_files:
            try:
                with open(py_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                    
                    # –ü–æ–∏—Å–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤
                    route_pattern = r'@app\.route\(["\']([^"\']+)["\']'
                    routes = re.findall(route_pattern, content)
                    
                    if routes:
                        print(f"\nüìç –ú–∞—Ä—à—Ä—É—Ç—ã –≤ {py_file}:")
                        for route in routes:
                            print(f"  ‚Ä¢ {route}")
                            routes_found.append(route)
                            
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {py_file}: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–≤—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
        expected_routes = ['/channels', '/verify', '/api/verify']
        missing_routes = []
        
        for expected in expected_routes:
            found = any(expected in route for route in routes_found)
            if not found:
                missing_routes.append(expected)
        
        if missing_routes:
            print(f"\n‚ö†Ô∏è  –í–æ–∑–º–æ–∂–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–∞—Ä—à—Ä—É—Ç—ã: {missing_routes}")
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç"""
        print("\n" + "="*60)
        print("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
        print("="*60)
        
        if self.issues:
            print("\n‚ùå –ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:")
            for i, issue in enumerate(self.issues, 1):
                print(f"  {i}. {issue}")
        else:
            print("\n‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"  ‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(self.files_analyzed)}")
        print(f"  ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(self.issues)}")
        
        print(f"\nüîß –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print("  1. –£—Å—Ç—Ä–∞–Ω–∏—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
        print("  2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ñ–∞–π–ª—ã")
        print("  3. –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é requestVerification")
        print("  4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram WebApp API")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üöÄ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê TELEGRAM MINI APP")
    print("=" * 60)
    
    # –ó–∞–ø—Ä–æ—Å –ø—É—Ç–∏ –∫ –ø—Ä–æ–µ–∫—Ç—É
    project_path = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É (Enter –¥–ª—è —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏): ").strip()
    if not project_path:
        project_path = "."
    
    diagnostic = TelegramAppDiagnostic(project_path)
    
    try:
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        diagnostic.analyze_project_structure()
        diagnostic.find_verification_function()
        diagnostic.check_telegram_web_app_integration()
        diagnostic.check_flask_routes()
        diagnostic.generate_report()
        
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n\n‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")

if __name__ == "__main__":
    main()