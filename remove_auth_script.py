#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ Telegram Mini App
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∫–∞–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –¥–æ—Å—Ç—É–ø–Ω—ã
"""

import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))
APP_PATH = os.path.join(PROJECT_ROOT, 'app')

for path in [PROJECT_ROOT, APP_PATH]:
    if path not in sys.path:
        sys.path.insert(0, path)


def check_routes():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤"""

    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ú–ê–†–®–†–£–¢–û–í TELEGRAM MINI APP")
    print("=" * 60)

    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        from flask import Flask
        app = Flask(__name__)
        app.config['TESTING'] = True

        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å Blueprint'—ã
        print("üì¶ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Blueprint'–æ–≤...")

        blueprints_info = []

        # 1. main_router.py
        try:
            from app.routers.main_router import main_bp
            app.register_blueprint(main_bp, url_prefix='')
            blueprints_info.append(('main_bp', '', '‚úÖ –£—Å–ø–µ—à–Ω–æ'))
        except Exception as e:
            blueprints_info.append(('main_bp', '', f'‚ùå –û—à–∏–±–∫–∞: {e}'))

        # 2. api_router.py
        try:
            from app.routers.api_router import api_bp
            app.register_blueprint(api_bp, url_prefix='/api')
            blueprints_info.append(('api_bp', '/api', '‚úÖ –£—Å–ø–µ—à–Ω–æ'))
        except Exception as e:
            blueprints_info.append(('api_bp', '/api', f'‚ùå –û—à–∏–±–∫–∞: {e}'))

        # 3. channel_router.py
        try:
            from app.routers.channel_router import channel_bp
            app.register_blueprint(channel_bp, url_prefix='/api/channels')
            blueprints_info.append(('channel_bp', '/api/channels', '‚úÖ –£—Å–ø–µ—à–Ω–æ'))
        except Exception as e:
            blueprints_info.append(('channel_bp', '/api/channels', f'‚ùå –û—à–∏–±–∫–∞: {e}'))

        # 4. offer_router.py
        try:
            from app.routers.offer_router import offer_bp
            app.register_blueprint(offer_bp, url_prefix='/api/offers')
            blueprints_info.append(('offer_bp', '/api/offers', '‚úÖ –£—Å–ø–µ—à–Ω–æ'))
        except Exception as e:
            blueprints_info.append(('offer_bp', '/api/offers', f'‚ùå –û—à–∏–±–∫–∞: {e}'))

        # 5. analytics_router.py
        try:
            from app.routers.analytics_router import analytics_bp
            app.register_blueprint(analytics_bp, url_prefix='/api/analytics')
            blueprints_info.append(('analytics_bp', '/api/analytics', '‚úÖ –£—Å–ø–µ—à–Ω–æ'))
        except Exception as e:
            blueprints_info.append(('analytics_bp', '/api/analytics', f'‚ùå –û—à–∏–±–∫–∞: {e}'))

        # 6. payment_router.py
        try:
            from app.routers.payment_router import payment_bp
            app.register_blueprint(payment_bp, url_prefix='/api/payments')
            blueprints_info.append(('payment_bp', '/api/payments', '‚úÖ –£—Å–ø–µ—à–Ω–æ'))
        except Exception as e:
            blueprints_info.append(('payment_bp', '/api/payments', f'‚ùå –û—à–∏–±–∫–∞: {e}'))

        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò BLUEPRINT'–û–í:")
        print("-" * 60)
        for name, prefix, status in blueprints_info:
            prefix_display = prefix if prefix else "/"
            print(f"{name:<20} {prefix_display:<15} {status}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
        print(f"\nüó∫Ô∏è –ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–ù–ù–´–ï –ú–ê–†–®–†–£–¢–´:")
        print("-" * 60)

        with app.app_context():
            for rule in app.url_map.iter_rules():
                methods = ', '.join(sorted(rule.methods - {'HEAD', 'OPTIONS'}))
                endpoint = rule.endpoint
                url = rule.rule
                print(f"{url:<25} {methods:<15} {endpoint}")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        print(f"\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–°–ù–û–í–ù–´–• –°–¢–†–ê–ù–ò–¶ (–ë–ï–ó –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò):")
        print("-" * 70)

        with app.test_client() as client:
            test_routes = [
                ('/', '–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞'),
                ('/channels', '–ö–∞–Ω–∞–ª—ã'),
                ('/offers', '–û—Ñ—Ñ–µ—Ä—ã'),
                ('/analytics', '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞'),
                ('/payments', '–ü–ª–∞—Ç–µ–∂–∏'),
            ]

            for route, description in test_routes:
                try:
                    response = client.get(route)

                    if response.status_code == 200:
                        status = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç"
                    elif response.status_code == 404:
                        status = "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω"
                    elif response.status_code == 500:
                        status = "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
                    else:
                        status = f"‚ö†Ô∏è –ö–æ–¥ {response.status_code}"

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞
                    if response.status_code == 200:
                        content = response.get_data(as_text=True)
                        if 'auth_required' in content.lower():
                            status += " (—Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é)"
                        elif 'error' in content.lower():
                            status += " (—Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏)"

                    print(f"{route:<15} {description:<20} {status}")

                except Exception as e:
                    print(f"{route:<15} {description:<20} ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)[:30]}...")

            # –û—Ç–¥–µ–ª—å–Ω–æ —Ç–µ—Å—Ç–∏—Ä—É–µ–º health check
            print(f"\nüè• HEALTH CHECK:")
            print("-" * 70)
            try:
                response = client.get('/health')
                if response.status_code == 200:
                    data = response.get_json()
                    status = data.get('status', 'unknown') if data else 'no_data'
                    print(f"/health          Health Check         ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç (—Å—Ç–∞—Ç—É—Å: {status})")
                else:
                    print(f"/health          Health Check         ‚ö†Ô∏è –ö–æ–¥ {response.status_code}")
            except Exception as e:
                print(f"/health          Health Check         ‚ùå –û—à–∏–±–∫–∞: {str(e)[:30]}...")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
        print(f"\nüîå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –≠–ù–î–ü–û–ò–ù–¢–û–í:")
        print("-" * 60)

        with app.test_client() as client:
            api_routes = [
                ('/api/health', 'API Health'),
                ('/api/channels/', '–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤'),
                ('/api/offers/', '–°–ø–∏—Å–æ–∫ –æ—Ñ—Ñ–µ—Ä–æ–≤'),
                ('/api/analytics/dashboard', '–î–∞—à–±–æ—Ä–¥ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏'),
                ('/api/payments/stats', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π'),
            ]

            for route, description in api_routes:
                try:
                    response = client.get(route)
                    status = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" if response.status_code < 500 else f"‚ö†Ô∏è –ö–æ–¥ {response.status_code}"
                    print(f"{route:<25} {description:<20} {status}")
                except Exception as e:
                    print(f"{route:<25} {description:<20} ‚ùå –û—à–∏–±–∫–∞: {str(e)[:30]}...")

        print("\n" + "=" * 60)
        print("‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        successful_blueprints = sum(1 for _, _, status in blueprints_info if '‚úÖ' in status)
        total_blueprints = len(blueprints_info)

        print(f"üìä Blueprint'—ã: {successful_blueprints}/{total_blueprints} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        print(f"üó∫Ô∏è –í—Å–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤: {len(list(app.url_map.iter_rules()))}")

        if successful_blueprints < total_blueprints:
            print("\n‚ö†Ô∏è –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ requirements.txt")
            print("2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –º–æ–¥—É–ª–µ–π —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
            print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º–ø–æ—Ä—Ç—ã –≤ —Ñ–∞–π–ª–∞—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤")
            print("4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python install_missing_deps.py")

        return successful_blueprints == total_blueprints

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == '__main__':
    try:
        success = check_routes()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)