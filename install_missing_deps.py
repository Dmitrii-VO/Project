#!/usr/bin/env python3
"""
install_missing_deps.py - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import subprocess
import sys
import os

def run_command(command):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –≤—ã–≤–æ–¥–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    try:
        print(f"üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: {command}")
        result = subprocess.run(command, shell=True, capture_output=True, text=True, check=True)
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {command}")
        if result.stdout:
            print(f"   –í—ã–≤–æ–¥: {result.stdout.strip()}")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {command}")
        print(f"   –ö–æ–¥ –æ—à–∏–±–∫–∏: {e.returncode}")
        if e.stderr:
            print(f"   –û—à–∏–±–∫–∞: {e.stderr.strip()}")
        return False

def check_pip():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è pip"""
    try:
        subprocess.run([sys.executable, "-m", "pip", "--version"], 
                      capture_output=True, check=True)
        print("‚úÖ pip –¥–æ—Å—Ç—É–ø–µ–Ω")
        return True
    except subprocess.CalledProcessError:
        print("‚ùå pip –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return False

def install_package(package_name):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞"""
    command = f"{sys.executable} -m pip install {package_name}"
    return run_command(command)

def install_from_requirements():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∑ requirements.txt"""
    if os.path.exists("requirements.txt"):
        print("üìÑ –ù–∞–π–¥–µ–Ω requirements.txt, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")
        command = f"{sys.executable} -m pip install -r requirements.txt"
        return run_command(command)
    else:
        print("‚ö†Ô∏è requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

def install_critical_packages():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤"""
    critical_packages = [
        "aiohttp==3.9.1",
        "asyncio-mqtt",
        "python-telegram-bot==20.7", 
        "flask==3.0.0",
        "python-dotenv==1.0.0",
        "requests==2.32.3"
    ]
    
    print("üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤...")
    success_count = 0
    
    for package in critical_packages:
        if install_package(package):
            success_count += 1
        else:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {package}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
    
    print(f"üìä –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {success_count} –∏–∑ {len(critical_packages)} –ø–∞–∫–µ—Ç–æ–≤")
    return success_count > 0

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    test_modules = [
        ("aiohttp", "aiohttp"),
        ("flask", "Flask"),
        ("dotenv", "python-dotenv"),
        ("requests", "requests")
    ]
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    for module_name, package_name in test_modules:
        try:
            __import__(module_name)
            print(f"‚úÖ {package_name}: –∏–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω")
        except ImportError:
            print(f"‚ùå {package_name}: –∏–º–ø–æ—Ä—Ç –Ω–µ—É–¥–∞—á–µ–Ω")

def upgrade_pip():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏"""
    print("‚¨ÜÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip...")
    command = f"{sys.executable} -m pip install --upgrade pip"
    return run_command(command)

def clear_cache():
    """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ pip"""
    print("üßπ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ pip...")
    command = f"{sys.executable} -m pip cache purge"
    return run_command(command)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    print("üì¶ –£–°–¢–ê–ù–û–í–ö–ê –ù–ï–î–û–°–¢–ê–Æ–©–ò–• –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ pip
    if not check_pip():
        print("‚ùå pip –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Python –ø—Ä–∞–≤–∏–ª—å–Ω–æ.")
        return False
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip
    upgrade_pip()
    
    # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    clear_cache()
    
    # –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–∑ requirements.txt
    print("\nüìÑ –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–∑ requirements.txt...")
    requirements_success = install_from_requirements()
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞–∫–µ—Ç–æ–≤
    print("\nüîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤...")
    critical_success = install_critical_packages()
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤
    print("\nüß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π...")
    test_imports()
    
    print("\n" + "=" * 50)
    
    if requirements_success or critical_success:
        print("üéâ –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
        print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        print("\nüöÄ –¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å:")
        print("  python working_app.py")
        print("\nüí° –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –æ—à–∏–±–∫–∏, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ –ø–∞–∫–µ—Ç—ã –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏:")
        print("  pip install <package_name>")
        return True
    else:
        print("‚ùå –£–°–¢–ê–ù–û–í–ö–ê –ù–ï –£–î–ê–õ–ê–°–¨")
        print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é:")
        print("  pip install aiohttp")
        print("  pip install python-telegram-bot")
        print("  pip install flask")
        return False

if __name__ == '__main__':
    success = main()
    
    if success:
        print("\n‚ú® –ì–æ—Ç–æ–≤–æ! –ó–∞–ø—É—Å–∫–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.")
    else:
        print("\nüí• –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.")
        print("üîß –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        print("  pip install aiohttp")
        print("  pip install python-telegram-bot") 
        print("  pip install flask python-dotenv requests")
