#!/usr/bin/env python3
"""
–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
"""

import sqlite3
import sys
import os

sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app.models.database import execute_db_query
from app.config.telegram_config import AppConfig

def add_monitoring_fields():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    print("üîÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
    
    try:
        # 1. –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –≤ offer_placements
        print("üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã offer_placements...")
        
        monitoring_fields = [
            "ALTER TABLE offer_placements ADD COLUMN warning_sent INTEGER DEFAULT 0",
            "ALTER TABLE offer_placements ADD COLUMN early_deletion_penalty REAL DEFAULT 0",
            "ALTER TABLE offer_placements ADD COLUMN actual_end_time TIMESTAMP",
            "ALTER TABLE offer_placements ADD COLUMN penalty_reason TEXT",
            "ALTER TABLE offer_placements ADD COLUMN refund_processed INTEGER DEFAULT 0",
            "ALTER TABLE offer_placements ADD COLUMN refund_amount REAL DEFAULT 0",
            "ALTER TABLE offer_placements ADD COLUMN refund_at TIMESTAMP"
        ]
        
        for field_sql in monitoring_fields:
            try:
                execute_db_query(field_sql)
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ: {field_sql.split('ADD COLUMN')[1].split()[0]}")
            except Exception as e:
                if "duplicate column name" in str(e).lower():
                    print(f"‚ö†Ô∏è –ü–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {field_sql.split('ADD COLUMN')[1].split()[0]}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è: {e}")
        
        # 2. –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –≤ channels
        print("üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã channels...")
        
        channel_fields = [
            "ALTER TABLE channels ADD COLUMN failed_placements INTEGER DEFAULT 0",
            "ALTER TABLE channels ADD COLUMN early_deletions INTEGER DEFAULT 0",
            "ALTER TABLE channels ADD COLUMN reliability_rating REAL DEFAULT 100"
        ]
        
        for field_sql in channel_fields:
            try:
                execute_db_query(field_sql)
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ: {field_sql.split('ADD COLUMN')[1].split()[0]}")
            except Exception as e:
                if "duplicate column name" in str(e).lower():
                    print(f"‚ö†Ô∏è –ü–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {field_sql.split('ADD COLUMN')[1].split()[0]}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è: {e}")
        
        # 3. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É ereit_statistics
        print("üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã ereit_statistics...")
        
        execute_db_query("""
            CREATE TABLE IF NOT EXISTS ereit_statistics (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                placement_id INTEGER NOT NULL,
                ereit_token TEXT NOT NULL,
                clicks INTEGER DEFAULT 0,
                unique_clicks INTEGER DEFAULT 0,
                impressions INTEGER DEFAULT 0,
                ctr REAL DEFAULT 0.0,
                button_clicks INTEGER DEFAULT 0,
                link_clicks INTEGER DEFAULT 0,
                phone_clicks INTEGER DEFAULT 0,
                email_clicks INTEGER DEFAULT 0,
                social_clicks INTEGER DEFAULT 0,
                conversion_events INTEGER DEFAULT 0,
                first_click_at TIMESTAMP,
                last_click_at TIMESTAMP,
                collected_at TIMESTAMP,
                source TEXT DEFAULT 'ereit_api',
                raw_data TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (placement_id) REFERENCES offer_placements(id)
            )
        """)
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ ereit_statistics —Å–æ–∑–¥–∞–Ω–∞")
        
        # 4. –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        print("üìù –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...")
        
        indexes = [
            "CREATE INDEX IF NOT EXISTS idx_ereit_stats_placement_id ON ereit_statistics(placement_id)",
            "CREATE INDEX IF NOT EXISTS idx_ereit_stats_token ON ereit_statistics(ereit_token)",
            "CREATE INDEX IF NOT EXISTS idx_ereit_stats_collected_at ON ereit_statistics(collected_at)",
            "CREATE INDEX IF NOT EXISTS idx_placements_status ON offer_placements(status)",
            "CREATE INDEX IF NOT EXISTS idx_placements_deadline ON offer_placements(deadline)",
            "CREATE INDEX IF NOT EXISTS idx_placements_warning_sent ON offer_placements(warning_sent)"
        ]
        
        for index_sql in indexes:
            try:
                execute_db_query(index_sql)
                index_name = index_sql.split("INDEX IF NOT EXISTS")[1].split()[0]
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω –∏–Ω–¥–µ–∫—Å: {index_name}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞: {e}")
        
        print("üéâ –í—Å–µ –ø–æ–ª—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü
        print("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü:")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º offer_placements
        placement_columns = execute_db_query("PRAGMA table_info(offer_placements)", fetch_all=True)
        print(f"‚úÖ offer_placements: {len(placement_columns)} –∫–æ–ª–æ–Ω–æ–∫")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º channels
        channel_columns = execute_db_query("PRAGMA table_info(channels)", fetch_all=True)
        print(f"‚úÖ channels: {len(channel_columns)} –∫–æ–ª–æ–Ω–æ–∫")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º ereit_statistics
        ereit_columns = execute_db_query("PRAGMA table_info(ereit_statistics)", fetch_all=True)
        print(f"‚úÖ ereit_statistics: {len(ereit_columns)} –∫–æ–ª–æ–Ω–æ–∫")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False


if __name__ == "__main__":
    success = add_monitoring_fields()
    if success:
        print("\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏!")
        sys.exit(1)