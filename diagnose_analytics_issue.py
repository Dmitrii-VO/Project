#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
"""

import os
import sys
import json
import logging
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from flask import Flask
from app.api.analytics import analytics_bp, get_dashboard_data

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def diagnose_analytics_api():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ API –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    logger.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API –ê–ù–ê–õ–ò–¢–ò–ö–ò")
    logger.info("="*50)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = Flask(__name__)
        app.config['TESTING'] = True
        app.register_blueprint(analytics_bp, url_prefix='/api/analytics')
        
        logger.info("‚úÖ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º API
        with app.test_client() as client:
            logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoint /api/analytics/dashboard...")
            
            response = client.get('/api/analytics/dashboard')
            
            logger.info(f"üìû –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            logger.info(f"üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {dict(response.headers)}")
            
            if response.status_code == 200:
                try:
                    data = response.get_json()
                    logger.info("‚úÖ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–π JSON")
                    logger.info("üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:")
                    logger.info(json.dumps(data, indent=2, ensure_ascii=False))
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è
                    if data.get('success'):
                        logger.info("‚úÖ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç success: true")
                        
                        analytics_data = data.get('data', {})
                        key_metrics = {
                            'total_views': analytics_data.get('total_views'),
                            'click_rate': analytics_data.get('click_rate'),
                            'total_revenue': analytics_data.get('total_revenue'),
                            'conversion_rate': analytics_data.get('conversion_rate'),
                            'channels_count': analytics_data.get('channels_count'),
                            'offers_count': analytics_data.get('offers_count')
                        }
                        
                        logger.info("üéØ –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏:")
                        for key, value in key_metrics.items():
                            logger.info(f"   {key}: {value}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                        test_values = [1234567, 45230, 3.8, 2.1]
                        found_test_values = []
                        
                        for metric, value in key_metrics.items():
                            if value in test_values:
                                found_test_values.append(f"{metric}={value}")
                        
                        if found_test_values:
                            logger.warning(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {', '.join(found_test_values)}")
                        else:
                            logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã - –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                        
                        return True, data
                    else:
                        logger.error(f"‚ùå API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç success: false, error: {data.get('error')}")
                        return False, data
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                    logger.error(f"üìÑ Raw –æ—Ç–≤–µ—Ç: {response.get_data(as_text=True)}")
                    return False, None
            else:
                error_text = response.get_data(as_text=True)
                logger.error(f"‚ùå API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É {response.status_code}")
                logger.error(f"üìÑ –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {error_text}")
                return False, None
                
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        return False, None

def diagnose_database_connection():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("\nüóÑÔ∏è –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    logger.info("="*50)
    
    try:
        from app.models.database import execute_db_query, db_manager
        
        # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        logger.info("üîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        
        if db_manager.test_connection():
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ")
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.info("üë§ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        
        users = execute_db_query('SELECT id, telegram_id, balance FROM users LIMIT 5', fetch_all=True)
        if users:
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
            for user in users:
                logger.info(f"   ID: {user['id']}, Telegram: {user['telegram_id']}, –ë–∞–ª–∞–Ω—Å: {user.get('balance', 'N/A')}")
        else:
            logger.warning("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª—ã
        logger.info("üì∫ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–æ–≤...")
        channels = execute_db_query('SELECT id, title, subscribers FROM channels LIMIT 5', fetch_all=True)
        if channels:
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {len(channels)}")
        else:
            logger.warning("‚ö†Ô∏è –ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ñ—Ñ–µ—Ä—ã
        logger.info("üì¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ñ—Ñ–µ—Ä–æ–≤...")
        offers = execute_db_query('SELECT id, title, price FROM offers LIMIT 5', fetch_all=True)
        if offers:
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ—Ñ—Ñ–µ—Ä–æ–≤: {len(offers)}")
        else:
            logger.warning("‚ö†Ô∏è –û—Ñ—Ñ–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ë–î: {e}")
        return False

def diagnose_javascript_compatibility():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å JavaScript"""
    logger.info("\nüåê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê JAVASCRIPT –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò")
    logger.info("="*50)
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å JavaScript
    test_api_response = {
        "success": True,
        "data": {
            "timestamp": datetime.now().isoformat(),
            "user_id": 1,
            "total_views": 0,
            "click_rate": 0,
            "total_revenue": 1500.0,
            "conversion_rate": 0,
            "channels_count": 2,
            "offers_count": 0
        }
    }
    
    logger.info("üìä –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è JavaScript:")
    logger.info(json.dumps(test_api_response, indent=2, ensure_ascii=False))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –º–æ–∂–Ω–æ —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ JSON
    try:
        json_str = json.dumps(test_api_response)
        parsed_back = json.loads(json_str)
        logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–µ—Ä–∏–∞–ª–∏–∑—É—é—Ç—Å—è –≤ JSON")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –∏—â–µ—Ç JavaScript
        required_fields = ['success', 'data']
        data_fields = ['total_views', 'click_rate', 'total_revenue', 'conversion_rate']
        
        for field in required_fields:
            if field in parsed_back:
                logger.info(f"‚úÖ –ü–æ–ª–µ '{field}' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            else:
                logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ '{field}'")
        
        data_section = parsed_back.get('data', {})
        for field in data_fields:
            if field in data_section:
                logger.info(f"‚úÖ –ü–æ–ª–µ data.{field} = {data_section[field]}")
            else:
                logger.warning(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ data.{field}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return False

def create_fix_recommendations(api_works, db_works, js_compatible):
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é"""
    logger.info("\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ")
    logger.info("="*50)
    
    if api_works and db_works and js_compatible:
        logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        logger.info("‚úÖ API –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞")
        logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã —Å JavaScript")
        logger.info("")
        logger.info("ü§î –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã '–æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö' –≤ –±—Ä–∞—É–∑–µ—Ä–µ:")
        logger.info("1. üåê –ü—Ä–æ–±–ª–µ–º–∞ —Å CORS (Cross-Origin Resource Sharing)")
        logger.info("2. üîí –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
        logger.info("3. üì° –°–µ—Ç–µ–≤–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤")
        logger.info("4. üß© JavaScript –Ω–µ –º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
        logger.info("5. ‚ö° –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –º–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
        logger.info("")
        logger.info("üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:")
        logger.info("1. –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ (F12)")
        logger.info("2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É Network/–°–µ—Ç—å")
        logger.info("3. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É /analytics")
        logger.info("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø—Ä–æ—Å –∫ /api/analytics/dashboard")
        logger.info("5. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ")
        
    else:
        logger.error("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´:")
        
        if not api_works:
            logger.error("üî• API –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            logger.info("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞")
            logger.info("   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            logger.info("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é get_current_user_id()")
        
        if not db_works:
            logger.error("üî• –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            logger.info("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            logger.info("   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –ë–î —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è")
            logger.info("   - –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ")
        
        if not js_compatible:
            logger.error("üî• –î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã —Å JavaScript")
            logger.info("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É JSON –æ—Ç–≤–µ—Ç–∞")
            logger.info("   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–µ—Ä–∏–∞–ª–∏–∑—É—é—Ç—Å—è")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    logger.info("üöÄ –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ê–ù–ê–õ–ò–¢–ò–ö–ò")
    logger.info("="*60)
    logger.info(f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    logger.info("")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    api_works, api_data = diagnose_analytics_api()
    db_works = diagnose_database_connection()
    js_compatible = diagnose_javascript_compatibility()
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    create_fix_recommendations(api_works, db_works, js_compatible)
    
    logger.info("\nüèÅ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
    logger.info("="*60)
    
    return api_works and db_works and js_compatible

if __name__ == '__main__':
    success = main()
    if not success:
        sys.exit(1)