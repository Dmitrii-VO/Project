#!/usr/bin/env python3
"""
quick_test.py - –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π Telegram Mini App
–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
"""

import os
import sys
import requests
import subprocess
import time
import json
from typing import Dict, List, Tuple

class QuickTester:
    """–ö–ª–∞—Å—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self):
        self.base_url = "http://localhost:5000"
        self.results = []
        
    def check(self, name: str, condition: bool, message: str = "") -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º"""
        status = "‚úÖ PASS" if condition else "‚ùå FAIL"
        print(f"{status} {name}: {message}")
        self.results.append((name, condition, message))
        return condition
    
    def test_files_exist(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤...")
        
        files = [
            ("working_app.py", "–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"),
            ("requirements.txt", "–§–∞–π–ª –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"),
            ("telegram_mini_app.db", "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö"),
            ("app/static/css/style.css", "CSS —Å—Ç–∏–ª–∏"),
            ("app/templates/index.html", "–ì–ª–∞–≤–Ω—ã–π —à–∞–±–ª–æ–Ω")
        ]
        
        all_exist = True
        for file_path, description in files:
            exists = os.path.exists(file_path)
            self.check(f"–§–∞–π–ª {file_path}", exists, description)
            if not exists:
                all_exist = False
                
        return all_exist
    
    def test_app_startup(self) -> Tuple[bool, subprocess.Popen]:
        """–¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        print("\nüöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            process = subprocess.Popen(
                [sys.executable, "working_app.py"],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            
            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
            time.sleep(3)
            
            if process.poll() is None:
                self.check("–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞", True, f"PID: {process.pid}")
                return True, process
            else:
                stdout, stderr = process.communicate()
                self.check("–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞", False, f"–û—à–∏–±–∫–∞: {stderr[:100]}")
                return False, None
                
        except Exception as e:
            self.check("–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False, None
    
    def test_http_endpoints(self) -> bool:
        """–¢–µ—Å—Ç HTTP —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
        print("\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...")
        
        endpoints = [
            ("/", "–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"),
            ("/test", "–¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"),
            ("/health", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è"),
            ("/api/offers", "API –æ—Ñ—Ñ–µ—Ä–æ–≤"),
            ("/static/css/style.css", "CSS —Ñ–∞–π–ª—ã")
        ]
        
        all_work = True
        for endpoint, description in endpoints:
            try:
                response = requests.get(f"{self.base_url}{endpoint}", timeout=5)
                success = response.status_code < 500
                self.check(f"GET {endpoint}", success, f"–ö–æ–¥: {response.status_code}")
                if not success:
                    all_work = False
            except requests.exceptions.RequestException as e:
                self.check(f"GET {endpoint}", False, f"–û—à–∏–±–∫–∞: {str(e)[:50]}")
                all_work = False
                
        return all_work
    
    def test_telegram_bot(self) -> bool:
        """–¢–µ—Å—Ç Telegram –±–æ—Ç–∞"""
        print("\nü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram –±–æ—Ç–∞...")
        
        bot_token = "6712109516:AAHL23ltolowG5kYTfkTKDadg2Io1Rd0WT8"
        
        try:
            url = f"https://api.telegram.org/bot{bot_token}/getMe"
            response = requests.get(url, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                if data.get('ok'):
                    bot_name = data['result']['username']
                    self.check("Telegram Bot API", True, f"–ë–æ—Ç: @{bot_name}")
                    return True
                else:
                    self.check("Telegram Bot API", False, f"API –æ—à–∏–±–∫–∞: {data}")
                    return False
            else:
                self.check("Telegram Bot API", False, f"HTTP: {response.status_code}")
                return False
                
        except Exception as e:
            self.check("Telegram Bot API", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def test_database(self) -> bool:
        """–¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        print("\nüóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            import sqlite3
            
            if not os.path.exists("telegram_mini_app.db"):
                self.check("–§–∞–π–ª –ë–î", False, "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
            
            conn = sqlite3.connect("telegram_mini_app.db")
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
            tables = [row[0] for row in cursor.fetchall()]
            
            self.check("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î", True, f"–¢–∞–±–ª–∏—Ü: {len(tables)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
            expected_tables = ['users', 'channels', 'offers']
            missing = [t for t in expected_tables if t not in tables]
            
            if missing:
                self.check("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î", False, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {missing}")
                conn.close()
                return False
            else:
                self.check("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î", True, "–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–π–¥–µ–Ω—ã")
                conn.close()
                return True
                
        except Exception as e:
            self.check("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def run_quick_test(self) -> Dict:
        """–ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        print("‚ö° –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê TELEGRAM MINI APP")
        print("=" * 50)
        
        start_time = time.time()
        process = None
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
            files_ok = self.test_files_exist()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ë–î
            db_ok = self.test_database()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram –±–æ—Ç–∞
            bot_ok = self.test_telegram_bot()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º
            app_ok = False
            http_ok = False
            
            if files_ok:
                app_started, process = self.test_app_startup()
                if app_started:
                    app_ok = True
                    time.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø–æ–ª–Ω—ã–π –∑–∞–ø—É—Å–∫
                    http_ok = self.test_http_endpoints()
            
            # –ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
            duration = time.time() - start_time
            
            total_checks = len(self.results)
            passed_checks = sum(1 for _, success, _ in self.results if success)
            
            print("\n" + "=" * 50)
            print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ë–´–°–¢–†–û–ô –ü–†–û–í–ï–†–ö–ò")
            print("=" * 50)
            print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.1f}—Å")
            print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_checks}/{total_checks}")
            print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {passed_checks/total_checks*100:.1f}%")
            
            # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–≤–µ—Ä–æ–∫
            categories = {
                "–§–∞–π–ª—ã": files_ok,
                "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö": db_ok, 
                "Telegram –±–æ—Ç": bot_ok,
                "–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è": app_ok,
                "HTTP —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã": http_ok
            }
            
            print("\nüìã –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
            for category, status in categories.items():
                icon = "‚úÖ" if status else "‚ùå"
                print(f"  {icon} {category}")
            
            # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
            overall_success = passed_checks >= total_checks * 0.8
            
            if overall_success:
                print("\nüéâ –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ü–†–û–ô–î–ï–ù–ê!")
                print("   –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ")
            else:
                print("\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ü–†–û–ë–õ–ï–ú–´!")
                print("   –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
            
            return {
                'success': overall_success,
                'duration': duration,
                'checks': self.results,
                'categories': categories,
                'summary': {
                    'total': total_checks,
                    'passed': passed_checks,
                    'rate': passed_checks/total_checks*100
                }
            }
            
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞")
            return {'success': False, 'interrupted': True}
            
        finally:
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            if process and process.poll() is None:
                print("\nüîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
                process.terminate()
                time.sleep(1)
                if process.poll() is None:
                    process.kill()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = QuickTester()
    result = tester.run_quick_test()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    return 0 if result.get('success', False) else 1

if __name__ == "__main__":
    sys.exit(main())