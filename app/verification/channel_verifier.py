#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–∞–Ω–∞–ª–æ–≤
–ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –∫–∞–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ Telegram API
"""

import random
import string
import logging
import asyncio
from typing import Dict, Any, Optional, Tuple, List
from datetime import datetime, timedelta

from .telegram_api_client import TelegramAPIClient
from app.models.database import execute_db_query
from app.events.event_dispatcher import event_dispatcher
from app.config.telegram_config import AppConfig

logger = logging.getLogger(__name__)

class ChannelVerifier:
    """–°–∏—Å—Ç–µ–º–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤"""
    
    def __init__(self):
        self.telegram_client = TelegramAPIClient()
        self.verification_timeout = timedelta(hours=24)
        self.max_verification_attempts = 3
    
    def start_verification(self, user_id: int, channel_username: str, 
                          channel_title: str = None) -> Dict[str, Any]:
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∫–∞–Ω–∞–ª —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
            existing_verification = execute_db_query(
                """SELECT * FROM channels 
                   WHERE username = ? AND verification_code IS NOT NULL 
                   AND verification_expires_at > ?""",
                (channel_username, datetime.now()),
                fetch_one=True
            )
            
            if existing_verification:
                return {
                    'success': False,
                    'error': '–ö–∞–Ω–∞–ª —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏',
                    'existing_code': existing_verification['verification_code']
                }
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ —á–µ—Ä–µ–∑ Telegram API
            channel_info = self.telegram_client.get_channel_info(channel_username)
            
            if not channel_info['success']:
                return {
                    'success': False,
                    'error': channel_info['error']
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞
            admin_check = self.telegram_client.check_user_admin_status(
                channel_username, user_id
            )
            
            if not admin_check['success'] or not admin_check['is_admin']:
                return {
                    'success': False,
                    'error': '–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞'
                }
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
            verification_code = self._generate_verification_code()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            channel_id = self._save_channel_for_verification(
                user_id=user_id,
                username=channel_username,
                title=channel_info['data']['title'],
                description=channel_info['data'].get('description', ''),
                subscriber_count=channel_info['data'].get('member_count', 0),
                verification_code=verification_code
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            verification_instructions = self._get_verification_instructions(
                verification_code, channel_username
            )
            
            logger.info(f"‚úÖ –ù–∞—á–∞—Ç–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞ {channel_username} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            return {
                'success': True,
                'channel_id': channel_id,
                'verification_code': verification_code,
                'instructions': verification_instructions,
                'expires_at': (datetime.now() + self.verification_timeout).isoformat()
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            return {'success': False, 'error': str(e)}
    
    def check_verification(self, channel_id: int, user_id: int) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞
            channel = execute_db_query(
                """SELECT * FROM channels 
                   WHERE id = ? AND owner_id = ? AND verification_code IS NOT NULL""",
                (channel_id, user_id),
                fetch_one=True
            )
            
            if not channel:
                return {'success': False, 'error': '–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º'}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
            if datetime.fromisoformat(channel['verification_expires_at']) < datetime.now():
                return {
                    'success': False, 
                    'error': '–°—Ä–æ–∫ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫',
                    'expired': True
                }
            
            # –ò—â–µ–º –ø–æ—Å—Ç —Å –∫–æ–¥–æ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª–µ
            verification_found = self.telegram_client.find_verification_post(
                channel['username'], 
                channel['verification_code']
            )
            
            if verification_found['success']:
                # –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
                self._complete_verification(channel_id)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
                event_dispatcher.channel_verified(
                    channel_id=channel_id,
                    owner_id=user_id,
                    title=channel['title']
                )
                
                logger.info(f"‚úÖ –ö–∞–Ω–∞–ª {channel['username']} —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
                
                return {
                    'success': True,
                    'verified': True,
                    'message': '–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!',
                    'post_url': verification_found.get('post_url')
                }
            else:
                return {
                    'success': True,
                    'verified': False,
                    'message': '–ü–æ—Å—Ç —Å –∫–æ–¥–æ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω',
                    'remaining_time': self._get_remaining_verification_time(channel)
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            return {'success': False, 'error': str(e)}
    
    def auto_verify_channels(self) -> Dict[str, Any]:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã, –æ–∂–∏–¥–∞—é—â–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
            pending_channels = execute_db_query(
                """SELECT * FROM channels 
                   WHERE verification_code IS NOT NULL 
                   AND verification_expires_at > ? 
                   AND is_verified = 0""",
                (datetime.now(),)
            )
            
            verified_count = 0
            expired_count = 0
            errors = []
            
            for channel in pending_channels:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ—Å—Ç–∞ —Å –∫–æ–¥–æ–º
                    verification_found = self.telegram_client.find_verification_post(
                        channel['username'], 
                        channel['verification_code']
                    )
                    
                    if verification_found['success']:
                        # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
                        self._complete_verification(channel['id'])
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
                        event_dispatcher.channel_verified(
                            channel_id=channel['id'],
                            owner_id=channel['owner_id'],
                            title=channel['title']
                        )
                        
                        verified_count += 1
                        logger.info(f"‚úÖ –ê–≤—Ç–æ–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: –∫–∞–Ω–∞–ª {channel['username']} –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
                        
                except Exception as e:
                    errors.append(f"–ö–∞–Ω–∞–ª {channel['username']}: {str(e)}")
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞ {channel['username']}: {e}")
            
            # –û—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
            expired_result = execute_db_query(
                """UPDATE channels 
                   SET verification_code = NULL, verification_expires_at = NULL, updated_at = ?
                   WHERE verification_expires_at <= ? AND is_verified = 0""",
                (datetime.now(), datetime.now())
            )
            
            expired_count = expired_result if isinstance(expired_result, int) else 0
            
            logger.info(f"üìä –ê–≤—Ç–æ–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {verified_count} –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ, {expired_count} –∏—Å—Ç–µ–∫–ª–æ")
            
            return {
                'success': True,
                'verified_count': verified_count,
                'expired_count': expired_count,
                'errors': errors
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            return {'success': False, 'error': str(e)}
    
    def revoke_verification(self, channel_id: int, admin_user_id: int, reason: str) -> Dict[str, Any]:
        """–û—Ç–∑—ã–≤ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞
            channel = execute_db_query(
                "SELECT * FROM channels WHERE id = ?",
                (channel_id,),
                fetch_one=True
            )
            
            if not channel:
                return {'success': False, 'error': '–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'}
            
            # –û—Ç–∑—ã–≤–∞–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
            execute_db_query(
                """UPDATE channels 
                   SET is_verified = 0, verification_revoked_at = ?, 
                       verification_revoked_by = ?, verification_revoke_reason = ?,
                       updated_at = ?
                   WHERE id = ?""",
                (datetime.now(), admin_user_id, reason, datetime.now(), channel_id)
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
            event_dispatcher.channel_deactivated(
                channel_id=channel_id,
                owner_id=channel['owner_id'],
                title=channel['title'],
                reason=reason
            )
            
            logger.info(f"‚ö†Ô∏è –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞ {channel['username']} –æ—Ç–æ–∑–≤–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_user_id}")
            
            return {
                'success': True,
                'message': '–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞ –æ—Ç–æ–∑–≤–∞–Ω–∞'
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∑—ã–≤–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            return {'success': False, 'error': str(e)}
    
    def get_verification_status(self, user_id: int) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            channels = execute_db_query(
                """SELECT id, username, title, is_verified, verification_code,
                          verification_expires_at, created_at
                   FROM channels 
                   WHERE owner_id = ? 
                   ORDER BY created_at DESC""",
                (user_id,)
            )
            
            result = []
            for channel in channels:
                status_info = {
                    'channel_id': channel['id'],
                    'username': channel['username'],
                    'title': channel['title'],
                    'is_verified': bool(channel['is_verified']),
                    'created_at': channel['created_at']
                }
                
                if channel['verification_code'] and not channel['is_verified']:
                    # –í –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    expires_at = datetime.fromisoformat(channel['verification_expires_at'])
                    if expires_at > datetime.now():
                        status_info.update({
                            'status': 'pending_verification',
                            'verification_code': channel['verification_code'],
                            'expires_at': channel['verification_expires_at'],
                            'remaining_hours': self._get_remaining_hours(expires_at)
                        })
                    else:
                        status_info['status'] = 'verification_expired'
                elif channel['is_verified']:
                    status_info['status'] = 'verified'
                else:
                    status_info['status'] = 'not_started'
                
                result.append(status_info)
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            return []
    
    def _generate_verification_code(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        return ''.join(random.choices(
            string.ascii_uppercase + string.digits, 
            k=AppConfig.VERIFICATION_CODE_LENGTH
        ))
    
    def _save_channel_for_verification(self, user_id: int, username: str, title: str, 
                                     description: str, subscriber_count: int, 
                                     verification_code: str) -> int:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞–Ω–∞–ª
        existing_channel = execute_db_query(
            "SELECT id FROM channels WHERE username = ?",
            (username,),
            fetch_one=True
        )
        
        expires_at = datetime.now() + self.verification_timeout
        
        if existing_channel:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–∞–Ω–∞–ª
            execute_db_query(
                """UPDATE channels 
                   SET owner_id = ?, title = ?, description = ?, subscriber_count = ?,
                       verification_code = ?, verification_expires_at = ?, updated_at = ?
                   WHERE id = ?""",
                (user_id, title, description, subscriber_count, 
                 verification_code, expires_at, datetime.now(), existing_channel['id'])
            )
            return existing_channel['id']
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª
            return execute_db_query(
                """INSERT INTO channels 
                   (owner_id, username, title, description, subscriber_count,
                    verification_code, verification_expires_at, created_at, updated_at)
                   VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)""",
                (user_id, username, title, description, subscriber_count,
                 verification_code, expires_at, datetime.now(), datetime.now())
            )
    
    def _complete_verification(self, channel_id: int):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞"""
        execute_db_query(
            """UPDATE channels 
               SET is_verified = 1, verification_code = NULL, verification_expires_at = NULL,
                   verified_at = ?, updated_at = ?
               WHERE id = ?""",
            (datetime.now(), datetime.now(), channel_id)
        )
    
    def _get_verification_instructions(self, verification_code: str, channel_username: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        return f"""
üîê **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞ @{channel_username}**

–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–ª–∞–¥–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–º –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:

1Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≤–∞—à –∫–∞–Ω–∞–ª @{channel_username}
2Ô∏è‚É£ –û–ø—É–±–ª–∏–∫—É–π—Ç–µ –ø–æ—Å—Ç —Å –∫–æ–¥–æ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: **{verification_code}**
3Ô∏è‚É£ –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é"

‚è∞ **–í–∞–∂–Ω–æ:** –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤

üìù **–ü—Ä–∏–º–µ—Ä –ø–æ—Å—Ç–∞:**
```
–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è Telegram Mini App: {verification_code}
```

–ü–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
        """
    
    def _get_remaining_verification_time(self, channel: Dict[str, Any]) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        expires_at = datetime.fromisoformat(channel['verification_expires_at'])
        remaining = expires_at - datetime.now()
        
        if remaining.total_seconds() <= 0:
            return "–ò—Å—Ç–µ–∫–ª–æ"
        
        hours = int(remaining.total_seconds() // 3600)
        minutes = int((remaining.total_seconds() % 3600) // 60)
        
        return f"{hours}—á {minutes}–º"
    
    def _get_remaining_hours(self, expires_at: datetime) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —á–∞—Å–æ–≤ –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è"""
        remaining = expires_at - datetime.now()
        return max(0, int(remaining.total_seconds() // 3600))