# sqlite_migration_offers.py - –ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
import os
import sqlite3
import logging
from datetime import datetime

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

DATABASE_PATH = 'telegram_mini_app.db'

def run_offers_migration():
    """–ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
    try:
        print("üîÑ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π...")
        
        if not os.path.exists(DATABASE_PATH):
            print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {DATABASE_PATH}")
            print("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ sqlite_migration.py –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü")
            return False

        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("""
            SELECT name FROM sqlite_master 
            WHERE type='table' AND name IN ('offers', 'offer_responses')
        """)
        existing_tables = [row[0] for row in cursor.fetchall()]
        
        print(f"üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã: {existing_tables}")

        # 1. –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É channels –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–µ–∫–ª–∞–º—ã
        print("üîß –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É channels...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
        cursor.execute("PRAGMA table_info(channels)")
        existing_columns = [column[1] for column in cursor.fetchall()]
        
        columns_to_add = [
            ('accepts_ads', 'BOOLEAN DEFAULT 1'),
            ('price_per_post', 'INTEGER DEFAULT NULL'),
            ('avg_engagement_rate', 'REAL DEFAULT NULL'),
            ('last_post_date', 'DATE DEFAULT NULL')
        ]
        
        for column_name, column_def in columns_to_add:
            if column_name not in existing_columns:
                try:
                    cursor.execute(f'ALTER TABLE channels ADD COLUMN {column_name} {column_def}')
                    print(f"  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ {column_name}")
                except sqlite3.Error as e:
                    print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ {column_name}: {e}")

        # 2. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É channel_offers
        print("üîß –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É channel_offers...")
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS channel_offers (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                main_offer_id INTEGER NOT NULL,
                channel_id INTEGER NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (main_offer_id) REFERENCES offers(id) ON DELETE CASCADE,
                FOREIGN KEY (channel_id) REFERENCES channels(id) ON DELETE CASCADE,
                UNIQUE(main_offer_id, channel_id)
            )
        ''')
        print("  ‚úÖ –¢–∞–±–ª–∏—Ü–∞ channel_offers —Å–æ–∑–¥–∞–Ω–∞")

        # 3. –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É offers
        print("üîß –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É offers...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ offers
        cursor.execute("PRAGMA table_info(offers)")
        offers_columns = [column[1] for column in cursor.fetchall()]
        
        offers_columns_to_add = [
            ('offer_type', 'VARCHAR(20) DEFAULT "main"'),
            ('parent_offer_id', 'INTEGER DEFAULT NULL'),
            ('estimated_reach', 'INTEGER DEFAULT NULL'),
            ('total_cost', 'DECIMAL(10,2) DEFAULT NULL')
        ]
        
        for column_name, column_def in offers_columns_to_add:
            if column_name not in offers_columns:
                try:
                    cursor.execute(f'ALTER TABLE offers ADD COLUMN {column_name} {column_def}')
                    print(f"  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ {column_name} –≤ offers")
                except sqlite3.Error as e:
                    print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ {column_name}: {e}")

        # 4. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É offer_statistics
        print("üîß –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É offer_statistics...")
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS offer_statistics (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                offer_id INTEGER NOT NULL,
                views_count INTEGER DEFAULT 0,
                responses_count INTEGER DEFAULT 0,
                accepted_count INTEGER DEFAULT 0,
                rejected_count INTEGER DEFAULT 0,
                last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (offer_id) REFERENCES offers(id) ON DELETE CASCADE
            )
        ''')
        print("  ‚úÖ –¢–∞–±–ª–∏—Ü–∞ offer_statistics —Å–æ–∑–¥–∞–Ω–∞")

        # 5. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É notifications
        print("üîß –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É notifications...")
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS notifications (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                type VARCHAR(50) NOT NULL,
                title VARCHAR(200) NOT NULL,
                message TEXT NOT NULL,
                data TEXT DEFAULT NULL,
                is_read BOOLEAN DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
            )
        ''')
        print("  ‚úÖ –¢–∞–±–ª–∏—Ü–∞ notifications —Å–æ–∑–¥–∞–Ω–∞")

        # 6. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É offer_history
        print("üîß –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É offer_history...")
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS offer_history (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                offer_id INTEGER NOT NULL,
                action VARCHAR(50) NOT NULL,
                old_data TEXT DEFAULT NULL,
                new_data TEXT DEFAULT NULL,
                changed_by INTEGER DEFAULT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (offer_id) REFERENCES offers(id) ON DELETE CASCADE,
                FOREIGN KEY (changed_by) REFERENCES users(id) ON DELETE SET NULL
            )
        ''')
        print("  ‚úÖ –¢–∞–±–ª–∏—Ü–∞ offer_history —Å–æ–∑–¥–∞–Ω–∞")

        # 7. –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
        print("üîß –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã...")
        indexes = [
            ('idx_channel_offers_main_offer', 'channel_offers', 'main_offer_id'),
            ('idx_channel_offers_channel', 'channel_offers', 'channel_id'),
            ('idx_offers_type', 'offers', 'offer_type'),
            ('idx_offers_status_created', 'offers', 'status, created_at'),
            ('idx_notifications_user_unread', 'notifications', 'user_id, is_read'),
            ('idx_offer_responses_status', 'offer_responses', 'status')
        ]
        
        for index_name, table_name, columns in indexes:
            try:
                cursor.execute(f'CREATE INDEX IF NOT EXISTS {index_name} ON {table_name}({columns})')
                print(f"  ‚úÖ –ò–Ω–¥–µ–∫—Å {index_name} —Å–æ–∑–¥–∞–Ω")
            except sqlite3.Error as e:
                print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ {index_name}: {e}")

        # 8. –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        print("üîß –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ...")
        cursor.execute('UPDATE channels SET accepts_ads = 1 WHERE accepts_ads IS NULL')
        
        # 9. –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ –∫–∞–Ω–∞–ª—ã –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è
        print("üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ...")
        cursor.execute('SELECT COUNT(*) FROM channels')
        channels_count = cursor.fetchone()[0]
        
        if channels_count == 0:
            print("üìù –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ –∫–∞–Ω–∞–ª—ã...")
            demo_channels = [
                ('-1001000000001', 'IT –ù–æ–≤–æ—Å—Ç–∏', 'it_news_demo', 2500, '–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –º–∏—Ä–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π', 'technology', 1, 2000, 4.2),
                ('-1001000000002', '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã', 'crypto_demo', 1800, '–ù–æ–≤–æ—Å—Ç–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏ –±–ª–æ–∫—á–µ–π–Ω–∞', 'finance', 1, 1500, 3.8),
                ('-1001000000003', '–î–∏–∑–∞–π–Ω –∏ UX', 'design_demo', 3200, '–î–∏–∑–∞–π–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç', 'design', 1, 2500, 4.5),
                ('-1001000000004', '–°—Ç–∞—Ä—Ç–∞–ø—ã', 'startups_demo', 1200, '–ù–æ–≤–æ—Å—Ç–∏ —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤ –∏ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–∞', 'business', 0, 1000, 3.2),
                ('-1001000000005', 'Python —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', 'python_demo', 4100, '–í—Å—ë –æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞ Python', 'technology', 1, 3000, 4.7)
            ]
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–≤–ª–∞–¥–µ–ª—å—Ü–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            cursor.execute('SELECT COUNT(*) FROM users')
            users_count = cursor.fetchone()[0]
            
            if users_count == 0:
                cursor.execute('''
                    INSERT INTO users (telegram_id, username, first_name, is_admin) 
                    VALUES (?, ?, ?, ?)
                ''', (373086959, 'demo_owner', 'Demo User', True))
                user_id = cursor.lastrowid
            else:
                cursor.execute('SELECT id FROM users LIMIT 1')
                user_id = cursor.fetchone()[0]
            
            for channel_data in demo_channels:
                cursor.execute('''
                    INSERT INTO channels (
                        telegram_channel_id, title, username, subscribers_count, description, 
                        category, is_verified, is_active, accepts_ads, price_per_post, 
                        avg_engagement_rate, owner_id
                    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''', (*channel_data, user_id))
            
            print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(demo_channels)} –¥–µ–º–æ –∫–∞–Ω–∞–ª–æ–≤")

        # 10. –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã
        print("üîß –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã...")
        
        # –¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        cursor.execute('''
            CREATE TRIGGER IF NOT EXISTS update_offer_statistics
                AFTER INSERT ON offer_responses
                FOR EACH ROW
            BEGIN
                INSERT OR REPLACE INTO offer_statistics (
                    offer_id, 
                    responses_count, 
                    accepted_count, 
                    rejected_count,
                    last_updated
                )
                VALUES (
                    NEW.offer_id,
                    (SELECT COUNT(*) FROM offer_responses WHERE offer_id = NEW.offer_id),
                    (SELECT COUNT(*) FROM offer_responses WHERE offer_id = NEW.offer_id AND status = 'accepted'),
                    (SELECT COUNT(*) FROM offer_responses WHERE offer_id = NEW.offer_id AND status = 'rejected'),
                    CURRENT_TIMESTAMP
                );
            END
        ''')
        
        # –¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö
        cursor.execute('''
            CREATE TRIGGER IF NOT EXISTS create_offer_notification
                AFTER INSERT ON offers
                FOR EACH ROW
                WHEN NEW.offer_type = 'channel'
            BEGIN
                INSERT INTO notifications (user_id, type, title, message, data)
                SELECT 
                    c.owner_id,
                    'new_offer',
                    '–ù–æ–≤–æ–µ —Ä–µ–∫–ª–∞–º–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ',
                    '–í—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞ "' || c.title || '"',
                    '{"offer_id": ' || NEW.id || ', "channel_id": ' || NEW.channel_id || '}'
                FROM channels c
                WHERE c.id = NEW.channel_id;
            END
        ''')
        
        # –¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ—Ç–≤–µ—Ç–∞—Ö
        cursor.execute('''
            CREATE TRIGGER IF NOT EXISTS create_response_notification
                AFTER INSERT ON offer_responses
                FOR EACH ROW
            BEGIN
                INSERT INTO notifications (user_id, type, title, message, data)
                SELECT 
                    o.created_by,
                    'offer_response',
                    CASE NEW.status 
                        WHEN 'accepted' THEN '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!'
                        WHEN 'rejected' THEN '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ'
                        ELSE '–ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ'
                    END,
                    '–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ "' || o.title || '"',
                    '{"offer_id": ' || o.id || ', "response_id": ' || NEW.id || ', "status": "' || NEW.status || '"}'
                FROM offers o
                WHERE o.id = NEW.offer_id;
            END
        ''')
        
        print("  ‚úÖ –¢—Ä–∏–≥–≥–µ—Ä—ã —Å–æ–∑–¥–∞–Ω—ã")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        print("\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü...")
        cursor.execute("""
            SELECT name FROM sqlite_master 
            WHERE type='table' 
            ORDER BY name
        """)
        all_tables = [row[0] for row in cursor.fetchall()]
        print(f"üìã –¢–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {all_tables}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        for table in ['users', 'channels', 'offers', 'offer_responses', 'channel_offers']:
            if table in all_tables:
                cursor.execute(f'SELECT COUNT(*) FROM {table}')
                count = cursor.fetchone()[0]
                print(f"üìä {table}: {count} –∑–∞–ø–∏—Å–µ–π")
        
        conn.close()
        
        print("\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("üöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å working_app.py —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ—Ñ—Ñ–µ—Ä–æ–≤")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

if __name__ == '__main__':
    success = run_offers_migration()
    if success:
        print("\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ working_app.py")
        print("2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ /create-offer –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
        print("3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /offers/my-offers –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
    else:
        print("\nüí• –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
