# telegram_webhooks.py - –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook'–æ–≤ –æ—Ç Telegram
import os
import json
import logging
import asyncio
import aiohttp
from datetime import datetime
from flask import Blueprint, request, jsonify
from typing import Dict, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.environ.get('BOT_TOKEN')
WEBHOOK_SECRET = os.environ.get('WEBHOOK_SECRET', 'your-webhook-secret-here')

# –°–æ–∑–¥–∞–µ–º Blueprint –¥–ª—è webhook'–æ–≤
webhooks_bp = Blueprint('webhooks', __name__, url_prefix='/webhook')

# –ò–º–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º—ã –ø–ª–∞—Ç–µ–∂–µ–π
try:
    from payments_system import TelegramPayments, PaymentManager, EscrowManager
    PAYMENTS_AVAILABLE = True
except ImportError:
    logger.error("‚ùå –ú–æ–¥—É–ª—å –ø–ª–∞—Ç–µ–∂–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    PAYMENTS_AVAILABLE = False

# –ò–º–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
try:
    from notifications_system import NotificationManager
    NOTIFICATIONS_AVAILABLE = True
except ImportError:
    logger.error("‚ùå –ú–æ–¥—É–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    NOTIFICATIONS_AVAILABLE = False

class TelegramWebhookHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook'–æ–≤ –æ—Ç Telegram"""
    
    def __init__(self):
        self.bot_token = BOT_TOKEN
        self.base_url = f"https://api.telegram.org/bot{self.bot_token}"
        self.payment_manager = PaymentManager() if PAYMENTS_AVAILABLE else None
    
    async def send_message(self, chat_id: int, text: str, parse_mode: str = 'HTML') -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            payload = {
                'chat_id': chat_id,
                'text': text,
                'parse_mode': parse_mode
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.base_url}/sendMessage",
                    json=payload
                ) as response:
                    result = await response.json()
                    return result.get('ok', False)
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    async def process_successful_payment(self, update_data: Dict) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
        try:
            message = update_data.get('message', {})
            successful_payment = message.get('successful_payment', {})
            user = message.get('from', {})
            
            if not successful_payment:
                return {'success': False, 'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–ª–∞—Ç–µ–∂–µ'}
            
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.get('id')}: {successful_payment}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É
            if PAYMENTS_AVAILABLE and self.payment_manager:
                telegram_payments = TelegramPayments()
                result = await telegram_payments.process_successful_payment(successful_payment)
                
                if result['success']:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ
                    await self.send_payment_confirmation(
                        user.get('id'),
                        result['payment_id'],
                        result['amount']
                    )
                    
                    # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Å–∏—Å—Ç–µ–º–µ
                    if NOTIFICATIONS_AVAILABLE:
                        NotificationManager.create_notification(
                            user_id=user.get('id'),
                            notification_type='payment_success',
                            title='üí∞ –ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω',
                            message=f'–ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É ‚ÇΩ{result["amount"]} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω',
                            data={'payment_id': result['payment_id'], 'amount': result['amount']}
                        )
                    
                    return result
                else:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                    await self.send_message(
                        user.get('id'),
                        f"‚ùå <b>–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞</b>\\n\\n{result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                    )
                    return result
            else:
                return {'success': False, 'error': '–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return {'success': False, 'error': str(e)}
    
    async def send_payment_confirmation(self, user_id: int, payment_id: int, amount: float):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ"""
        try:
            message_text = f"""
‚úÖ <b>–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω!</b>

üí∞ <b>–°—É–º–º–∞:</b> ‚ÇΩ{amount}
üÜî <b>ID –ø–ª–∞—Ç–µ–∂–∞:</b> {payment_id}
üïê <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}

üîí <b>–°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–º–µ—â–µ–Ω—ã –≤ —ç—Å–∫—Ä–æ—É</b>
–û–Ω–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.

üì± <b>–°–ª–µ–¥–∏—Ç—å –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º –º–æ–∂–Ω–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏</b>
            """
            
            await self.send_message(user_id, message_text.strip())
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
    
    async def process_pre_checkout_query(self, update_data: Dict) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ pre-checkout –∑–∞–ø—Ä–æ—Å–∞"""
        try:
            pre_checkout_query = update_data.get('pre_checkout_query', {})
            query_id = pre_checkout_query.get('id')
            
            if not query_id:
                return {'success': False, 'error': '–ù–µ—Ç ID –∑–∞–ø—Ä–æ—Å–∞'}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–ª–∞—Ç–µ–∂–∞
            invoice_payload = pre_checkout_query.get('invoice_payload', '{}')
            try:
                payload_data = json.loads(invoice_payload)
                offer_id = payload_data.get('offer_id')
                amount = payload_data.get('amount')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞
                if offer_id:
                    from add_offer import get_offer_by_id
                    offer = get_offer_by_id(offer_id)
                    
                    if not offer:
                        # –û—Ç–∫–ª–æ–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂
                        await self.answer_pre_checkout_query(query_id, False, "–û—Ñ—Ñ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        return {'success': False, 'error': '–û—Ñ—Ñ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'}
                    
                    if offer['payment_status'] == 'paid':
                        # –û—Ç–∫–ª–æ–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂
                        await self.answer_pre_checkout_query(query_id, False, "–û—Ñ—Ñ–µ—Ä —É–∂–µ –æ–ø–ª–∞—á–µ–Ω")
                        return {'success': False, 'error': '–û—Ñ—Ñ–µ—Ä —É–∂–µ –æ–ø–ª–∞—á–µ–Ω'}
                
                # –û–¥–æ–±—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂
                await self.answer_pre_checkout_query(query_id, True)
                return {'success': True}
                
            except json.JSONDecodeError:
                # –û—Ç–∫–ª–æ–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂
                await self.answer_pre_checkout_query(query_id, False, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞")
                return {'success': False, 'error': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'}
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ pre-checkout: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–∫–ª–æ–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂
            if 'query_id' in locals():
                await self.answer_pre_checkout_query(query_id, False, "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞")
            return {'success': False, 'error': str(e)}
    
    async def answer_pre_checkout_query(self, query_id: str, ok: bool, error_message: str = None):
        """–û—Ç–≤–µ—Ç –Ω–∞ pre-checkout –∑–∞–ø—Ä–æ—Å"""
        try:
            payload = {
                'pre_checkout_query_id': query_id,
                'ok': ok
            }
            
            if not ok and error_message:
                payload['error_message'] = error_message
            
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.base_url}/answerPreCheckoutQuery",
                    json=payload
                ) as response:
                    result = await response.json()
                    logger.info(f"Pre-checkout –æ—Ç–≤–µ—Ç: {result}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ pre-checkout: {e}")

# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
webhook_handler = TelegramWebhookHandler()

@webhooks_bp.route('/telegram', methods=['POST'])
def handle_telegram_webhook():
    """–û—Å–Ω–æ–≤–Ω–æ–π webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        secret_token = request.headers.get('X-Telegram-Bot-Api-Secret-Token')
        if secret_token != WEBHOOK_SECRET:
            logger.warning(f"–ü–æ–ª—É—á–µ–Ω webhook —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Å–µ–∫—Ä–µ—Ç–æ–º: {secret_token}")
            # –ú–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è —Å—Ç—Ä–æ–≥–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            # return jsonify({'status': 'error', 'message': 'Invalid secret token'}), 401
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        update_data = request.get_json()
        if not update_data:
            return jsonify({'status': 'error', 'message': 'No data received'}), 400
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω webhook: {json.dumps(update_data, indent=2)}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        if 'message' in update_data:
            message = update_data['message']
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
            if 'successful_payment' in message:
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                result = loop.run_until_complete(
                    webhook_handler.process_successful_payment(update_data)
                )
                loop.close()
                
                if result['success']:
                    logger.info(f"‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {result}")
                    return jsonify({'status': 'ok', 'message': 'Payment processed'})
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {result}")
                    return jsonify({'status': 'error', 'message': result.get('error')}), 400
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ pre-checkout –∑–∞–ø—Ä–æ—Å–∞
        elif 'pre_checkout_query' in update_data:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            result = loop.run_until_complete(
                webhook_handler.process_pre_checkout_query(update_data)
            )
            loop.close()
            
            if result['success']:
                logger.info("‚úÖ Pre-checkout –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                return jsonify({'status': 'ok', 'message': 'Pre-checkout processed'})
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ pre-checkout: {result}")
                return jsonify({'status': 'error', 'message': result.get('error')}), 400
        
        # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º OK
        return jsonify({'status': 'ok'})
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return jsonify({'status': 'error', 'message': str(e)}), 500

@webhooks_bp.route('/test-payment', methods=['POST'])
def test_payment_webhook():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook –ø–ª–∞—Ç–µ–∂–µ–π"""
    try:
        # –¢–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏!
        if os.environ.get('FLASK_ENV') != 'development':
            return jsonify({'error': 'Not available in production'}), 403
        
        data = request.get_json()
        logger.info(f"–¢–µ—Å—Ç–æ–≤—ã–π webhook –ø–ª–∞—Ç–µ–∂–∞: {data}")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
        test_payment_data = {
            'message': {
                'successful_payment': {
                    'currency': 'RUB',
                    'total_amount': data.get('amount', 100) * 100,  # –í –∫–æ–ø–µ–π–∫–∞—Ö
                    'invoice_payload': json.dumps({
                        'offer_id': data.get('offer_id', 1),
                        'amount': data.get('amount', 100),
                        'timestamp': datetime.now().isoformat()
                    }),
                    'telegram_payment_charge_id': f'test_{datetime.now().timestamp()}',
                    'telegram_payment_id': f'test_payment_{datetime.now().timestamp()}',
                    'provider_payment_charge_id': f'provider_{datetime.now().timestamp()}'
                },
                'from': {
                    'id': data.get('user_id', YOUR_TELEGRAM_ID),
                    'username': 'test_user'
                }
            }
        }
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        result = loop.run_until_complete(
            webhook_handler.process_successful_payment(test_payment_data)
        )
        loop.close()
        
        return jsonify({'status': 'ok', 'result': result})
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ webhook: {e}")
        return jsonify({'status': 'error', 'message': str(e)}), 500

@webhooks_bp.route('/set-webhook', methods=['POST'])
def set_telegram_webhook():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook URL –≤ Telegram"""
    try:
        data = request.get_json()
        webhook_url = data.get('webhook_url')
        
        if not webhook_url:
            return jsonify({'error': 'webhook_url required'}), 400
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
        async def setup_webhook():
            payload = {
                'url': webhook_url,
                'secret_token': WEBHOOK_SECRET,
                'allowed_updates': ['message', 'pre_checkout_query'],
                'drop_pending_updates': True
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"https://api.telegram.org/bot{BOT_TOKEN}/setWebhook",
                    json=payload
                ) as response:
                    result = await response.json()
                    return result
        
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        result = loop.run_until_complete(setup_webhook())
        loop.close()
        
        if result.get('ok'):
            logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
            return jsonify({'success': True, 'result': result})
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {result}")
            return jsonify({'success': False, 'error': result}), 400
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

@webhooks_bp.route('/webhook-info', methods=['GET'])
def get_webhook_info():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º webhook"""
    try:
        async def get_info():
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    f"https://api.telegram.org/bot{BOT_TOKEN}/getWebhookInfo"
                ) as response:
                    result = await response.json()
                    return result
        
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        result = loop.run_until_complete(get_info())
        loop.close()
        
        return jsonify(result)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

def register_webhook_routes(app):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è webhook –º–∞—Ä—à—Ä—É—Ç–æ–≤ –≤ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"""
    app.register_blueprint(webhooks_bp)
    logger.info("‚úÖ Webhook –º–∞—Ä—à—Ä—É—Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)
async def auto_setup_webhook():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    try:
        webapp_url = os.environ.get('WEBAPP_URL')
        if not webapp_url:
            logger.warning("‚ö†Ô∏è WEBAPP_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—É—Å—Ç–∞–Ω–æ–≤–∫—É webhook")
            return
        
        webhook_url = f"{webapp_url.rstrip('/')}/webhook/telegram"
        
        payload = {
            'url': webhook_url,
            'secret_token': WEBHOOK_SECRET,
            'allowed_updates': ['message', 'pre_checkout_query'],
            'drop_pending_updates': True
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"https://api.telegram.org/bot{BOT_TOKEN}/setWebhook",
                json=payload
            ) as response:
                result = await response.json()
                
                if result.get('ok'):
                    logger.info(f"‚úÖ Webhook –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {result}")
                    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
try:
    from working_app import YOUR_TELEGRAM_ID
except ImportError:
    YOUR_TELEGRAM_ID = int(os.environ.get('YOUR_TELEGRAM_ID', 373086959))

if __name__ == '__main__':
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    import asyncio
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞...")
    
    # –¢–µ—Å—Ç –∞–≤—Ç–æ—É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(auto_setup_webhook())
    loop.close()
