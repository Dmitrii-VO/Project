#!/usr/bin/env python3
"""
–°–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—è –∏—Ö –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
"""

import logging
import asyncio
import aiohttp
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
import json

logger = logging.getLogger(__name__)


class PostDeletionMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"""
    
    def __init__(self):
        self.session = None
        
    async def check_active_posts_availability(self) -> List[Dict]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"""
        from app.models.database import execute_db_query
        
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –ø–æ—Å—Ç—ã
        active_placements = execute_db_query("""
            SELECT p.*, 
                   o.title as offer_title,
                   o.created_by as advertiser_id,
                   r.user_id as channel_owner_id,
                   r.channel_title,
                   r.channel_username,
                   u_adv.telegram_id as advertiser_telegram_id,
                   u_owner.telegram_id as channel_owner_telegram_id
            FROM offer_placements p
            JOIN offer_responses r ON p.response_id = r.id
            JOIN offers o ON r.offer_id = o.id
            JOIN users u_adv ON o.created_by = u_adv.id
            JOIN users u_owner ON r.user_id = u_owner.id
            WHERE p.status = 'active'
            AND p.post_url IS NOT NULL
            AND p.placement_start IS NOT NULL
        """, fetch_all=True)
        
        results = []
        
        async with aiohttp.ClientSession() as session:
            self.session = session
            
            for placement in active_placements:
                try:
                    logger.debug(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å—Ç –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è {placement['id']}: {placement['post_url']}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Å—Ç–∞
                    is_available = await self.check_post_availability(placement['post_url'])
                    
                    if not is_available:
                        # –ü–æ—Å—Ç —É–¥–∞–ª–µ–Ω - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏—Ç—É–∞—Ü–∏—é
                        await self.handle_deleted_post(placement)
                        results.append({
                            'placement_id': placement['id'],
                            'post_url': placement['post_url'],
                            'status': 'deleted',
                            'action': 'penalties_applied'
                        })
                        logger.warning(f"‚ùå –ü–æ—Å—Ç —É–¥–∞–ª–µ–Ω –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è {placement['id']}: {placement['post_url']}")
                    else:
                        results.append({
                            'placement_id': placement['id'],
                            'post_url': placement['post_url'],
                            'status': 'available'
                        })
                        logger.debug(f"‚úÖ –ü–æ—Å—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è {placement['id']}")
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å—Ç–∞ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è {placement['id']}: {e}")
                    results.append({
                        'placement_id': placement['id'],
                        'status': 'check_error',
                        'error': str(e)
                    })
        
        available_count = len([r for r in results if r['status'] == 'available'])
        deleted_count = len([r for r in results if r['status'] == 'deleted'])
        
        if results:
            logger.info(f"üìä –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(results)}, –¥–æ—Å—Ç—É–ø–Ω–æ: {available_count}, —É–¥–∞–ª–µ–Ω–æ: {deleted_count}")
        
        return results
    
    async def check_post_availability(self, post_url: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Telegram
            if not post_url.startswith('https://t.me/'):
                return False
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –≤–µ–±-–≤–µ—Ä—Å–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            web_url = post_url.replace('https://t.me/', 'https://t.me/s/')
            
            async with self.session.get(web_url, timeout=10) as response:
                if response.status == 200:
                    html_content = await response.text()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
                    deletion_indicators = [
                        'Post not found',
                        'This post was deleted',
                        'Message not found',
                        'tgme_widget_message_error',
                        'Channel not found'
                    ]
                    
                    content_lower = html_content.lower()
                    for indicator in deletion_indicators:
                        if indicator.lower() in content_lower:
                            return False
                    
                    # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ—Å—Ç–∞, –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
                    return 'tgme_widget_message' in html_content
                else:
                    # –°—Ç–∞—Ç—É—Å 404 –∏–ª–∏ –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –æ–±—ã—á–Ω–æ –æ–∑–Ω–∞—á–∞—é—Ç —É–¥–∞–ª–µ–Ω–∏–µ
                    return response.status not in [404, 403, 410]
                    
        except asyncio.TimeoutError:
            logger.warning(f"‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ—Å—Ç–∞: {post_url}")
            return True  # –°—á–∏—Ç–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Å—Ç–∞ {post_url}: {e}")
            return True  # –°—á–∏—Ç–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    
    async def handle_deleted_post(self, placement: Dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞"""
        try:
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ –¥–æ–≥–æ–≤–æ—Ä–Ω—ã–π —Å—Ä–æ–∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            placement_end = await self.calculate_placement_end_time(placement)
            current_time = datetime.now()
            
            if current_time < placement_end:
                # –ü–æ—Å—Ç —É–¥–∞–ª–µ–Ω —Ä–∞–Ω—å—à–µ —Å—Ä–æ–∫–∞ - –ø—Ä–∏–º–µ–Ω—è–µ–º —à—Ç—Ä–∞—Ñ—ã
                await self.apply_early_deletion_penalty(placement, placement_end)
                logger.warning(f"‚ö†Ô∏è –ü—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è {placement['id']}")
            else:
                # –ü–æ—Å—Ç —É–¥–∞–ª–µ–Ω –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                await self.mark_placement_completed(placement)
                logger.info(f"‚úÖ –†–∞–∑–º–µ—â–µ–Ω–∏–µ {placement['id']} –∑–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ —Å—Ä–æ–∫—É")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è {placement['id']}: {e}")
    
    async def calculate_placement_end_time(self, placement: Dict) -> datetime:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        placement_start = datetime.fromisoformat(placement['placement_start'])
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –¥–ª–∏—Ç—Å—è 24 —á–∞—Å–∞
        # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º
        placement_duration = timedelta(hours=24)
        
        return placement_start + placement_duration
    
    async def apply_early_deletion_penalty(self, placement: Dict, planned_end_time: datetime):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —à—Ç—Ä–∞—Ñ—ã –∑–∞ –ø—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ"""
        from app.models.database import execute_db_query
        
        try:
            current_time = datetime.now()
            time_remaining = planned_end_time - current_time
            hours_remaining = time_remaining.total_seconds() / 3600
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —à—Ç—Ä–∞—Ñ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20% –æ—Ç —Å—É–º–º—ã + –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –æ—Å—Ç–∞–≤—à–µ–º—É—Å—è –≤—Ä–µ–º–µ–Ω–∏)
            base_penalty_rate = 0.20  # 20%
            time_penalty_rate = hours_remaining / 24  # –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –æ—Å—Ç–∞–≤—à–µ–º—É—Å—è –≤—Ä–µ–º–µ–Ω–∏
            total_penalty_rate = min(base_penalty_rate + time_penalty_rate, 0.50)  # –ú–∞–∫—Å–∏–º—É–º 50%
            
            penalty_amount = float(placement['funds_reserved']) * total_penalty_rate
            
            # 1. –ü–æ–º–µ—á–∞–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ —Å –Ω–∞—Ä—É—à–µ–Ω–∏–µ–º
            execute_db_query("""
                UPDATE offer_placements 
                SET status = 'early_deleted',
                    early_deletion_penalty = ?,
                    actual_end_time = CURRENT_TIMESTAMP,
                    penalty_reason = ?,
                    updated_at = CURRENT_TIMESTAMP
                WHERE id = ?
            """, (
                penalty_amount,
                f"Post deleted {hours_remaining:.1f} hours before planned end",
                placement['id']
            ))
            
            # 2. –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —à—Ç—Ä–∞—Ñ–µ
            await self.create_penalty_record(placement, penalty_amount, hours_remaining)
            
            # 3. –°–Ω–∏–∂–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞
            await self.decrease_channel_rating_for_deletion(placement)
            
            # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            await self.notify_early_deletion(placement, penalty_amount, hours_remaining)
            
            logger.info(f"üí∏ –®—Ç—Ä–∞—Ñ {penalty_amount:.2f} —Ä—É–±. –∑–∞ –ø—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è {placement['id']}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —à—Ç—Ä–∞—Ñ–∞ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è {placement['id']}: {e}")
            raise
    
    async def create_penalty_record(self, placement: Dict, penalty_amount: float, hours_remaining: float):
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –æ —à—Ç—Ä–∞—Ñ–µ"""
        from app.models.database import execute_db_query
        
        execute_db_query("""
            INSERT INTO payments (
                id,
                contract_id,
                placement_id,
                publisher_id,
                advertiser_id,
                amount,
                status,
                payment_method,
                created_at,
                processed_at
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        """, (
            f"PENALTY_{placement['id']}_{int(datetime.now().timestamp())}",
            f"PENALTY_CONTRACT_{placement['id']}",
            placement['id'],
            placement['channel_owner_id'],
            placement['advertiser_id'],
            penalty_amount,
            'completed',
            'penalty',
            datetime.now().isoformat(),
            datetime.now().isoformat()
        ))
        
        logger.info(f"üìù –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –æ —à—Ç—Ä–∞—Ñ–µ {penalty_amount:.2f} —Ä—É–±. –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è {placement['id']}")
    
    async def decrease_channel_rating_for_deletion(self, placement: Dict):
        """–°–Ω–∏–∂–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞ –∑–∞ –ø—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ"""
        from app.models.database import execute_db_query
        
        try:
            execute_db_query("""
                UPDATE channels 
                SET early_deletions = COALESCE(early_deletions, 0) + 1,
                    reliability_rating = MAX(0, COALESCE(reliability_rating, 100) - 15),
                    updated_at = CURRENT_TIMESTAMP
                WHERE id = (
                    SELECT r.channel_id 
                    FROM offer_responses r 
                    WHERE r.id = ?
                )
            """, (placement['response_id'],))
            
            logger.info(f"üìâ –†–µ–π—Ç–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞ —Å–Ω–∏–∂–µ–Ω –∑–∞ –ø—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è {placement['id']}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–Ω–∏–∂–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–∞ –∑–∞ —É–¥–∞–ª–µ–Ω–∏–µ: {e}")
    
    async def notify_early_deletion(self, placement: Dict, penalty_amount: float, hours_remaining: float):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏"""
        try:
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—é
            await self.notify_advertiser_about_deletion(placement, penalty_amount, hours_remaining)
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É –∫–∞–Ω–∞–ª–∞
            await self.notify_channel_owner_about_penalty(placement, penalty_amount, hours_remaining)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
    
    async def notify_advertiser_about_deletion(self, placement: Dict, penalty_amount: float, hours_remaining: float):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è –æ –ø—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏"""
        try:
            from app.services.telegram_service import TelegramService
            telegram_service = TelegramService()
            
            message = f"""üö® <b>–ü–æ—Å—Ç —É–¥–∞–ª–µ–Ω –¥–æ—Å—Ä–æ—á–Ω–æ</b>

üì∫ <b>–ö–∞–Ω–∞–ª:</b> @{placement['channel_username']}
üìã <b>–û—Ñ—Ñ–µ—Ä:</b> {placement['offer_title']}
üîó <b>–°—Å—ã–ª–∫–∞ –±—ã–ª–∞:</b> {placement['post_url']}

‚è∞ <b>–£–¥–∞–ª–µ–Ω –Ω–∞ {hours_remaining:.1f} —á. —Ä–∞–Ω—å—à–µ —Å—Ä–æ–∫–∞</b>

üí∞ <b>–ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è:</b>
‚Ä¢ –®—Ç—Ä–∞—Ñ —Å –∫–∞–Ω–∞–ª–∞: {penalty_amount:.2f} —Ä—É–±.
‚Ä¢ –ß–∞—Å—Ç–∏—á–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤

üìä <b>–í–∞—à–∞ —Ä–µ–∫–ª–∞–º–∞ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∞—Å—å, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞</b>

‚öñÔ∏è –ö–∞–Ω–∞–ª –Ω–∞—Ä—É—à–∏–ª —É—Å–ª–æ–≤–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞"""
            
            await telegram_service.send_message(
                chat_id=placement['advertiser_telegram_id'],
                text=message,
                parse_mode='HTML'
            )
            
            logger.info(f"üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ä–æ—á–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—é {placement['advertiser_telegram_id']}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è –æ –¥–æ—Å—Ä–æ—á–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
    
    async def notify_channel_owner_about_penalty(self, placement: Dict, penalty_amount: float, hours_remaining: float):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞–Ω–∞–ª–∞ –æ —à—Ç—Ä–∞—Ñ–µ"""
        try:
            from app.services.telegram_service import TelegramService
            telegram_service = TelegramService()
            
            message = f"""‚ö†Ô∏è <b>–®—Ç—Ä–∞—Ñ –∑–∞ –¥–æ—Å—Ä–æ—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ</b>

üìã <b>–û—Ñ—Ñ–µ—Ä:</b> {placement['offer_title']}
üîó <b>–£–¥–∞–ª–µ–Ω–Ω—ã–π –ø–æ—Å—Ç:</b> {placement['post_url']}
‚è∞ <b>–£–¥–∞–ª–µ–Ω –Ω–∞ {hours_remaining:.1f} —á. —Ä–∞–Ω—å—à–µ —Å—Ä–æ–∫–∞</b>

üí∏ <b>–®—Ç—Ä–∞—Ñ:</b> {penalty_amount:.2f} —Ä—É–±.
üìâ <b>–†–µ–π—Ç–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞ —Å–Ω–∏–∂–µ–Ω</b>

‚öñÔ∏è <b>–ü—Ä–∏—á–∏–Ω–∞ —à—Ç—Ä–∞—Ñ–∞:</b>
–ü–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã–ª –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è {hours_remaining:.1f} —á.
–î–æ—Å—Ä–æ—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–∞—Ä—É—à–∞–µ—Ç –¥–æ–≥–æ–≤–æ—Ä

üí° <b>–í –±—É–¥—É—â–µ–º:</b>
–ù–µ —É–¥–∞–ª—è–π—Ç–µ –ø–æ—Å—Ç—ã –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
            
            await telegram_service.send_message(
                chat_id=placement['channel_owner_telegram_id'],
                text=message,
                parse_mode='HTML'
            )
            
            logger.info(f"üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —à—Ç—Ä–∞—Ñ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –∫–∞–Ω–∞–ª–∞ {placement['channel_owner_telegram_id']}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞–Ω–∞–ª–∞ –æ —à—Ç—Ä–∞—Ñ–µ: {e}")
    
    async def mark_placement_completed(self, placement: Dict):
        """–ü–æ–º–µ—á–∞–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ"""
        from app.models.database import execute_db_query
        
        execute_db_query("""
            UPDATE offer_placements 
            SET status = 'completed',
                actual_end_time = CURRENT_TIMESTAMP,
                updated_at = CURRENT_TIMESTAMP
            WHERE id = ?
        """, (placement['id'],))
        
        logger.info(f"‚úÖ –†–∞–∑–º–µ—â–µ–Ω–∏–µ {placement['id']} –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
async def monitor_post_deletions():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤"""
    monitor = PostDeletionMonitor()
    results = await monitor.check_active_posts_availability()
    return results


if __name__ == "__main__":
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫
    async def test_deletion_monitoring():
        results = await monitor_post_deletions()
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤: {results}")
    
    asyncio.run(test_deletion_monitoring())