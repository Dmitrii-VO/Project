#!/usr/bin/env python3
"""
–°–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤
"""

import logging
import re
import asyncio
import aiohttp
from datetime import datetime, timedelta
from typing import List, Dict, Optional, Tuple
import json

logger = logging.getLogger(__name__)


class ChannelMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"""
    
    def __init__(self, bot_token: str = None):
        self.bot_token = bot_token
        self.api_base = f"https://api.telegram.org/bot{bot_token}" if bot_token else None
        
    async def check_pending_placements(self) -> List[Dict]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤"""
        from app.models import execute_db_query
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º pending_placement
        pending_placements = execute_db_query("""
            SELECT p.*, 
                   o.title as offer_title,
                   o.content as offer_content,
                   r.channel_username,
                   r.channel_title,
                   u.telegram_id as channel_owner_telegram_id
            FROM offer_placements p
            JOIN offer_responses r ON p.response_id = r.id
            JOIN offers o ON r.offer_id = o.id
            JOIN users u ON r.user_id = u.id
            WHERE p.status = 'pending_placement'
            AND p.deadline > CURRENT_TIMESTAMP
        """, fetch_all=True)
        
        results = []
        
        for placement in pending_placements:
            try:
                logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ ID {placement['id']} –≤ –∫–∞–Ω–∞–ª–µ @{placement['channel_username']}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ—Å—Ç–∞ —Å eREIT —Ç–æ–∫–µ–Ω–æ–º
                post_found = await self.search_post_in_channel(
                    channel_username=placement['channel_username'],
                    ereit_token=placement['ereit_token'],
                    since_time=placement['created_at']
                )
                
                if post_found:
                    # –ü–æ—Å—Ç –Ω–∞–π–¥–µ–Ω - –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
                    await self.activate_placement(placement, post_found)
                    results.append({
                        'placement_id': placement['id'],
                        'status': 'found',
                        'post_url': post_found['url'],
                        'published_at': post_found['date']
                    })
                    logger.info(f"‚úÖ –ü–æ—Å—Ç –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è {placement['id']}: {post_found['url']}")
                else:
                    results.append({
                        'placement_id': placement['id'],
                        'status': 'not_found'
                    })
                    logger.debug(f"‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è {placement['id']}")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è {placement['id']}: {e}")
                results.append({
                    'placement_id': placement['id'],
                    'status': 'error',
                    'error': str(e)
                })
        
        return results
    
    async def search_post_in_channel(self, channel_username: str, ereit_token: str, since_time: str) -> Optional[Dict]:
        """–ò—â–µ—Ç –ø–æ—Å—Ç —Å eREIT —Ç–æ–∫–µ–Ω–æ–º –≤ –∫–∞–Ω–∞–ª–µ"""
        if not self.api_base:
            logger.warning("‚ùå Bot token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø–æ–∏—Å–∫ –ø–æ—Å—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return None
            
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            since_datetime = datetime.fromisoformat(since_time.replace('Z', '+00:00'))
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞
            channel_messages = await self.get_channel_messages(channel_username, limit=50)
            
            for message in channel_messages:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                message_date = datetime.fromtimestamp(message.get('date', 0))
                if message_date < since_datetime:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ eREIT —Ç–æ–∫–µ–Ω–∞ –≤ —Ç–µ–∫—Å—Ç–µ
                message_text = message.get('text', '') or message.get('caption', '')
                if ereit_token in message_text:
                    message_id = message.get('message_id')
                    post_url = f"https://t.me/{channel_username}/{message_id}"
                    
                    return {
                        'url': post_url,
                        'message_id': message_id,
                        'date': message_date.isoformat(),
                        'text': message_text
                    }
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ @{channel_username}: {e}")
            return None
    
    async def get_channel_messages(self, channel_username: str, limit: int = 50) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ Telegram API"""
        if not self.api_base:
            return []
            
        try:
            async with aiohttp.ClientSession() as session:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ getUpdates —Å chat_id –∫–∞–Ω–∞–ª–∞
                url = f"{self.api_base}/getChat"
                params = {'chat_id': f"@{channel_username}"}
                
                async with session.get(url, params=params) as response:
                    if response.status != 200:
                        logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ @{channel_username}")
                        return []
                
                # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π (–º–µ—Ç–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –±–æ—Ç–æ–≤ –≤ –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö)
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —á–µ—Ä–µ–∑ –≤–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥ –∏–ª–∏ RSS
                return await self.get_channel_messages_alternative(channel_username, limit)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–Ω–∞–ª–∞ @{channel_username}: {e}")
            return []
    
    async def get_channel_messages_alternative(self, channel_username: str, limit: int = 50) -> List[Dict]:
        """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–Ω–∞–ª–∞"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω–æ–µ API Telegram –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤
            url = f"https://t.me/s/{channel_username}"
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as response:
                    if response.status != 200:
                        return []
                    
                    html_content = await response.text()
                    
                    # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ HTML –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤
                    messages = self.parse_channel_html(html_content, channel_username)
                    return messages[:limit]
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π @{channel_username}: {e}")
            return []
    
    def parse_channel_html(self, html_content: str, channel_username: str) -> List[Dict]:
        """–ü–∞—Ä—Å–∏—Ç HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞–Ω–∞–ª–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤"""
        messages = []
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤
            # –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è, –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å BeautifulSoup
            
            post_pattern = r'data-post="([^"]+)"[^>]*>[^<]*<div class="tgme_widget_message_text"[^>]*>(.*?)</div>'
            date_pattern = r'<time[^>]*datetime="([^"]+)"'
            
            post_matches = re.findall(post_pattern, html_content, re.DOTALL)
            date_matches = re.findall(date_pattern, html_content)
            
            for i, (post_id, text_html) in enumerate(post_matches):
                # –û—á–∏—â–∞–µ–º HTML —Ç–µ–≥–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
                text = re.sub(r'<[^>]+>', '', text_html)
                text = text.strip()
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
                message_id_match = re.search(r'/(\d+)$', post_id)
                message_id = int(message_id_match.group(1)) if message_id_match else i + 1
                
                # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
                message_date = datetime.now()
                if i < len(date_matches):
                    try:
                        message_date = datetime.fromisoformat(date_matches[i].replace('Z', '+00:00'))
                    except:
                        pass
                
                messages.append({
                    'message_id': message_id,
                    'text': text,
                    'date': int(message_date.timestamp()),
                    'post_url': f"https://t.me/{channel_username}/{message_id}"
                })
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML –∫–∞–Ω–∞–ª–∞: {e}")
        
        return messages
    
    async def activate_placement(self, placement: Dict, post_info: Dict):
        """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø–æ—Å—Ç–∞"""
        from app.models import execute_db_query
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            execute_db_query("""
                UPDATE offer_placements 
                SET status = 'active',
                    post_url = ?,
                    placement_start = ?,
                    updated_at = CURRENT_TIMESTAMP
                WHERE id = ?
            """, (post_info['url'], post_info['date'], placement['id']))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—é
            await self.notify_advertiser_about_placement(placement, post_info)
            
            logger.info(f"‚úÖ –†–∞–∑–º–µ—â–µ–Ω–∏–µ {placement['id']} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è {placement['id']}: {e}")
    
    async def notify_advertiser_about_placement(self, placement: Dict, post_info: Dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—é –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏"""
        try:
            from app.telegram.telegram_notifications import TelegramNotificationService
            notification_service = TelegramNotificationService()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª–µ
            from app.models import execute_db_query
            advertiser = execute_db_query("""
                SELECT u.telegram_id
                FROM offer_placements p
                JOIN offer_responses r ON p.response_id = r.id
                JOIN offers o ON r.offer_id = o.id
                JOIN users u ON o.created_by = u.id
                WHERE p.id = ?
            """, (placement['id'],), fetch_one=True)
            
            if not advertiser:
                return
            
            channel_name = f"@{placement['channel_username']}"
            publish_time = datetime.fromisoformat(post_info['date']).strftime("%d %B, %H:%M")
            
            message = f"""üì§ <b>–†–µ–∫–ª–∞–º–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!</b>

üì∫ <b>–ö–∞–Ω–∞–ª:</b> {channel_name}
üîó <b>–°—Å—ã–ª–∫–∞:</b> {post_info['url']}
‚è∞ <b>–†–∞–∑–º–µ—â–µ–Ω–æ:</b> {publish_time}

üìã <b>–û—Ñ—Ñ–µ—Ä:</b> {placement['offer_title']}
üí∞ <b>–°—É–º–º–∞:</b> {placement.get('funds_reserved', 0)} —Ä—É–±.
üîó <b>eREIT —Ç–æ–∫–µ–Ω:</b> {placement['ereit_token']}

üìä <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–∞—á–∞—Ç–æ</b>
–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ —á–∞—Å

ü§ñ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏—Å—Ç–µ–º–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
            
            notification_service.send_notification(
                user_id=advertiser['telegram_id'],
                message=message,
                notification_type='auto_placement_detected'
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏: {e}")
    
    async def check_expired_placements(self) -> List[Dict]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        from app.models import execute_db_query
        
        # –ù–∞—Ö–æ–¥–∏–º —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å –∏—Å—Ç–µ–∫—à–∏–º –¥–µ–¥–ª–∞–π–Ω–æ–º
        expired_placements = execute_db_query("""
            SELECT p.*, 
                   r.channel_username,
                   u.telegram_id as channel_owner_telegram_id
            FROM offer_placements p
            JOIN offer_responses r ON p.response_id = r.id
            JOIN users u ON r.user_id = u.id
            WHERE p.status = 'pending_placement'
            AND p.deadline < CURRENT_TIMESTAMP
        """, fetch_all=True)
        
        results = []
        
        for placement in expired_placements:
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π
                execute_db_query("""
                    UPDATE offer_placements 
                    SET status = 'expired',
                        updated_at = CURRENT_TIMESTAMP
                    WHERE id = ?
                """, (placement['id'],))
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                await self.notify_about_expired_placement(placement)
                
                results.append({
                    'placement_id': placement['id'],
                    'status': 'expired'
                })
                
                logger.info(f"‚è∞ –†–∞–∑–º–µ—â–µ–Ω–∏–µ {placement['id']} –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–µ")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è {placement['id']}: {e}")
        
        return results
    
    async def notify_about_expired_placement(self, placement: Dict):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏"""
        try:
            from app.telegram.telegram_notifications import TelegramNotificationService
            notification_service = TelegramNotificationService()
            
            message = f"""‚è∞ <b>–°—Ä–æ–∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∏—Å—Ç–µ–∫</b>

üìã <b>–†–∞–∑–º–µ—â–µ–Ω–∏–µ:</b> {placement.get('offer_title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}
‚è∞ <b>–î–µ–¥–ª–∞–π–Ω –±—ã–ª:</b> {placement['deadline']}

‚ùå –ü–æ—Å—Ç –Ω–µ –±—ã–ª —Ä–∞–∑–º–µ—â–µ–Ω –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Å—Ä–æ–∫–∏.
–†–∞–∑–º–µ—â–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.

üí° –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –Ω–æ–≤—ã–π –æ—Ç–∫–ª–∏–∫ –Ω–∞ —ç—Ç–æ—Ç –æ—Ñ—Ñ–µ—Ä."""
            
            notification_service.send_notification(
                user_id=placement['channel_owner_telegram_id'],
                message=message,
                notification_type='placement_expired'
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
async def run_channel_monitoring():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–æ–≤"""
    from app.config.telegram_config import AppConfig
    
    monitor = ChannelMonitor(bot_token=AppConfig.BOT_TOKEN)
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–æ–≤...")
    
    while True:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            active_results = await monitor.check_pending_placements()
            if active_results:
                logger.info(f"üìä –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–π: {len(active_results)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            expired_results = await monitor.check_expired_placements()
            if expired_results:
                logger.info(f"‚è∞ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Ä–∞–∑–º–µ—â–µ–Ω–∏–π: {len(expired_results)}")
            
            # –ñ–¥–µ–º 30 –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            await asyncio.sleep(30 * 60)  # 30 –º–∏–Ω—É—Ç
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            await asyncio.sleep(60)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º 1 –º–∏–Ω—É—Ç—É


if __name__ == "__main__":
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫
    asyncio.run(run_channel_monitoring())