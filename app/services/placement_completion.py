#!/usr/bin/env python3
"""
–°–µ—Ä–≤–∏—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞ —Å —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏ –≤—ã–ø–ª–∞—Ç–∞–º–∏
"""

import logging
import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
import json

logger = logging.getLogger(__name__)


class PlacementCompletionService:
    """–°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏–π"""
    
    def __init__(self):
        self.platform_commission_rate = 0.05  # 5% –∫–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        
    async def check_placements_for_completion(self) -> List[Dict]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥–æ—Ç–æ–≤—ã–µ –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é (—á–µ—Ä–µ–∑ 24+ —á–∞—Å–æ–≤)"""
        from app.models.database import execute_db_query
        
        logger.info("üèÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–π –≥–æ—Ç–æ–≤—ã—Ö –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é...")
        
        # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–±–æ—Ç–∞—é—Ç —É–∂–µ 24+ —á–∞—Å–æ–≤
        completion_time = datetime.now() - timedelta(hours=24)
        
        ready_placements = execute_db_query("""
            SELECT p.*, 
                   o.title as offer_title,
                   o.price as offer_price,
                   o.created_by as advertiser_id,
                   r.user_id as channel_owner_id,
                   r.channel_title,
                   r.channel_username,
                   u_adv.telegram_id as advertiser_telegram_id,
                   u_owner.telegram_id as channel_owner_telegram_id
            FROM offer_placements p
            JOIN offer_responses r ON p.proposal_id = r.id
            JOIN offers o ON r.offer_id = o.id
            JOIN users u_adv ON o.created_by = u_adv.id
            JOIN users u_owner ON r.user_id = u_owner.id
            WHERE p.status = 'active'
            AND p.placement_start IS NOT NULL
            AND p.placement_start <= ?
            AND p.post_url IS NOT NULL
        """, (completion_time.isoformat(),), fetch_all=True)
        
        results = []
        
        for placement in ready_placements:
            try:
                logger.info(f"üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è {placement['id']} - {placement['offer_title']}")
                
                # 1. –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                final_stats = await self.collect_final_statistics(placement)
                
                # 2. –†–∞—Å—á–µ—Ç –≤—ã–ø–ª–∞—Ç—ã —Å –∫–æ–º–∏—Å—Å–∏–µ–π
                payout_details = await self.calculate_payout(placement, final_stats)
                
                # 3. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã–ø–ª–∞—Ç—ã
                payment_result = await self.process_payout(placement, payout_details)
                
                # 4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
                await self.mark_placement_completed(placement, final_stats, payout_details)
                
                # 5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
                final_report = await self.generate_final_report(placement, final_stats, payout_details)
                
                # 6. –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                await self.send_completion_notifications(placement, final_stats, payout_details, final_report)
                
                results.append({
                    'placement_id': placement['id'],
                    'status': 'completed_successfully',
                    'final_stats': final_stats,
                    'payout_details': payout_details,
                    'payment_result': payment_result
                })
                
                logger.info(f"‚úÖ –†–∞–∑–º–µ—â–µ–Ω–∏–µ {placement['id']} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è {placement['id']}: {e}")
                results.append({
                    'placement_id': placement['id'],
                    'status': 'completion_error',
                    'error': str(e)
                })
        
        if results:
            logger.info(f"üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–π: {len([r for r in results if r['status'] == 'completed_successfully'])}/{len(results)}")
        
        return results
    
    async def collect_final_statistics(self, placement: Dict) -> Dict:
        """–°–æ–±–∏—Ä–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        from app.models.database import execute_db_query
        
        try:
            placement_id = placement['id']
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Telegram
            telegram_stats = execute_db_query("""
                SELECT * FROM placement_statistics 
                WHERE placement_id = ? 
                ORDER BY collected_at DESC 
                LIMIT 1
            """, (placement_id,), fetch_one=True)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É eREIT
            ereit_stats = execute_db_query("""
                SELECT * FROM ereit_statistics 
                WHERE placement_id = ? 
                ORDER BY collected_at DESC 
                LIMIT 1
            """, (placement_id,), fetch_one=True)
            
            # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–±—Ä–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            try:
                from app.services.stats_collector import StatsCollector
                from app.services.ereit_integration import EREITIntegration
                
                stats_collector = StatsCollector()
                ereit_integration = EREITIntegration()
                
                # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–±–æ—Ä Telegram —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                if placement.get('post_url'):
                    final_telegram_stats = await stats_collector.collect_post_stats({
                        'post_url': placement['post_url'],
                        'ereit_token': placement['ereit_token'],
                        'created_at': placement['placement_start']
                    })
                    
                    if final_telegram_stats:
                        await stats_collector.save_stats_to_db(placement_id, final_telegram_stats)
                        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤—ã–µ
                        if final_telegram_stats.get('views', 0) > telegram_stats.get('views_count', 0):
                            telegram_stats = {
                                'views_count': final_telegram_stats.get('views', 0),
                                'reactions_count': final_telegram_stats.get('reactions', 0),
                                'shares_count': final_telegram_stats.get('shares', 0),
                                'comments_count': final_telegram_stats.get('comments', 0),
                                'collected_at': final_telegram_stats.get('collected_at')
                            }
                
                # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–±–æ—Ä eREIT —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                if placement.get('ereit_token'):
                    final_ereit_stats = await ereit_integration.get_placement_stats(
                        placement['ereit_token'], 
                        placement_id
                    )
                    
                    if final_ereit_stats and final_ereit_stats.get('clicks', 0) > ereit_stats.get('clicks', 0):
                        ereit_stats = final_ereit_stats
                        
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {e}")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            final_stats = {
                'telegram': {
                    'views': telegram_stats['views_count'] if telegram_stats else 0,
                    'reactions': telegram_stats['reactions_count'] if telegram_stats else 0,
                    'shares': telegram_stats['shares_count'] if telegram_stats else 0,
                    'comments': telegram_stats['comments_count'] if telegram_stats else 0,
                    'collected_at': telegram_stats['collected_at'] if telegram_stats else None
                },
                'ereit': {
                    'clicks': ereit_stats['clicks'] if ereit_stats else 0,
                    'unique_clicks': ereit_stats['unique_clicks'] if ereit_stats else 0,
                    'ctr': ereit_stats['ctr'] if ereit_stats else 0.0,
                    'conversions': ereit_stats['conversion_events'] if ereit_stats else 0,
                    'collected_at': ereit_stats['collected_at'] if ereit_stats else None
                },
                'performance': self.calculate_performance_metrics(placement, telegram_stats, ereit_stats),
                'placement_duration': self.calculate_placement_duration(placement),
                'collected_at': datetime.now().isoformat()
            }
            
            logger.info(f"üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–±—Ä–∞–Ω–∞ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è {placement_id}")
            return final_stats
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è {placement['id']}: {e}")
            return {
                'telegram': {'views': 0, 'reactions': 0, 'shares': 0, 'comments': 0},
                'ereit': {'clicks': 0, 'unique_clicks': 0, 'ctr': 0.0, 'conversions': 0},
                'performance': {},
                'error': str(e)
            }
    
    def calculate_performance_metrics(self, placement: Dict, telegram_stats: Optional[Dict], ereit_stats: Optional[Dict]) -> Dict:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        metrics = {}
        
        try:
            views = telegram_stats['views_count'] if telegram_stats else 0
            reactions = telegram_stats['reactions_count'] if telegram_stats else 0
            clicks = ereit_stats['clicks'] if ereit_stats else 0
            conversions = ereit_stats['conversion_events'] if ereit_stats else 0
            cost = float(placement.get('funds_reserved', 0))
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            if views > 0:
                metrics['engagement_rate'] = round((reactions / views) * 100, 2)
                metrics['click_through_rate'] = round((clicks / views) * 100, 2)
                metrics['cost_per_view'] = round(cost / views, 2)
                metrics['cpm'] = round((cost / views) * 1000, 2)
            
            if clicks > 0:
                metrics['cost_per_click'] = round(cost / clicks, 2)
                metrics['conversion_rate'] = round((conversions / clicks) * 100, 2)
            
            if conversions > 0:
                metrics['cost_per_conversion'] = round(cost / conversions, 2)
            
            # –û—Ü–µ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            if metrics.get('click_through_rate', 0) > 2.0:
                metrics['performance_rating'] = 'excellent'
            elif metrics.get('click_through_rate', 0) > 1.0:
                metrics['performance_rating'] = 'good'
            elif metrics.get('click_through_rate', 0) > 0.5:
                metrics['performance_rating'] = 'average'
            else:
                metrics['performance_rating'] = 'poor'
            
            # ROI –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω–≤–µ—Ä—Å–∏–∏)
            if conversions > 0 and clicks > 0:
                estimated_revenue = conversions * 100  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
                metrics['estimated_roi'] = round(((estimated_revenue - cost) / cost) * 100, 2)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")
            metrics['error'] = str(e)
        
        return metrics
    
    def calculate_placement_duration(self, placement: Dict) -> Dict:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        try:
            start_time = datetime.fromisoformat(placement['placement_start'])
            end_time = datetime.now()
            duration = end_time - start_time
            
            return {
                'start_time': placement['placement_start'],
                'end_time': end_time.isoformat(),
                'duration_hours': round(duration.total_seconds() / 3600, 1),
                'duration_text': f"{duration.days} –¥–Ω–µ–π {duration.seconds // 3600} —á–∞—Å–æ–≤"
            }
        except Exception as e:
            return {'error': str(e)}
    
    async def calculate_payout(self, placement: Dict, final_stats: Dict) -> Dict:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –≤—ã–ø–ª–∞—Ç—ã —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏"""
        try:
            base_amount = float(placement.get('funds_reserved', 0))
            commission_amount = base_amount * self.platform_commission_rate
            payout_amount = base_amount - commission_amount
            
            # –ë–æ–Ω—É—Å—ã –∑–∞ –≤—ã—Å–æ–∫—É—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            performance_bonus = 0
            performance_rating = final_stats.get('performance', {}).get('performance_rating', 'average')
            
            if performance_rating == 'excellent':
                performance_bonus = base_amount * 0.02  # 2% –±–æ–Ω—É—Å –∑–∞ –æ—Ç–ª–∏—á–Ω—É—é —Ä–∞–±–æ—Ç—É
            elif performance_rating == 'good':
                performance_bonus = base_amount * 0.01  # 1% –±–æ–Ω—É—Å –∑–∞ —Ö–æ—Ä–æ—à—É—é —Ä–∞–±–æ—Ç—É
            
            final_payout = payout_amount + performance_bonus
            
            payout_details = {
                'base_amount': base_amount,
                'commission_rate': self.platform_commission_rate,
                'commission_amount': round(commission_amount, 2),
                'performance_bonus': round(performance_bonus, 2),
                'performance_rating': performance_rating,
                'net_payout': round(final_payout, 2),
                'calculated_at': datetime.now().isoformat()
            }
            
            logger.info(f"üí∞ –í—ã–ø–ª–∞—Ç–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞: {final_payout:.2f} —Ä—É–±. (–±–∞–∑–∞: {base_amount}, –∫–æ–º–∏—Å—Å–∏—è: {commission_amount:.2f}, –±–æ–Ω—É—Å: {performance_bonus:.2f})")
            
            return payout_details
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –≤—ã–ø–ª–∞—Ç—ã: {e}")
            return {
                'base_amount': 0,
                'commission_amount': 0,
                'net_payout': 0,
                'error': str(e)
            }
    
    async def process_payout(self, placement: Dict, payout_details: Dict) -> Dict:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–ø–ª–∞—Ç—É –≤–ª–∞–¥–µ–ª—å—Ü—É –∫–∞–Ω–∞–ª–∞"""
        from app.models.database import execute_db_query
        
        try:
            payout_amount = payout_details['net_payout']
            
            if payout_amount <= 0:
                return {'status': 'skipped', 'reason': 'zero_amount'}
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π
            import random
            timestamp = int(datetime.now().timestamp())
            random_suffix = random.randint(1000, 9999)
            
            payout_payment_id = f"COMPLETION_{placement['id']}_{timestamp}_{random_suffix}"
            commission_payment_id = f"COMMISSION_{placement['id']}_{timestamp}_{random_suffix}"
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤—ã–ø–ª–∞—Ç–µ
            payment_id = execute_db_query("""
                INSERT INTO payments (
                    id,
                    contract_id,
                    placement_id,
                    publisher_id,
                    advertiser_id,
                    amount,
                    status,
                    payment_method,
                    created_at,
                    processed_at,
                    completed_at
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                payout_payment_id,
                f"COMPLETION_CONTRACT_{placement['id']}_{random_suffix}",
                placement['id'],
                placement['channel_owner_id'],
                placement['advertiser_id'],
                payout_amount,
                'completed',
                'completion_payout',
                datetime.now().isoformat(),
                datetime.now().isoformat(),
                datetime.now().isoformat()
            ))
            
            # –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –∫–æ–º–∏—Å—Å–∏–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
            commission_payment_result = execute_db_query("""
                INSERT INTO payments (
                    id,
                    contract_id,
                    placement_id,
                    publisher_id,
                    advertiser_id,
                    amount,
                    status,
                    payment_method,
                    created_at,
                    processed_at,
                    completed_at
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                commission_payment_id,
                f"COMMISSION_CONTRACT_{placement['id']}_{random_suffix}",
                placement['id'],
                1,  # –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∫–∞–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—å
                placement['advertiser_id'],
                payout_details['commission_amount'],
                'completed',
                'platform_commission',
                datetime.now().isoformat(),
                datetime.now().isoformat(),
                datetime.now().isoformat()
            ))
            
            logger.info(f"üí∞ –í—ã–ø–ª–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {payout_amount:.2f} —Ä—É–±. –≤–ª–∞–¥–µ–ª—å—Ü—É –∫–∞–Ω–∞–ª–∞ {placement['channel_owner_id']}")
            
            return {
                'status': 'completed',
                'payment_id': payout_payment_id,
                'commission_payment_id': commission_payment_id,
                'amount': payout_amount,
                'processed_at': datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–ø–ª–∞—Ç—ã: {e}")
            return {
                'status': 'failed',
                'error': str(e)
            }
    
    async def mark_placement_completed(self, placement: Dict, final_stats: Dict, payout_details: Dict):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π"""
        from app.models.database import execute_db_query
        
        try:
            execute_db_query("""
                UPDATE offer_placements 
                SET status = 'completed',
                    actual_end_time = CURRENT_TIMESTAMP,
                    final_stats = ?,
                    final_payout = ?,
                    updated_at = CURRENT_TIMESTAMP
                WHERE id = ?
            """, (
                json.dumps(final_stats),
                payout_details['net_payout'],
                placement['id']
            ))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–Ω–∞–ª–∞
            execute_db_query("""
                UPDATE channels 
                SET completed_placements = COALESCE(completed_placements, 0) + 1,
                    total_earned = COALESCE(total_earned, 0) + ?,
                    updated_at = CURRENT_TIMESTAMP
                WHERE id = (
                    SELECT r.channel_id 
                    FROM offer_responses r 
                    WHERE r.id = ?
                )
            """, (payout_details['net_payout'], placement['proposal_id']))
            
            logger.info(f"‚úÖ –†–∞–∑–º–µ—â–µ–Ω–∏–µ {placement['id']} –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {e}")
    
    async def generate_final_report(self, placement: Dict, final_stats: Dict, payout_details: Dict) -> Dict:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –ø–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—é"""
        try:
            telegram_stats = final_stats.get('telegram', {})
            ereit_stats = final_stats.get('ereit', {})
            performance = final_stats.get('performance', {})
            duration = final_stats.get('placement_duration', {})
            
            report = {
                'placement_info': {
                    'id': placement['id'],
                    'title': placement['offer_title'],
                    'channel': f"@{placement['channel_username']}",
                    'channel_title': placement['channel_title'],
                    'post_url': placement['post_url'],
                    'duration': duration.get('duration_text', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                },
                'statistics': {
                    'views': telegram_stats.get('views', 0),
                    'reactions': telegram_stats.get('reactions', 0),
                    'shares': telegram_stats.get('shares', 0),
                    'comments': telegram_stats.get('comments', 0),
                    'clicks': ereit_stats.get('clicks', 0),
                    'unique_clicks': ereit_stats.get('unique_clicks', 0),
                    'conversions': ereit_stats.get('conversions', 0)
                },
                'performance_metrics': {
                    'ctr': performance.get('click_through_rate', 0),
                    'engagement_rate': performance.get('engagement_rate', 0),
                    'conversion_rate': performance.get('conversion_rate', 0),
                    'cost_per_click': performance.get('cost_per_click', 0),
                    'cost_per_view': performance.get('cost_per_view', 0),
                    'performance_rating': performance.get('performance_rating', 'average')
                },
                'financial': {
                    'total_cost': payout_details['base_amount'],
                    'commission': payout_details['commission_amount'],
                    'performance_bonus': payout_details.get('performance_bonus', 0),
                    'net_payout': payout_details['net_payout']
                },
                'generated_at': datetime.now().isoformat()
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            from app.models.database import execute_db_query
            
            execute_db_query("""
                CREATE TABLE IF NOT EXISTS placement_reports (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    placement_id INTEGER NOT NULL,
                    report_data TEXT NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (placement_id) REFERENCES offer_placements(id)
                )
            """)
            
            execute_db_query("""
                INSERT INTO placement_reports (placement_id, report_data)
                VALUES (?, ?)
            """, (placement['id'], json.dumps(report)))
            
            logger.info(f"üìã –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è {placement['id']}")
            
            return report
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            return {'error': str(e)}
    
    async def send_completion_notifications(self, placement: Dict, final_stats: Dict, payout_details: Dict, final_report: Dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        try:
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—é
            await self.notify_advertiser_completion(placement, final_stats, final_report)
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É –∫–∞–Ω–∞–ª–∞
            await self.notify_channel_owner_payout(placement, final_stats, payout_details, final_report)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
    
    async def notify_advertiser_completion(self, placement: Dict, final_stats: Dict, final_report: Dict):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        try:
            from app.services.telegram_service import TelegramService
            telegram_service = TelegramService()
            
            stats = final_report.get('statistics', {})
            metrics = final_report.get('performance_metrics', {})
            
            ctr_text = f"{metrics.get('ctr', 0)}%" if metrics.get('ctr') else "–Ω/–¥"
            cost_per_click = metrics.get('cost_per_click', 0)
            performance_rating = metrics.get('performance_rating', 'average')
            
            # –≠–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            rating_emoji = {
                'excellent': 'üåü',
                'good': 'üëç',
                'average': 'üëå',
                'poor': 'üòê'
            }.get(performance_rating, 'üìä')
            
            message = f"""‚úÖ <b>–†–∞–∑–º–µ—â–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>

üì∫ <b>–ö–∞–Ω–∞–ª:</b> @{placement['channel_username']}
üìã <b>–û—Ñ—Ñ–µ—Ä:</b> {placement['offer_title']}
üîó <b>–ü–æ—Å—Ç:</b> {placement['post_url']}

üìä <b>–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
üëÅ <b>–ü—Ä–æ—Å–º–æ—Ç—Ä—ã:</b> {stats.get('views', 0):,}
‚ù§Ô∏è <b>–†–µ–∞–∫—Ü–∏–∏:</b> {stats.get('reactions', 0)}
üîÑ <b>–†–µ–ø–æ—Å—Ç—ã:</b> {stats.get('shares', 0)}
üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:</b> {stats.get('comments', 0)}
üñ± <b>–ö–ª–∏–∫–∏:</b> {stats.get('clicks', 0)} ({ctr_text} CTR)
üéØ <b>–ö–æ–Ω–≤–µ—Ä—Å–∏–∏:</b> {stats.get('conversions', 0)}

üí∞ <b>–≠–∫–æ–Ω–æ–º–∏–∫–∞:</b>
üíµ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –∫–ª–∏–∫–∞:</b> {cost_per_click:.2f} —Ä—É–±.
üìà <b>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> {rating_emoji} {performance_rating.title()}

üìà <b>–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏</b>

üéØ <b>–•–æ—Ç–∏—Ç–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –µ—â–µ?</b> /create_offer"""
            
            await telegram_service.send_message(
                chat_id=placement['advertiser_telegram_id'],
                text=message,
                parse_mode='HTML'
            )
            
            logger.info(f"üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—é {placement['advertiser_telegram_id']}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è: {e}")
    
    async def notify_channel_owner_payout(self, placement: Dict, final_stats: Dict, payout_details: Dict, final_report: Dict):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞–Ω–∞–ª–∞ –æ –≤—ã–ø–ª–∞—Ç–µ"""
        try:
            from app.services.telegram_service import TelegramService
            telegram_service = TelegramService()
            
            stats = final_report.get('statistics', {})
            metrics = final_report.get('performance_metrics', {})
            
            ctr = metrics.get('ctr', 0)
            payout_amount = payout_details['net_payout']
            commission_amount = payout_details['commission_amount']
            base_amount = payout_details['base_amount']
            performance_bonus = payout_details.get('performance_bonus', 0)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç—ã
            ctr_rating = "–æ—Ç–ª–∏—á–Ω—ã–π" if ctr > 2.0 else "—Ö–æ—Ä–æ—à–∏–π" if ctr > 1.0 else "—Å—Ä–µ–¥–Ω–∏–π"
            
            bonus_text = f"\nüéÅ <b>–ë–æ–Ω—É—Å –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ:</b> +{performance_bonus:.2f} —Ä—É–±." if performance_bonus > 0 else ""
            
            message = f"""üí∞ <b>–í—ã–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞!</b>

üì∫ <b>–ó–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≤</b> @{placement['channel_username']}
üìã <b>–û—Ñ—Ñ–µ—Ä:</b> {placement['offer_title']}

üíµ <b>–î–µ—Ç–∞–ª–∏ –≤—ã–ø–ª–∞—Ç—ã:</b>
üí∞ <b>–ë–∞–∑–æ–≤–∞—è —Å—É–º–º–∞:</b> {base_amount:.2f} —Ä—É–±.
üèõ <b>–ö–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:</b> -{commission_amount:.2f} —Ä—É–±. ({payout_details['commission_rate']*100}%){bonus_text}
‚úÖ <b>–ö –≤—ã–ø–ª–∞—Ç–µ:</b> {payout_amount:.2f} —Ä—É–±.

üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>
üëÅ <b>–ü—Ä–æ—Å–º–æ—Ç—Ä—ã:</b> {stats.get('views', 0):,}
üñ± <b>–ö–ª–∏–∫–∏:</b> {stats.get('clicks', 0)} ({ctr}% CTR - {ctr_rating} —Ä–µ–∑—É–ª—å—Ç–∞—Ç!)
‚ù§Ô∏è <b>–†–µ–∞–∫—Ü–∏–∏:</b> {stats.get('reactions', 0)}

üéØ <b>–ù–æ–≤—ã–µ –æ—Ñ—Ñ–µ—Ä—ã:</b> /find_offers
üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞:</b> /my_stats"""
            
            await telegram_service.send_message(
                chat_id=placement['channel_owner_telegram_id'],
                text=message,
                parse_mode='HTML'
            )
            
            logger.info(f"üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–ø–ª–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –∫–∞–Ω–∞–ª–∞ {placement['channel_owner_telegram_id']}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞–Ω–∞–ª–∞: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
async def complete_placements():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏–π"""
    service = PlacementCompletionService()
    results = await service.check_placements_for_completion()
    return results


if __name__ == "__main__":
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫
    async def test_completion():
        results = await complete_placements()
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏–π: {results}")
    
    asyncio.run(test_completion())