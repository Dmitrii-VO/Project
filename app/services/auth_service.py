# app/services/auth_service.py
# –ò–°–ü–†–ê–í–õ–ï–ù–û: —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Telegram, –ë–ï–ó —Ä–∞–±–æ—Ç—ã —Å –ë–î

import os
import json
import logging
from typing import Optional
from urllib.parse import unquote
from flask import request, session
from app.config.telegram_config import AppConfig

logger = logging.getLogger(__name__)


class AuthService:
    """–°–µ—Ä–≤–∏—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram"""

    def get_current_user_id(self) -> Optional[int]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ Telegram User ID
        
        –¢–û–õ–¨–ö–û –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è - –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ë–î!
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç telegram_id –∏–ª–∏ None.
        """
        
        # 1. –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        user_id_header = request.headers.get('X-Telegram-User-Id')
        if user_id_header:
            try:
                user_id = int(user_id_header)
                logger.debug(f"üîç User ID –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ: {user_id}")
                return user_id
            except (ValueError, TypeError):
                logger.warning(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç User ID –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ: {user_id_header}")

        # 2. –ò–∑ POST –¥–∞–Ω–Ω—ã—Ö
        if request.method == 'POST' and request.is_json:
            try:
                data = request.get_json()
                if data and 'telegram_id' in data:
                    user_id = int(data['telegram_id'])
                    logger.debug(f"üîç User ID –Ω–∞–π–¥–µ–Ω –≤ POST –¥–∞–Ω–Ω—ã—Ö: {user_id}")
                    return user_id
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ User ID –∏–∑ POST: {e}")

        # 3. –ò–∑ GET –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        user_id_param = request.args.get('telegram_id')
        if user_id_param:
            try:
                user_id = int(user_id_param)
                logger.debug(f"üîç User ID –Ω–∞–π–¥–µ–Ω –≤ GET –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö: {user_id}")
                return user_id
            except (ValueError, TypeError):
                logger.warning(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç User ID –≤ GET –ø–∞—Ä–∞–º–µ—Ç—Ä–µ: {user_id_param}")

        # 4. –ò–∑ —Å–µ—Å—Å–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        session_user_id = session.get('telegram_id')
        if session_user_id:
            try:
                user_id = int(session_user_id)
                logger.debug(f"üîç User ID –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Å—Å–∏–∏: {user_id}")
                return user_id
            except (ValueError, TypeError):
                logger.warning(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç User ID –≤ —Å–µ—Å—Å–∏–∏: {session_user_id}")

        # 5. –†–ï–ñ–ò–ú –†–ê–ó–†–ê–ë–û–¢–ö–ò - —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        if self._is_development_mode():
            fallback_user_id = self._get_development_user_id()
            if fallback_user_id:
                logger.warning(f"üß™ –†–ï–ñ–ò–ú –†–ê–ó–†–ê–ë–û–¢–ö–ò: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è User ID {fallback_user_id}")
                logger.warning("üß™ –í PRODUCTION —ç—Ç–æ–≥–æ –±—ã—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–æ!")
                return fallback_user_id

        # 6. –õ–û–ì–ò–†–£–ï–ú –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        self._log_missing_auth()
        
        # 7. –í–û–ó–í–†–ê–©–ê–ï–ú None - –ù–ï–¢ fallback –Ω–∞ –∞–¥–º–∏–Ω–∞!
        return None

    def validate_telegram_data(self, init_data_raw: str) -> Optional[int]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram WebApp"""
        try:
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–ª–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å HMAC)
            if not init_data_raw or 'user=' not in init_data_raw:
                return None

            # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ initData
            for param in init_data_raw.split('&'):
                if param.startswith('user='):
                    user_data = unquote(param[5:])
                    try:
                        user_info = json.loads(user_data)
                        if 'id' in user_info:
                            return int(user_info['id'])
                    except:
                        pass
            return None

        except Exception as e:
            logger.error(f"Error validating Telegram data: {e}")
            return None

    def log_user_access(self, telegram_id: int, endpoint: str, success: bool = True, error: str = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        log_entry = {
            'timestamp': self._get_current_timestamp(),
            'telegram_id': telegram_id,
            'endpoint': endpoint,
            'success': success,
            'error': error,
            'ip': request.remote_addr,
            'user_agent': request.headers.get('User-Agent', '')
        }

        if success:
            logger.info(f"User access: {telegram_id} -> {endpoint}")
        else:
            logger.warning(f"Failed user access: {telegram_id} -> {endpoint}, Error: {error}")

    def _is_development_mode(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
        return (
            AppConfig.DEBUG and 
            os.environ.get('DEBUG_AUTH', 'false').lower() == 'true'
        )

    def _get_development_user_id(self) -> Optional[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ User ID –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
        # –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        debug_user_id = os.environ.get('DEBUG_USER_ID')
        if debug_user_id:
            try:
                return int(debug_user_id)
            except:
                pass
        
        # –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ debug —Ä–µ–∂–∏–º–µ
        return AppConfig.YOUR_TELEGRAM_ID

    def _log_missing_auth(self) -> None:
        """–î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        logger.info("üîç –û–¢–õ–ê–î–ö–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò:")
        logger.info(f"   üìç –ü—É—Ç—å: {request.path}")
        logger.info(f"   üìã –ú–µ—Ç–æ–¥: {request.method}")
        logger.info(f"   üåê IP: {request.remote_addr}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        auth_headers = {
            'X-Telegram-User-Id': request.headers.get('X-Telegram-User-Id'),
            'X-Telegram-Username': request.headers.get('X-Telegram-Username'),
            'Content-Type': request.headers.get('Content-Type'),
            'User-Agent': request.headers.get('User-Agent', '')[:50] + '...'
        }
        logger.info(f"   üì® –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {auth_headers}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º POST –¥–∞–Ω–Ω—ã–µ
        if request.method == 'POST' and request.is_json:
            try:
                data = request.get_json() or {}
                has_telegram_data = bool(
                    data.get('telegram_id') or 
                    data.get('user', {}).get('id') or 
                    data.get('initData')
                )
                logger.info(f"   üì§ –ï—Å—Ç—å Telegram –¥–∞–Ω–Ω—ã–µ –≤ POST: {has_telegram_data}")
            except:
                logger.info(f"   üì§ –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ POST –¥–∞–Ω–Ω—ã—Ö")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º GET –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        has_get_user_id = bool(request.args.get('telegram_id'))
        logger.info(f"   üì• –ï—Å—Ç—å telegram_id –≤ GET: {has_get_user_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é
        has_session_user_id = bool(session.get('telegram_id'))
        logger.info(f"   üç™ –ï—Å—Ç—å telegram_id –≤ —Å–µ—Å—Å–∏–∏: {has_session_user_id}")

    def _get_current_timestamp(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ ISO —Ñ–æ—Ä–º–∞—Ç–µ"""
        from datetime import datetime
        return datetime.now().isoformat()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
auth_service = AuthService()