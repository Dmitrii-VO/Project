# app/services/auth_service.py
# –ï–î–ò–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò - –ê–î–ï–ö–í–ê–¢–ù–ê–Ø –í–ï–†–°–ò–Ø

import os
import json
import logging
from typing import Optional
from urllib.parse import unquote
from flask import request, session
from app.config.telegram_config import AppConfig

logger = logging.getLogger(__name__)


class AuthService:
    """–ï–¥–∏–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram"""
    
    def __init__(self):
        self._request_cache = {}
    
    def get_current_user_id(self) -> Optional[int]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ Telegram User ID - –ï–î–ò–ù–ê–Ø –¢–û–ß–ö–ê –í–•–û–î–ê
        
        –ö—ç—à–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç telegram_id (int) –∏–ª–∏ None.
        """
        
        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ä–∞–º–∫–∞—Ö –∑–∞–ø—Ä–æ—Å–∞
        cache_key = f"{id(request)}_{request.method}_{request.path}"
        if cache_key in self._request_cache:
            return self._request_cache[cache_key]
        
        user_id = self._get_user_id_from_sources()
        self._request_cache[cache_key] = user_id
        
        if user_id:
            logger.debug(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: telegram_id={user_id}")
        else:
            logger.debug(f"‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è {request.method} {request.path}")
            
        return user_id
    
    def _get_user_id_from_sources(self) -> Optional[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ User ID –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É"""
        
        # 1. –ò–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (–æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–± –¥–ª—è API)
        user_id = self._get_user_id_from_headers()
        if user_id:
            return user_id

        # 2. –ò–∑ POST –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è —Ñ–æ—Ä–º)
        user_id = self._get_user_id_from_post()
        if user_id:
            return user_id

        # 3. –ò–∑ GET –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–¥–ª—è —Å—Å—ã–ª–æ–∫)
        user_id = self._get_user_id_from_get()
        if user_id:
            return user_id

        # 4. –ò–∑ —Å–µ—Å—Å–∏–∏ (–¥–ª—è web-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞)
        user_id = self._get_user_id_from_session()
        if user_id:
            return user_id

        # 5. –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        if self._is_development_mode():
            user_id = self._get_development_user_id()
            if user_id:
                logger.warning(f"üß™ –†–ï–ñ–ò–ú –†–ê–ó–†–ê–ë–û–¢–ö–ò: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è User ID {user_id}")
                return user_id

        # 6. –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        self._log_missing_auth()
        return None
    
    def _get_user_id_from_headers(self) -> Optional[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ User ID –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ HTTP"""
        headers_to_check = [
            'X-Telegram-User-Id',
            'X-User-Id',
            'Authorization-User-Id',
            'telegram-user-id',
            'x-telegram-user-id',
            'x-user-id'
        ]
        
        for header in headers_to_check:
            value = request.headers.get(header)
            if value:
                try:
                    user_id = int(value)
                    logger.debug(f"üîç User ID –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ {header}: {user_id}")
                    return user_id
                except (ValueError, TypeError):
                    logger.warning(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç User ID –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ {header}: {value}")
        return None
    
    def _get_user_id_from_post(self) -> Optional[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ User ID –∏–∑ POST –¥–∞–Ω–Ω—ã—Ö"""
        if request.method != 'POST':
            return None
            
        try:
            if request.is_json:
                data = request.get_json() or {}
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏–π –ø–æ–ª–µ–π
                for field in ['telegram_id', 'user_id', 'id']:
                    if field in data:
                        user_id = int(data[field])
                        logger.debug(f"üîç User ID –Ω–∞–π–¥–µ–Ω –≤ POST.{field}: {user_id}")
                        return user_id
                        
                # –í–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
                if 'user' in data and isinstance(data['user'], dict):
                    if 'id' in data['user']:
                        user_id = int(data['user']['id'])
                        logger.debug(f"üîç User ID –Ω–∞–π–¥–µ–Ω –≤ POST.user.id: {user_id}")
                        return user_id
                        
            elif request.form:
                # –î–∞–Ω–Ω—ã–µ –∏–∑ form-data
                for field in ['telegram_id', 'user_id', 'id']:
                    if field in request.form:
                        user_id = int(request.form[field])
                        logger.debug(f"üîç User ID –Ω–∞–π–¥–µ–Ω –≤ FORM.{field}: {user_id}")
                        return user_id
                        
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ User ID –∏–∑ POST: {e}")
        return None
    
    def _get_user_id_from_get(self) -> Optional[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ User ID –∏–∑ GET –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        params_to_check = ['telegram_id', 'user_id', 'id']
        
        for param in params_to_check:
            value = request.args.get(param)
            if value:
                try:
                    user_id = int(value)
                    logger.debug(f"üîç User ID –Ω–∞–π–¥–µ–Ω –≤ GET.{param}: {user_id}")
                    return user_id
                except (ValueError, TypeError):
                    logger.warning(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç User ID –≤ GET.{param}: {value}")
        return None
    
    def _get_user_id_from_session(self) -> Optional[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ User ID –∏–∑ —Å–µ—Å—Å–∏–∏"""
        session_keys = ['telegram_id', 'user_id', 'id']
        
        for key in session_keys:
            value = session.get(key)
            if value:
                try:
                    user_id = int(value)
                    logger.debug(f"üîç User ID –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Å—Å–∏–∏.{key}: {user_id}")
                    return user_id
                except (ValueError, TypeError):
                    logger.warning(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç User ID –≤ —Å–µ—Å—Å–∏–∏.{key}: {value}")
        return None

    def validate_telegram_data(self, init_data_raw: str) -> Optional[int]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram WebApp"""
        try:
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–ª–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å HMAC)
            if not init_data_raw or 'user=' not in init_data_raw:
                return None

            # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ initData
            for param in init_data_raw.split('&'):
                if param.startswith('user='):
                    user_data = unquote(param[5:])
                    try:
                        user_info = json.loads(user_data)
                        if 'id' in user_info:
                            return int(user_info['id'])
                    except:
                        pass
            return None

        except Exception as e:
            logger.error(f"Error validating Telegram data: {e}")
            return None

    def log_user_access(self, telegram_id: int, endpoint: str, success: bool = True, error: str = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        log_entry = {
            'timestamp': self._get_current_timestamp(),
            'telegram_id': telegram_id,
            'endpoint': endpoint,
            'success': success,
            'error': error,
            'ip': request.remote_addr,
            'user_agent': request.headers.get('User-Agent', '')
        }

        if success:
            logger.info(f"User access: {telegram_id} -> {endpoint}")
        else:
            logger.warning(f"Failed user access: {telegram_id} -> {endpoint}, Error: {error}")

    def get_user_db_id(self) -> Optional[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        telegram_id = self.get_current_user_id()
        if not telegram_id:
            return None
            
        try:
            # –õ–µ–Ω–∏–≤—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            from app.models.database import execute_db_query
            
            user = execute_db_query(
                'SELECT id FROM users WHERE telegram_id = ?',
                (telegram_id,),
                fetch_one=True
            )
            
            if user:
                return user['id']
            else:
                logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram_id {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è user_db_id: {e}")
            return None
    
    def ensure_user_exists(self, username: str = None, first_name: str = None) -> Optional[int]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        telegram_id = self.get_current_user_id()
        if not telegram_id:
            return None
            
        try:
            from app.models.database import execute_db_query
            from datetime import datetime
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
            user = execute_db_query(
                'SELECT id FROM users WHERE telegram_id = ?',
                (telegram_id,),
                fetch_one=True
            )
            
            if not user:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_id = execute_db_query(
                    '''INSERT INTO users (telegram_id, username, first_name, created_at, updated_at)
                       VALUES (?, ?, ?, ?, ?)''',
                    (
                        telegram_id,
                        username or f'user_{telegram_id}',
                        first_name or 'Telegram User',
                        datetime.now().isoformat(),
                        datetime.now().isoformat()
                    )
                )
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: telegram_id={telegram_id}, db_id={user_id}")
                return user_id
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
                if username or first_name:
                    execute_db_query(
                        '''UPDATE users SET username = COALESCE(?, username), 
                                           first_name = COALESCE(?, first_name),
                                           updated_at = ?
                           WHERE telegram_id = ?''',
                        (username, first_name, datetime.now().isoformat(), telegram_id)
                    )
                return user['id']
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return None
    
    def _is_development_mode(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
        return (
            AppConfig.DEBUG and 
            os.environ.get('DEBUG_AUTH', 'false').lower() == 'true'
        )

    def _get_development_user_id(self) -> Optional[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ User ID –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
        # –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        debug_user_id = os.environ.get('DEBUG_USER_ID')
        if debug_user_id:
            try:
                return int(debug_user_id)
            except:
                pass
        
        # –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ debug —Ä–µ–∂–∏–º–µ
        return AppConfig.YOUR_TELEGRAM_ID

    def _log_missing_auth(self) -> None:
        """–î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        if not AppConfig.DEBUG:
            return  # –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
            
        logger.debug("üîç –û–¢–õ–ê–î–ö–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò:")
        logger.debug(f"   üìç –ü—É—Ç—å: {request.path}")
        logger.debug(f"   üìã –ú–µ—Ç–æ–¥: {request.method}")
        logger.debug(f"   üåê IP: {request.remote_addr}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        auth_headers = {
            'X-Telegram-User-Id': request.headers.get('X-Telegram-User-Id'),
            'X-User-Id': request.headers.get('X-User-Id'),
            'Authorization': request.headers.get('Authorization', '')[:20] + '...' if request.headers.get('Authorization') else None,
            'Content-Type': request.headers.get('Content-Type'),
            'User-Agent': request.headers.get('User-Agent', '')[:50] + '...'
        }
        logger.debug(f"   üì® –ó–∞–≥–æ–ª–æ–≤–∫–∏: {auth_headers}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º POST –¥–∞–Ω–Ω—ã–µ
        if request.method == 'POST':
            try:
                if request.is_json:
                    data = request.get_json() or {}
                    has_telegram_data = bool(
                        data.get('telegram_id') or 
                        data.get('user_id') or
                        data.get('user', {}).get('id') or 
                        data.get('initData')
                    )
                    logger.debug(f"   üì§ –ï—Å—Ç—å ID –≤ POST JSON: {has_telegram_data}")
                elif request.form:
                    has_form_data = bool(
                        request.form.get('telegram_id') or
                        request.form.get('user_id')
                    )
                    logger.debug(f"   üì§ –ï—Å—Ç—å ID –≤ POST form: {has_form_data}")
            except:
                logger.debug(f"   üì§ –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ POST –¥–∞–Ω–Ω—ã—Ö")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º GET –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        has_get_user_id = bool(request.args.get('telegram_id') or request.args.get('user_id'))
        logger.debug(f"   üì• –ï—Å—Ç—å ID –≤ GET: {has_get_user_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é
        has_session_user_id = bool(session.get('telegram_id') or session.get('user_id'))
        logger.debug(f"   üç™ –ï—Å—Ç—å ID –≤ —Å–µ—Å—Å–∏–∏: {has_session_user_id}")

    def _get_current_timestamp(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ ISO —Ñ–æ—Ä–º–∞—Ç–µ"""
        from datetime import datetime
        return datetime.now().isoformat()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä - –µ–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –¥–æ—Å—Ç—É–ø–∞
auth_service = AuthService()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def get_current_user_id() -> Optional[int]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return auth_service.get_current_user_id()

def get_user_db_id() -> Optional[int]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    return auth_service.get_user_db_id()

def ensure_user_exists(username: str = None, first_name: str = None) -> Optional[int]:
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    return auth_service.ensure_user_exists(username, first_name)