#!/usr/bin/env python3
"""
–°–µ—Ä–≤–∏—Å —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
"""

import logging
import asyncio
import aiohttp
import re
import json
from datetime import datetime, timedelta
from typing import Dict, List, Optional

logger = logging.getLogger(__name__)


class StatsCollector:
    """–°–±–æ—Ä—â–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å—Ç–æ–≤"""
    
    def __init__(self):
        self.session = None
        
    async def collect_placement_stats(self) -> List[Dict]:
        """–°–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–∑–º–µ—â–µ–Ω–∏–π"""
        from app.models import execute_db_query
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        active_placements = execute_db_query("""
            SELECT p.*, 
                   r.channel_username,
                   r.channel_title,
                   o.title as offer_title
            FROM offer_placements p
            JOIN offer_responses r ON p.response_id = r.id
            JOIN offers o ON r.offer_id = o.id
            WHERE p.status = 'active'
            AND p.post_url IS NOT NULL
        """, fetch_all=True)
        
        results = []
        
        async with aiohttp.ClientSession() as session:
            self.session = session
            
            for placement in active_placements:
                try:
                    logger.info(f"üìä –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è {placement['id']}")
                    
                    stats = await self.collect_post_stats(placement)
                    
                    if stats:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ë–î
                        await self.save_stats_to_db(placement['id'], stats)
                        results.append({
                            'placement_id': placement['id'],
                            'stats': stats,
                            'status': 'success'
                        })
                    else:
                        results.append({
                            'placement_id': placement['id'],
                            'status': 'failed'
                        })
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è {placement['id']}: {e}")
                    results.append({
                        'placement_id': placement['id'],
                        'status': 'error',
                        'error': str(e)
                    })
        
        return results
    
    async def collect_post_stats(self, placement: Dict) -> Optional[Dict]:
        """–°–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
        post_url = placement.get('post_url')
        if not post_url:
            return None
            
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ URL
        url_info = self.parse_post_url(post_url)
        if not url_info:
            return None
            
        channel_username = url_info['channel']
        message_id = url_info['message_id']
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        stats = {
            'views': 0,
            'reactions': 0,
            'shares': 0,
            'comments': 0,
            'collected_at': datetime.now().isoformat(),
            'source': 'telegram_web'
        }
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Telegram
        web_stats = await self.get_telegram_web_stats(channel_username, message_id)
        if web_stats:
            stats.update(web_stats)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        alt_stats = await self.get_alternative_stats(channel_username, message_id)
        if alt_stats:
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É –±–æ–ª–µ–µ —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            for key, value in alt_stats.items():
                if key in stats and value > stats[key]:
                    stats[key] = value
                elif key not in stats:
                    stats[key] = value
        
        return stats
    
    def parse_post_url(self, post_url: str) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏—Ç URL –ø–æ—Å—Ç–∞ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∫–∞–Ω–∞–ª –∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è"""
        pattern = r'https://t\.me/([^/]+)/(\d+)'
        match = re.match(pattern, post_url)
        
        if match:
            return {
                'channel': match.group(1),
                'message_id': int(match.group(2))
            }
        return None
    
    async def get_telegram_web_stats(self, channel_username: str, message_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Telegram"""
        try:
            url = f"https://t.me/{channel_username}/{message_id}?embed=1"
            
            async with self.session.get(url) as response:
                if response.status != 200:
                    return None
                
                html = await response.text()
                
                # –ü–∞—Ä—Å–∏–º HTML –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                stats = self.parse_telegram_html_stats(html)
                return stats
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ–±-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è @{channel_username}/{message_id}: {e}")
            return None
    
    def parse_telegram_html_stats(self, html: str) -> Dict:
        """–ü–∞—Ä—Å–∏—Ç HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        stats = {
            'views': 0,
            'reactions': 0,
            'shares': 0,
            'comments': 0
        }
        
        try:
            # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏
            views_patterns = [
                r'(\d+(?:[\.,]\d+)?[KMB]?)\s*(?:views?|–ø—Ä–æ—Å–º–æ—Ç—Ä)',
                r'tgme_widget_message_views[^>]*>([^<]+)',
                r'message_views[^>]*>.*?(\d+(?:[\.,]\d+)?[KMB]?)',
                r'data-views="(\d+)"'
            ]
            
            for pattern in views_patterns:
                views_match = re.search(pattern, html, re.IGNORECASE)
                if views_match:
                    views_text = views_match.group(1).strip()
                    stats['views'] = self.parse_number_with_suffix(views_text)
                    break
            
            # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Ä–µ–∞–∫—Ü–∏–π
            reactions_patterns = [
                r'(\d+)\s*(?:reactions?|—Ä–µ–∞–∫—Ü)',
                r'tgme_widget_message_reactions[^>]*>.*?(\d+)',
                r'reactions_count[^>]*>(\d+)',
                r'emoji_button[^>]*>.*?(\d+)'
            ]
            
            for pattern in reactions_patterns:
                reactions_match = re.search(pattern, html, re.IGNORECASE)
                if reactions_match:
                    stats['reactions'] = int(reactions_match.group(1))
                    break
            
            # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Ä–µ–ø–æ—Å—Ç–æ–≤/–ø–µ—Ä–µ—Å—ã–ª–æ–∫
            shares_patterns = [
                r'(\d+)\s*(?:shares?|forwards?|—Ä–µ–ø–æ—Å—Ç|–ø–µ—Ä–µ—Å—ã–ª)',
                r'tgme_widget_message_forwarded[^>]*>.*?(\d+)',
                r'forwards_count[^>]*>(\d+)',
                r'share_button[^>]*>.*?(\d+)'
            ]
            
            for pattern in shares_patterns:
                shares_match = re.search(pattern, html, re.IGNORECASE)
                if shares_match:
                    stats['shares'] = int(shares_match.group(1))
                    break
            
            # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            comments_patterns = [
                r'(\d+)\s*(?:comments?|–∫–æ–º–º–µ–Ω—Ç|–æ—Ç–≤–µ—Ç)',
                r'tgme_widget_message_reply[^>]*>.*?(\d+)',
                r'comments_count[^>]*>(\d+)',
                r'reply_button[^>]*>.*?(\d+)'
            ]
            
            for pattern in comments_patterns:
                comments_match = re.search(pattern, html, re.IGNORECASE)
                if comments_match:
                    stats['comments'] = int(comments_match.group(1))
                    break
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ JSON-LD –∏–ª–∏ meta-–¥–∞–Ω–Ω—ã—Ö
            additional_stats = self.parse_metadata_stats(html)
            if additional_stats:
                for key, value in additional_stats.items():
                    if value > stats.get(key, 0):
                        stats[key] = value
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        
        return stats
    
    def parse_metadata_stats(self, html: str) -> Dict:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        stats = {}
        
        try:
            # –ü–æ–∏—Å–∫ JSON-LD –¥–∞–Ω–Ω—ã—Ö
            json_ld_pattern = r'<script type="application/ld\+json">(.*?)</script>'
            json_matches = re.findall(json_ld_pattern, html, re.DOTALL)
            
            for json_text in json_matches:
                try:
                    data = json.loads(json_text)
                    if isinstance(data, dict):
                        # –ò—â–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                        if 'interactionStatistic' in data:
                            interaction_stats = data['interactionStatistic']
                            if isinstance(interaction_stats, list):
                                for stat in interaction_stats:
                                    if stat.get('@type') == 'InteractionCounter':
                                        interaction_type = stat.get('interactionType', {}).get('@type', '')
                                        count = stat.get('userInteractionCount', 0)
                                        
                                        if 'ViewAction' in interaction_type:
                                            stats['views'] = max(stats.get('views', 0), int(count))
                                        elif 'LikeAction' in interaction_type:
                                            stats['reactions'] = max(stats.get('reactions', 0), int(count))
                                        elif 'ShareAction' in interaction_type:
                                            stats['shares'] = max(stats.get('shares', 0), int(count))
                                        elif 'CommentAction' in interaction_type:
                                            stats['comments'] = max(stats.get('comments', 0), int(count))
                except json.JSONDecodeError:
                    continue
            
            # –ü–æ–∏—Å–∫ Open Graph –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            og_patterns = {
                'views': r'<meta property="og:views" content="(\d+)"',
                'reactions': r'<meta property="og:reactions" content="(\d+)"',
                'shares': r'<meta property="og:shares" content="(\d+)"',
                'comments': r'<meta property="og:comments" content="(\d+)"'
            }
            
            for stat_type, pattern in og_patterns.items():
                match = re.search(pattern, html, re.IGNORECASE)
                if match:
                    stats[stat_type] = max(stats.get(stat_type, 0), int(match.group(1)))
            
            # –ü–æ–∏—Å–∫ Twitter Card –¥–∞–Ω–Ω—ã—Ö
            twitter_patterns = {
                'views': r'<meta name="twitter:views" content="(\d+)"',
                'reactions': r'<meta name="twitter:reactions" content="(\d+)"'
            }
            
            for stat_type, pattern in twitter_patterns.items():
                match = re.search(pattern, html, re.IGNORECASE)
                if match:
                    stats[stat_type] = max(stats.get(stat_type, 0), int(match.group(1)))
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")
        
        return stats
    
    def parse_number_with_suffix(self, number_str: str) -> int:
        """–ü–∞—Ä—Å–∏—Ç —á–∏—Å–ª–∞ —Å —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏ K, M, B"""
        number_str = number_str.upper().strip()
        
        if number_str.endswith('K'):
            return int(float(number_str[:-1]) * 1000)
        elif number_str.endswith('M'):
            return int(float(number_str[:-1]) * 1000000)
        elif number_str.endswith('B'):
            return int(float(number_str[:-1]) * 1000000000)
        else:
            return int(float(number_str))
    
    async def get_alternative_stats(self, channel_username: str, message_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –¥—Ä—É–≥–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        # –ù–∞–ø—Ä–∏–º–µ—Ä, TGStat, Telemetr, —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä—ã –∏ —Ç.–¥.
        
        stats = {}
        
        # –ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ TGStat API (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        tgstat_stats = await self.get_tgstat_stats(channel_username, message_id)
        if tgstat_stats:
            stats.update(tgstat_stats)
        
        return stats if stats else None
    
    async def get_tgstat_stats(self, channel_username: str, message_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ TGStat API (–ø—Ä–∏–º–µ—Ä)"""
        try:
            # –≠—Ç–æ –ø—Ä–∏–º–µ—Ä - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–µ–Ω API –∫–ª—é—á –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
            # url = f"https://api.tgstat.ru/channels/posts?channel={channel_username}&message_id={message_id}"
            # headers = {'Authorization': 'Bearer YOUR_API_KEY'}
            
            # async with self.session.get(url, headers=headers) as response:
            #     if response.status == 200:
            #         data = await response.json()
            #         return self.parse_tgstat_response(data)
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è TGStat —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return None
    
    async def save_stats_to_db(self, placement_id: int, stats: Dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        from app.models import execute_db_query
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            execute_db_query("""
                INSERT INTO placement_statistics (
                    placement_id,
                    views_count,
                    reactions_count,
                    shares_count,
                    comments_count,
                    collected_at,
                    source,
                    raw_data,
                    created_at
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP)
            """, (
                placement_id,
                stats.get('views', 0),
                stats.get('reactions', 0),
                stats.get('shares', 0),
                stats.get('comments', 0),
                stats.get('collected_at'),
                stats.get('source', 'unknown'),
                json.dumps(stats)
            ))
            
            logger.info(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è {placement_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è {placement_id}: {e}")
    
    async def calculate_performance_metrics(self, placement_id: int) -> Dict:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        from app.models import execute_db_query
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        stats_history = execute_db_query("""
            SELECT * FROM placement_statistics 
            WHERE placement_id = ?
            ORDER BY collected_at ASC
        """, (placement_id,), fetch_all=True)
        
        if not stats_history:
            return {}
        
        latest_stats = stats_history[-1]
        first_stats = stats_history[0]
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏
        placement_info = execute_db_query("""
            SELECT p.*, r.channel_subscribers, o.price
            FROM offer_placements p
            JOIN offer_responses r ON p.response_id = r.id
            JOIN offers o ON r.offer_id = o.id
            WHERE p.id = ?
        """, (placement_id,), fetch_one=True)
        
        if not placement_info:
            return {}
        
        # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        total_views = latest_stats['views_count']
        total_reactions = latest_stats['reactions_count']
        total_shares = latest_stats['shares_count']
        channel_subscribers = placement_info['channel_subscribers'] or 1
        cost = placement_info['price'] or placement_info['funds_reserved'] or 0
        
        metrics = {
            'total_views': total_views,
            'total_reactions': total_reactions,
            'total_shares': total_shares,
            'reach_percentage': round((total_views / channel_subscribers) * 100, 2) if channel_subscribers > 0 else 0,
            'engagement_rate': round((total_reactions / total_views) * 100, 2) if total_views > 0 else 0,
            'cpm': round((cost / total_views) * 1000, 2) if total_views > 0 else 0,  # Cost per mille
            'cost_per_reaction': round(cost / total_reactions, 2) if total_reactions > 0 else 0,
            'viral_coefficient': round(total_shares / total_views, 4) if total_views > 0 else 0,
            'calculated_at': datetime.now().isoformat()
        }
        
        return metrics


# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
def create_stats_tables():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    from app.models import execute_db_query
    
    # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–π
    execute_db_query("""
        CREATE TABLE IF NOT EXISTS placement_statistics (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            placement_id INTEGER NOT NULL,
            views_count INTEGER DEFAULT 0,
            reactions_count INTEGER DEFAULT 0,
            shares_count INTEGER DEFAULT 0,
            comments_count INTEGER DEFAULT 0,
            collected_at TIMESTAMP,
            source TEXT DEFAULT 'unknown',
            raw_data TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (placement_id) REFERENCES offer_placements(id)
        )
    """)
    
    # –ò–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    execute_db_query("""
        CREATE INDEX IF NOT EXISTS idx_placement_stats_placement_id 
        ON placement_statistics(placement_id)
    """)
    
    # –ò–Ω–¥–µ–∫—Å –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–±–æ—Ä–∞
    execute_db_query("""
        CREATE INDEX IF NOT EXISTS idx_placement_stats_collected_at 
        ON placement_statistics(collected_at)
    """)


if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    create_stats_tables()
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫
    async def test_stats_collection():
        collector = StatsCollector()
        results = await collector.collect_placement_stats()
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {results}")
    
    asyncio.run(test_stats_collection())