#!/usr/bin/env python3
"""
–°–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–µ–¥–ª–∞–π–Ω–æ–≤ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏–π
"""

import logging
import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Optional
import json

logger = logging.getLogger(__name__)


class DeadlineMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–µ–¥–ª–∞–π–Ω–æ–≤ —Ä–∞–∑–º–µ—â–µ–Ω–∏–π –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è"""
    
    def __init__(self):
        pass
        
    async def check_expired_placements(self) -> List[Dict]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å –∏—Å—Ç–µ–∫—à–∏–º–∏ –¥–µ–¥–ª–∞–π–Ω–∞–º–∏"""
        from app.models.database import execute_db_query
        
        logger.info("üïê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Ä–∞–∑–º–µ—â–µ–Ω–∏–π...")
        
        # –ù–∞—Ö–æ–¥–∏–º —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å –∏—Å—Ç–µ–∫—à–∏–º–∏ –¥–µ–¥–ª–∞–π–Ω–∞–º–∏
        expired_placements = execute_db_query("""
            SELECT p.*, 
                   o.title as offer_title,
                   o.created_by as advertiser_id,
                   r.user_id as channel_owner_id,
                   r.channel_title,
                   r.channel_username,
                   u_adv.telegram_id as advertiser_telegram_id,
                   u_owner.telegram_id as channel_owner_telegram_id
            FROM offer_placements p
            JOIN offer_responses r ON p.response_id = r.id
            JOIN offers o ON r.offer_id = o.id
            JOIN users u_adv ON o.created_by = u_adv.id
            JOIN users u_owner ON r.user_id = u_owner.id
            WHERE p.status = 'pending_placement'
            AND p.deadline < CURRENT_TIMESTAMP
        """, fetch_all=True)
        
        results = []
        
        for placement in expired_placements:
            try:
                logger.info(f"‚è∞ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ {placement['id']}")
                
                # 1. –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π
                await self.mark_placement_expired(placement)
                
                # 2. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—é
                await self.refund_advertiser(placement)
                
                # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                await self.notify_expired_placement(placement)
                
                results.append({
                    'placement_id': placement['id'],
                    'status': 'expired_and_refunded',
                    'refund_amount': placement['funds_reserved']
                })
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è {placement['id']}: {e}")
                results.append({
                    'placement_id': placement['id'],
                    'status': 'error',
                    'error': str(e)
                })
        
        if results:
            logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Ä–∞–∑–º–µ—â–µ–Ω–∏–π: {len(results)}")
        
        return results
    
    async def mark_placement_expired(self, placement: Dict):
        """–ü–æ–º–µ—á–∞–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–µ"""
        from app.models.database import execute_db_query
        
        execute_db_query("""
            UPDATE offer_placements 
            SET status = 'expired',
                updated_at = CURRENT_TIMESTAMP
            WHERE id = ?
        """, (placement['id'],))
        
        logger.info(f"üìù –†–∞–∑–º–µ—â–µ–Ω–∏–µ {placement['id']} –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–µ")
    
    async def refund_advertiser(self, placement: Dict):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤–∞ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—é"""
        from app.models.database import execute_db_query
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤–æ–∑–≤—Ä–∞—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤
            refund_id = execute_db_query("""
                INSERT INTO payments (
                    id,
                    contract_id,
                    placement_id,
                    publisher_id,
                    advertiser_id,
                    amount,
                    status,
                    payment_method,
                    created_at,
                    processed_at
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                f"REFUND_{placement['id']}_{int(datetime.now().timestamp())}",
                f"REFUND_CONTRACT_{placement['id']}",
                placement['id'],
                placement['channel_owner_id'],
                placement['advertiser_id'],
                -float(placement['funds_reserved']),  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞ = –≤–æ–∑–≤—Ä–∞—Ç
                'completed',
                'refund',
                datetime.now().isoformat(),
                datetime.now().isoformat()
            ))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—Ä–µ–¥—Å—Ç–≤ –≤ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏
            execute_db_query("""
                UPDATE offer_placements
                SET funds_reserved = 0,
                    refund_processed = 1,
                    refund_amount = ?,
                    refund_at = CURRENT_TIMESTAMP
                WHERE id = ?
            """, (placement['funds_reserved'], placement['id']))
            
            logger.info(f"üí∞ –í–æ–∑–≤—Ä–∞—Ç {placement['funds_reserved']} —Ä—É–±. —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—é –∑–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ {placement['id']}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è {placement['id']}: {e}")
            raise
    
    async def notify_expired_placement(self, placement: Dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏"""
        try:
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—é
            await self.notify_advertiser_about_expiry(placement)
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É –∫–∞–Ω–∞–ª–∞
            await self.notify_channel_owner_about_expiry(placement)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–æ—Å—Ä–æ—á–∫–µ: {e}")
    
    async def notify_advertiser_about_expiry(self, placement: Dict):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è –æ –ø—Ä–æ—Å—Ä–æ—á–∫–µ"""
        try:
            from app.services.telegram_service import TelegramService
            telegram_service = TelegramService()
            
            deadline_str = datetime.fromisoformat(placement['deadline']).strftime("%d %B, %H:%M")
            
            message = f"""‚ö†Ô∏è <b>–î–µ–¥–ª–∞–π–Ω —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∏—Å—Ç–µ–∫</b>

üì∫ <b>–ö–∞–Ω–∞–ª:</b> @{placement['channel_username']} –Ω–µ —Ä–∞–∑–º–µ—Å—Ç–∏–ª —Ä–µ–∫–ª–∞–º—É
üìã <b>–û—Ñ—Ñ–µ—Ä:</b> {placement['offer_title']}
‚è∞ <b>–î–µ–¥–ª–∞–π–Ω –±—ã–ª:</b> {deadline_str}
üí∞ <b>–°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å:</b> {placement['funds_reserved']} —Ä—É–±.

üîÑ <b>–ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∫–∞–Ω–∞–ª –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è</b>

üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤—ã–±–∏—Ä–∞—Ç—å –∫–∞–Ω–∞–ª—ã —Å –≤—ã—Å–æ–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏."""
            
            await telegram_service.send_message(
                chat_id=placement['advertiser_telegram_id'],
                text=message,
                parse_mode='HTML'
            )
            
            logger.info(f"üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ—Å—Ä–æ—á–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—é {placement['advertiser_telegram_id']}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è –æ –ø—Ä–æ—Å—Ä–æ—á–∫–µ: {e}")
    
    async def notify_channel_owner_about_expiry(self, placement: Dict):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞–Ω–∞–ª–∞ –æ –ø—Ä–æ—Å—Ä–æ—á–∫–µ"""
        try:
            from app.services.telegram_service import TelegramService
            telegram_service = TelegramService()
            
            deadline_str = datetime.fromisoformat(placement['deadline']).strftime("%d %B, %H:%M")
            
            message = f"""‚ùå <b>–í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –¥–µ–¥–ª–∞–π–Ω —Ä–∞–∑–º–µ—â–µ–Ω–∏—è</b>

üìã <b>–û—Ñ—Ñ–µ—Ä:</b> {placement['offer_title']}
‚è∞ <b>–î–µ–¥–ª–∞–π–Ω –±—ã–ª:</b> {deadline_str}
üí∞ <b>–°—É–º–º–∞:</b> {placement['funds_reserved']} —Ä—É–±.

‚ö†Ô∏è <b>–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è:</b>
‚Ä¢ –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—é
‚Ä¢ –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ —Å–Ω–∏–∂–µ–Ω
‚Ä¢ –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ

üí° <b>–í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑:</b>
‚Ä¢ –†–∞–∑–º–µ—â–∞–π—Ç–µ –ø–æ—Å—Ç—ã –≤ —Å—Ä–æ–∫
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /post_published –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
            
            await telegram_service.send_message(
                chat_id=placement['channel_owner_telegram_id'],
                text=message,
                parse_mode='HTML'
            )
            
            # –°–Ω–∏–∂–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞
            await self.decrease_channel_rating(placement)
            
            logger.info(f"üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ—Å—Ä–æ—á–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –∫–∞–Ω–∞–ª–∞ {placement['channel_owner_telegram_id']}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞–Ω–∞–ª–∞ –æ –ø—Ä–æ—Å—Ä–æ—á–∫–µ: {e}")
    
    async def decrease_channel_rating(self, placement: Dict):
        """–°–Ω–∏–∂–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É"""
        from app.models.database import execute_db_query
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–Ω–∞–ª–∞
            execute_db_query("""
                UPDATE channels 
                SET failed_placements = COALESCE(failed_placements, 0) + 1,
                    reliability_rating = MAX(0, COALESCE(reliability_rating, 100) - 10),
                    updated_at = CURRENT_TIMESTAMP
                WHERE id = (
                    SELECT r.channel_id 
                    FROM offer_responses r 
                    WHERE r.id = ?
                )
            """, (placement['response_id'],))
            
            logger.info(f"üìâ –†–µ–π—Ç–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞ —Å–Ω–∏–∂–µ–Ω –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É —Ä–∞–∑–º–µ—â–µ–Ω–∏—è {placement['id']}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–Ω–∏–∂–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–∞: {e}")
    
    async def check_pre_deadline_warnings(self) -> List[Dict]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –±–ª–∏–∑–∫–∏–µ –∫ –¥–µ–¥–ª–∞–π–Ω—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"""
        from app.models.database import execute_db_query
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –∑–∞ 2 —á–∞—Å–∞ –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞
        warning_time = datetime.now() + timedelta(hours=2)
        
        pending_placements = execute_db_query("""
            SELECT p.*, 
                   o.title as offer_title,
                   r.channel_username,
                   u.telegram_id as channel_owner_telegram_id
            FROM offer_placements p
            JOIN offer_responses r ON p.response_id = r.id
            JOIN offers o ON r.offer_id = o.id
            JOIN users u ON r.user_id = u.id
            WHERE p.status = 'pending_placement'
            AND p.deadline <= ?
            AND p.deadline > CURRENT_TIMESTAMP
            AND (p.warning_sent IS NULL OR p.warning_sent = 0)
        """, (warning_time.isoformat(),), fetch_all=True)
        
        results = []
        
        for placement in pending_placements:
            try:
                await self.send_deadline_warning(placement)
                
                # –ü–æ–º–µ—á–∞–µ–º —á—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                execute_db_query("""
                    UPDATE offer_placements 
                    SET warning_sent = 1,
                        updated_at = CURRENT_TIMESTAMP
                    WHERE id = ?
                """, (placement['id'],))
                
                results.append({
                    'placement_id': placement['id'],
                    'status': 'warning_sent'
                })
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è {placement['id']}: {e}")
                results.append({
                    'placement_id': placement['id'],
                    'status': 'warning_error',
                    'error': str(e)
                })
        
        return results
    
    async def send_deadline_warning(self, placement: Dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–µ–º—Å—è –¥–µ–¥–ª–∞–π–Ω–µ"""
        try:
            from app.services.telegram_service import TelegramService
            telegram_service = TelegramService()
            
            deadline_dt = datetime.fromisoformat(placement['deadline'])
            time_left = deadline_dt - datetime.now()
            hours_left = int(time_left.total_seconds() / 3600)
            
            message = f"""‚ö†Ô∏è <b>–°–∫–æ—Ä–æ –¥–µ–¥–ª–∞–π–Ω —Ä–∞–∑–º–µ—â–µ–Ω–∏—è!</b>

üìã <b>–û—Ñ—Ñ–µ—Ä:</b> {placement['offer_title']}
‚è∞ <b>–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏:</b> {hours_left} —á.
üí∞ <b>–°—É–º–º–∞:</b> {placement['funds_reserved']} —Ä—É–±.

üö® <b>–ù–µ–æ–±—Ö–æ–¥–∏–º–æ:</b>
1. –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ
2. –î–æ–±–∞–≤–∏—Ç—å eREIT —Ç–æ–∫–µ–Ω: {placement['ereit_token']}
3. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /post_published —Å —Å—Å—ã–ª–∫–æ–π

‚ùå <b>–ï—Å–ª–∏ –Ω–µ —É—Å–ø–µ–µ—Ç–µ:</b>
‚Ä¢ –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–µ—Ä–Ω—É—Ç—Å—è —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—é
‚Ä¢ –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥ —Å–Ω–∏–∑–∏—Ç—Å—è"""
            
            await telegram_service.send_message(
                chat_id=placement['channel_owner_telegram_id'],
                text=message,
                parse_mode='HTML'
            )
            
            logger.info(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –¥–µ–¥–ª–∞–π–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è {placement['id']}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –¥–µ–¥–ª–∞–π–Ω–µ: {e}")


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
async def monitor_deadlines():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–µ–¥–ª–∞–π–Ω–æ–≤"""
    monitor = DeadlineMonitor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
    expired_results = await monitor.check_expired_placements()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏—Ö—Å—è –¥–µ–¥–ª–∞–π–Ω–∞—Ö
    warning_results = await monitor.check_pre_deadline_warnings()
    
    return {
        'expired': expired_results,
        'warnings': warning_results
    }


if __name__ == "__main__":
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫
    async def test_deadline_monitoring():
        results = await monitor_deadlines()
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–µ–¥–ª–∞–π–Ω–æ–≤: {results}")
    
    asyncio.run(test_deadline_monitoring())