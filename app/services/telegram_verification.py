# === –ï–î–ò–ù–´–ô –°–ï–†–í–ò–° –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò –ö–ê–ù–ê–õ–û–í ===
# –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª: app/services/telegram_verification.py

import os
import requests
import logging
from datetime import datetime
from typing import Optional, List, Dict, Any

logger = logging.getLogger(__name__)


class TelegramVerificationService:
    """
    –ï–¥–∏–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤ Telegram
    –í—Å—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –∑–¥–µ—Å—å!
    """

    def __init__(self, bot_token: Optional[str] = None):
        self.bot_token = bot_token or os.environ.get('BOT_TOKEN')
        self.base_url = f"https://api.telegram.org/bot{self.bot_token}" if self.bot_token else None
        self.timeout = 10

        if not self.bot_token:
            logger.warning("‚ö†Ô∏è BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")

    def verify_channel_ownership(self, channel_id: str, verification_code: str) -> Dict[str, Any]:
        """
        –ï–î–ò–ù–°–¢–í–ï–ù–ù–û–ï –ú–ï–°–¢–û –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏!

        Args:
            channel_id: ID –∏–ª–∏ username –∫–∞–Ω–∞–ª–∞ (@channel –∏–ª–∏ -1001234567890)
            verification_code: –ö–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: VERIFY_ABC12345)

        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:
            {
                'success': bool,
                'found': bool,
                'message': str,
                'details': dict
            }
        """

        try:
            logger.info(f"üîç –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞ {channel_id} —Å –∫–æ–¥–æ–º {verification_code}")

            # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞ - —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
            if not self.bot_token:
                return self._test_mode_verification(channel_id, verification_code)

            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞
            messages_result = self._get_channel_messages()

            if not messages_result['success']:
                return {
                    'success': False,
                    'found': False,
                    'message': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {messages_result["error"]}',
                    'details': {'error_type': 'api_error'}
                }

            # –ò—â–µ–º –∫–æ–¥ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
            search_result = self._search_verification_code(
                messages_result['messages'],
                channel_id,
                verification_code
            )

            if search_result['found']:
                logger.info(f"‚úÖ –ö–æ–¥ {verification_code} –Ω–∞–π–¥–µ–Ω –≤ –∫–∞–Ω–∞–ª–µ {channel_id}")
                return {
                    'success': True,
                    'found': True,
                    'message': f'–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞–Ω–∞–ª–µ',
                    'details': {
                        'message_id': search_result['message_id'],
                        'message_text': search_result['message_text'][:100] + '...',
                        'found_at': datetime.now().isoformat()
                    }
                }
            else:
                logger.warning(f"‚ùå –ö–æ–¥ {verification_code} –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –∫–∞–Ω–∞–ª–µ {channel_id}")
                return {
                    'success': True,
                    'found': False,
                    'message': f'–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞–Ω–∞–ª–µ',
                    'details': {
                        'messages_checked': search_result['messages_checked'],
                        'last_check': datetime.now().isoformat()
                    }
                }

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            return {
                'success': False,
                'found': False,
                'message': f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}',
                'details': {'exception': str(e)}
            }

    def _get_channel_messages(self, limit: int = 100) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram Bot API"""
        try:
            # –î–ª—è –∫–∞–Ω–∞–ª–æ–≤ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å getUpdates —Å offset
            url = f"{self.base_url}/getUpdates"
            params = {
                'limit': limit,
                'timeout': 0,  # –ù–µ –∂–¥–µ–º –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                'allowed_updates': ['channel_post']  # –¢–æ–ª—å–∫–æ –ø–æ—Å—Ç—ã –∏–∑ –∫–∞–Ω–∞–ª–æ–≤
            }

            response = requests.get(url, params=params, timeout=self.timeout + 5)

            if response.status_code == 200:
                data = response.json()
                if data.get('ok'):
                    updates = data.get('result', [])
                    logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–æ {len(updates)} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram API")
                    return {
                        'success': True,
                        'messages': updates,
                        'count': len(updates)
                    }

            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {response.status_code} - {response.text}")
            return {
                'success': False,
                'error': f'HTTP {response.status_code}: {response.text}',
                'messages': []
            }

        except requests.RequestException as e:
            logger.error(f"‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Telegram API: {e}")
            return {
                'success': False,
                'error': f'–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {str(e)}',
                'messages': []
            }

    def _search_verification_code(self, updates: List[Dict], channel_id: str, verification_code: str) -> Dict[str, Any]:
        """
        –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ü–û–ò–°–ö–ê –ö–û–î–ê!
        –ó–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤—Å—è –º–∞–≥–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        """

        messages_checked = 0

        for update in updates:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–∞—Ö (channel_post)
            if 'channel_post' in update:
                message = update['channel_post']
                chat = message.get('chat', {})
                text = message.get('text', '')

                messages_checked += 1

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω—É–∂–Ω—ã–π –∫–∞–Ω–∞–ª
                if self._is_target_channel(chat, channel_id):
                    # –í–û–¢ –û–ù–ê - –ì–õ–ê–í–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê! üéØ
                    if verification_code in text:
                        return {
                            'found': True,
                            'message_id': message.get('message_id'),
                            'message_text': text,
                            'chat_id': chat.get('id'),
                            'chat_username': chat.get('username')
                        }

                    logger.debug(f"üìù –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message.get('message_id')}: –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è –≥—Ä—É–ø–ø)
            elif 'message' in update:
                message = update['message']
                chat = message.get('chat', {})
                text = message.get('text', '')

                messages_checked += 1

                if self._is_target_channel(chat, channel_id):
                    # –í–û–¢ –û–ù–ê - –í–¢–û–†–ê–Ø –ü–†–û–í–ï–†–ö–ê! üéØ
                    if verification_code in text:
                        return {
                            'found': True,
                            'message_id': message.get('message_id'),
                            'message_text': text,
                            'chat_id': chat.get('id'),
                            'chat_username': chat.get('username')
                        }

        return {
            'found': False,
            'messages_checked': messages_checked
        }

    def _is_target_channel(self, chat: Dict, target_channel_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ –Ω—É–∂–Ω—ã–π –∫–∞–Ω–∞–ª"""

        chat_id = str(chat.get('id', ''))
        chat_username = chat.get('username', '').lower()

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º target_channel_id
        target_id = str(target_channel_id).replace('@', '').lower()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ ID
        if chat_id == target_id:
            return True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ username
        if chat_username and chat_username == target_id:
            return True

        return False

    def _test_mode_verification(self, channel_id: str, verification_code: str) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API"""

        import random

        logger.info(f"üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è {channel_id} —Å –∫–æ–¥–æ–º {verification_code}")

        # –°–∏–º—É–ª–∏—Ä—É–µ–º 80% —É—Å–ø–µ—Ö–∞
        success = random.random() < 0.8

        if success:
            return {
                'success': True,
                'found': True,
                'message': f'‚úÖ [–¢–ï–°–¢] –ö–æ–¥ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞–Ω–∞–ª–µ {channel_id}',
                'details': {
                    'mode': 'test',
                    'simulated': True,
                    'message_text': f'–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º {verification_code}'
                }
            }
        else:
            return {
                'success': True,
                'found': False,
                'message': f'‚ùå [–¢–ï–°–¢] –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞–Ω–∞–ª–µ {channel_id}',
                'details': {
                    'mode': 'test',
                    'simulated': True,
                    'suggestion': f'–û–ø—É–±–ª–∏–∫—É–π—Ç–µ –∫–æ–¥ {verification_code} –≤ –∫–∞–Ω–∞–ª–µ'
                }
            }

    def get_channel_info(self, channel_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ"""

        if not self.bot_token:
            return None

        try:
            url = f"{self.base_url}/getChat"
            params = {'chat_id': channel_id}

            response = requests.get(url, params=params, timeout=self.timeout)

            if response.status_code == 200:
                data = response.json()
                if data.get('ok'):
                    return data.get('result', {})

            return None

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ: {e}")
            return None


# === –ì–õ–û–ë–ê–õ–¨–ù–´–ô –≠–ö–ó–ï–ú–ü–õ–Ø–† ===
# –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
verification_service = TelegramVerificationService()


# === –ü–†–û–°–¢–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø ===
def verify_channel(channel_id: str, verification_code: str) -> Dict[str, Any]:
    """
    –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –µ–¥–∏–Ω—ã–π —Å–µ—Ä–≤–∏—Å –≤–Ω—É—Ç—Ä–∏
    """
    return verification_service.verify_channel_ownership(channel_id, verification_code)


# === –≠–ö–°–ü–û–†–¢ ===
__all__ = [
    'TelegramVerificationService',
    'verification_service',
    'verify_channel'
]