
# app.py
from flask import Flask, render_template, request, jsonify, session
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
from datetime import datetime, timedelta
import requests
import secrets
import hashlib
import json
import os
from werkzeug.security import generate_password_hash, check_password_hash

app = Flask(__name__)
app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'your-secret-key-here')
app.config['SQLALCHEMY_DATABASE_URI'] = os.environ.get('DATABASE_URL', 'sqlite:///telegaproject.db')
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db = SQLAlchemy(app)
migrate = Migrate(app, db)

# Models
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    telegram_id = db.Column(db.String(50), unique=True, nullable=False)
    username = db.Column(db.String(100))
    first_name = db.Column(db.String(100))
    last_name = db.Column(db.String(100))
    user_type = db.Column(db.String(20), default='channel_owner')  # channel_owner, advertiser
    balance = db.Column(db.Float, default=0.0)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    
    channels = db.relationship('Channel', backref='owner', lazy=True)
    advertisements = db.relationship('Advertisement', backref='advertiser', lazy=True)

class Channel(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    channel_id = db.Column(db.String(100), unique=True, nullable=False)
    channel_name = db.Column(db.String(200), nullable=False)
    channel_username = db.Column(db.String(100))
    subscribers_count = db.Column(db.Integer, default=0)
    category = db.Column(db.String(100))
    price_per_post = db.Column(db.Float, default=0.0)
    verification_code = db.Column(db.String(50))
    is_verified = db.Column(db.Boolean, default=False)
    owner_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    
    offers = db.relationship('Offer', backref='channel', lazy=True)

class Advertisement(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(200), nullable=False)
    content = db.Column(db.Text, nullable=False)
    media_url = db.Column(db.String(500))
    media_type = db.Column(db.String(50))  # photo, video, text
    budget = db.Column(db.Float, nullable=False)
    target_audience = db.Column(db.String(200))
    category = db.Column(db.String(100))
    status = db.Column(db.String(50), default='active')  # active, paused, completed
    advertiser_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    
    offers = db.relationship('Offer', backref='advertisement', lazy=True)

class Offer(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    advertisement_id = db.Column(db.Integer, db.ForeignKey('advertisement.id'), nullable=False)
    channel_id = db.Column(db.Integer, db.ForeignKey('channel.id'), nullable=False)
    price = db.Column(db.Float, nullable=False)
    status = db.Column(db.String(50), default='pending')  # pending, accepted, rejected, completed
    scheduled_date = db.Column(db.DateTime)
    rejection_reason = db.Column(db.Text)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow)

class Transaction(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    amount = db.Column(db.Float, nullable=False)
    transaction_type = db.Column(db.String(50), nullable=False)  # deposit, withdrawal, payment, earning
    payment_method = db.Column(db.String(50), default='sbp')  # sbp, card, crypto
    status = db.Column(db.String(50), default='pending')  # pending, completed, failed
    external_id = db.Column(db.String(100))
    description = db.Column(db.Text)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

# Telegram Bot Integration
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}"

def verify_telegram_data(init_data):
    """Verify Telegram WebApp init data"""
    try:
        data = dict(x.split('=') for x in init_data.split('&'))
        hash_value = data.pop('hash')
        
        data_check_string = '\n'.join([f"{k}={v}" for k, v in sorted(data.items())])
        secret_key = hashlib.sha256(TELEGRAM_BOT_TOKEN.encode()).digest()
        calculated_hash = hashlib.sha256(secret_key + data_check_string.encode()).hexdigest()
        
        return calculated_hash == hash_value, data
    except:
        return False, {}

def get_channel_info(channel_username):
    """Get channel information from Telegram API"""
    try:
        url = f"{TELEGRAM_API_URL}/getChat"
        params = {'chat_id': f"@{channel_username}"}
        response = requests.get(url, params=params)
        
        if response.status_code == 200:
            data = response.json()
            if data['ok']:
                return data['result']
        return None
    except:
        return None

def check_channel_admin(channel_username, user_id):
    """Check if user is admin of the channel"""
    try:
        url = f"{TELEGRAM_API_URL}/getChatMember"
        params = {'chat_id': f"@{channel_username}", 'user_id': user_id}
        response = requests.get(url, params=params)
        
        if response.status_code == 200:
            data = response.json()
            if data['ok']:
                status = data['result']['status']
                return status in ['creator', 'administrator']
        return False
    except:
        return False

# Routes
@app.route('/')
def index():
    return render_template('index.html')

@app.route('/auth', methods=['POST'])
def auth():
    init_data = request.json.get('initData')
    is_valid, data = verify_telegram_data(init_data)
    
    if not is_valid:
        return jsonify({'error': 'Invalid authentication data'}), 401
    
    user_data = json.loads(data.get('user', '{}'))
    telegram_id = str(user_data.get('id'))
    
    user = User.query.filter_by(telegram_id=telegram_id).first()
    if not user:
        user = User(
            telegram_id=telegram_id,
            username=user_data.get('username'),
            first_name=user_data.get('first_name'),
            last_name=user_data.get('last_name')
        )
        db.session.add(user)
        db.session.commit()
    
    session['user_id'] = user.id
    session['telegram_id'] = telegram_id
    
    return jsonify({
        'success': True,
        'user': {
            'id': user.id,
            'username': user.username,
            'first_name': user.first_name,
            'user_type': user.user_type,
            'balance': user.balance
        }
    })

@app.route('/register-channel', methods=['POST'])
def register_channel():
    if 'user_id' not in session:
        return jsonify({'error': 'Not authenticated'}), 401
    
    data = request.json
    channel_username = data.get('channel_username', '').replace('@', '')
    
    # Check if user is admin of the channel
    if not check_channel_admin(channel_username, session['telegram_id']):
        return jsonify({'error': 'You are not an admin of this channel'}), 403
    
    # Get channel info
    channel_info = get_channel_info(channel_username)
    if not channel_info:
        return jsonify({'error': 'Channel not found'}), 404
    
    # Generate verification code
    verification_code = secrets.token_hex(8)
    
    # Check if channel already exists
    existing_channel = Channel.query.filter_by(channel_username=channel_username).first()
    if existing_channel:
        return jsonify({'error': 'Channel already registered'}), 400
    
    channel = Channel(
        channel_id=str(channel_info['id']),
        channel_name=channel_info['title'],
        channel_username=channel_username,
        subscribers_count=channel_info.get('members_count', 0),
        verification_code=verification_code,
        owner_id=session['user_id']
    )
    
    db.session.add(channel)
    db.session.commit()
    
    return jsonify({
        'success': True,
        'verification_code': verification_code,
        'message': f'Please post this code in your channel: {verification_code}\nYou can delete this message after verification.'
    })

@app.route('/verify-channel', methods=['POST'])
def verify_channel():
    if 'user_id' not in session:
        return jsonify({'error': 'Not authenticated'}), 401
    
    data = request.json
    channel_id = data.get('channel_id')
    
    channel = Channel.query.filter_by(id=channel_id, owner_id=session['user_id']).first()
    if not channel:
        return jsonify({'error': 'Channel not found'}), 404
    
    # Here you would implement actual verification by checking if the message was posted
    # For now, we'll mark it as verified
    channel.is_verified = True
    db.session.commit()
    
    return jsonify({'success': True, 'message': 'Channel verified successfully!'})

@app.route('/channels')
def get_channels():
    if 'user_id' not in session:
        return jsonify({'error': 'Not authenticated'}), 401
    
    channels = Channel.query.filter_by(owner_id=session['user_id']).all()
    
    return jsonify({
        'channels': [{
            'id': ch.id,
            'name': ch.channel_name,
            'username': ch.channel_username,
            'subscribers': ch.subscribers_count,
            'price_per_post': ch.price_per_post,
            'is_verified': ch.is_verified
        } for ch in channels]
    })

@app.route('/offers')
def get_offers():
    if 'user_id' not in session:
        return jsonify({'error': 'Not authenticated'}), 401
    
    user_channels = Channel.query.filter_by(owner_id=session['user_id']).all()
    channel_ids = [ch.id for ch in user_channels]
    
    offers = Offer.query.filter(Offer.channel_id.in_(channel_ids)).all()
    
    return jsonify({
        'offers': [{
            'id': offer.id,
            'advertisement_title': offer.advertisement.title,
            'advertisement_content': offer.advertisement.content,
            'channel_name': offer.channel.channel_name,
            'price': offer.price,
            'status': offer.status,
            'scheduled_date': offer.scheduled_date.isoformat() if offer.scheduled_date else None,
            'created_at': offer.created_at.isoformat()
        } for offer in offers]
    })

@app.route('/offers/<int:offer_id>/accept', methods=['POST'])
def accept_offer(offer_id):
    if 'user_id' not in session:
        return jsonify({'error': 'Not authenticated'}), 401
    
    data = request.json
    scheduled_date = datetime.fromisoformat(data.get('scheduled_date'))
    
    offer = Offer.query.get_or_404(offer_id)
    
    # Check if user owns the channel
    if offer.channel.owner_id != session['user_id']:
        return jsonify({'error': 'Unauthorized'}), 403
    
    offer.status = 'accepted'
    offer.scheduled_date = scheduled_date
    offer.updated_at = datetime.utcnow()
    
    db.session.commit()
    
    return jsonify({'success': True, 'message': 'Offer accepted successfully!'})

@app.route('/offers/<int:offer_id>/reject', methods=['POST'])
def reject_offer(offer_id):
    if 'user_id' not in session:
        return jsonify({'error': 'Not authenticated'}), 401
    
    data = request.json
    rejection_reason = data.get('reason', '')
    
    offer = Offer.query.get_or_404(offer_id)
    
    # Check if user owns the channel
    if offer.channel.owner_id != session['user_id']:
        return jsonify({'error': 'Unauthorized'}), 403
    
    offer.status = 'rejected'
    offer.rejection_reason = rejection_reason
    offer.updated_at = datetime.utcnow()
    
    db.session.commit()
    
    return jsonify({'success': True, 'message': 'Offer rejected successfully!'})

@app.route('/create-advertisement', methods=['POST'])
def create_advertisement():
    if 'user_id' not in session:
        return jsonify({'error': 'Not authenticated'}), 401
    
    data = request.json
    
    # Update user type to advertiser if needed
    user = User.query.get(session['user_id'])
    if user.user_type != 'advertiser':
        user.user_type = 'advertiser'
    
    advertisement = Advertisement(
        title=data.get('title'),
        content=data.get('content'),
        media_url=data.get('media_url'),
        media_type=data.get('media_type', 'text'),
        budget=float(data.get('budget', 0)),
        target_audience=data.get('target_audience'),
        category=data.get('category'),
        advertiser_id=session['user_id']
    )
    
    db.session.add(advertisement)
    db.session.commit()
    
    return jsonify({
        'success': True,
        'advertisement_id': advertisement.id,
        'message': 'Advertisement created successfully!'
    })

@app.route('/send-offers', methods=['POST'])
def send_offers():
    if 'user_id' not in session:
        return jsonify({'error': 'Not authenticated'}), 401
    
    data = request.