// DASHBOARD LOGIC - –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô
class Dashboard {
    constructor() {
        this.isLoading = false;
        this.statsCache = null;
        this.updateInterval = null;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è dashboard
    async init() {
        console.log('üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Dashboard...');

        try {
            await this.loadStats();
            this.startAutoUpdate();
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Dashboard:', error);
            this.showFallbackData();
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    async loadStats() {
        if (this.isLoading) return;

        this.isLoading = true;

        try {
            // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å API
            const data = await API.get('/api/stats/global');

            if (data && data.success) {
                this.statsCache = data.stats;
                this.updateStatsDisplay(data.stats);
            } else {
                throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API');
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            this.showFallbackData();
        } finally {
            this.isLoading = false;
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    updateStatsDisplay(stats) {
        const updates = [
            { id: 'channels-count', value: stats.channels || 0 },
            { id: 'offers-count', value: stats.offers || 0 },
            { id: 'revenue-amount', value: stats.revenue || 0, currency: true },
            { id: 'users-count', value: stats.users || 0 }
        ];

        updates.forEach((update, index) => {
            setTimeout(() => {
                this.animateCounter(update.id, update.value, update.currency);
            }, index * 150); // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
        });
    }

    // –ê–Ω–∏–º–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–∞
    animateCounter(elementId, targetValue, isCurrency = false) {
        const element = document.getElementById(elementId);
        if (!element) return;

        const startValue = 0;
        const duration = 1500;
        const startTime = performance.now();

        const updateCounter = (currentTime) => {
            const elapsed = currentTime - startTime;
            const progress = Math.min(elapsed / duration, 1);

            // Easing function –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
            const easeOutQuart = 1 - Math.pow(1 - progress, 4);
            const currentValue = Math.floor(startValue + (targetValue - startValue) * easeOutQuart);

            // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            element.textContent = this.formatValue(currentValue, isCurrency);

            if (progress < 1) {
                requestAnimationFrame(updateCounter);
            } else {
                element.textContent = this.formatValue(targetValue, isCurrency);
            }
        };

        requestAnimationFrame(updateCounter);
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
    formatValue(value, isCurrency = false) {
        if (isCurrency) {
            return new Intl.NumberFormat('ru-RU', {
                style: 'currency',
                currency: 'RUB',
                minimumFractionDigits: 0
            }).format(value);
        }

        // –ö–æ–º–ø–∞–∫—Ç–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª
        if (value >= 1000000) {
            return (value / 1000000).toFixed(1) + 'M';
        } else if (value >= 1000) {
            return (value / 1000).toFixed(1) + 'K';
        }

        return new Intl.NumberFormat('ru-RU').format(value);
    }

    // –ü–æ–∫–∞–∑ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ—à–∏–±–∫–µ
    showFallbackData() {
        const fallbackStats = {
            channels: 0,
            offers: 0,
            revenue: 0,
            users: 0
        };

        this.updateStatsDisplay(fallbackStats);

        // –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        if (window.UI) {
            window.UI.showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
        }
    }

    // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    startAutoUpdate() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        this.updateInterval = setInterval(() => {
            if (!document.hidden) {
                this.loadStats();
            }
        }, 5 * 60 * 1000);
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    stopAutoUpdate() {
        if (this.updateInterval) {
            clearInterval(this.updateInterval);
            this.updateInterval = null;
        }
    }

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    refresh() {
        this.loadStats();
    }

    // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
    destroy() {
        this.stopAutoUpdate();
        this.statsCache = null;
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
window.Dashboard = new Dashboard();

// –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —É—Ö–æ–¥–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('beforeunload', () => {
    if (window.Dashboard) {
        window.Dashboard.destroy();
    }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
document.addEventListener('visibilitychange', () => {
    if (!document.hidden && window.Dashboard && !window.Dashboard.isLoading) {
        window.Dashboard.refresh();
    }
});