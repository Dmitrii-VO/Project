// –£–¢–ò–õ–ò–¢–´ –î–õ–Ø TELEGRAM MINI APP

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
const API = {
    // –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    async request(url, options = {}) {
        try {
            const response = await fetch(url, {
                headers: {
                    'Content-Type': 'application/json',
                    ...options.headers
                },
                ...options
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            return await response.json();
        } catch (error) {
            console.error('API Error:', error);
            throw error;
        }
    },

    // GET –∑–∞–ø—Ä–æ—Å
    get(url, options = {}) {
        return this.request(url, { ...options, method: 'GET' });
    },

    // POST –∑–∞–ø—Ä–æ—Å
    post(url, data = {}, options = {}) {
        return this.request(url, {
            ...options,
            method: 'POST',
            body: JSON.stringify(data)
        });
    },

    // PUT –∑–∞–ø—Ä–æ—Å
    put(url, data = {}, options = {}) {
        return this.request(url, {
            ...options,
            method: 'PUT',
            body: JSON.stringify(data)
        });
    },

    // DELETE –∑–∞–ø—Ä–æ—Å
    delete(url, options = {}) {
        return this.request(url, { ...options, method: 'DELETE' });
    }
};

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è UI
const UI = {
    // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showNotification(message, type = 'info') {
        if (window.TelegramApp) {
            window.TelegramApp.showAlert(message);
        } else {
            alert(message);
        }
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–∞–¥–µ—Ä
    showLoader(element) {
        if (element) {
            element.innerHTML = '<div class="loading-spinner"></div>';
        }
    },

    // –°–∫—Ä—ã—Ç—å –ª–æ–∞–¥–µ—Ä
    hideLoader(element, content = '') {
        if (element) {
            element.innerHTML = content;
        }
    },

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª
    formatNumber(num) {
        if (num >= 1000000) {
            return (num / 1000000).toFixed(1) + 'M';
        } else if (num >= 1000) {
            return (num / 1000).toFixed(1) + 'K';
        }
        return num.toString();
    },

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã
    formatCurrency(amount) {
        return new Intl.NumberFormat('ru-RU', {
            style: 'currency',
            currency: 'RUB'
        }).format(amount);
    },

    // –î–µ–±–∞—É–Ω—Å —Ñ—É–Ω–∫—Ü–∏—è
    debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    },

    // –¢—Ä–æ—Ç—Ç–ª–∏–Ω–≥ —Ñ—É–Ω–∫—Ü–∏—è
    throttle(func, limit) {
        let inThrottle;
        return function() {
            const args = arguments;
            const context = this;
            if (!inThrottle) {
                func.apply(context, args);
                inThrottle = true;
                setTimeout(() => inThrottle = false, limit);
            }
        };
    }
};

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è (–∑–∞–º–µ–Ω–∞ localStorage –¥–ª—è Telegram)
const Storage = {
    data: new Map(),

    set(key, value) {
        this.data.set(key, JSON.stringify(value));
    },

    get(key) {
        const value = this.data.get(key);
        return value ? JSON.parse(value) : null;
    },

    remove(key) {
        this.data.delete(key);
    },

    clear() {
        this.data.clear();
    }
};

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º
const Validation = {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ email
    isValidEmail(email) {
        const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return re.test(email);
    },

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ URL
    isValidUrl(url) {
        try {
            new URL(url);
            return true;
        } catch {
            return false;
        }
    },

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram username
    isValidTelegramUsername(username) {
        const re = /^[a-zA-Z0-9_]{5,32}$/;
        return re.test(username.replace('@', ''));
    },

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ—Ç—É
    isEmpty(value) {
        return !value || value.trim() === '';
    },

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
    minLength(value, min) {
        return value && value.length >= min;
    },

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
    maxLength(value, max) {
        return value && value.length <= max;
    },

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∏—Å–ª–∞
    isNumber(value) {
        return !isNaN(value) && !isNaN(parseFloat(value));
    },

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞
    isPositiveNumber(value) {
        return this.isNumber(value) && parseFloat(value) > 0;
    }
};

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å DOM
const DOM = {
    // –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç
    $(selector) {
        return document.querySelector(selector);
    },

    // –ù–∞–π—Ç–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    $(selector) {
        return document.querySelectorAll(selector);
    },

    // –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∞—Å—Å
    addClass(element, className) {
        if (element) element.classList.add(className);
    },

    // –£–¥–∞–ª–∏—Ç—å –∫–ª–∞—Å—Å
    removeClass(element, className) {
        if (element) element.classList.remove(className);
    },

    // –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∫–ª–∞—Å—Å
    toggleClass(element, className) {
        if (element) element.classList.toggle(className);
    },

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –∫–ª–∞—Å—Å–∞
    hasClass(element, className) {
        return element ? element.classList.contains(className) : false;
    },

    // –°–æ–∑–¥–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç
    createElement(tag, attributes = {}, content = '') {
        const element = document.createElement(tag);

        Object.entries(attributes).forEach(([key, value]) => {
            element.setAttribute(key, value);
        });

        if (content) {
            element.innerHTML = content;
        }

        return element;
    },

    // –£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç
    removeElement(element) {
        if (element && element.parentNode) {
            element.parentNode.removeChild(element);
        }
    }
};

/**
 * –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ú–û–î–ê–õ–¨–ù–´–• –û–ö–û–ù
 */

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
 */
function closeModal() {
    const modals = document.querySelectorAll('.modal, [data-modal="true"]');
    
    modals.forEach(modal => {
        // –ê–Ω–∏–º–∞—Ü–∏—è –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞)
        modal.style.opacity = '0';
        
        setTimeout(() => {
            // –£–¥–∞–ª—è–µ–º –∏–∑ DOM
            if (modal.parentNode) {
                modal.parentNode.removeChild(modal);
            }
        }, 200);
    });
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    document.body.style.overflow = 'auto';
    
    console.log('‚úÖ –í—Å–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã');
}

/**
 * –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
 */
function initModalHandlers() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏—à–∏ Escape
    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
            closeModal();
        }
    });
    
    console.log('üîß –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
}

function goBack() {
    if (window.history.length > 1) {
        window.history.back();
    } else {
        window.location.href = '/';
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', initModalHandlers);
window.goBack = goBack;
// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏
window.closeModal = closeModal;
window.initModalHandlers = initModalHandlers;

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç —É—Ç–∏–ª–∏—Ç
window.API = API;
window.UI = UI;
window.Storage = Storage;
window.Validation = Validation;
window.DOM = DOM;