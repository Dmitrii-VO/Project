// app/static/js/offers_management.js
// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞–º–∏ - –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

class OffersManagement {
    constructor() {
        this.currentOffer = null;
        this.selectedChannels = new Set();
        this.recommendedChannels = [];
        this.init();
    }

    init() {
        this.setupEventListeners();
        this.loadOffers();
        console.log('üìä Offers Management initialized');
    }

    setupEventListeners() {
        // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        document.addEventListener('click', (e) => {
            if (e.target.matches('.btn-recommended-channels')) {
                this.showRecommendedChannels(e.target.dataset.offerId);
            }
            if (e.target.matches('.btn-offer-details')) {
                this.showOfferDetails(e.target.dataset.offerId);
            }
            if (e.target.matches('.btn-mark-advertising')) {
                this.markAsAdvertising(e.target.dataset.offerId);
            }
            if (e.target.matches('.btn-launch-campaign')) {
                this.launchCampaign();
            }
            if (e.target.matches('.channel-select-checkbox')) {
                this.toggleChannelSelection(e.target);
            }
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
        document.addEventListener('click', (e) => {
            if (e.target.matches('.modal-overlay')) {
                this.closeModal();
            }
        });

        // ESC –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                this.closeModal();
            }
        });
    }

    async loadOffers() {
        try {
            const response = await fetch('/api/offers');
            const data = await response.json();
            
            if (data.success) {
                this.renderOffers(data.offers);
            } else {
                this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ñ—Ñ–µ—Ä–æ–≤');
            }
        } catch (error) {
            console.error('Error loading offers:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ñ—Ñ–µ—Ä–æ–≤');
        }
    }

    renderOffers(offers) {
        const container = document.getElementById('offers-container');
        if (!container) return;

        if (offers.length === 0) {
            container.innerHTML = this.getEmptyStateHTML();
            return;
        }

        container.innerHTML = offers.map(offer => this.getOfferCardHTML(offer)).join('');
    }

    getEmptyStateHTML() {
        return `
            <div class="empty-state">
                <span class="stat-icon">üéØ</span>
                <h3>–ù–µ—Ç –æ—Ñ—Ñ–µ—Ä–æ–≤</h3>
                <p>–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –æ—Ñ—Ñ–µ—Ä, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–µ–∫–ª–∞–º–Ω—É—é –∫–∞–º–ø–∞–Ω–∏—é</p>
                <button class="btn btn-primary" onclick="createNewOffer()">
                    <span>‚ûï</span> –°–æ–∑–¥–∞—Ç—å –æ—Ñ—Ñ–µ—Ä
                </button>
            </div>
        `;
    }

    getOfferCardHTML(offer) {
        const statusClass = this.getStatusClass(offer.status);
        const statusText = this.getStatusText(offer.status);
        
        return `
            <div class="offer-card" data-offer-id="${offer.id}">
                <div class="offer-header">
                    <h3>${offer.title}</h3>
                    <span class="offer-status ${statusClass}">${statusText}</span>
                </div>
                
                <div class="offer-content">
                    <p class="offer-description">${offer.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</p>
                    
                    <div class="offer-stats">
                        <div class="stat-item">
                            <span class="stat-label">üí∞ –ë—é–¥–∂–µ—Ç:</span>
                            <span class="stat-value">${offer.budget || 0} ‚ÇΩ</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-label">üìä –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:</span>
                            <span class="stat-value">${offer.proposals_count || 0}</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-label">‚úÖ –ü—Ä–∏–Ω—è—Ç–æ:</span>
                            <span class="stat-value">${offer.accepted_count || 0}</span>
                        </div>
                    </div>
                </div>
                
                <div class="offer-actions">
                    <button class="btn btn-secondary btn-offer-details" 
                            data-offer-id="${offer.id}">
                        <span>üìã</span> –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                    </button>
                    
                    ${this.getOfferActionsHTML(offer)}
                </div>
                
                <div class="offer-meta">
                    <div class="offer-meta-left">
                        <span class="meta-item">
                            <span>üìÖ</span> ${this.formatDate(offer.created_at)}
                        </span>
                        ${offer.is_marked ? '<span class="meta-item marked">üè∑Ô∏è –ü—Ä–æ–º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–æ</span>' : ''}
                    </div>
                </div>
            </div>
        `;
    }

    getOfferActionsHTML(offer) {
        switch (offer.status) {
            case 'draft':
            case 'matching':
                return `
                    <button class="btn btn-primary btn-recommended-channels" 
                            data-offer-id="${offer.id}">
                        <span>üéØ</span> –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
                    </button>
                    <button class="btn btn-secondary btn-mark-advertising" 
                            data-offer-id="${offer.id}">
                        <span>üè∑Ô∏è</span> –ú–∞—Ä–∫–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                `;
            case 'started':
            case 'in_progress':
                return `
                    <button class="btn btn-primary" 
                            onclick="window.location.href='/offers/${offer.id}/statistics'">
                        <span>üìä</span> –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                    </button>
                `;
            case 'completed':
                return `
                    <button class="btn btn-success" 
                            onclick="window.location.href='/offers/${offer.id}/statistics'">
                        <span>‚úÖ</span> –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    </button>
                `;
            default:
                return '';
        }
    }

    async showRecommendedChannels(offerId) {
        try {
            this.currentOffer = offerId;
            this.selectedChannels.clear();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –ª–æ–∞–¥–µ—Ä–æ–º
            this.showModal(this.getLoadingModalHTML('–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤...'));
            
            const response = await fetch(`/api/offers/${offerId}/recommended-channels`);
            const data = await response.json();
            
            if (data.success) {
                this.recommendedChannels = data.channels;
                this.showModal(this.getRecommendedChannelsModalHTML(data));
            } else {
                this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤');
                this.closeModal();
            }
        } catch (error) {
            console.error('Error loading recommended channels:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤');
            this.closeModal();
        }
    }

    getRecommendedChannelsModalHTML(data) {
        return `
            <div class="modal-content large-modal">
                <div class="modal-header">
                    <h2>üéØ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã</h2>
                    <button class="modal-close" onclick="offersManagement.closeModal()">√ó</button>
                </div>
                
                <div class="modal-body">
                    <div class="offer-info">
                        <h3>${data.offer_title}</h3>
                        <p>–°—Ç–∞—Ç—É—Å: <span class="offer-status ${this.getStatusClass(data.offer_status)}">${this.getStatusText(data.offer_status)}</span></p>
                        <p>–ù–∞–π–¥–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: <strong>${data.total_channels}</strong></p>
                    </div>
                    
                    <div class="channels-filters">
                        <div class="filter-group">
                            <label>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</label>
                            <select class="form-select" onchange="offersManagement.filterChannels()">
                                <option value="">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
                                <option value="tech">–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏</option>
                                <option value="business">–ë–∏–∑–Ω–µ—Å</option>
                                <option value="entertainment">–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è</option>
                                <option value="education">–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ</option>
                                <option value="other">–î—Ä—É–≥–æ–µ</option>
                            </select>
                        </div>
                        
                        <div class="filter-group">
                            <label>–ú–∏–Ω. –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:</label>
                            <input type="number" class="form-input" placeholder="1000" 
                                   onchange="offersManagement.filterChannels()">
                        </div>
                    </div>
                    
                    <div class="channels-list">
                        ${data.channels.map(channel => this.getChannelCardHTML(channel)).join('')}
                    </div>
                </div>
                
                <div class="modal-footer">
                    <div class="selected-info">
                        <span id="selected-count">0</span> –∫–∞–Ω–∞–ª–æ–≤ –≤—ã–±—Ä–∞–Ω–æ
                    </div>
                    <div class="modal-actions">
                        <button class="btn btn-secondary" onclick="offersManagement.closeModal()">
                            –û—Ç–º–µ–Ω–∞
                        </button>
                        <button class="btn btn-primary btn-launch-campaign" disabled>
                            <span>üöÄ</span> –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏—é
                        </button>
                    </div>
                </div>
            </div>
        `;
    }

    getChannelCardHTML(channel) {
        const isSelected = this.selectedChannels.has(channel.id);
        const compatibilityStars = '‚òÖ'.repeat(Math.min(channel.compatibility_score, 5));
        
        return `
            <div class="channel-card ${isSelected ? 'selected' : ''}" data-channel-id="${channel.id}">
                <div class="channel-header">
                    <label class="channel-select">
                        <input type="checkbox" class="channel-select-checkbox" 
                               data-channel-id="${channel.id}" ${isSelected ? 'checked' : ''}>
                        <span class="channel-title">${channel.title}</span>
                        ${channel.is_verified ? '<span class="verified-badge">‚úÖ</span>' : ''}
                    </label>
                    <span class="compatibility-score" title="–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å">
                        ${compatibilityStars} ${channel.compatibility_score}/5
                    </span>
                </div>
                
                <div class="channel-info">
                    <div class="channel-stats">
                        <span class="stat-item">üë• ${this.formatNumber(channel.subscriber_count)}</span>
                        <span class="stat-item">üìä ${channel.category}</span>
                        <span class="stat-item">üí∞ ~${channel.estimated_cost} ‚ÇΩ</span>
                    </div>
                    
                    ${channel.username ? `<div class="channel-link">
                        <a href="https://t.me/${channel.username}" target="_blank">
                            üîó @${channel.username}
                        </a>
                    </div>` : ''}
                    
                    ${channel.description ? `<div class="channel-description">
                        ${channel.description.substring(0, 150)}${channel.description.length > 150 ? '...' : ''}
                    </div>` : ''}
                </div>
                
                <div class="channel-status">
                    <span class="proposal-status ${this.getProposalStatusClass(channel.proposal_status)}">
                        ${this.getProposalStatusText(channel.proposal_status)}
                    </span>
                </div>
            </div>
        `;
    }

    toggleChannelSelection(checkbox) {
        const channelId = parseInt(checkbox.dataset.channelId);
        const channelCard = checkbox.closest('.channel-card');
        
        if (checkbox.checked) {
            this.selectedChannels.add(channelId);
            channelCard.classList.add('selected');
        } else {
            this.selectedChannels.delete(channelId);
            channelCard.classList.remove('selected');
        }
        
        this.updateSelectedCount();
    }

    updateSelectedCount() {
        const countElement = document.getElementById('selected-count');
        if (countElement) {
            countElement.textContent = this.selectedChannels.size;
        }
        
        const launchButton = document.querySelector('.btn-launch-campaign');
        if (launchButton) {
            launchButton.disabled = this.selectedChannels.size === 0;
        }
    }

    async launchCampaign() {
        if (this.selectedChannels.size === 0) {
            this.showError('–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–∞–Ω–∞–ª');
            return;
        }

        try {
            const launchButton = document.querySelector('.btn-launch-campaign');
            const originalText = launchButton.innerHTML;
            launchButton.innerHTML = '<span class="loading-spinner"></span> –ó–∞–ø—É—Å–∫...';
            launchButton.disabled = true;

            const response = await fetch(`/api/offers/${this.currentOffer}/select-channels`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    channel_ids: Array.from(this.selectedChannels),
                    expected_duration: 7
                })
            });

            const data = await response.json();

            if (data.success) {
                this.showSuccess(`–ö–∞–º–ø–∞–Ω–∏—è –∑–∞–ø—É—â–µ–Ω–∞! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${data.created_proposals} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.`);
                this.closeModal();
                this.loadOffers(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ñ—Ñ–µ—Ä–æ–≤
            } else {
                this.showError('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–∞–º–ø–∞–Ω–∏–∏');
            }
        } catch (error) {
            console.error('Error launching campaign:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–∞–º–ø–∞–Ω–∏–∏');
        }
    }

    async markAsAdvertising(offerId) {
        try {
            const response = await fetch(`/api/offers/${offerId}/mark-as-advertising`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ marked: true })
            });

            const data = await response.json();

            if (data.success) {
                this.showSuccess('–û—Ñ—Ñ–µ—Ä –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —Ä–µ–∫–ª–∞–º–∞');
                this.loadOffers(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
            } else {
                this.showError('–û—à–∏–±–∫–∞ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏');
            }
        } catch (error) {
            console.error('Error marking as advertising:', error);
            this.showError('–û—à–∏–±–∫–∞ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏');
        }
    }

    async showOfferDetails(offerId) {
        try {
            const response = await fetch(`/api/offers/${offerId}/statistics`);
            const data = await response.json();

            if (data.success) {
                this.showModal(this.getOfferDetailsModalHTML(data));
            } else {
                this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –æ—Ñ—Ñ–µ—Ä–∞');
            }
        } catch (error) {
            console.error('Error loading offer details:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –æ—Ñ—Ñ–µ—Ä–∞');
        }
    }

    getOfferDetailsModalHTML(data) {
        return `
            <div class="modal-content large-modal">
                <div class="modal-header">
                    <h2>üìä ${data.offer_title}</h2>
                    <button class="modal-close" onclick="offersManagement.closeModal()">√ó</button>
                </div>
                
                <div class="modal-body">
                    <div class="offer-details-tabs">
                        <div class="tab-nav">
                            <button class="tab-btn active" data-tab="overview">–û–±–∑–æ—Ä</button>
                            <button class="tab-btn" data-tab="proposals">–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</button>
                            <button class="tab-btn" data-tab="analytics">–ê–Ω–∞–ª–∏—Ç–∏–∫–∞</button>
                        </div>
                        
                        <div class="tab-content active" data-tab="overview">
                            ${this.getOfferOverviewHTML(data)}
                        </div>
                        
                        <div class="tab-content" data-tab="proposals">
                            ${this.getOfferProposalsHTML(data)}
                        </div>
                        
                        <div class="tab-content" data-tab="analytics">
                            ${this.getOfferAnalyticsHTML(data)}
                        </div>
                    </div>
                </div>
                
                <div class="modal-footer">
                    <button class="btn btn-secondary" onclick="offersManagement.closeModal()">
                        –ó–∞–∫—Ä—ã—Ç—å
                    </button>
                </div>
            </div>
        `;
    }

    getOfferOverviewHTML(data) {
        return `
            <div class="offer-overview">
                <div class="stats-grid">
                    <div class="stat-card">
                        <div class="stat-icon">üì§</div>
                        <div class="stat-content">
                            <div class="stat-number">${data.summary.total_proposals}</div>
                            <div class="stat-label">–í—Å–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π</div>
                        </div>
                    </div>
                    
                    <div class="stat-card">
                        <div class="stat-icon">‚úÖ</div>
                        <div class="stat-content">
                            <div class="stat-number">${data.summary.accepted_count}</div>
                            <div class="stat-label">–ü—Ä–∏–Ω—è—Ç–æ</div>
                        </div>
                    </div>
                    
                    <div class="stat-card">
                        <div class="stat-icon">‚ùå</div>
                        <div class="stat-content">
                            <div class="stat-number">${data.summary.rejected_count}</div>
                            <div class="stat-label">–û—Ç–∫–ª–æ–Ω–µ–Ω–æ</div>
                        </div>
                    </div>
                    
                    <div class="stat-card">
                        <div class="stat-icon">üëÅ</div>
                        <div class="stat-content">
                            <div class="stat-number">${this.formatNumber(data.summary.total_views)}</div>
                            <div class="stat-label">–ü—Ä–æ—Å–º–æ—Ç—Ä—ã</div>
                        </div>
                    </div>
                </div>
                
                <div class="offer-progress">
                    <div class="progress-item">
                        <div class="progress-label">–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–∏–Ω—è—Ç–∏—è</div>
                        <div class="progress-bar">
                            <div class="progress-fill" style="width: ${data.summary.acceptance_rate}%"></div>
                        </div>
                        <div class="progress-value">${data.summary.acceptance_rate}%</div>
                    </div>
                    
                    <div class="progress-item">
                        <div class="progress-label">–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è</div>
                        <div class="progress-bar">
                            <div class="progress-fill danger" style="width: ${data.summary.rejection_rate}%"></div>
                        </div>
                        <div class="progress-value">${data.summary.rejection_rate}%</div>
                    </div>
                </div>
            </div>
        `;
    }

    getOfferProposalsHTML(data) {
        return `
            <div class="proposals-list">
                ${data.proposals.map(proposal => `
                    <div class="proposal-card">
                        <div class="proposal-header">
                            <h4>${proposal.channel_title}</h4>
                            <span class="proposal-status ${this.getProposalStatusClass(proposal.status)}">
                                ${this.getProposalStatusText(proposal.status)}
                            </span>
                        </div>
                        
                        <div class="proposal-content">
                            <div class="proposal-stats">
                                <span class="stat-item">üë• ${this.formatNumber(proposal.subscriber_count)}</span>
                                <span class="stat-item">üìä ${proposal.category}</span>
                                ${proposal.final_views_count ? `<span class="stat-item">üëÅ ${this.formatNumber(proposal.final_views_count)}</span>` : ''}
                            </div>
                            
                            ${proposal.rejection_reason ? `
                                <div class="rejection-reason">
                                    <strong>–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:</strong> ${proposal.rejection_reason}
                                </div>
                            ` : ''}
                            
                            ${proposal.post_url ? `
                                <div class="post-link">
                                    <a href="${proposal.post_url}" target="_blank">üîó –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å—Ç</a>
                                </div>
                            ` : ''}
                        </div>
                        
                        <div class="proposal-meta">
                            <span class="meta-item">üìÖ ${this.formatDate(proposal.created_at)}</span>
                            ${proposal.responded_at ? `<span class="meta-item">‚úÖ ${this.formatDate(proposal.responded_at)}</span>` : ''}
                        </div>
                    </div>
                `).join('')}
            </div>
        `;
    }

    getOfferAnalyticsHTML(data) {
        return `
            <div class="analytics-content">
                <div class="analytics-section">
                    <h3>üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
                    <div class="analytics-grid">
                        <div class="analytics-item">
                            <div class="analytics-label">–û–±—â–∏–π –±—é–¥–∂–µ—Ç</div>
                            <div class="analytics-value">${data.offer_budget} ‚ÇΩ</div>
                        </div>
                        <div class="analytics-item">
                            <div class="analytics-label">–ü–æ—Ç—Ä–∞—á–µ–Ω–æ</div>
                            <div class="analytics-value">${data.summary.total_spent} ‚ÇΩ</div>
                        </div>
                        <div class="analytics-item">
                            <div class="analytics-label">–°—Ä–µ–¥–Ω–µ–µ CPM</div>
                            <div class="analytics-value">${this.calculateCPM(data.summary.total_spent, data.summary.total_views)} ‚ÇΩ</div>
                        </div>
                    </div>
                </div>
                
                <div class="analytics-section">
                    <h3>üéØ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–æ–≤</h3>
                    <div class="top-channels">
                        ${data.proposals
                            .filter(p => p.final_views_count > 0)
                            .sort((a, b) => b.final_views_count - a.final_views_count)
                            .slice(0, 5)
                            .map(proposal => `
                                <div class="top-channel-item">
                                    <div class="channel-info">
                                        <strong>${proposal.channel_title}</strong>
                                        <span>üë• ${this.formatNumber(proposal.subscriber_count)}</span>
                                    </div>
                                    <div class="channel-performance">
                                        <span class="views">üëÅ ${this.formatNumber(proposal.final_views_count)}</span>
                                    </div>
                                </div>
                            `).join('')}
                    </div>
                </div>
            </div>
        `;
    }

    // Utility methods
    showModal(content) {
        const modal = document.createElement('div');
        modal.className = 'modal-overlay';
        modal.innerHTML = content;
        document.body.appendChild(modal);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => modal.classList.add('active'), 10);
    }

    closeModal() {
        const modal = document.querySelector('.modal-overlay');
        if (modal) {
            modal.classList.remove('active');
            setTimeout(() => modal.remove(), 300);
        }
    }

    getLoadingModalHTML(message) {
        return `
            <div class="modal-content">
                <div class="loading-content">
                    <div class="loading-spinner"></div>
                    <p>${message}</p>
                </div>
            </div>
        `;
    }

    showSuccess(message) {
        this.showNotification(message, 'success');
    }

    showError(message) {
        this.showNotification(message, 'error');
    }

    showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.innerHTML = `
            <span class="notification-icon">${type === 'success' ? '‚úÖ' : type === 'error' ? '‚ùå' : '‚ÑπÔ∏è'}</span>
            <span class="notification-message">${message}</span>
        `;
        
        document.body.appendChild(notification);
        
        setTimeout(() => notification.classList.add('show'), 10);
        setTimeout(() => {
            notification.classList.remove('show');
            setTimeout(() => notification.remove(), 300);
        }, 3000);
    }

    getStatusClass(status) {
        const classes = {
            'draft': 'status-draft',
            'matching': 'status-matching',
            'started': 'status-started',
            'in_progress': 'status-active',
            'completed': 'status-completed',
            'cancelled': 'status-cancelled'
        };
        return classes[status] || 'status-unknown';
    }

    getStatusText(status) {
        const texts = {
            'draft': '–ß–µ—Ä–Ω–æ–≤–∏–∫',
            'matching': '–ü–æ–¥–±–æ—Ä –∫–∞–Ω–∞–ª–æ–≤',
            'started': '–ó–∞–ø—É—â–µ–Ω',
            'in_progress': '–í –ø—Ä–æ—Ü–µ—Å—Å–µ',
            'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω',
            'cancelled': '–û—Ç–º–µ–Ω–µ–Ω'
        };
        return texts[status] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }

    getProposalStatusClass(status) {
        const classes = {
            'not_sent': 'status-not-sent',
            'sent': 'status-sent',
            'accepted': 'status-accepted',
            'rejected': 'status-rejected',
            'expired': 'status-expired'
        };
        return classes[status] || 'status-unknown';
    }

    getProposalStatusText(status) {
        const texts = {
            'not_sent': '–ù–æ–≤—ã–π',
            'sent': '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
            'accepted': '–ü—Ä–∏–Ω—è—Ç–æ',
            'rejected': '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ',
            'expired': '–ò—Å—Ç–µ–∫–ª–æ'
        };
        return texts[status] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }

    formatDate(dateString) {
        const date = new Date(dateString);
        return date.toLocaleDateString('ru-RU', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
    }

    formatNumber(num) {
        if (num >= 1000000) {
            return Math.floor(num / 100000) / 10 + 'M';
        }
        if (num >= 1000) {
            return Math.floor(num / 100) / 10 + 'K';
        }
        return num.toString();
    }

    calculateCPM(spent, views) {
        if (views === 0) return 0;
        return Math.round((spent / views) * 1000 * 100) / 100;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
let offersManagement;
document.addEventListener('DOMContentLoaded', () => {
    offersManagement = new OffersManagement();
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function goBack() {
    window.history.back();
}

function createNewOffer() {
    window.location.href = '/offers/create';
}

function switchTab(tabName) {
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    document.querySelectorAll('.nav-card').forEach(card => {
        card.classList.remove('active');
    });
    document.querySelector(`[data-tab="${tabName}"]`).classList.add('active');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.OffersManagement = OffersManagement;