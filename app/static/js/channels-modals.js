// –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω:
let verificationChannelData = null;
let channelToDelete = null

// –§—É–Ω–∫—Ü–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è:
 //–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
function showDeleteConfirmation(channelId, channelName, channelUsername) {
    console.log(`üóëÔ∏è –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ ${channelId}`);

    channelToDelete = channelId;

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const oldModal = document.getElementById('deleteChannelModal');
    if (oldModal) {
        oldModal.remove();
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modal = document.createElement('div');
    modal.id = 'deleteChannelModal';
    modal.className = 'modal';
    modal.style.display = 'flex';

    modal.innerHTML = `
        <div class="modal-overlay" onclick="closeDeleteModal()"></div>
        <div class="modal-content">
            <div class="modal-header">
                <h3>üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª</h3>
                <button class="modal-close" onclick="closeDeleteModal()">&times;</button>
            </div>
            <div class="modal-body">
                <div class="confirmation-content">
                    <div class="channel-info" id="deleteChannelInfo">
                        <div style="display: flex; align-items: center; gap: 12px;">
                            <div class="channel-avatar" style="width: 40px; height: 40px; display: flex; align-items: center; justify-content: center; background: #e5e7eb; border-radius: 50%; font-weight: bold;">
                                ${channelName.substring(0, 2).toUpperCase()}
                            </div>
                            <div>
                                <div style="font-weight: 600; color: #111827;">${channelName}</div>
                                <div style="color: #6b7280; font-size: 0.875rem;">${channelUsername || '–ë–µ–∑ username'}</div>
                            </div>
                        </div>
                    </div>
                    <div style="background: #fef3cd; border: 1px solid #f59e0b; border-radius: var(--border-radius-sm); padding: 16px; margin: 16px 0; color: #92400e;">
                        <strong>‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ!</strong><br>
                        –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å. –ö–∞–Ω–∞–ª –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã.
                    </div>
                    <div style="text-align: center; font-weight: 600; color: var(--text-primary); margin: 16px 0;">
                        –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª?
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" onclick="closeDeleteModal()">
                    –û—Ç–º–µ–Ω–∞
                </button>
                <button class="btn btn-danger" id="confirmDeleteBtn" onclick="confirmChannelDeletion()">
                    üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª
                </button>
            </div>
        </div>
    `;

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ body
    document.body.appendChild(modal);

    // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    document.body.style.overflow = 'hidden';

    console.log('‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–æ –∑–∞–Ω–æ–≤–æ');
}
function closeDeleteModal() {
    console.log('‚ùå –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É–¥–∞–ª–µ–Ω–∏—è');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    closeModal();
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    channelToDelete = null;
    const confirmBtn = document.getElementById('confirmDeleteBtn');
    if (confirmBtn) {
        confirmBtn.disabled = false;
        confirmBtn.textContent = 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª';
    }
}
// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ –∫–ª–∏–∫—É –Ω–∞ –æ–≤–µ—Ä–ª–µ–π
document.addEventListener('click', function(e) {
    if (e.target.classList.contains('modal-overlay')) {
        closeModal();
    }
});
async function confirmChannelDeletion() {
    if (!channelToDelete) {
        console.error('‚ùå –ù–µ—Ç –∫–∞–Ω–∞–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
        return;
    }

    const confirmBtn = document.getElementById('confirmDeleteBtn');
    const originalText = confirmBtn.textContent;

    try {
        // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        confirmBtn.disabled = true;
        confirmBtn.textContent = '‚è≥ –£–¥–∞–ª—è–µ–º...';

        console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª ${channelToDelete}`);

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const telegramUser = getTelegramUser();
        if (!telegramUser) {
            throw new Error('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
        }

        const headers = {
            'Content-Type': 'application/json',
            'X-Telegram-User-Id': telegramUser.id.toString()
        };

        if (telegramUser.username) {
            headers['X-Telegram-Username'] = telegramUser.username;
        }
       // if (telegramUser.first_name) {
        //    headers['X-Telegram-First-Name'] = telegramUser.first_name;
        //}
       // if (telegramUser.last_name) {
       //     headers['X-Telegram-Last-Name'] = telegramUser.last_name;
       // }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º DELETE –∑–∞–ø—Ä–æ—Å
        const response = await fetch(`/api/channels/${channelToDelete}`, {
            method: 'DELETE',
            headers: headers
        });

        const data = await response.json();

        if (response.ok && data.success) {
            console.log('‚úÖ –ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω:', data.message);
            closeDeleteModal();

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            showSuccessNotification(data.message || '–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!');

            // –ù–û–í–û–ï: –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
            setTimeout(() => {
                loadUserChannels();
            }, 1000);

            // –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∏–∑ DOM
            const channelCard = document.querySelector(`[data-channel-id="${channelToDelete}"]`);
            if (channelCard) {
                channelCard.style.transition = 'opacity 0.3s ease';
                channelCard.style.opacity = '0';
                setTimeout(() => {
                    channelCard.remove();

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –∫–∞–Ω–∞–ª—ã
                    const remainingChannels = document.querySelectorAll('.channel-card[data-user-channel="true"]');
                    if (remainingChannels.length === 0) {
                        showEmptyState();
                    }
                }, 300);
            }

        } else {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
            const errorMessage = data.message || data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
            console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞:', errorMessage);

            showNotification('error', `‚ùå –û—à–∏–±–∫–∞: ${errorMessage}`);
        }

    } catch (error) {
        console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞:', error);
        showNotification('error', '‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
    } finally {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
        confirmBtn.disabled = false;
        confirmBtn.textContent = originalText;
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:
function showVerificationModal(channelId, channelName, channelUsername) {        
            console.log(`üîê –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è –∫–∞–Ω–∞–ª–∞ ${channelId}`);
            
            verificationChannelData = { id: channelId, name: channelName, username: channelUsername };

            const content = document.getElementById('verificationContent');
            content.innerHTML = `
                <div class="verification-info">
                    <div class="channel-info" style="display: flex; align-items: center; gap: 12px; margin-bottom: 20px;">
                        <div class="channel-avatar" style="width: 50px; height: 50px; display: flex; align-items: center; justify-content: center; background: #e5e7eb; border-radius: 50%; font-weight: bold; font-size: 1.2rem;">
                            ${channelName.substring(0, 2).toUpperCase()}
                        </div>
                        <div>
                            <div style="font-weight: 600; color: #111827; font-size: 1.1rem;">${channelName}</div>
                            <div style="color: #6b7280;">${channelUsername || '–ë–µ–∑ username'}</div>
                        </div>
                    </div>

                    <div class="instruction-block" style="background: #f0f9ff; border: 1px solid #0ea5e9; border-radius: 8px; padding: 16px; margin-bottom: 16px;">
                        <h4 style="color: #0369a1; margin-bottom: 12px;">üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:</h4>
                        <ol style="margin: 0; padding-left: 20px; color: #374151;">
                            <li style="margin-bottom: 8px;">–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é"</li>
                            <li style="margin-bottom: 8px;">–ü–æ–ª—É—á–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏</li>
                            <li style="margin-bottom: 8px;">–û–ø—É–±–ª–∏–∫—É–π—Ç–µ –∫–æ–¥ –≤ –≤–∞—à–µ–º –∫–∞–Ω–∞–ª–µ <strong>${channelUsername}</strong></li>
                            <li style="margin-bottom: 8px;">–ü–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º –Ω–∞—à–µ–º—É –±–æ—Ç—É</li>
                            <li style="margin-bottom: 8px;">–î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏</li>
                        </ol>
                    </div>

                    <div class="warning-block" style="background: #fef3cd; border: 1px solid #f59e0b; border-radius: 8px; padding: 12px;">
                        <small style="color: #92400e;">
                            üí° <strong>–°–æ–≤–µ—Ç:</strong> –ü–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞ –≤—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞.
                            –ì–ª–∞–≤–Ω–æ–µ ‚Äî —É—Å–ø–µ—Ç—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å –µ–≥–æ –±–æ—Ç—É!
                        </small>
                    </div>
                </div>
            `;

            document.getElementById('verificationModal').style.display = 'flex';
            document.body.style.overflow = 'hidden';
        }

async function startVerification() {
    if (!verificationChannelData) {
        console.error('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏');
        return;
    }

    const startBtn = document.getElementById('startVerificationBtn');
    const originalText = startBtn.textContent;

    try {
        startBtn.disabled = true;
        startBtn.textContent = '‚è≥ –ó–∞–ø—É—Å–∫ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏...';

        const telegramUser = getTelegramUser();
        if (!telegramUser) {
            throw new Error('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
        }

        const headers = {
            'Content-Type': 'application/json',
            'X-Telegram-User-Id': telegramUser.id.toString()
        };

        if (telegramUser.username) {
            headers['X-Telegram-Username'] = telegramUser.username;
        }

        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ endpoint, —á—Ç–æ –∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
        const response = await fetch('/api/channels', {
            method: 'POST',
            headers: headers,
            body: JSON.stringify({
                username: verificationChannelData.username?.replace('@', '') || 'unknown',
                category: 'other',
                description: '–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞',
                payment_terms: 'prepayment',
                action: 'reverify', // –§–ª–∞–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
                channel_id: verificationChannelData.id
            })
        });

        const result = await response.json();

        if (!result.success) {
            throw new Error(result.error || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        }

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        closeModal();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∫–∞–∫ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞
        const verificationCode = result.verification_code || result.channel?.verification_code;
        const channelUsername = result.channel?.username || verificationChannelData.username;

        if (verificationCode) {
            // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ (—Ç–∞–∫–æ–µ –∂–µ –∫–∞–∫ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏)
            const modal = document.createElement('div');
            modal.style.cssText = `
                position: fixed; top: 0; left: 0; width: 100%; height: 100%;
                background: rgba(0,0,0,0.8); z-index: 10000;
                display: flex; align-items: center; justify-content: center;
            `;

            modal.innerHTML = `
                <div style="
                    background: white; padding: 20px; border-radius: 15px;
                    max-width: min(500px, 95vw); margin: 10px; text-align: center;
                    box-shadow: 0 10px 30px rgba(0,0,0,0.3);
                    max-height: 95vh; overflow-y: auto;
                ">
                    <div style="font-size: 48px; margin-bottom: 20px;">üìù</div>
                    <h3 style="color: #333; margin-bottom: 20px;">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–ª–∞–¥–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–º</h3>

                    <div style="
                        background: #e3f2fd; padding: 20px; border-radius: 10px;
                        margin: 20px 0; border-left: 4px solid #2196f3;
                    ">
                        <h4 style="color: #1976d2; margin-bottom: 15px;">üîê –ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:</h4>

                        <div style="
                            background: #333; color: #00ff00; padding: 15px;
                            border-radius: 8px; font-family: 'Courier New', monospace;
                            font-size: 20px; font-weight: bold; letter-spacing: 2px;
                            margin: 15px 0; cursor: pointer; user-select: all;
                            box-shadow: 0 2px 8px rgba(0,0,0,0.3);
                        " onclick="
                            navigator.clipboard.writeText('${verificationCode}');
                            this.style.background='#1b5e20';
                            this.innerHTML='${verificationCode} ‚úÖ';
                            setTimeout(() => {
                                this.style.background='#333';
                                this.innerHTML='${verificationCode}';
                            }, 2000);
                        ">${verificationCode}</div>

                        <small style="color: #666;">–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–¥, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å</small>
                    </div>

                    <div style="
                        background: #f5f5f5; padding: 20px; border-radius: 10px;
                        margin: 20px 0; text-align: left;
                    ">
                        <h4 style="color: #333; margin-bottom: 15px;">üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</h4>

                        <ol style="margin: 0; padding-left: 20px; color: #555;">
                            <li style="margin-bottom: 10px;">
                                –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∞—à –∫–∞–Ω–∞–ª <strong>${channelUsername}</strong>
                            </li>
                            <li style="margin-bottom: 10px;">
                                –û–ø—É–±–ª–∏–∫—É–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º: <strong>${verificationCode}</strong>
                            </li>
                            <li style="margin-bottom: 10px;">
                                –ü–µ—Ä–µ—Å–ª–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—à–µ–º—É –±–æ—Ç—É <strong>@YOUR_BOT_USERNAME</strong>
                            </li>
                            <li style="margin-bottom: 10px;">
                                –ü–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –±–æ—Ç–µ
                            </li>
                        </ol>
                    </div>

                    <div style="
                        background: #fff3cd; padding: 15px; border-radius: 8px;
                        margin: 15px 0; border-left: 4px solid #ffc107;
                    ">
                        <small style="color: #856404;">
                            üí° <strong>–°–æ–≤–µ—Ç:</strong> –ü–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞ –≤—ã –º–æ–∂–µ—Ç–µ —Å—Ä–∞–∑—É —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞.
                            –ì–ª–∞–≤–Ω–æ–µ —É—Å–ø–µ—Ç—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å –µ–≥–æ –±–æ—Ç—É!
                        </small>
                    </div>

                    <button onclick="
                        document.body.removeChild(this.closest('div').parentElement);
                        loadUserChannels();
                    " style="
                        background: #2196f3; color: white; border: none;
                        padding: 12px 30px; border-radius: 8px; font-size: 16px;
                        cursor: pointer; margin-top: 15px; font-weight: 600;
                    ">–ü–æ–Ω—è—Ç–Ω–æ, –ø–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞–Ω–∞–ª–∞–º</button>

                    <div style="margin-top: 15px;">
                        <a href="https://t.me/YOUR_BOT_USERNAME" target="_blank" style="
                            color: #2196f3; text-decoration: none; font-size: 14px; font-weight: 600;
                        ">ü§ñ –û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏</a>
                    </div>
                </div>
            `;

            document.body.appendChild(modal);

        } else {
            // Fallback –¥–ª—è —Å–ª—É—á–∞–µ–≤ –±–µ–∑ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
            showSuccessNotification('‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞!');
        }

    }
    catch (error) {
        console.error('üí• –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
        showErrorNotification(error.message);
    }
    finally {
        startBtn.disabled = false;
        startBtn.textContent = originalText;
    }

}
function showVerificationCode(data) {
            const content = document.getElementById('verificationContent');
            content.innerHTML = `
                <div class="verification-code-display">
                    <div class="channel-info" style="display: flex; align-items: center; gap: 12px; margin-bottom: 20px;">
                        <div class="channel-avatar" style="width: 50px; height: 50px; display: flex; align-items: center; justify-content: center; background: #e5e7eb; border-radius: 50%; font-weight: bold; font-size: 1.2rem;">
                            ${verificationChannelData.name.substring(0, 2).toUpperCase()}
                        </div>
                        <div>
                            <div style="font-weight: 600; color: #111827; font-size: 1.1rem;">${verificationChannelData.name}</div>
                            <div style="color: #6b7280;">${verificationChannelData.username || '–ë–µ–∑ username'}</div>
                        </div>
                    </div>

                    <div class="code-block" style="background: #1f2937; color: #10b981; padding: 20px; border-radius: 8px; margin: 20px 0; text-align: center;">
                        <h4 style="color: #10b981; margin-bottom: 15px;">üîê –í–∞—à –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:</h4>
                        <div class="verification-code" style="
                            font-family: 'Courier New', monospace;
                            font-size: 24px;
                            font-weight: bold;
                            letter-spacing: 2px;
                            cursor: pointer;
                            user-select: all;
                            padding: 10px;
                            border: 2px dashed #10b981;
                            border-radius: 4px;
                            transition: all 0.2s ease;
                        " onclick="copyVerificationCode(this, '${data.verification_code}')">
                            ${data.verification_code}
                        </div>
                        <small style="color: #9ca3af; margin-top: 10px; display: block;">
                            –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–¥, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                        </small>
                    </div>

                    <div class="instruction-steps" style="background: #f9fafb; border-radius: 8px; padding: 16px;">
                        <h4 style="color: #374151; margin-bottom: 12px;">üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:</h4>
                        <ol style="margin: 0; padding-left: 20px; color: #4b5563;">
                            <li style="margin-bottom: 8px;">–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –≤—ã—à–µ</li>
                            <li style="margin-bottom: 8px;">–û—Ç–∫—Ä–æ–π—Ç–µ –≤–∞—à –∫–∞–Ω–∞–ª <strong>${verificationChannelData.username}</strong></li>
                            <li style="margin-bottom: 8px;">–û–ø—É–±–ª–∏–∫—É–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç—Ç–∏–º –∫–æ–¥–æ–º</li>
                            <li style="margin-bottom: 8px;">–ü–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—à–µ–º—É –±–æ—Ç—É</li>
                            <li>–î–æ–∂–¥–∏—Ç–µ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</li>
                        </ol>
                    </div>
                </div>
            `;

            // –ò–∑–º–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫—É
            const startBtn = document.getElementById('startVerificationBtn');
            startBtn.textContent = 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å';
            startBtn.onclick = () => checkVerificationStatus();
        }
function copyVerificationCode(code, element = null) {
    navigator.clipboard.writeText(code).then(() => {
        // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —ç–ª–µ–º–µ–Ω—Ç, –∏–∑–º–µ–Ω—è–µ–º –µ–≥–æ —Å—Ç–∏–ª—å
        if (element && element.style) {
            const originalBg = element.style.background;
            const originalText = element.textContent;

            element.style.background = '#1b5e20';
            element.innerHTML = `${code} ‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!`;

            setTimeout(() => {
                element.style.background = originalBg;
                element.innerHTML = code;
            }, 2000);
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if (typeof showNotification === 'function') {
            showNotification('success', 'üìã –ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
        } else {
            console.log('‚úÖ –ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω:', code);
        }

    }).catch(() => {
        // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
        const textArea = document.createElement('textarea');
        textArea.value = code;
        document.body.appendChild(textArea);
        textArea.select();
        document.execCommand('copy');
        document.body.removeChild(textArea);

        if (element && element.style) {
            element.style.background = '#1b5e20';
            element.innerHTML = `${code} ‚úÖ`;
            setTimeout(() => {
                element.style.background = '#333';
                element.innerHTML = code;
            }, 2000);
        }

        alert('üìã –ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
    });
}
async function checkVerificationStatus() {
            if (!verificationChannelData) return;

            try {
                const telegramUser = getTelegramUser();
                const headers = {
                    'Content-Type': 'application/json',
                    'X-Telegram-User-Id': telegramUser.id.toString()
                };

                const response = await fetch(`/api/channels/${verificationChannelData.id}`, {
                    method: 'GET',
                    headers: headers
                });

                const data = await response.json();

                if (data.success && data.channel && (data.channel.is_verified || data.channel.status === 'verified')) {
                    // –ö–∞–Ω–∞–ª –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!
                    showSuccessNotification('üéâ –ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!');
                    closeModal();

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
                    setTimeout(() => {
                        loadUserChannels();
                    }, 1000);
                } else {
                    showInfoNotification('‚è≥ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–æ–¥ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∏ –ø–µ—Ä–µ—Å–ª–∞–Ω –±–æ—Ç—É.');
                }

            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
                showErrorNotification('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏');
            }
        }

// –§—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω:
function showVerificationSuccess(data) {
            const modal = createModal();
            modal.innerHTML = `
                <div class="verification-modal success">
                    <div class="modal-header">
                        <div class="success-icon">‚úÖ</div>
                        <h3>–ö–∞–Ω–∞–ª –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!</h3>
                    </div>
                    <div class="modal-body">
                        <p><strong>${data.message}</strong></p>
                        <div class="channel-info">
                            <p><strong>–ö–∞–Ω–∞–ª:</strong> ${data.channel?.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª'}</p>
                            <p><strong>–°—Ç–∞—Ç—É—Å:</strong> <span class="status verified">–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω</span></p>
                            <p><strong>–î–∞—Ç–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:</strong> ${formatDate(data.channel?.verified_at)}</p>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-primary" onclick="closeModal()">
                            –û—Ç–ª–∏—á–Ω–æ!
                        </button>
                    </div>
                </div>
            `;

            document.body.appendChild(modal);
        }
function showVerificationError(data) {
            const modal = createModal();
            const instructions = data.instructions || [];
            const verificationCode = data.verification_code;

            modal.innerHTML = `
                <div class="verification-modal error">
                    <div class="modal-header">
                        <div class="error-icon">‚ùå</div>
                        <h3>–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å</h3>
                    </div>
                    <div class="modal-body">
                        <p class="error-message">${data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}</p>

                        ${verificationCode ? `
                            <div class="verification-code-block">
                                <h4>–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:</h4>
                                <div class="code-display">
                                    <code>${verificationCode}</code>
                                    <button class="btn btn-small" onclick="copyToClipboard('${verificationCode}')">
                                        üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                                    </button>
                                </div>
                            </div>
                        ` : ''}

                        ${instructions.length > 0 ? `
                            <div class="instructions">
                                <h4>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</h4>
                                <ol>
                                    ${instructions.map(instruction => `<li>${instruction}</li>`).join('')}
                                </ol>
                            </div>
                        ` : ''}
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-secondary" onclick="closeModal()">
                            –ü–æ–Ω—è—Ç–Ω–æ
                        </button>
                        <button class="btn btn-primary" onclick="retryVerification(${data.channel?.id || 'null'})">
                            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                        </button>
                    </div>
                </div>
            `;

            document.body.appendChild(modal);
        }
function createModal() {
            const modal = document.createElement('div');
            modal.className = 'modal-overlay';
            modal.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0, 0, 0, 0.8);
                z-index: 10000;
                display: flex;
                align-items: center;
                justify-content: center;
                padding: 20px;
            `;
            return modal;
        }

function retryVerification(channelId) {
    closeModal();
    if (channelId) {
        verifyChannel(channelId);
    }
}
function updateChannelStatus(channelId, status) {
            const channelCard = document.querySelector(`[data-channel-id="${channelId}"]`);
            if (channelCard) {
                const statusElement = channelCard.querySelector('.channel-status');
                if (statusElement) {
                    statusElement.className = `channel-status ${status}`;
                    statusElement.textContent = status === 'verified' ? '–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω' : '–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏';
                }

                // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
                const verifyButton = channelCard.querySelector('.btn-warning');
                if (verifyButton && status === 'verified') {
                    verifyButton.style.display = 'none';
                }
            }
        }
function copyToClipboard(text) {
            navigator.clipboard.writeText(text).then(() => {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                const notification = document.createElement('div');
                notification.style.cssText = `
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    background: #28a745;
                    color: white;
                    padding: 12px 20px;
                    border-radius: 5px;
                    z-index: 10001;
                    font-weight: bold;
                `;
                notification.textContent = '–ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!';
                document.body.appendChild(notification);

                setTimeout(() => {
                    notification.remove();
                }, 2000);
            }).catch(() => {
                // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
                const textArea = document.createElement('textarea');
                textArea.value = text;
                document.body.appendChild(textArea);
                textArea.select();
                document.execCommand('copy');
                document.body.removeChild(textArea);

                alert('–ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
            });
        }

document.addEventListener('click', function(e) {
    if (e.target.classList.contains('modal-overlay')) {
        closeDeleteModal();
    }
});

document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape') {
        closeDeleteModal();
    }
});
async function startChannelVerification(channelId, channelName, channelUsername) {
    console.log(`üîê –ó–∞–ø—É—Å–∫ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞ ${channelId}: ${channelName}`);

    try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
        const telegramUser = getTelegramUser();
        if (!telegramUser) {
            throw new Error('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        showNotification('info', '‚è≥ –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é...');

        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        const headers = {
            'Content-Type': 'application/json',
            'X-Telegram-User-Id': telegramUser.id.toString()
        };

        if (telegramUser.username) {
            headers['X-Telegram-Username'] = telegramUser.username;
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        const response = await fetch('/api/channels', {
            method: 'POST',
            headers: headers,
            body: JSON.stringify({
                username: channelUsername?.replace('@', '') || 'unknown',
                category: 'other',
                description: '–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞',
                payment_terms: 'prepayment',
                action: 'reverify', // –§–ª–∞–≥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
                channel_id: channelId
            })
        });

        const result = await response.json();

        if (!result.success) {
            throw new Error(result.error || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        }

        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞
        const verificationCode = result.verification_code || result.channel?.verification_code;
        const usernameForDisplay = result.channel?.username || channelUsername;

        if (verificationCode) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
            showVerificationInstructions(verificationCode, usernameForDisplay);
        } else {
            // Fallback –µ—Å–ª–∏ –∫–æ–¥ –Ω–µ –ø–æ–ª—É—á–µ–Ω
            showNotification('success', '‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞!');
        }

    } catch (error) {
        console.error('üí• –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
        showNotification('error', `‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
}
function showVerificationInstructions(verificationCode, channelUsername) {
    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.style.background = 'rgba(0,0,0,0.8)';

    modal.innerHTML = `
        <div style="
            background: white; 
            padding: 30px; 
            border-radius: 15px;
            max-width: min(500px, 95vw); 
            width: 100%;
            text-align: center;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            max-height: 95vh; 
            overflow-y: auto;
        ">
            <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ -->
            <div style="font-size: 48px; margin-bottom: 20px;">üìù</div>
            <h3 style="color: #333; margin-bottom: 20px; font-size: 1.5rem;">
                –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–ª–∞–¥–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–º
            </h3>

            <!-- –ë–ª–æ–∫ —Å –∫–æ–¥–æ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ -->
            <div style="
                background: #e3f2fd; 
                padding: 20px; 
                border-radius: 10px;
                margin: 20px 0; 
                border-left: 4px solid #2196f3;
            ">
                <h4 style="color: #1976d2; margin-bottom: 15px; font-size: 1.1rem;">
                    üîê –ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:
                </h4>

                <div id="verificationCodeBlock" style="
                    background: #333; 
                    color: #00ff00; 
                    padding: 15px;
                    border-radius: 8px; 
                    font-family: 'Courier New', monospace;
                    font-size: 20px; 
                    font-weight: bold; 
                    letter-spacing: 2px;
                    margin: 15px 0; 
                    cursor: pointer; 
                    user-select: all;
                    box-shadow: 0 2px 8px rgba(0,0,0,0.3);
                    transition: all 0.2s ease;
                " onclick="copyVerificationCode('${verificationCode}', this)">
                    ${verificationCode}
                </div>

                <small style="color: #666; font-size: 0.85rem;">
                    üí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–¥, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                </small>
            </div>

            <!-- –ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è -->
            <div style="
                background: #f5f5f5; 
                padding: 20px; 
                border-radius: 10px;
                margin: 20px 0; 
                text-align: left;
            ">
                <h4 style="color: #333; margin-bottom: 15px; text-align: center; font-size: 1.1rem;">
                    üìã –ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:
                </h4>

                <ol style="margin: 0; padding-left: 20px; color: #555; line-height: 1.6;">
                    <li style="margin-bottom: 10px;">
                        <strong>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –≤—ã—à–µ</strong> (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ)
                    </li>
                    <li style="margin-bottom: 10px;">
                        –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∞—à –∫–∞–Ω–∞–ª <strong>@${channelUsername}</strong>
                    </li>
                    <li style="margin-bottom: 10px;">
                        <strong>–û–ø—É–±–ª–∏–∫—É–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</strong> —Å –∫–æ–¥–æ–º: <code style="background: #eee; padding: 2px 4px; border-radius: 3px;">${verificationCode}</code>
                    </li>
                    <li style="margin-bottom: 10px;">
                        <strong>–ü–µ—Ä–µ—Å–ª–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ</strong> –Ω–∞—à–µ–º—É –±–æ—Ç—É
                    </li>
                    <li style="margin-bottom: 10px;">
                        –î–æ–∂–¥–∏—Ç–µ—Å—å <strong>—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏</strong>
                    </li>
                </ol>
            </div>

            <!-- –ü–æ–ª–µ–∑–Ω—ã–π —Å–æ–≤–µ—Ç -->
            <div style="
                background: #fff3cd; 
                padding: 15px; 
                border-radius: 8px;
                margin: 15px 0; 
                border-left: 4px solid #ffc107;
            ">
                <small style="color: #856404; font-size: 0.9rem;">
                    üí° <strong>–°–æ–≤–µ—Ç:</strong> –ü–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞ –≤—ã –º–æ–∂–µ—Ç–µ —Å—Ä–∞–∑—É —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞.
                    –ì–ª–∞–≤–Ω–æ–µ ‚Äî —É—Å–ø–µ—Ç—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å –µ–≥–æ –±–æ—Ç—É!
                </small>
            </div>

            <!-- –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π -->
            <div style="margin-top: 25px;">
                <button onclick="closeVerificationModalAndRefresh(this)" style="
                    background: #2196f3; 
                    color: white; 
                    border: none;
                    padding: 12px 30px; 
                    border-radius: 8px; 
                    font-size: 16px;
                    cursor: pointer; 
                    font-weight: 600;
                    margin-right: 10px;
                ">
                    –ü–æ–Ω—è—Ç–Ω–æ, –ø—Ä–∏—Å—Ç—É–ø–∞—é!
                </button>

                <button onclick="copyVerificationCode('${verificationCode}')" style="
                    background: #28a745; 
                    color: white; 
                    border: none;
                    padding: 12px 20px; 
                    border-radius: 8px; 
                    font-size: 14px;
                    cursor: pointer; 
                    font-weight: 600;
                ">
                    üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
                </button>
            </div>

            <!-- –°—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç–∞ -->
            <div style="margin-top: 15px;">
                <a href="https://t.me/YOUR_BOT_USERNAME" target="_blank" style="
                    color: #2196f3; 
                    text-decoration: none; 
                    font-size: 14px; 
                    font-weight: 600;
                ">
                    ü§ñ –û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
                </a>
            </div>
        </div>
    `;
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        if (document.body.contains(modal)) {
            closeModal(modal);
            if (typeof showNotification === 'function') {
                showNotification('info', '‚è∞ –û–∫–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç–æ. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∫–æ–¥ –≤ –∫–∞–Ω–∞–ª–µ!');
            }
        }
    }, 10000);
    // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤ DOM
    document.body.appendChild(modal);

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ —Ñ–æ–Ω
    modal.addEventListener('click', function(e) {
        if (e.target === modal) {
            closeModal(modal);
        }
    });
}
/**
 * –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
 */
function closeVerificationModalAndRefresh(element) {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    closeModal(element);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á—Ç–æ –∫–æ–¥ –Ω—É–∂–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å
    if (typeof showNotification === 'function') {
        showNotification('info', 'üìù –û–ø—É–±–ª–∏–∫—É–π—Ç–µ –∫–æ–¥ –≤ –∫–∞–Ω–∞–ª–µ –∏ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –µ–≥–æ –±–æ—Ç—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
    if (typeof loadUserChannels === 'function') {
        setTimeout(() => {
            loadUserChannels();
        }, 1000);
    }
}

// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ–π
window.closeVerificationModalAndRefresh = closeVerificationModalAndRefresh;
// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–ª—è onclick
window.closeDeleteModal = closeDeleteModal;
window.confirmChannelDeletion = confirmChannelDeletion;
window.startVerification = startVerification;
window.showDeleteConfirmation = showDeleteConfirmation;
window.startChannelVerification = startChannelVerification;