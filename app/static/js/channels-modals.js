// –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω:
let verificationChannelData = null;
let channelToDelete = null

// –§—É–Ω–∫—Ü–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è:
 //–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
function showDeleteConfirmation(channelId, channelName, channelUsername) {
    console.log(`üóëÔ∏è –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ ${channelId}`);

    channelToDelete = channelId;

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const oldModal = document.getElementById('deleteChannelModal');
    if (oldModal) {
        oldModal.remove();
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modal = document.createElement('div');
    modal.id = 'deleteChannelModal';
    modal.className = 'modal-backdrop';

    modal.innerHTML = `
        <div class="modal-overlay" onclick="closeDeleteModal()"></div>
        <div class="modal-content" style="pointer-events: auto; z-index: 9999; position: relative; background: white; border-radius: 12px; padding: 24px; max-width: 400px; width: 90%;">
            <div class="modal-header">
                <h3>üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª</h3>
                <button class="modal-close" onclick="closeDeleteModal()">&times;</button>
            </div>
            <div class="modal-body">
                <div class="confirmation-content">
                    <div class="channel-info" id="deleteChannelInfo">
                        <div style="display: flex; align-items: center; gap: 12px;">
                            <div class="channel-avatar" style="width: 40px; height: 40px; display: flex; align-items: center; justify-content: center; background: #e5e7eb; border-radius: 50%; font-weight: bold;">
                                ${channelName.substring(0, 2).toUpperCase()}
                            </div>
                            <div>
                                <div style="font-weight: 600; color: #111827;">${channelName}</div>
                                <div style="color: #6b7280; font-size: 0.875rem;">${channelUsername || '–ë–µ–∑ username'}</div>
                            </div>
                        </div>
                    </div>
                    <div style="background: #fef3cd; border: 1px solid #f59e0b; border-radius: var(--border-radius-sm); padding: 16px; margin: 16px 0; color: #92400e;">
                        <strong>‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ!</strong><br>
                        –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å. –ö–∞–Ω–∞–ª –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã.
                    </div>
                    <div style="text-align: center; font-weight: 600; color: var(--text-primary); margin: 16px 0;">
                        –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª?
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" onclick="closeDeleteModal()">
                    –û—Ç–º–µ–Ω–∞
                </button>
                <button class="btn btn-danger" id="confirmDeleteBtn" style="pointer-events: auto; z-index: 9999; position: relative;">
                    üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª
                </button>
            </div>
        </div>
    `;

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ body
    document.body.appendChild(modal);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∫–ª–∞—Å—Å–æ–º show
    modal.classList.add('show');

    // –î–æ–±–∞–≤–ª—è–µ–º event listener –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
    const confirmBtn = document.getElementById('confirmDeleteBtn');
    if (confirmBtn) {
        // –£–±–∏—Ä–∞–µ–º –ª—é–±—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        confirmBtn.onclick = null;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
        confirmBtn.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            console.log('üîÑ –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è');
            confirmChannelDeletionModal();
        }, { capture: true });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è touch —Å–æ–±—ã—Ç–∏–π (–¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤)
        confirmBtn.addEventListener('touchstart', function(e) {
            e.preventDefault();
            e.stopPropagation();
            console.log('üîÑ Touch –ø–æ –∫–Ω–æ–ø–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è');
            confirmChannelDeletionModal();
        }, { capture: true });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è mousedown (–±–æ–ª–µ–µ –Ω–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å)
        confirmBtn.addEventListener('mousedown', function(e) {
            e.preventDefault();
            e.stopPropagation();
            console.log('üîÑ Mousedown –ø–æ –∫–Ω–æ–ø–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è');
            confirmChannelDeletionModal();
        }, { capture: true });
        
        console.log('‚úÖ Event listener –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è');
    }

    // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    document.body.style.overflow = 'hidden';

    console.log('‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–æ –∑–∞–Ω–æ–≤–æ');
}
function closeDeleteModal() {
    console.log('‚ùå –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É–¥–∞–ª–µ–Ω–∏—è');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    closeModal();
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    channelToDelete = null;
    const confirmBtn = document.getElementById('confirmDeleteBtn');
    if (confirmBtn) {
        confirmBtn.disabled = false;
        confirmBtn.textContent = 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª';
    }
}
// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ –∫–ª–∏–∫—É –Ω–∞ –æ–≤–µ—Ä–ª–µ–π
document.addEventListener('click', function(e) {
    if (e.target.classList.contains('modal-overlay')) {
        closeModal();
    }
});
async function confirmChannelDeletionModal() {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º confirmChannelDeletionModal');
    console.log(`üîç channelToDelete: ${channelToDelete}`);
    
    if (!channelToDelete) {
        console.error('‚ùå –ù–µ—Ç –∫–∞–Ω–∞–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
        return;
    }

    const confirmBtn = document.getElementById('confirmDeleteBtn');
    console.log(`üîç confirmBtn –Ω–∞–π–¥–µ–Ω: ${!!confirmBtn}`);
    
    if (!confirmBtn) {
        console.error('‚ùå –ö–Ω–æ–ø–∫–∞ confirmDeleteBtn –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
    }
    
    const originalText = confirmBtn.textContent;
    console.log(`üîç originalText: ${originalText}`);

    try {
        // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        confirmBtn.disabled = true;
        confirmBtn.textContent = '‚è≥ –£–¥–∞–ª—è–µ–º...';

        console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª ${channelToDelete}`);

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const telegramUser = getTelegramUser();
        if (!telegramUser) {
            throw new Error('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
        }

        const headers = {
            'Content-Type': 'application/json',
            'X-Telegram-User-Id': telegramUser.id.toString()
        };

        if (telegramUser.username) {
            headers['X-Telegram-Username'] = telegramUser.username;
        }
       // if (telegramUser.first_name) {
        //    headers['X-Telegram-First-Name'] = telegramUser.first_name;
        //}
       // if (telegramUser.last_name) {
       //     headers['X-Telegram-Last-Name'] = telegramUser.last_name;
       // }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º DELETE –∑–∞–ø—Ä–æ—Å
        console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º DELETE –∑–∞–ø—Ä–æ—Å –Ω–∞ /api/channels/${channelToDelete}`);
        console.log(`üîë –ó–∞–≥–æ–ª–æ–≤–∫–∏:`, headers);
        
        const response = await fetch(`/api/channels/${channelToDelete}`, {
            method: 'DELETE',
            headers: headers
        });

        console.log(`üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status}`);
        console.log(`üìä Response OK: ${response.ok}`);
        
        const data = await response.json();
        console.log(`üìÑ –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:`, data);

        if (response.ok && data.success) {
            console.log('‚úÖ –ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω:', data.message);
            closeDeleteModal();

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            showSuccessNotification(data.message || '–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!');

            // –ù–û–í–û–ï: –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
            setTimeout(() => {
                loadUserChannels();
            }, 1000);

            // –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∏–∑ DOM
            const channelCard = document.querySelector(`[data-channel-id="${channelToDelete}"]`);
            if (channelCard) {
                channelCard.style.transition = 'opacity 0.3s ease';
                channelCard.style.opacity = '0';
                setTimeout(() => {
                    channelCard.remove();

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –∫–∞–Ω–∞–ª—ã
                    const remainingChannels = document.querySelectorAll('.channel-card[data-user-channel="true"]');
                    if (remainingChannels.length === 0) {
                        showEmptyState();
                    }
                }, 300);
            }

        } else {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
            console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞');
            console.error('üìä response.ok:', response.ok);
            console.error('üìä data.success:', data.success);
            console.error('üìÑ –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', data);
            
            const errorMessage = data.message || data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
            console.error('‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', errorMessage);

            showNotification('error', `‚ùå –û—à–∏–±–∫–∞: ${errorMessage}`);
        }

    } catch (error) {
        console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞:', error);
        showNotification('error', '‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
    } finally {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
        confirmBtn.disabled = false;
        confirmBtn.textContent = originalText;
    }
}

// –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
async function testDeleteChannelModal(channelId) {
    console.log(`üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ ${channelId} —á–µ—Ä–µ–∑ –º–æ–¥–∞–ª`);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º channelToDelete
    channelToDelete = channelId;
    console.log(`üîç –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω channelToDelete: ${channelToDelete}`);
    
    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —É–¥–∞–ª–µ–Ω–∏—è
    await confirmChannelDeletionModal();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
function testFullDeleteProcess(channelId) {
    console.log(`üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ ${channelId}`);
    
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    showDeleteConfirmation(channelId, '–¢–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª', 'test_channel');
    
    // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–æ–¥–∞–ª–∞
    setTimeout(() => {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∏ –∫–Ω–æ–ø–∫–∏');
        
        const modal = document.getElementById('deleteChannelModal');
        const confirmBtn = document.getElementById('confirmDeleteBtn');
        
        console.log(`üîç –ú–æ–¥–∞–ª –Ω–∞–π–¥–µ–Ω: ${!!modal}`);
        console.log(`üîç –ö–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞: ${!!confirmBtn}`);
        console.log(`üîç channelToDelete: ${channelToDelete}`);
        
        if (modal && confirmBtn) {
            console.log('‚úÖ –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã, –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ');
            
            // –ú–æ–∂–Ω–æ —Å—Ä–∞–∑—É –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —É–¥–∞–ª–µ–Ω–∏—è
            // confirmChannelDeletionModal();
        } else {
            console.error('‚ùå –ù–µ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã');
        }
    }, 500);
}

// –§—É–Ω–∫—Ü–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:
function showVerificationModal(channelId, channelName, channelUsername, verificationCode) {        
            console.log(`üîê –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è –∫–∞–Ω–∞–ª–∞ ${channelId}`);
            console.log(`üîê –ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${verificationCode}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π (—Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏)
            if (!channelId || !channelName || !verificationCode) {
                console.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è showVerificationModal:', { channelId, channelName, channelUsername, verificationCode });
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –∞ –Ω–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            const stack = new Error().stack;
            console.log('üìç Call stack:', stack);
            
            try {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥
                // —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ –∏ –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                createVerificationModalProgrammatically(channelId, channelName, channelUsername, verificationCode);
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞:', error);
                // Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É alert
                showSimpleAlert(channelName, channelUsername, verificationCode);
            }
        }

// –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ - –ø—Ä–æ—Å—Ç–æ–π alert
function showSimpleAlert(channelName, channelUsername, verificationCode) {
    const message = `üîê –ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ "${channelName}" (@${channelUsername}):\n\n${verificationCode}\n\n–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –∏ –æ–ø—É–±–ª–∏–∫—É–π—Ç–µ –≤ –≤–∞—à–µ–º –∫–∞–Ω–∞–ª–µ, –∑–∞—Ç–µ–º –ø–µ—Ä–µ—Å–ª–∞—Ç—å –Ω–∞—à–µ–º—É –±–æ—Ç—É.`;
    
    alert(message);
    
    // –ü–æ–ø—ã—Ç–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
    try {
        if (navigator.clipboard) {
            navigator.clipboard.writeText(verificationCode);
            console.log('‚úÖ –ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
        }
    } catch (error) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ
function createVerificationModalProgrammatically(channelId, channelName, channelUsername, verificationCode) {
    console.log('üîß –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ...');
    console.log('üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', { channelId, channelName, channelUsername, verificationCode });
    
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const existingModals = document.querySelectorAll('#verificationModal');
    existingModals.forEach(modal => {
        console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ:', modal);
        modal.remove();
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å
    if (!channelId || !channelName || !verificationCode) {
        console.error('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏');
        return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modal = document.createElement('div');
    modal.id = 'verificationModal';
    modal.className = 'modal-backdrop';
    
    modal.innerHTML = `
        <div class="modal" style="background: white !important; border-radius: 8px !important; padding: 24px !important; max-width: 500px !important; width: 90% !important; max-height: 80vh !important; overflow-y: auto !important; box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04) !important; position: relative !important; z-index: 100000 !important; margin: 0 auto !important; flex-shrink: 0 !important; align-self: center !important; justify-self: center !important;">
            <div class="modal-header">
                <h3 class="modal-title">üîê –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–ª–∞–¥–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–º</h3>
                <button class="modal-close" onclick="closeModal()" style="float: right; background: none; border: none; font-size: 24px; cursor: pointer;">&times;</button>
            </div>
            <div class="modal-body">
                <div class="verification-info">
                    <div class="channel-info" style="display: flex; align-items: center; gap: 12px; margin-bottom: 20px;">
                        <div class="channel-avatar" style="width: 50px; height: 50px; display: flex; align-items: center; justify-content: center; background: #e5e7eb; border-radius: 50%; font-weight: bold; font-size: 1.2rem;">
                            ${channelName.substring(0, 2).toUpperCase()}
                        </div>
                        <div>
                            <div style="font-weight: 600; color: #111827; font-size: 1.1rem;">${channelName}</div>
                            <div style="color: #6b7280;">@${channelUsername || '–ë–µ–∑ username'}</div>
                        </div>
                    </div>

                    <div class="verification-code-block" style="background: #f0fdf4; border: 2px solid #10b981; border-radius: 8px; padding: 16px; margin-bottom: 16px; text-align: center;">
                        <h4 style="color: #047857; margin-bottom: 8px;">üîê –í–∞—à –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:</h4>
                        <div style="font-family: monospace; font-size: 18px; font-weight: bold; color: #047857; background: white; padding: 8px; border-radius: 4px; border: 1px solid #10b981; cursor: pointer; user-select: all;" onclick="copyToClipboard('${verificationCode}');" title="–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è">${verificationCode}</div>
                        <small style="color: #047857; margin-top: 8px; display: block;">–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–¥ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è</small>
                    </div>
                    
                    <div class="instruction-block" style="background: #f0f9ff; border: 1px solid #0ea5e9; border-radius: 8px; padding: 16px; margin-bottom: 16px;">
                        <h4 style="color: #0369a1; margin-bottom: 12px;">üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:</h4>
                        <ol style="margin: 0; padding-left: 20px; color: #374151;">
                            <li style="margin-bottom: 8px;">–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤—ã—à–µ</li>
                            <li style="margin-bottom: 8px;">–û–ø—É–±–ª–∏–∫—É–π—Ç–µ –∫–æ–¥ –≤ –≤–∞—à–µ–º –∫–∞–Ω–∞–ª–µ <strong>@${channelUsername}</strong></li>
                            <li style="margin-bottom: 8px;">–ü–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º –Ω–∞—à–µ–º—É –±–æ—Ç—É</li>
                            <li style="margin-bottom: 8px;">–î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏</li>
                        </ol>
                    </div>

                    <div class="warning-block" style="background: #fef3cd; border: 1px solid #f59e0b; border-radius: 8px; padding: 12px;">
                        <small style="color: #92400e;">
                            üí° <strong>–°–æ–≤–µ—Ç:</strong> –ü–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞ –≤—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞.
                            –ì–ª–∞–≤–Ω–æ–µ ‚Äî —É—Å–ø–µ—Ç—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å –µ–≥–æ –±–æ—Ç—É!
                        </small>
                    </div>
                </div>
            </div>
            <div class="modal-footer" style="text-align: center; margin-top: 16px;">
                <button class="btn btn-secondary" onclick="closeModal()" style="margin-right: 8px;">–û—Ç–º–µ–Ω–∞</button>
                <button class="btn btn-primary" onclick="closeModal()">–ü–æ–Ω—è—Ç–Ω–æ</button>
            </div>
        </div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤ DOM
    document.body.appendChild(modal);
    console.log('üîç –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ DOM:', modal);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∫–ª–∞—Å—Å–æ–º show
    modal.classList.add('show');
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ conflicting —Å—Ç–∏–ª–∏
    document.body.style.position = 'relative';
    document.body.style.margin = '0';
    document.body.style.padding = '0';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    document.body.style.overflow = 'hidden';
    console.log('üîç –°—Ç–∏–ª–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã - overflow: hidden');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤–∏–¥–Ω–æ
    const computedStyle = window.getComputedStyle(modal);
    console.log('üîç Computed styles:', {
        display: computedStyle.display,
        position: computedStyle.position,
        zIndex: computedStyle.zIndex,
        visibility: computedStyle.visibility,
        opacity: computedStyle.opacity
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ –∫–ª–∏–∫—É –Ω–∞ backdrop
    modal.addEventListener('click', function(e) {
        if (e.target === modal) {
            closeModal();
        }
    });
    
    console.log('‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–æ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ');
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
    setTimeout(() => {
        const modalInDom = document.getElementById('verificationModal');
        console.log('üîç –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤ DOM —á–µ—Ä–µ–∑ 100ms:', modalInDom);
        if (modalInDom) {
            console.log('üîç –†–∞–∑–º–µ—Ä—ã –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞:', {
                width: modalInDom.offsetWidth,
                height: modalInDom.offsetHeight,
                top: modalInDom.offsetTop,
                left: modalInDom.offsetLeft
            });
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –ø–æ —Ü–µ–Ω—Ç—Ä—É
            const innerModal = modalInDom.querySelector('.modal');
            if (innerModal) {
                console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞...');
                
                // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ —Ü–µ–Ω—Ç—Ä—É
                modalInDom.style.display = 'flex';
                modalInDom.style.alignItems = 'center';
                modalInDom.style.justifyContent = 'center';
                
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                innerModal.style.margin = '0 auto';
                innerModal.style.alignSelf = 'center';
                innerModal.style.justifySelf = 'center';
                
                console.log('‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');
            }
            
            // –ï—Å–ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –≤–∏–¥–Ω–æ, –ø–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
            if (modalInDom.offsetWidth === 0 || modalInDom.offsetHeight === 0) {
                console.log('‚ùå –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –≤–∏–¥–Ω–æ, —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ alert');
                createSimpleVerificationAlert(channelName, channelUsername, verificationCode);
            }
        } else {
            console.log('‚ùå –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ alert');
            createSimpleVerificationAlert(channelName, channelUsername, verificationCode);
        }
    }, 100);
}

// –ü—Ä–æ—Å—Ç–æ–π –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–∫–∞–∑–∞ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
function createSimpleVerificationAlert(channelName, channelUsername, verificationCode) {
    console.log('üö® –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ alert –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏');
    
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
    const existingModals = document.querySelectorAll('#verificationModal');
    existingModals.forEach(modal => modal.remove());
    
    // –°–æ–∑–¥–∞–µ–º –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const simpleModal = document.createElement('div');
    simpleModal.id = 'verificationModal';
    simpleModal.className = 'modal-backdrop';
    
    simpleModal.innerHTML = `
        <div style="background: white !important; padding: 30px !important; border-radius: 10px !important; max-width: 400px !important; width: 90% !important; text-align: center !important; box-shadow: 0 10px 30px rgba(0,0,0,0.3) !important; margin: 0 auto !important; position: relative !important; max-height: 80vh !important; overflow-y: auto !important;">
            <h2 style="color: #333 !important; margin-bottom: 20px !important;">üîê –ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏</h2>
            <p style="color: #666 !important; margin-bottom: 15px !important;">–ö–∞–Ω–∞–ª: <strong>${channelName}</strong></p>
            <p style="color: #666 !important; margin-bottom: 15px !important;">Username: <strong>@${channelUsername}</strong></p>
            <div style="background: #f0f9ff !important; border: 2px solid #0ea5e9 !important; border-radius: 8px !important; padding: 15px !important; margin: 20px 0 !important;">
                <p style="color: #0369a1 !important; margin-bottom: 10px !important; font-weight: bold !important;">–í–∞—à –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:</p>
                <div style="font-family: monospace !important; font-size: 20px !important; font-weight: bold !important; color: #0369a1 !important; background: white !important; padding: 10px !important; border-radius: 5px !important; border: 1px solid #0ea5e9 !important; user-select: all !important;">${verificationCode}</div>
            </div>
            <p style="color: #666 !important; font-size: 14px !important; margin-bottom: 20px !important;">–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –∏ –æ–ø—É–±–ª–∏–∫—É–π—Ç–µ –≤ –≤–∞—à–µ–º –∫–∞–Ω–∞–ª–µ</p>
            <button onclick="copyToClipboard('${verificationCode}'); showNotification('–ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!', 'success');" style="background: #0ea5e9 !important; color: white !important; border: none !important; padding: 10px 20px !important; border-radius: 5px !important; cursor: pointer !important; margin-right: 10px !important;">–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥</button>
            <button onclick="closeModal()" style="background: #6b7280 !important; color: white !important; border: none !important; padding: 10px 20px !important; border-radius: 5px !important; cursor: pointer !important;">–ó–∞–∫—Ä—ã—Ç—å</button>
        </div>
    `;
    
    document.body.appendChild(simpleModal);
    document.body.style.overflow = 'hidden';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∫–ª–∞—Å—Å–æ–º show
    simpleModal.classList.add('show');
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ –∫–ª–∏–∫—É –Ω–∞ backdrop
    simpleModal.addEventListener('click', function(e) {
        if (e.target === simpleModal) {
            closeModal();
        }
    });
    
    console.log('‚úÖ –ü—Ä–æ—Å—Ç–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–æ');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
function copyToClipboard(text) {
    try {
        if (navigator.clipboard) {
            navigator.clipboard.writeText(text).then(() => {
                console.log('‚úÖ –ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
                showNotification('–ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!', 'success');
            }).catch(err => {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
                fallbackCopyTextToClipboard(text);
            });
        } else {
            fallbackCopyTextToClipboard(text);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
        fallbackCopyTextToClipboard(text);
    }
}

// Fallback –º–µ—Ç–æ–¥ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
function fallbackCopyTextToClipboard(text) {
    const textArea = document.createElement('textarea');
    textArea.value = text;
    textArea.style.position = 'fixed';
    textArea.style.left = '-999999px';
    textArea.style.top = '-999999px';
    document.body.appendChild(textArea);
    textArea.focus();
    textArea.select();
    
    try {
        const successful = document.execCommand('copy');
        if (successful) {
            console.log('‚úÖ –ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ (fallback)');
            showNotification('–ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!', 'success');
        } else {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥');
            showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥', 'error');
        }
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
        showNotification('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è', 'error');
    }
    
    document.body.removeChild(textArea);
}

// –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 12px 16px;
        border-radius: 8px;
        color: white;
        font-weight: 500;
        z-index: 10000;
        animation: slideIn 0.3s ease-out;
    `;
    
    if (type === 'success') {
        notification.style.background = '#10b981';
    } else if (type === 'error') {
        notification.style.background = '#ef4444';
    } else {
        notification.style.background = '#6366f1';
    }
    
    notification.textContent = message;
    document.body.appendChild(notification);
    
    setTimeout(() => {
        notification.style.animation = 'slideOut 0.3s ease-out';
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 300);
    }, 3000);
}

// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏
window.showVerificationModal = showVerificationModal;
window.showDeleteConfirmation = showDeleteConfirmation;
window.createVerificationModalProgrammatically = createVerificationModalProgrammatically;
window.createSimpleVerificationAlert = createSimpleVerificationAlert;
window.showSimpleAlert = showSimpleAlert;
window.copyToClipboard = copyToClipboard;
window.showNotification = showNotification;

console.log('‚úÖ Modal functions loaded:', {
    showVerificationModal: typeof window.showVerificationModal,
    showDeleteConfirmation: typeof window.showDeleteConfirmation
});

async function startVerification() {
    if (!verificationChannelData) {
        console.error('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏');
        return;
    }

    const startBtn = document.getElementById('startVerificationBtn');
    const originalText = startBtn.textContent;

    try {
        startBtn.disabled = true;
        startBtn.textContent = '‚è≥ –ó–∞–ø—É—Å–∫ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏...';

        const telegramUser = getTelegramUser();
        if (!telegramUser) {
            throw new Error('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
        }

        const headers = {
            'Content-Type': 'application/json',
            'X-Telegram-User-Id': telegramUser.id.toString()
        };

        if (telegramUser.username) {
            headers['X-Telegram-Username'] = telegramUser.username;
        }

        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ endpoint, —á—Ç–æ –∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
        const response = await fetch('/api/channels', {
            method: 'POST',
            headers: headers,
            body: JSON.stringify({
                username: verificationChannelData.username?.replace('@', '') || 'unknown',
                category: 'other',
                description: '–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞',
                payment_terms: 'prepayment',
                action: 'reverify', // –§–ª–∞–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
                channel_id: verificationChannelData.id
            })
        });

        const result = await response.json();

        if (!result.success) {
            throw new Error(result.error || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        }

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        closeModal();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∫–∞–∫ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞
        const verificationCode = result.verification_code || result.channel?.verification_code;
        const channelUsername = result.channel?.username || verificationChannelData.username;

        if (verificationCode) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            createVerificationModalProgrammatically(
                verificationChannelData.id,
                verificationChannelData.title || verificationChannelData.name,
                channelUsername,
                verificationCode
            );
        } else {
            // Fallback –¥–ª—è —Å–ª—É—á–∞–µ–≤ –±–µ–∑ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
            showSuccessNotification('‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞!');
        }

    }
    catch (error) {
        console.error('üí• –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
        showErrorNotification(error.message);
    }
    finally {
        startBtn.disabled = false;
        startBtn.textContent = originalText;
    }

}

// –î–µ–ª–∞–µ–º startVerification –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ–π
window.startVerification = startVerification;
console.log('‚úÖ startVerification function loaded:', typeof window.startVerification);

function showVerificationCode(data) {
            const content = document.getElementById('verificationContent');
            content.innerHTML = `
                <div class="verification-code-display">
                    <div class="channel-info" style="display: flex; align-items: center; gap: 12px; margin-bottom: 20px;">
                        <div class="channel-avatar" style="width: 50px; height: 50px; display: flex; align-items: center; justify-content: center; background: #e5e7eb; border-radius: 50%; font-weight: bold; font-size: 1.2rem;">
                            ${verificationChannelData.name.substring(0, 2).toUpperCase()}
                        </div>
                        <div>
                            <div style="font-weight: 600; color: #111827; font-size: 1.1rem;">${verificationChannelData.name}</div>
                            <div style="color: #6b7280;">${verificationChannelData.username || '–ë–µ–∑ username'}</div>
                        </div>
                    </div>

                    <div class="code-block" style="background: #1f2937; color: #10b981; padding: 20px; border-radius: 8px; margin: 20px 0; text-align: center;">
                        <h4 style="color: #10b981; margin-bottom: 15px;">üîê –í–∞—à –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:</h4>
                        <div class="verification-code" style="
                            font-family: 'Courier New', monospace;
                            font-size: 24px;
                            font-weight: bold;
                            letter-spacing: 2px;
                            cursor: pointer;
                            user-select: all;
                            padding: 10px;
                            border: 2px dashed #10b981;
                            border-radius: 4px;
                            transition: all 0.2s ease;
                        " onclick="copyVerificationCode(this, '${data.verification_code}')">
                            ${data.verification_code}
                        </div>
                        <small style="color: #9ca3af; margin-top: 10px; display: block;">
                            –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–¥, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                        </small>
                    </div>

                    <div class="instruction-steps" style="background: #f9fafb; border-radius: 8px; padding: 16px;">
                        <h4 style="color: #374151; margin-bottom: 12px;">üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:</h4>
                        <ol style="margin: 0; padding-left: 20px; color: #4b5563;">
                            <li style="margin-bottom: 8px;">–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –≤—ã—à–µ</li>
                            <li style="margin-bottom: 8px;">–û—Ç–∫—Ä–æ–π—Ç–µ –≤–∞—à –∫–∞–Ω–∞–ª <strong>${verificationChannelData.username}</strong></li>
                            <li style="margin-bottom: 8px;">–û–ø—É–±–ª–∏–∫—É–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç—Ç–∏–º –∫–æ–¥–æ–º</li>
                            <li style="margin-bottom: 8px;">–ü–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—à–µ–º—É –±–æ—Ç—É</li>
                            <li>–î–æ–∂–¥–∏—Ç–µ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</li>
                        </ol>
                    </div>
                </div>
            `;

            // –ò–∑–º–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫—É
            const startBtn = document.getElementById('startVerificationBtn');
            startBtn.textContent = 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å';
            startBtn.onclick = () => checkVerificationStatus();
        }
function copyVerificationCode(code, element = null) {
    navigator.clipboard.writeText(code).then(() => {
        // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —ç–ª–µ–º–µ–Ω—Ç, –∏–∑–º–µ–Ω—è–µ–º –µ–≥–æ —Å—Ç–∏–ª—å
        if (element && element.style) {
            const originalBg = element.style.background;
            const originalText = element.textContent;

            element.style.background = '#1b5e20';
            element.innerHTML = `${code} ‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!`;

            setTimeout(() => {
                element.style.background = originalBg;
                element.innerHTML = code;
            }, 2000);
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if (typeof showNotification === 'function') {
            showNotification('success', 'üìã –ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
        } else {
            console.log('‚úÖ –ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω:', code);
        }

    }).catch(() => {
        // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
        const textArea = document.createElement('textarea');
        textArea.value = code;
        document.body.appendChild(textArea);
        textArea.select();
        document.execCommand('copy');
        document.body.removeChild(textArea);

        if (element && element.style) {
            element.style.background = '#1b5e20';
            element.innerHTML = `${code} ‚úÖ`;
            setTimeout(() => {
                element.style.background = '#333';
                element.innerHTML = code;
            }, 2000);
        }

        alert('üìã –ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
    });
}
async function checkVerificationStatus() {
            if (!verificationChannelData) return;

            try {
                const telegramUser = getTelegramUser();
                const headers = {
                    'Content-Type': 'application/json',
                    'X-Telegram-User-Id': telegramUser.id.toString()
                };

                const response = await fetch(`/api/channels/${verificationChannelData.id}`, {
                    method: 'GET',
                    headers: headers
                });

                const data = await response.json();

                if (data.success && data.channel && (data.channel.is_verified || data.channel.status === 'verified')) {
                    // –ö–∞–Ω–∞–ª –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!
                    showSuccessNotification('üéâ –ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!');
                    closeModal();

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
                    setTimeout(() => {
                        loadUserChannels();
                    }, 1000);
                } else {
                    showInfoNotification('‚è≥ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–æ–¥ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∏ –ø–µ—Ä–µ—Å–ª–∞–Ω –±–æ—Ç—É.');
                }

            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
                showErrorNotification('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏');
            }
        }

// –§—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω:
function showVerificationSuccess(data) {
            const modal = createModal();
            modal.innerHTML = `
                <div class="verification-modal success">
                    <div class="modal-header">
                        <div class="success-icon">‚úÖ</div>
                        <h3>–ö–∞–Ω–∞–ª –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!</h3>
                    </div>
                    <div class="modal-body">
                        <p><strong>${data.message}</strong></p>
                        <div class="channel-info">
                            <p><strong>–ö–∞–Ω–∞–ª:</strong> ${data.channel?.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª'}</p>
                            <p><strong>–°—Ç–∞—Ç—É—Å:</strong> <span class="status verified">–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω</span></p>
                            <p><strong>–î–∞—Ç–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:</strong> ${formatDate(data.channel?.verified_at)}</p>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-primary" onclick="closeModal()">
                            –û—Ç–ª–∏—á–Ω–æ!
                        </button>
                    </div>
                </div>
            `;

            document.body.appendChild(modal);
        }
function showVerificationError(data) {
            const modal = createModal();
            const instructions = data.instructions || [];
            const verificationCode = data.verification_code;

            modal.innerHTML = `
                <div class="verification-modal error">
                    <div class="modal-header">
                        <div class="error-icon">‚ùå</div>
                        <h3>–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å</h3>
                    </div>
                    <div class="modal-body">
                        <p class="error-message">${data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}</p>

                        ${verificationCode ? `
                            <div class="verification-code-block">
                                <h4>–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:</h4>
                                <div class="code-display">
                                    <code>${verificationCode}</code>
                                    <button class="btn btn-small" onclick="copyToClipboard('${verificationCode}')">
                                        üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                                    </button>
                                </div>
                            </div>
                        ` : ''}

                        ${instructions.length > 0 ? `
                            <div class="instructions">
                                <h4>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</h4>
                                <ol>
                                    ${instructions.map(instruction => `<li>${instruction}</li>`).join('')}
                                </ol>
                            </div>
                        ` : ''}
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-secondary" onclick="closeModal()">
                            –ü–æ–Ω—è—Ç–Ω–æ
                        </button>
                        <button class="btn btn-primary" onclick="retryVerification(${data.channel?.id || 'null'})">
                            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                        </button>
                    </div>
                </div>
            `;

            document.body.appendChild(modal);
        }
function createModal() {
            const modal = document.createElement('div');
            modal.className = 'loading-overlay';
            modal.style.padding = '20px';
            return modal;
        }

function retryVerification(channelId) {
    closeModal();
    if (channelId) {
        verifyChannel(channelId);
    }
}
function updateChannelStatus(channelId, status) {
            const channelCard = document.querySelector(`[data-channel-id="${channelId}"]`);
            if (channelCard) {
                const statusElement = channelCard.querySelector('.channel-status');
                if (statusElement) {
                    statusElement.className = `channel-status ${status}`;
                    statusElement.textContent = status === 'verified' ? '–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω' : '–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏';
                }

                // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
                const verifyButton = channelCard.querySelector('.btn-warning');
                if (verifyButton && status === 'verified') {
                    verifyButton.style.display = 'none';
                }
            }
        }
function copyToClipboard(text) {
            navigator.clipboard.writeText(text).then(() => {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                const notification = document.createElement('div');
                notification.className = 'toast-notification success';
                notification.textContent = '–ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!';
                document.body.appendChild(notification);

                setTimeout(() => {
                    notification.remove();
                }, 2000);
            }).catch(() => {
                // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
                const textArea = document.createElement('textarea');
                textArea.value = text;
                document.body.appendChild(textArea);
                textArea.select();
                document.execCommand('copy');
                document.body.removeChild(textArea);

                alert('–ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
            });
        }

document.addEventListener('click', function(e) {
    if (e.target.classList.contains('modal-overlay')) {
        closeDeleteModal();
    }
});

document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape') {
        closeDeleteModal();
    }
});
async function startChannelVerification(channelId, channelName, channelUsername) {
    console.log(`üîê –ó–∞–ø—É—Å–∫ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞ ${channelId}: ${channelName}`);

    try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
        const telegramUser = getTelegramUser();
        if (!telegramUser) {
            throw new Error('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        showNotification('info', '‚è≥ –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é...');

        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        const headers = {
            'Content-Type': 'application/json',
            'X-Telegram-User-Id': telegramUser.id.toString()
        };

        if (telegramUser.username) {
            headers['X-Telegram-Username'] = telegramUser.username;
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        const response = await fetch('/api/channels', {
            method: 'POST',
            headers: headers,
            body: JSON.stringify({
                username: channelUsername?.replace('@', '') || 'unknown',
                category: 'other',
                description: '–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞',
                payment_terms: 'prepayment',
                action: 'reverify', // –§–ª–∞–≥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
                channel_id: channelId
            })
        });

        const result = await response.json();

        if (!result.success) {
            throw new Error(result.error || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        }

        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞
        const verificationCode = result.verification_code || result.channel?.verification_code;
        const usernameForDisplay = result.channel?.username || channelUsername;

        if (verificationCode) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
            showVerificationInstructions(verificationCode, usernameForDisplay);
        } else {
            // Fallback –µ—Å–ª–∏ –∫–æ–¥ –Ω–µ –ø–æ–ª—É—á–µ–Ω
            showNotification('success', '‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞!');
        }

    } catch (error) {
        console.error('üí• –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
        showNotification('error', `‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
}
function showVerificationInstructions(verificationCode, channelUsername) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    createVerificationModalProgrammatically(
        'temp',
        '–ö–∞–Ω–∞–ª @' + channelUsername,
        channelUsername,
        verificationCode
    );
}

/**
 * –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
 */
function closeVerificationModalAndRefresh(element) {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    closeModal(element);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á—Ç–æ –∫–æ–¥ –Ω—É–∂–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å
    if (typeof showNotification === 'function') {
        showNotification('info', 'üìù –û–ø—É–±–ª–∏–∫—É–π—Ç–µ –∫–æ–¥ –≤ –∫–∞–Ω–∞–ª–µ –∏ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –µ–≥–æ –±–æ—Ç—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
    if (typeof loadUserChannels === 'function') {
        setTimeout(() => {
            loadUserChannels();
        }, 1000);
    }
}

// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ–π
window.closeVerificationModalAndRefresh = closeVerificationModalAndRefresh;
// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–ª—è onclick
window.closeDeleteModal = closeDeleteModal;
window.confirmChannelDeletionModal = confirmChannelDeletionModal;
window.testDeleteChannelModal = testDeleteChannelModal;
