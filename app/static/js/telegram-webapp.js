// static/js/telegram-webapp.js - –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ Telegram WebApp

// === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø TELEGRAM WEBAPP ===
function initTelegramWebApp() {
    console.log('üöÄ Initializing Telegram WebApp...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram WebApp API
    if (window.Telegram && window.Telegram.WebApp) {
        window.appGlobals.tg = window.Telegram.WebApp;
        window.appGlobals.isInTelegram = true;

        const tg = window.appGlobals.tg;

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        tg.ready();

        // –†–∞—Å—à–∏—Ä—è–µ–º –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
        tg.expand();

        // –í–∫–ª—é—á–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ —Å–≤–∞–π–ø–µ –≤–Ω–∏–∑
        tg.enableClosingConfirmation();

        console.log('‚úÖ Telegram WebApp initialized');
        console.log('Platform:', tg.platform);
        console.log('Version:', tg.version);
        console.log('Theme:', tg.colorScheme);

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É
        applyTelegramTheme();

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        setupTelegramEvents();

        return true;
    } else {
        console.log('‚ö†Ô∏è Not running in Telegram WebApp');
        window.appGlobals.isInTelegram = false;

        // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ
        if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
            setupBrowserMock();
            return true; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true –¥–ª—è mock-–∞
        }

        return false;
    }
}

// === –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –¢–ï–ú–´ TELEGRAM ===
function applyTelegramTheme() {
    if (!window.appGlobals.tg) return;

    const tg = window.appGlobals.tg;
    const colorScheme = tg.colorScheme;
    const themeParams = tg.themeParams;

    console.log('üé® Applying Telegram theme:', colorScheme);

    const root = document.documentElement;

    if (colorScheme === 'dark') {
        // –¢–µ–º–Ω–∞—è —Ç–µ–º–∞
        root.style.setProperty('--bg-primary', themeParams.bg_color || '#1a1a1a');
        root.style.setProperty('--bg-secondary', themeParams.secondary_bg_color || '#2d2d2d');
        root.style.setProperty('--text-primary', themeParams.text_color || '#ffffff');
        root.style.setProperty('--text-secondary', themeParams.hint_color || '#a0a0a0');
        root.style.setProperty('--border-color', '#404040');

        document.body.classList.add('dark-theme');
        document.body.classList.remove('light-theme');
    } else {
        // –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞
        root.style.setProperty('--bg-primary', themeParams.bg_color || '#ffffff');
        root.style.setProperty('--bg-secondary', themeParams.secondary_bg_color || '#f7fafc');
        root.style.setProperty('--text-primary', themeParams.text_color || '#2d3748');
        root.style.setProperty('--text-secondary', themeParams.hint_color || '#718096');
        root.style.setProperty('--border-color', '#e2e8f0');

        document.body.classList.add('light-theme');
        document.body.classList.remove('dark-theme');
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞ Telegram
    if (themeParams.header_bg_color) {
        tg.setHeaderColor(themeParams.header_bg_color);
    }

    if (themeParams.bg_color) {
        tg.setBackgroundColor(themeParams.bg_color);
    }
}

// === –°–û–ë–´–¢–ò–Ø TELEGRAM ===
function setupTelegramEvents() {
    if (!window.appGlobals.tg) return;

    const tg = window.appGlobals.tg;

    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã
    tg.onEvent('themeChanged', () => {
        console.log('üé® Theme changed');
        applyTelegramTheme();
    });

    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ viewport
    tg.onEvent('viewportChanged', (eventData) => {
        console.log('üì± Viewport changed:', eventData);
        handleViewportChange(eventData);
    });

    // –ì–ª–∞–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞
    tg.onEvent('mainButtonClicked', () => {
        console.log('üîµ Main button clicked');
        handleMainButtonClick();
    });

    // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    tg.onEvent('backButtonClicked', () => {
        console.log('‚¨ÖÔ∏è Back button clicked');
        handleBackButtonClick();
    });

    console.log('üì° Telegram events configured');
}

// === –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===
async function getTelegramUser() {
    if (!window.appGlobals.tg) {
        console.log('‚ö†Ô∏è Telegram WebApp not available');
        return null;
    }

    const tg = window.appGlobals.tg;

    // –°–ø–æ—Å–æ–± 1: –ò–∑ initDataUnsafe (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
    if (tg.initDataUnsafe && tg.initDataUnsafe.user) {
        const user = tg.initDataUnsafe.user;
        console.log('üë§ User from initDataUnsafe:', user);

        window.appGlobals.user = {
            id: user.id,
            first_name: user.first_name,
            last_name: user.last_name || '',
            username: user.username || '',
            language_code: user.language_code || 'ru',
            is_premium: user.is_premium || false
        };

        return window.appGlobals.user;
    }

    // –°–ø–æ—Å–æ–± 2: –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä (–¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)
    if (tg.initData) {
        try {
            const userData = await apiRequest('/api/telegram/verify', {
                method: 'POST',
                headers: {
                    'X-Telegram-Init-Data': tg.initData
                }
            });

            window.appGlobals.user = userData.user;
            return userData.user;
        } catch (error) {
            console.error('‚ùå User verification failed:', error);
        }
    }

    console.log('‚ö†Ô∏è No user data available');
    return null;
}

// === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô ===
function handleViewportChange(eventData) {
    if (eventData.isStateStable) {
        const viewportHeight = window.appGlobals.tg.viewportHeight;
        const viewportStableHeight = window.appGlobals.tg.viewportStableHeight;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—Ä—ã—Ç–∞ –ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        const keyboardOpen = viewportHeight < viewportStableHeight;

        if (keyboardOpen) {
            document.body.classList.add('keyboard-open');
        } else {
            document.body.classList.remove('keyboard-open');
        }
    }
}

function handleMainButtonClick() {
    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    console.log('Main button clicked - no handler defined');

    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    if (window.handleMainButtonClick && typeof window.handleMainButtonClick === 'function') {
        window.handleMainButtonClick();
    }
}

function handleBackButtonClick() {
    // –ü—Ä–æ—Å—Ç–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–∑–∞–¥
    if (window.history.length > 1) {
        window.history.back();
    } else if (window.appGlobals.tg) {
        window.appGlobals.tg.close();
    }
}

// === MOCK –î–õ–Ø –ë–†–ê–£–ó–ï–†–ê ===
function setupBrowserMock() {
    console.log('üîß Setting up browser mock for development');

    window.Telegram = {
        WebApp: {
            initDataUnsafe: {
                user: {
                    id: 373086959,
                    first_name: 'Test User',
                    last_name: 'Developer',
                    username: 'testuser',
                    language_code: 'ru',
                    is_premium: false
                }
            },
            initData: '',
            platform: 'web',
            version: '6.0',
            colorScheme: 'light',
            themeParams: {
                bg_color: '#ffffff',
                text_color: '#000000',
                header_bg_color: '#667eea',
                secondary_bg_color: '#f7fafc',
                hint_color: '#718096'
            },
            viewportHeight: window.innerHeight,
            viewportStableHeight: window.innerHeight,
            ready: () => console.log('Mock: ready'),
            expand: () => console.log('Mock: expand'),
            close: () => console.log('Mock: close'),
            enableClosingConfirmation: () => console.log('Mock: enableClosingConfirmation'),
            setHeaderColor: (color) => console.log('Mock: setHeaderColor', color),
            setBackgroundColor: (color) => console.log('Mock: setBackgroundColor', color),
            showAlert: (message, callback) => {
                alert(message);
                if (callback) callback();
            },
            showConfirm: (message, callback) => {
                const result = confirm(message);
                callback(result);
            },
            onEvent: (event, callback) => {
                console.log('Mock: onEvent', event);

                // –≠–º—É–ª–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                if (event === 'themeChanged') {
                    window.mockThemeCallback = callback;
                } else if (event === 'viewportChanged') {
                    window.mockViewportCallback = callback;
                } else if (event === 'mainButtonClicked') {
                    window.mockMainButtonCallback = callback;
                } else if (event === 'backButtonClicked') {
                    window.mockBackButtonCallback = callback;
                }
            },
            MainButton: {
                text: '–ì–æ—Ç–æ–≤–æ',
                isVisible: false,
                setText: function(text) {
                    console.log('Mock MainButton setText:', text);
                    this.text = text;
                },
                show: function() {
                    console.log('Mock MainButton show');
                    this.isVisible = true;
                },
                hide: function() {
                    console.log('Mock MainButton hide');
                    this.isVisible = false;
                },
                onClick: function(callback) {
                    console.log('Mock MainButton onClick set');
                    this.callback = callback;
                },
                click: function() {
                    if (this.callback) this.callback();
                }
            },
            BackButton: {
                isVisible: false,
                show: function() {
                    console.log('Mock BackButton show');
                    this.isVisible = true;
                },
                hide: function() {
                    console.log('Mock BackButton hide');
                    this.isVisible = false;
                },
                onClick: function(callback) {
                    console.log('Mock BackButton onClick set');
                    this.callback = callback;
                },
                click: function() {
                    if (this.callback) this.callback();
                }
            },
            HapticFeedback: {
                impactOccurred: (style) => console.log('Mock haptic impact:', style),
                notificationOccurred: (type) => console.log('Mock notification haptic:', type)
            }
        }
    };

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è mock
    window.appGlobals.tg = window.Telegram.WebApp;
    window.appGlobals.isInTelegram = true; // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –≤ Telegram

    console.log('‚úÖ Browser mock setup complete');
}

// === –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –†–ê–ó–†–ê–ë–û–¢–ö–ò ===
function testTelegramFunctions() {
    console.log('üß™ Testing Telegram functions...');

    if (window.appGlobals.tg) {
        // –¢–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
        window.appGlobals.tg.MainButton.setText('–¢–µ—Å—Ç');
        window.appGlobals.tg.MainButton.show();

        // –¢–µ—Å—Ç haptic feedback
        if (window.appGlobals.tg.HapticFeedback) {
            window.appGlobals.tg.HapticFeedback.impactOccurred('light');
        }

        console.log('‚úÖ Test complete');
    } else {
        console.log('‚ùå Telegram WebApp not available for testing');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.initTelegramWebApp = initTelegramWebApp;
window.getTelegramUser = getTelegramUser;
window.applyTelegramTheme = applyTelegramTheme;
window.setupTelegramEvents = setupTelegramEvents;
window.testTelegramFunctions = testTelegramFunctions;

console.log('üì± Telegram WebApp module loaded');