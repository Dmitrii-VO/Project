// TELEGRAM WEBAPP COMPATIBILITY LAYER
// –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Ä–∞–∑–Ω—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏ Telegram WebApp

class TelegramCompatibility {
    constructor() {
        this.tg = window.Telegram?.WebApp;
        this.version = this.getVersion();
        this.features = this.detectFeatures();
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ Telegram WebApp
    getVersion() {
        if (!this.tg) return '0.0';
        
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        return this.tg.version || 
               this.tg.WebAppVersion || 
               window.Telegram?.WebAppVersion || 
               '6.0'; // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π
    }

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    detectFeatures() {
        const features = {
            hapticFeedback: false,
            backButton: false,
            mainButton: false,
            settingsButton: false,
            invoices: false,
            popups: false,
            closingConfirmation: false,
            theme: false,
            cloudStorage: false
        };

        if (!this.tg) return features;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ñ—É–Ω–∫—Ü–∏–π –ø–æ –≤–µ—Ä—Å–∏–∏
        const versionFloat = parseFloat(this.version);

        // HapticFeedback –ø–æ—è–≤–∏–ª—Å—è –≤ –≤–µ—Ä—Å–∏–∏ 6.1
        features.hapticFeedback = versionFloat >= 6.1 && 
                                  this.tg.HapticFeedback && 
                                  typeof this.tg.HapticFeedback.impactOccurred === 'function';

        // BackButton –ø–æ—è–≤–∏–ª—Å—è –≤ –≤–µ—Ä—Å–∏–∏ 6.1
        features.backButton = versionFloat >= 6.1 && this.tg.BackButton;

        // MainButton –¥–æ—Å—Ç—É–ø–µ–Ω —Å –≤–µ—Ä—Å–∏–∏ 6.0
        features.mainButton = versionFloat >= 6.0 && this.tg.MainButton;

        // SettingsButton –ø–æ—è–≤–∏–ª—Å—è –≤ –≤–µ—Ä—Å–∏–∏ 6.10
        features.settingsButton = versionFloat >= 6.10 && this.tg.SettingsButton;

        // Invoices –¥–æ—Å—Ç—É–ø–Ω—ã —Å –≤–µ—Ä—Å–∏–∏ 6.1
        features.invoices = versionFloat >= 6.1 && this.tg.showInvoice;

        // Popups –ø–æ—è–≤–∏–ª–∏—Å—å –≤ –≤–µ—Ä—Å–∏–∏ 6.2
        features.popups = versionFloat >= 6.2 && this.tg.showPopup;

        // Closing confirmation —Å –≤–µ—Ä—Å–∏–∏ 6.2
        features.closingConfirmation = versionFloat >= 6.2 && this.tg.enableClosingConfirmation;

        // Theme parameters —Å –≤–µ—Ä—Å–∏–∏ 6.1
        features.theme = versionFloat >= 6.1 && this.tg.themeParams;

        // Cloud Storage —Å –≤–µ—Ä—Å–∏–∏ 6.9
        features.cloudStorage = versionFloat >= 6.9 && this.tg.CloudStorage;

        return features;
    }

    // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π Haptic Feedback
    hapticFeedback(type = 'light') {
        if (!this.features.hapticFeedback) {
            console.debug(`HapticFeedback –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –≤–µ—Ä—Å–∏–∏ ${this.version}`);
            return false;
        }

        try {
            this.tg.HapticFeedback.impactOccurred(type);
            return true;
        } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ HapticFeedback:', error);
            return false;
        }
    }

    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    showAlert(message) {
        if (this.tg?.showAlert) {
            this.tg.showAlert(message);
            return true;
        } else {
            alert(message);
            return false;
        }
    }

    // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–∫–∞–∑ popup
    showPopup(params) {
        if (this.features.popups) {
            this.tg.showPopup(params);
            return true;
        } else {
            // Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π alert
            this.showAlert(params.message || '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');
            return false;
        }
    }

    // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å MainButton
    configureMainButton(params) {
        if (!this.features.mainButton) {
            console.debug('MainButton –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
            return false;
        }

        try {
            const button = this.tg.MainButton;
            
            if (params.text) button.setText(params.text);
            if (params.color) button.setParams({ color: params.color });
            if (params.textColor) button.setParams({ text_color: params.textColor });
            
            if (params.show) {
                button.show();
            } else if (params.hide) {
                button.hide();
            }

            if (params.onClick && typeof params.onClick === 'function') {
                button.onClick(params.onClick);
            }

            return true;
        } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ MainButton:', error);
            return false;
        }
    }

    // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å BackButton
    configureBackButton(params) {
        if (!this.features.backButton) {
            console.debug('BackButton –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
            return false;
        }

        try {
            const button = this.tg.BackButton;
            
            if (params.show) {
                button.show();
            } else if (params.hide) {
                button.hide();
            }

            if (params.onClick && typeof params.onClick === 'function') {
                button.onClick(params.onClick);
            }

            return true;
        } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ BackButton:', error);
            return false;
        }
    }

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
    applyTheme() {
        if (!this.features.theme) {
            console.debug('Theme parameters –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è');
            return false;
        }

        try {
            const theme = this.tg.themeParams;
            const root = document.documentElement;

            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å—Ç—å
            Object.entries({
                '--tg-theme-bg-color': theme.bg_color,
                '--tg-theme-text-color': theme.text_color,
                '--tg-theme-button-color': theme.button_color,
                '--tg-theme-button-text-color': theme.button_text_color,
                '--tg-theme-hint-color': theme.hint_color,
                '--tg-theme-link-color': theme.link_color,
                '--tg-theme-secondary-bg-color': theme.secondary_bg_color
            }).forEach(([property, value]) => {
                if (value) root.style.setProperty(property, value);
            });

            return true;
        } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã:', error);
            return false;
        }
    }

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    getCompatibilityInfo() {
        return {
            version: this.version,
            features: this.features,
            isSupported: !!this.tg,
            recommendations: this.getRecommendations()
        };
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    getRecommendations() {
        const recommendations = [];
        
        if (!this.tg) {
            recommendations.push('Telegram WebApp –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø—É—Å–∫ –≤ Telegram.');
            return recommendations;
        }

        const versionFloat = parseFloat(this.version);
        
        if (versionFloat < 6.1) {
            recommendations.push('–û–±–Ω–æ–≤–∏—Ç–µ Telegram –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ HapticFeedback –∏ BackButton');
        }
        
        if (versionFloat < 6.2) {
            recommendations.push('–û–±–Ω–æ–≤–∏—Ç–µ Telegram –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Popups');
        }
        
        if (versionFloat < 6.9) {
            recommendations.push('–û–±–Ω–æ–≤–∏—Ç–µ Telegram –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ CloudStorage');
        }

        if (recommendations.length === 0) {
            recommendations.push('–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è!');
        }

        return recommendations;
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
window.TelegramCompatibility = new TelegramCompatibility();

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
console.log('üì± Telegram WebApp Compatibility Info:', 
    window.TelegramCompatibility.getCompatibilityInfo());

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.telegramCompat = window.TelegramCompatibility;