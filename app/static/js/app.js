// app/static/js/app.js - –û—Å–Ω–æ–≤–Ω–æ–π JavaScript –¥–ª—è Telegram Mini App

class TelegramMiniApp {
    constructor() {
        this.isInitialized = false;
        this.user = null;
        this.apiBase = '/api';
        this.cache = new Map();
    }

    async init() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Mini App...');

        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram WebApp API
            if (window.Telegram && window.Telegram.WebApp) {
                const tg = window.Telegram.WebApp;
                tg.ready();
                tg.expand();

                this.user = tg.initDataUnsafe.user;
                console.log('üë§ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', this.user);

                // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã
                this.applyTelegramTheme(tg.themeParams);
            } else {
                console.log('‚ö†Ô∏è Telegram WebApp API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –¥–µ–º–æ —Ä–µ–∂–∏–º');
            }

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            this.initializeComponents();
            this.setupEventListeners();

            this.isInitialized = true;
            console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        }
    }

    applyTelegramTheme(themeParams) {
        if (!themeParams) return;

        const root = document.documentElement;

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–∞ —Ç–µ–º—ã
        if (themeParams.bg_color) {
            root.style.setProperty('--tg-theme-bg-color', themeParams.bg_color);
        }
        if (themeParams.text_color) {
            root.style.setProperty('--tg-theme-text-color', themeParams.text_color);
        }
        if (themeParams.button_color) {
            root.style.setProperty('--tg-theme-button-color', themeParams.button_color);
        }
        if (themeParams.button_text_color) {
            root.style.setProperty('--tg-theme-button-text-color', themeParams.button_text_color);
        }
    }

    initializeComponents() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        this.initButtons();
        this.initForms();
        this.initCards();
    }

    initButtons() {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
        document.querySelectorAll('button, .btn').forEach(button => {
            button.addEventListener('click', this.handleButtonClick.bind(this));
        });
    }

    initForms() {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º
        document.querySelectorAll('form').forEach(form => {
            form.addEventListener('submit', this.handleFormSubmit.bind(this));
        });
    }

    initCards() {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
        document.querySelectorAll('.nav-card, .stat-card').forEach(card => {
            card.addEventListener('click', this.handleCardClick.bind(this));
        });
    }

    setupEventListeners() {
        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        window.addEventListener('app:ready', this.onAppReady.bind(this));
        window.addEventListener('resize', this.onResize.bind(this));

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        window.addEventListener('error', this.onError.bind(this));
    }

    handleButtonClick(event) {
        const button = event.target.closest('button, .btn');
        if (!button) return;

        // –ê–Ω–∏–º–∞—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è
        button.style.transform = 'scale(0.95)';
        setTimeout(() => {
            button.style.transform = '';
        }, 150);

        // Haptic feedback –¥–ª—è Telegram
        if (window.Telegram && window.Telegram.WebApp) {
            window.Telegram.WebApp.HapticFeedback.impactOccurred('light');
        }
    }

    handleFormSubmit(event) {
        event.preventDefault();
        const form = event.target;
        console.log('üìù –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã:', form.id || 'unnamed');

        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º
        this.showAlert('–§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!');
    }

    handleCardClick(event) {
        const card = event.target.closest('.nav-card, .stat-card');
        if (!card) return;

        // –ê–Ω–∏–º–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
        card.style.transform = 'scale(0.98)';
        setTimeout(() => {
            card.style.transform = '';
        }, 200);
    }

    onAppReady() {
        console.log('üéâ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ');
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    }

    onResize() {
        console.log('üì± –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞');
        // –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    }

    onError(event) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', event.error);
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    }

    // API –º–µ—Ç–æ–¥—ã
    async apiCall(endpoint, options = {}) {
        const url = `${this.apiBase}${endpoint}`;

        try {
            const response = await fetch(url, {
                headers: {
                    'Content-Type': 'application/json',
                    ...options.headers
                },
                ...options
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            return await response.json();
        } catch (error) {
            console.error(`API Error (${endpoint}):`, error);
            throw error;
        }
    }

    async loadStats() {
        try {
            const endpoints = {
                'channels-count': '/stats/channels',
                'offers-count': '/stats/offers',
                'revenue-amount': '/stats/revenue',
                'users-count': '/stats/users'
            };

            for (const [elementId, endpoint] of Object.entries(endpoints)) {
                const element = document.getElementById(elementId);
                if (!element) continue;

                try {
                    const data = await this.apiCall(endpoint);
                    this.animateCounter(element, data.count || data.value || 0);
                } catch (error) {
                    // –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ API
                    const demoData = {
                        'channels-count': 73,
                        'offers-count': 156,
                        'revenue-amount': '387K ‚ÇΩ',
                        'users-count': 841
                    };
                    this.animateCounter(element, demoData[elementId]);
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        }
    }

    animateCounter(element, finalValue) {
        const isNumber = typeof finalValue === 'number';
        const duration = 1500;
        const steps = 60;

        if (isNumber && finalValue > 0) {
            let currentValue = 0;
            const increment = finalValue / steps;
            const stepDuration = duration / steps;

            const interval = setInterval(() => {
                currentValue += increment;
                if (currentValue >= finalValue) {
                    element.textContent = Math.floor(finalValue).toLocaleString();
                    clearInterval(interval);
                } else {
                    element.textContent = Math.floor(currentValue).toLocaleString();
                }
            }, stepDuration);
        } else {
            // –î–ª—è —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            setTimeout(() => {
                element.textContent = finalValue;
            }, Math.random() * 1000 + 500);
        }
    }

    // –£—Ç–∏–ª–∏—Ç—ã
    showAlert(message) {
        if (window.Telegram && window.Telegram.WebApp) {
            window.Telegram.WebApp.showAlert(message);
        } else {
            alert(message);
        }
    }

    showConfirm(message, callback) {
        if (window.Telegram && window.Telegram.WebApp) {
            window.Telegram.WebApp.showConfirm(message, callback);
        } else {
            const result = confirm(message);
            callback(result);
        }
    }

    vibrate() {
        if (window.Telegram && window.Telegram.WebApp) {
            window.Telegram.WebApp.HapticFeedback.impactOccurred('medium');
        } else if (navigator.vibrate) {
            navigator.vibrate(50);
        }
    }

    setLoading(elementId, isLoading = true) {
        const element = document.getElementById(elementId);
        if (!element) return;

        if (isLoading) {
            element.innerHTML = '<span class="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</span>';
        }
    }

    formatNumber(num) {
        if (num >= 1000000) {
            return (num / 1000000).toFixed(1) + 'M';
        } else if (num >= 1000) {
            return (num / 1000).toFixed(1) + 'K';
        }
        return num.toString();
    }

    formatCurrency(amount, currency = 'RUB') {
        const symbols = {
            'RUB': '‚ÇΩ',
            'USD': '$',
            'EUR': '‚Ç¨'
        };

        return `${this.formatNumber(amount)} ${symbols[currency] || currency}`;
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ HTML
window.createOffer = function() {
    console.log('üéØ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞...');
    app.showAlert('–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –æ—Ñ—Ñ–µ—Ä–∞...');
    setTimeout(() => {
        window.location.href = '/offers';
    }, 500);
};

window.addChannel = function() {
    console.log('üì∫ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞...');
    app.showAlert('–ü–µ—Ä–µ—Ö–æ–¥ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –∫–∞–Ω–∞–ª–∞...');
    setTimeout(() => {
        window.location.href = '/channels-enhanced';
    }, 500);
};

window.viewStats = function() {
    console.log('üìä –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
    app.showAlert('–ü–µ—Ä–µ—Ö–æ–¥ –∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ...');
    setTimeout(() => {
        window.location.href = '/analytics';
    }, 500);
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = new TelegramMiniApp();

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', function() {
    console.log('üì± DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    app.init();

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if (document.getElementById('channels-count')) {
        setTimeout(() => {
            app.loadStats();
        }, 1000);
    }
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.TelegramMiniApp = TelegramMiniApp;
window.app = app;