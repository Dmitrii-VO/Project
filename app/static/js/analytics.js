/**
 * analytics.js - JavaScript –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
 * Telegram Mini App - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
 * 
 * –§—É–Ω–∫—Ü–∏–∏:
 * - –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API
 * - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
 * - –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Å Chart.js
 * - –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∑–∞–≥—Ä—É–∑–∫–∏
 */

class AnalyticsManager {
    constructor() {
        this.isLoading = false;
        this.charts = {};
        this.data = {};
        this.currentSection = 'overview';
        
        console.log('üìä Analytics Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    // === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
    async init() {
        try {
            console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
            this.showLoadingState();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å API
            await this.loadAnalyticsData();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            this.updateStatCards();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
            this.initializeCharts();
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
            this.setupNavigation();
            
            console.log('‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
            this.showErrorState(error.message);
        }
    }

    // === –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• ===
    async loadAnalyticsData() {
        try {
            this.isLoading = true;
            
            console.log('üì° –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API...');
            console.log('üåê URL –∑–∞–ø—Ä–æ—Å–∞:', '/api/analytics/dashboard');
            
            const response = await fetch('/api/analytics/dashboard', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Telegram-Web-App-Data': window.Telegram?.WebApp?.initData || ''
                }
            });

            console.log('üìû –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', {
                status: response.status,
                statusText: response.statusText,
                ok: response.ok,
                headers: Object.fromEntries(response.headers.entries())
            });

            if (!response.ok) {
                const errorText = await response.text();
                console.error('‚ùå –û—à–∏–±–∫–∞ HTTP:', errorText);
                throw new Error(`HTTP ${response.status}: ${response.statusText}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: ${errorText}`);
            }

            const result = await response.json();
            console.log('üìä –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç API:', result);
            
            if (!result.success) {
                console.error('‚ùå API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É:', result);
                throw new Error(result.error || result.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
            }

            this.data = result;
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ this.data:', this.data);
            
            return this.data;
            
        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            console.error('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
                name: error.name,
                message: error.message,
                stack: error.stack
            });
            
            // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
            console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fallback –¥–∞–Ω–Ω—ã–µ...');
            try {
                await this.loadFallbackData();
                console.log('‚úÖ Fallback –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
            } catch (fallbackError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ fallback –¥–∞–Ω–Ω—ã—Ö:', fallbackError);
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö
                this.data = this.generateEmptyData();
                console.log('üìä –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—É—Å—Ç—ã–µ/–Ω—É–ª–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ - –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
                console.log('üéØ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—É—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', this.data);
            }
        } finally {
            this.isLoading = false;
        }
    }

    // === –û–ë–ù–û–í–õ–ï–ù–ò–ï –ö–ê–†–¢–û–ß–ï–ö –°–¢–ê–¢–ò–°–¢–ò–ö–ò ===
    updateStatCards() {
        const stats = this.data.data || this.data;
        
        console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
        console.log('üìä –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', stats);
        
        // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
        const elements = {
            'total-views': this.formatNumber(stats.total_views || 0),
            'click-rate': this.formatPercentage(stats.click_rate || 0),
            'total-revenue': this.formatCurrency(stats.total_revenue || 0),
            'conversion-rate': this.formatPercentage(stats.conversion_rate || 0),
            'total-offers': this.formatNumber(stats.total_offers || 0),
            'total-proposals': this.formatNumber(stats.total_proposals || 0),
            'acceptance-rate': this.formatPercentage(stats.acceptance_rate || 0),
            'channels-count': this.formatNumber(stats.channels_count || 0),
            'offers-count': this.formatNumber(stats.offers_count || 0),
            'revenue-amount': this.formatCurrency(stats.revenue_amount || 0),
            'users-count': this.formatNumber(stats.users_count || 0),
            'avg-cpm': this.formatCurrency(stats.avg_cpm || 0),
            'total-spent': this.formatCurrency(stats.total_spent || 0),
            'month-spent': this.formatCurrency(stats.month_spent || 0),
            'avg-check': this.formatCurrency(stats.avg_check || 0)
        };

        console.log('üéØ –ó–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', elements);

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        Object.entries(elements).forEach(([id, value]) => {
            const element = document.getElementById(id);
            if (element) {
                // –£–¥–∞–ª—è–µ–º loading-skeleton –µ—Å–ª–∏ –µ—Å—Ç—å
                const loadingSkeleton = element.querySelector('.loading-skeleton');
                if (loadingSkeleton) {
                    loadingSkeleton.remove();
                }
                
                element.innerHTML = value;
                element.classList.remove('loading');
                console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —ç–ª–µ–º–µ–Ω—Ç ${id}: ${value}`);
            } else {
                console.warn(`‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç —Å ID '${id}' –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }
        });
        
        console.log('üèÅ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    }

    // === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ì–†–ê–§–ò–ö–û–í ===
    initializeCharts() {
        console.log('üìà –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤...');
        
        // –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ –¥–Ω—è–º
        this.createViewsChart();
        
        // –ì—Ä–∞—Ñ–∏–∫ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        this.createProposalsChart();
        
        // –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤
        this.createSpendingChart();
        
        // –ì—Ä–∞—Ñ–∏–∫ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        this.createEfficiencyChart();
        
        console.log('‚úÖ –ì—Ä–∞—Ñ–∏–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    }

    // === –°–û–ó–î–ê–ù–ò–ï –ì–†–ê–§–ò–ö–ê –ü–†–û–°–ú–û–¢–†–û–í ===
    createViewsChart() {
        const canvas = document.getElementById('viewsChart');
        if (!canvas) return;

        const ctx = canvas.getContext('2d');
        const data = this.data.views_by_day || this.generateViewsData();

        this.charts.views = new Chart(ctx, {
            type: 'line',
            data: {
                labels: data.labels,
                datasets: [{
                    label: '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã',
                    data: data.values,
                    borderColor: 'rgb(102, 126, 234)',
                    backgroundColor: 'rgba(102, 126, 234, 0.1)',
                    borderWidth: 2,
                    fill: true,
                    tension: 0.4
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    }

    // === –°–û–ó–î–ê–ù–ò–ï –ì–†–ê–§–ò–ö–ê –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ô ===
    createProposalsChart() {
        const canvas = document.getElementById('proposalsChart');
        if (!canvas) return;

        const ctx = canvas.getContext('2d');
        const data = this.data.proposals_stats || {
            accepted: 45,
            rejected: 25,
            pending: 30
        };

        this.charts.proposals = new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: ['–ü—Ä–∏–Ω—è—Ç–æ', '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ', '–û–∂–∏–¥–∞—é—Ç'],
                datasets: [{
                    data: [data.accepted, data.rejected, data.pending],
                    backgroundColor: [
                        '#10B981', // –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –ø—Ä–∏–Ω—è—Ç—ã—Ö
                        '#EF4444', // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö
                        '#F59E0B'  // –ñ–µ–ª—Ç—ã–π –¥–ª—è –æ–∂–∏–¥–∞—é—â–∏—Ö
                    ],
                    borderWidth: 0
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'bottom'
                    }
                }
            }
        });
    }

    // === –°–û–ó–î–ê–ù–ò–ï –ì–†–ê–§–ò–ö–ê –†–ê–°–•–û–î–û–í ===
    createSpendingChart() {
        const canvas = document.getElementById('spendingChart');
        if (!canvas) return;

        const ctx = canvas.getContext('2d');
        const data = this.data.spending_by_day || this.generateSpendingData();

        this.charts.spending = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: data.labels,
                datasets: [{
                    label: '–†–∞—Å—Ö–æ–¥—ã',
                    data: data.values,
                    backgroundColor: 'rgba(102, 126, 234, 0.8)',
                    borderColor: 'rgb(102, 126, 234)',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    }

    // === –°–û–ó–î–ê–ù–ò–ï –ì–†–ê–§–ò–ö–ê –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò ===
    createEfficiencyChart() {
        const canvas = document.getElementById('efficiencyChart');
        if (!canvas) return;

        const ctx = canvas.getContext('2d');
        const data = this.data.efficiency_stats || {
            cpm: 75,
            ctr: 65,
            conversion: 45,
            roi: 85,
            reach: 70
        };

        this.charts.efficiency = new Chart(ctx, {
            type: 'radar',
            data: {
                labels: ['CPM', 'CTR', '–ö–æ–Ω–≤–µ—Ä—Å–∏—è', 'ROI', '–û—Ö–≤–∞—Ç'],
                datasets: [{
                    label: '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
                    data: [data.cpm, data.ctr, data.conversion, data.roi, data.reach],
                    borderColor: 'rgb(102, 126, 234)',
                    backgroundColor: 'rgba(102, 126, 234, 0.2)',
                    pointBackgroundColor: 'rgb(102, 126, 234)',
                    pointBorderColor: '#fff',
                    pointHoverBackgroundColor: '#fff',
                    pointHoverBorderColor: 'rgb(102, 126, 234)'
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    }
                },
                scales: {
                    r: {
                        beginAtZero: true,
                        max: 100
                    }
                }
            }
        });
    }

    // === –ù–ê–í–ò–ì–ê–¶–ò–Ø –ü–û –†–ê–ó–î–ï–õ–ê–ú ===
    setupNavigation() {
        const navCards = document.querySelectorAll('.nav-card');
        
        navCards.forEach(card => {
            card.addEventListener('click', (e) => {
                e.preventDefault();
                
                const section = card.getAttribute('onclick')?.match(/'([^']+)'/)?.[1];
                if (section) {
                    this.showSection(section);
                }
            });
        });
    }

    showSection(section) {
        this.currentSection = section;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
        document.querySelectorAll('.nav-card').forEach(card => {
            card.classList.remove('active');
        });
        
        const activeCard = document.querySelector(`[onclick*="${section}"]`);
        if (activeCard) {
            activeCard.classList.add('active');
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
        console.log(`üìÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω —Ä–∞–∑–¥–µ–ª: ${section}`);
        this.loadTabData(section);
    }

    // === –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –ü–û –í–ö–õ–ê–î–ö–ê–ú ===
    async loadTabData(section) {
        console.log(`üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∫–ª–∞–¥–∫–∏: ${section}`);
        
        switch(section) {
            case 'channels':
                await this.loadChannelsData();
                break;
            case 'offers':
                await this.loadOffersData();
                break;
            case 'revenue':
                await this.loadRevenueData();
                break;
            case 'overview':
                // –î–∞–Ω–Ω—ã–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ init()
                break;
            default:
                console.warn(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞: ${section}`);
        }
    }

    // === –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –ö–ê–ù–ê–õ–û–í ===
    async loadChannelsData() {
        try {
            console.log('üì∫ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤...');
            
            const response = await fetch('/api/analytics/channels', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Telegram-Web-App-Data': window.Telegram?.WebApp?.initData || ''
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            
            if (!result.success) {
                throw new Error(result.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤');
            }

            this.updateChannelsDisplay(result.data);
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', result.data);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–∞–ª–æ–≤:', error);
            this.showChannelsError(error.message);
        }
    }

    updateChannelsDisplay(data) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–æ–¥–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        document.getElementById('channels-total-count').innerHTML = data.total_channels || 0;
        document.getElementById('channels-verified-count').innerHTML = data.verified_channels || 0;
        document.getElementById('channels-total-subscribers').innerHTML = this.formatNumber(data.total_subscribers || 0);
        document.getElementById('channels-total-earned').innerHTML = this.formatCurrency(data.total_earned || 0);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        document.getElementById('channels-loading').style.display = 'none';
        document.getElementById('channels-error').style.display = 'none';
        document.getElementById('channels-content').style.display = 'block';

        const tableBody = document.getElementById('channels-table-body');
        
        if (!data.channels || data.channels.length === 0) {
            document.getElementById('channels-empty').style.display = 'block';
            document.querySelector('#channels-content .table-container').style.display = 'none';
            return;
        }

        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É –∫–∞–Ω–∞–ª–æ–≤
        tableBody.innerHTML = data.channels.map(channel => `
            <tr>
                <td>
                    <div class="channel-info">
                        <div class="channel-title">
                            ${channel.title}
                            ${channel.is_verified ? '<span class="verified-badge">‚úÖ</span>' : ''}
                        </div>
                        <div class="channel-username">@${channel.username || 'username'}</div>
                    </div>
                </td>
                <td class="number">${this.formatNumber(channel.subscribers)}</td>
                <td>
                    <span class="status-badge status-${channel.verification_status}">
                        ${this.getStatusText(channel.verification_status)}
                    </span>
                </td>
                <td class="number">${channel.total_proposals}</td>
                <td class="number">
                    ${channel.accepted_proposals}
                    <span class="percentage">(${channel.acceptance_rate}%)</span>
                </td>
                <td class="number">${channel.ctr}%</td>
                <td class="number">${this.formatCurrency(channel.total_earned)}</td>
            </tr>
        `).join('');
    }

    showChannelsError(message) {
        document.getElementById('channels-loading').style.display = 'none';
        document.getElementById('channels-error').style.display = 'block';
        document.getElementById('channels-content').style.display = 'none';
    }

    // === –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –û–§–§–ï–†–û–í ===
    async loadOffersData() {
        try {
            console.log('üì¢ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤...');
            
            const response = await fetch('/api/analytics/offers', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Telegram-Web-App-Data': window.Telegram?.WebApp?.initData || ''
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            
            if (!result.success) {
                throw new Error(result.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤');
            }

            this.updateOffersDisplay(result.data);
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ñ—Ñ–µ—Ä–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', result.data);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ñ—Ñ–µ—Ä–æ–≤:', error);
            this.showOffersError(error.message);
        }
    }

    updateOffersDisplay(data) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–æ–¥–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        document.getElementById('offers-total-count').innerHTML = data.total_offers || 0;
        document.getElementById('offers-active-count').innerHTML = data.active_offers || 0;
        document.getElementById('offers-total-spent').innerHTML = this.formatCurrency(data.total_spent || 0);
        document.getElementById('offers-avg-ctr').innerHTML = (data.avg_ctr || 0) + '%';

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        document.getElementById('offers-loading').style.display = 'none';
        document.getElementById('offers-error').style.display = 'none';
        document.getElementById('offers-content').style.display = 'block';

        const tableBody = document.getElementById('offers-table-body');
        
        if (!data.offers || data.offers.length === 0) {
            document.getElementById('offers-empty').style.display = 'block';
            document.querySelector('#offers-content .table-container').style.display = 'none';
            return;
        }

        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É –æ—Ñ—Ñ–µ—Ä–æ–≤
        tableBody.innerHTML = data.offers.map(offer => `
            <tr>
                <td>
                    <div class="offer-info">
                        <div class="offer-title">${offer.title}</div>
                        <div class="offer-type">${offer.offer_type}</div>
                    </div>
                </td>
                <td>${this.getCategoryText(offer.category)}</td>
                <td class="number">${this.formatCurrency(offer.price)}</td>
                <td>
                    <span class="status-badge status-${offer.status}">
                        ${this.getStatusText(offer.status)}
                    </span>
                </td>
                <td class="number">
                    ${offer.total_responses}
                    <span class="percentage">(${offer.acceptance_rate}%)</span>
                </td>
                <td class="number">${offer.ctr}%</td>
                <td class="number ${offer.roi >= 0 ? 'positive' : 'negative'}">${offer.roi}%</td>
                <td class="number">${this.formatCurrency(offer.total_spent)}</td>
            </tr>
        `).join('');
    }

    showOffersError(message) {
        document.getElementById('offers-loading').style.display = 'none';
        document.getElementById('offers-error').style.display = 'block';
        document.getElementById('offers-content').style.display = 'none';
    }

    // === –ó–ê–ì–†–£–ó–ö–ê –§–ò–ù–ê–ù–°–û–í–´–• –î–ê–ù–ù–´–• ===
    async loadRevenueData() {
        try {
            console.log('üí∞ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
            
            const response = await fetch('/api/analytics/revenue', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Telegram-Web-App-Data': window.Telegram?.WebApp?.initData || ''
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            
            if (!result.success) {
                throw new Error(result.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
            }

            this.updateRevenueDisplay(result.data);
            this.createRevenueChart(result.data);
            console.log('‚úÖ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', result.data);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
            this.showRevenueError(error.message);
        }
    }

    updateRevenueDisplay(data) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–æ–¥–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        document.getElementById('revenue-current-balance').innerHTML = this.formatCurrency(data.current_balance || 0);
        document.getElementById('revenue-total-earned').innerHTML = this.formatCurrency(data.total_earned || 0);
        document.getElementById('revenue-total-spent').innerHTML = this.formatCurrency(data.total_spent || 0);
        document.getElementById('revenue-net-profit').innerHTML = this.formatCurrency(data.net_profit || 0);

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã
        document.getElementById('revenue-monthly-projection').innerHTML = this.formatCurrency(data.monthly_projection || 0);
        
        const dailyAverage = data.total_earned / Math.max(data.daily_revenue?.length || 1, 1);
        document.getElementById('revenue-daily-average').innerHTML = this.formatCurrency(dailyAverage);
        
        const trend = data.net_profit >= 0 ? 'üìà –†–∞—Å—Ç–µ—Ç' : 'üìâ –ü–∞–¥–∞–µ—Ç';
        document.getElementById('revenue-trend').innerHTML = trend;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        document.getElementById('revenue-loading').style.display = 'none';
        document.getElementById('revenue-error').style.display = 'none';
        document.getElementById('revenue-content').style.display = 'block';

        // –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤
        const categoriesContainer = document.getElementById('revenue-categories');
        
        if (!data.revenue_by_category || data.revenue_by_category.length === 0) {
            document.getElementById('revenue-empty').style.display = 'block';
            return;
        }

        categoriesContainer.innerHTML = data.revenue_by_category.map(category => `
            <div class="category-item">
                <div class="category-info">
                    <div class="category-name">${this.getCategoryText(category.category)}</div>
                    <div class="category-placements">${category.placements} —Ä–∞–∑–º–µ—â–µ–Ω–∏–π</div>
                </div>
                <div class="category-revenue">${this.formatCurrency(category.revenue)}</div>
            </div>
        `).join('');
    }

    createRevenueChart(data) {
        const canvas = document.getElementById('revenueChart');
        if (!canvas || !data.daily_revenue) return;

        document.getElementById('revenue-chart-loading').style.display = 'none';

        const ctx = canvas.getContext('2d');
        
        const labels = data.daily_revenue.map(day => {
            const date = new Date(day.date);
            return date.toLocaleDateString('ru-RU', { month: 'short', day: 'numeric' });
        });
        
        const revenueData = data.daily_revenue.map(day => day.revenue);
        const expensesData = data.daily_expenses?.map(day => day.expenses) || [];

        new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [{
                    label: '–î–æ—Ö–æ–¥—ã',
                    data: revenueData,
                    borderColor: 'rgb(34, 197, 94)',
                    backgroundColor: 'rgba(34, 197, 94, 0.1)',
                    borderWidth: 2,
                    fill: true,
                    tension: 0.4
                }, {
                    label: '–†–∞—Å—Ö–æ–¥—ã',
                    data: expensesData,
                    borderColor: 'rgb(239, 68, 68)',
                    backgroundColor: 'rgba(239, 68, 68, 0.1)',
                    borderWidth: 2,
                    fill: true,
                    tension: 0.4
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: true,
                        position: 'top'
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    }

    showRevenueError(message) {
        document.getElementById('revenue-loading').style.display = 'none';
        document.getElementById('revenue-error').style.display = 'block';
        document.getElementById('revenue-content').style.display = 'none';
    }

    // === –£–¢–ò–õ–ò–¢–´ ===
    getStatusText(status) {
        const statusMap = {
            'pending': '–û–∂–∏–¥–∞–µ—Ç',
            'verified': '–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω',
            'rejected': '–û—Ç–∫–ª–æ–Ω–µ–Ω',
            'active': '–ê–∫—Ç–∏–≤–Ω—ã–π',
            'draft': '–ß–µ—Ä–Ω–æ–≤–∏–∫',
            'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω',
            'paused': '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
        };
        return statusMap[status] || status;
    }

    getCategoryText(category) {
        const categoryMap = {
            'general': '–û–±—â–µ–µ',
            'tech': '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
            'finance': '–§–∏–Ω–∞–Ω—Å—ã',
            'lifestyle': '–û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏',
            'education': '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
            'entertainment': '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',
            'business': '–ë–∏–∑–Ω–µ—Å',
            'health': '–ó–¥–æ—Ä–æ–≤—å–µ',
            'sports': '–°–ø–æ—Ä—Ç',
            'travel': '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è'
        };
        return categoryMap[category] || category;
    }

    // === –°–û–°–¢–û–Ø–ù–ò–Ø –ó–ê–ì–†–£–ó–ö–ò ===
    showLoadingState() {
        document.querySelectorAll('.loading').forEach(element => {
            element.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞...';
        });
    }

    showErrorState(message) {
        document.querySelectorAll('.loading').forEach(element => {
            element.textContent = '–û—à–∏–±–∫–∞';
            element.classList.add('error-color');
        });
        
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', message);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        this.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö', 'error');
    }

    // === –£–¢–ò–õ–ò–¢–´ ===
    formatNumber(num) {
        if (num >= 1000000) {
            return (num / 1000000).toFixed(1) + 'M';
        } else if (num >= 1000) {
            return (num / 1000).toFixed(1) + 'K';
        }
        return num.toString();
    }

    formatCurrency(amount) {
        return new Intl.NumberFormat('ru-RU', {
            style: 'currency',
            currency: 'RUB',
            minimumFractionDigits: 0
        }).format(amount);
    }

    formatPercentage(value) {
        return value.toFixed(1) + '%';
    }

    // === –ó–ê–ì–†–£–ó–ö–ê FALLBACK –î–ê–ù–ù–´–• ===
    async loadFallbackData() {
        console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏...');
        
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        try {
            const userResponse = await fetch('/api/users/current', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Telegram-Web-App-Data': window.Telegram?.WebApp?.initData || ''
                }
            });

            if (userResponse.ok) {
                const userData = await userResponse.json();
                if (userData.success && userData.data) {
                    this.data = this.processUserData(userData.data);
                    console.log('‚úÖ –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —á–µ—Ä–µ–∑ /api/users/current');
                    return;
                }
            }
        } catch (e) {
            console.warn('‚ö†Ô∏è Fallback —á–µ—Ä–µ–∑ /api/users/current –Ω–µ —É–¥–∞–ª—Å—è:', e);
        }

        throw new Error('–í—Å–µ —Å–ø–æ—Å–æ–±—ã –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —É–¥–∞–ª–∏—Å—å');
    }

    processUserData(userData) {
        return {
            data: {
                total_views: 0,
                click_rate: 0,
                total_revenue: userData.balance || 0,
                conversion_rate: 0,
                channels_count: 0,
                offers_count: 0,
                acceptance_rate: 0,
                views_by_day: { labels: ['–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'], values: [0] },
                proposals_stats: { accepted: 0, rejected: 0, pending: 0 },
                spending_by_day: { labels: ['–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'], values: [0] },
                efficiency_stats: { cpm: 0, ctr: 0, conversion: 0, roi: 0, reach: 0 }
            }
        };
    }

    // === –ü–£–°–¢–´–ï –î–ê–ù–ù–´–ï ===
    generateEmptyData() {
        return {
            data: {
                total_views: 0,
                click_rate: 0,
                total_revenue: 0,
                conversion_rate: 0,
                total_offers: 0,
                total_proposals: 0,
                acceptance_rate: 0,
                channels_count: 0,
                offers_count: 0,
                revenue_amount: 0,
                users_count: 0,
                avg_cpm: 0,
                total_spent: 0,
                month_spent: 0,
                avg_check: 0,
                views_by_day: { labels: ['–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'], values: [0] },
                proposals_stats: { accepted: 0, rejected: 0, pending: 0 },
                spending_by_day: { labels: ['–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'], values: [0] },
                efficiency_stats: { cpm: 0, ctr: 0, conversion: 0, roi: 0, reach: 0 }
            }
        };
    }

    // === –¢–ï–°–¢–û–í–´–ï –î–ê–ù–ù–´–ï (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏) ===
    generateTestData() {
        return {
            total_views: 12450,
            click_rate: 3.2,
            total_revenue: 45600,
            conversion_rate: 2.1,
            total_offers: 25,
            total_proposals: 156,
            acceptance_rate: 68.5,
            channels_count: 45,
            offers_count: 89,
            revenue_amount: 234500,
            users_count: 1250,
            avg_cpm: 45.50,
            total_spent: 23400,
            month_spent: 15600,
            avg_check: 2340
        };
    }

    generateViewsData() {
        const labels = [];
        const values = [];
        
        for (let i = 6; i >= 0; i--) {
            const date = new Date();
            date.setDate(date.getDate() - i);
            labels.push(date.toLocaleDateString('ru-RU', { 
                month: 'short', 
                day: 'numeric' 
            }));
            values.push(Math.floor(Math.random() * 1000) + 500);
        }
        
        return { labels, values };
    }

    generateSpendingData() {
        const labels = [];
        const values = [];
        
        for (let i = 29; i >= 0; i--) {
            const date = new Date();
            date.setDate(date.getDate() - i);
            labels.push(date.toLocaleDateString('ru-RU', { 
                day: 'numeric' 
            }));
            values.push(Math.floor(Math.random() * 5000) + 1000);
        }
        
        return { labels, values };
    }

    showNotification(message, type = 'info') {
        // –ü—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª–∏
        console.log(`üì¢ ${type.toUpperCase()}: ${message}`);
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫—Ä–∞—Å–∏–≤—ã–µ toast-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if (window.Telegram?.WebApp?.showAlert) {
            window.Telegram.WebApp.showAlert(message);
        }
    }

    // === –û–ë–ù–û–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–• ===
    async refresh() {
        console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...');
        await this.loadAnalyticsData();
        this.updateStatCards();
        this.updateCharts();
    }

    updateCharts() {
        Object.values(this.charts).forEach(chart => {
            if (chart && chart.update) {
                chart.update();
            }
        });
    }
}

// === –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
window.showSection = function(section) {
    if (window.analyticsManager) {
        window.analyticsManager.showSection(section);
    }
};

window.loadChannelsData = function() {
    if (window.analyticsManager) {
        window.analyticsManager.loadChannelsData();
    }
};

window.loadOffersData = function() {
    if (window.analyticsManager) {
        window.analyticsManager.loadOffersData();
    }
};

window.loadRevenueData = function() {
    if (window.analyticsManager) {
        window.analyticsManager.loadRevenueData();
    }
};

window.changeChartPeriod = function(chart, period) {
    console.log(`üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –≥—Ä–∞—Ñ–∏–∫–∞ ${chart}: ${period}`);
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞
};

window.goBack = function() {
    if (window.history.length > 1) {
        window.history.back();
    } else {
        window.location.href = '/';
    }
};

// === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
document.addEventListener('DOMContentLoaded', async () => {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...');
    
    try {
        window.analyticsManager = new AnalyticsManager();
        await window.analyticsManager.init();
        
        console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≥–æ—Ç–æ–≤–∞');
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
    }
});

// === TELEGRAM WEB APP –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø ===
if (window.Telegram?.WebApp) {
    window.Telegram.WebApp.ready();
    console.log('üì± Telegram Web App –≥–æ—Ç–æ–≤');
}
