/**
 * analytics.js - JavaScript –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
 * Telegram Mini App - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
 * 
 * –§—É–Ω–∫—Ü–∏–∏:
 * - –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API
 * - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
 * - –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Å Chart.js
 * - –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∑–∞–≥—Ä—É–∑–∫–∏
 */

class AnalyticsManager {
    constructor() {
        this.isLoading = false;
        this.charts = {};
        this.data = {};
        this.currentSection = 'overview';
        
        console.log('üìä Analytics Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    // === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
    async init() {
        try {
            console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
            this.showLoadingState();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å API
            await this.loadAnalyticsData();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            this.updateStatCards();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
            this.initializeCharts();
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
            this.setupNavigation();
            
            console.log('‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
            this.showErrorState(error.message);
        }
    }

    // === –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• ===
    async loadAnalyticsData() {
        try {
            this.isLoading = true;
            
            console.log('üì° –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API...');
            
            const response = await fetch('/api/statistics/dashboard', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Telegram-Web-App-Data': window.Telegram?.WebApp?.initData || ''
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            
            if (!result.success) {
                throw new Error(result.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
            }

            this.data = result.data || {};
            console.log('üìä –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', this.data);
            
            return this.data;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            this.data = this.generateTestData();
            console.log('üß™ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
            
            throw error;
        } finally {
            this.isLoading = false;
        }
    }

    // === –û–ë–ù–û–í–õ–ï–ù–ò–ï –ö–ê–†–¢–û–ß–ï–ö –°–¢–ê–¢–ò–°–¢–ò–ö–ò ===
    updateStatCards() {
        const stats = this.data;
        
        // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
        const elements = {
            'total-views': this.formatNumber(stats.total_views || 0),
            'click-rate': this.formatPercentage(stats.click_rate || 0),
            'total-revenue': this.formatCurrency(stats.total_revenue || 0),
            'conversion-rate': this.formatPercentage(stats.conversion_rate || 0),
            'total-offers': this.formatNumber(stats.total_offers || 0),
            'total-proposals': this.formatNumber(stats.total_proposals || 0),
            'acceptance-rate': this.formatPercentage(stats.acceptance_rate || 0),
            'channels-count': this.formatNumber(stats.channels_count || 0),
            'offers-count': this.formatNumber(stats.offers_count || 0),
            'revenue-amount': this.formatCurrency(stats.revenue_amount || 0),
            'users-count': this.formatNumber(stats.users_count || 0),
            'avg-cpm': this.formatCurrency(stats.avg_cpm || 0),
            'total-spent': this.formatCurrency(stats.total_spent || 0),
            'month-spent': this.formatCurrency(stats.month_spent || 0),
            'avg-check': this.formatCurrency(stats.avg_check || 0)
        };

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        Object.entries(elements).forEach(([id, value]) => {
            const element = document.getElementById(id);
            if (element) {
                element.innerHTML = value;
                element.classList.remove('loading');
                console.log(`üìà –û–±–Ω–æ–≤–ª–µ–Ω —ç–ª–µ–º–µ–Ω—Ç ${id}: ${value}`);
            }
        });
    }

    // === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ì–†–ê–§–ò–ö–û–í ===
    initializeCharts() {
        console.log('üìà –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤...');
        
        // –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ –¥–Ω—è–º
        this.createViewsChart();
        
        // –ì—Ä–∞—Ñ–∏–∫ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        this.createProposalsChart();
        
        // –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤
        this.createSpendingChart();
        
        // –ì—Ä–∞—Ñ–∏–∫ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        this.createEfficiencyChart();
        
        console.log('‚úÖ –ì—Ä–∞—Ñ–∏–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    }

    // === –°–û–ó–î–ê–ù–ò–ï –ì–†–ê–§–ò–ö–ê –ü–†–û–°–ú–û–¢–†–û–í ===
    createViewsChart() {
        const canvas = document.getElementById('viewsChart');
        if (!canvas) return;

        const ctx = canvas.getContext('2d');
        const data = this.data.views_by_day || this.generateViewsData();

        this.charts.views = new Chart(ctx, {
            type: 'line',
            data: {
                labels: data.labels,
                datasets: [{
                    label: '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã',
                    data: data.values,
                    borderColor: 'rgb(102, 126, 234)',
                    backgroundColor: 'rgba(102, 126, 234, 0.1)',
                    borderWidth: 2,
                    fill: true,
                    tension: 0.4
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    }

    // === –°–û–ó–î–ê–ù–ò–ï –ì–†–ê–§–ò–ö–ê –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ô ===
    createProposalsChart() {
        const canvas = document.getElementById('proposalsChart');
        if (!canvas) return;

        const ctx = canvas.getContext('2d');
        const data = this.data.proposals_stats || {
            accepted: 45,
            rejected: 25,
            pending: 30
        };

        this.charts.proposals = new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: ['–ü—Ä–∏–Ω—è—Ç–æ', '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ', '–û–∂–∏–¥–∞—é—Ç'],
                datasets: [{
                    data: [data.accepted, data.rejected, data.pending],
                    backgroundColor: [
                        '#10B981', // –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –ø—Ä–∏–Ω—è—Ç—ã—Ö
                        '#EF4444', // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö
                        '#F59E0B'  // –ñ–µ–ª—Ç—ã–π –¥–ª—è –æ–∂–∏–¥–∞—é—â–∏—Ö
                    ],
                    borderWidth: 0
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'bottom'
                    }
                }
            }
        });
    }

    // === –°–û–ó–î–ê–ù–ò–ï –ì–†–ê–§–ò–ö–ê –†–ê–°–•–û–î–û–í ===
    createSpendingChart() {
        const canvas = document.getElementById('spendingChart');
        if (!canvas) return;

        const ctx = canvas.getContext('2d');
        const data = this.data.spending_by_day || this.generateSpendingData();

        this.charts.spending = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: data.labels,
                datasets: [{
                    label: '–†–∞—Å—Ö–æ–¥—ã',
                    data: data.values,
                    backgroundColor: 'rgba(102, 126, 234, 0.8)',
                    borderColor: 'rgb(102, 126, 234)',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    }

    // === –°–û–ó–î–ê–ù–ò–ï –ì–†–ê–§–ò–ö–ê –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò ===
    createEfficiencyChart() {
        const canvas = document.getElementById('efficiencyChart');
        if (!canvas) return;

        const ctx = canvas.getContext('2d');
        const data = this.data.efficiency_stats || {
            cpm: 75,
            ctr: 65,
            conversion: 45,
            roi: 85,
            reach: 70
        };

        this.charts.efficiency = new Chart(ctx, {
            type: 'radar',
            data: {
                labels: ['CPM', 'CTR', '–ö–æ–Ω–≤–µ—Ä—Å–∏—è', 'ROI', '–û—Ö–≤–∞—Ç'],
                datasets: [{
                    label: '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
                    data: [data.cpm, data.ctr, data.conversion, data.roi, data.reach],
                    borderColor: 'rgb(102, 126, 234)',
                    backgroundColor: 'rgba(102, 126, 234, 0.2)',
                    pointBackgroundColor: 'rgb(102, 126, 234)',
                    pointBorderColor: '#fff',
                    pointHoverBackgroundColor: '#fff',
                    pointHoverBorderColor: 'rgb(102, 126, 234)'
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    }
                },
                scales: {
                    r: {
                        beginAtZero: true,
                        max: 100
                    }
                }
            }
        });
    }

    // === –ù–ê–í–ò–ì–ê–¶–ò–Ø –ü–û –†–ê–ó–î–ï–õ–ê–ú ===
    setupNavigation() {
        const navCards = document.querySelectorAll('.nav-card');
        
        navCards.forEach(card => {
            card.addEventListener('click', (e) => {
                e.preventDefault();
                
                const section = card.getAttribute('onclick')?.match(/'([^']+)'/)?.[1];
                if (section) {
                    this.showSection(section);
                }
            });
        });
    }

    showSection(section) {
        this.currentSection = section;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
        document.querySelectorAll('.nav-card').forEach(card => {
            card.classList.remove('active');
        });
        
        const activeCard = document.querySelector(`[onclick*="${section}"]`);
        if (activeCard) {
            activeCard.classList.add('active');
        }
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–∫–∞–∑–∞/—Å–∫—Ä—ã—Ç–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤
        console.log(`üìÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω —Ä–∞–∑–¥–µ–ª: ${section}`);
    }

    // === –°–û–°–¢–û–Ø–ù–ò–Ø –ó–ê–ì–†–£–ó–ö–ò ===
    showLoadingState() {
        document.querySelectorAll('.loading').forEach(element => {
            element.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞...';
        });
    }

    showErrorState(message) {
        document.querySelectorAll('.loading').forEach(element => {
            element.textContent = '–û—à–∏–±–∫–∞';
            element.style.color = '#EF4444';
        });
        
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', message);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        this.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö', 'error');
    }

    // === –£–¢–ò–õ–ò–¢–´ ===
    formatNumber(num) {
        if (num >= 1000000) {
            return (num / 1000000).toFixed(1) + 'M';
        } else if (num >= 1000) {
            return (num / 1000).toFixed(1) + 'K';
        }
        return num.toString();
    }

    formatCurrency(amount) {
        return new Intl.NumberFormat('ru-RU', {
            style: 'currency',
            currency: 'RUB',
            minimumFractionDigits: 0
        }).format(amount);
    }

    formatPercentage(value) {
        return value.toFixed(1) + '%';
    }

    // === –¢–ï–°–¢–û–í–´–ï –î–ê–ù–ù–´–ï ===
    generateTestData() {
        return {
            total_views: 12450,
            click_rate: 3.2,
            total_revenue: 45600,
            conversion_rate: 2.1,
            total_offers: 25,
            total_proposals: 156,
            acceptance_rate: 68.5,
            channels_count: 45,
            offers_count: 89,
            revenue_amount: 234500,
            users_count: 1250,
            avg_cpm: 45.50,
            total_spent: 23400,
            month_spent: 15600,
            avg_check: 2340
        };
    }

    generateViewsData() {
        const labels = [];
        const values = [];
        
        for (let i = 6; i >= 0; i--) {
            const date = new Date();
            date.setDate(date.getDate() - i);
            labels.push(date.toLocaleDateString('ru-RU', { 
                month: 'short', 
                day: 'numeric' 
            }));
            values.push(Math.floor(Math.random() * 1000) + 500);
        }
        
        return { labels, values };
    }

    generateSpendingData() {
        const labels = [];
        const values = [];
        
        for (let i = 29; i >= 0; i--) {
            const date = new Date();
            date.setDate(date.getDate() - i);
            labels.push(date.toLocaleDateString('ru-RU', { 
                day: 'numeric' 
            }));
            values.push(Math.floor(Math.random() * 5000) + 1000);
        }
        
        return { labels, values };
    }

    showNotification(message, type = 'info') {
        // –ü—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª–∏
        console.log(`üì¢ ${type.toUpperCase()}: ${message}`);
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫—Ä–∞—Å–∏–≤—ã–µ toast-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if (window.Telegram?.WebApp?.showAlert) {
            window.Telegram.WebApp.showAlert(message);
        }
    }

    // === –û–ë–ù–û–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–• ===
    async refresh() {
        console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...');
        await this.loadAnalyticsData();
        this.updateStatCards();
        this.updateCharts();
    }

    updateCharts() {
        Object.values(this.charts).forEach(chart => {
            if (chart && chart.update) {
                chart.update();
            }
        });
    }
}

// === –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
window.showSection = function(section) {
    if (window.analyticsManager) {
        window.analyticsManager.showSection(section);
    }
};

window.changeChartPeriod = function(chart, period) {
    console.log(`üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –≥—Ä–∞—Ñ–∏–∫–∞ ${chart}: ${period}`);
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞
};

window.goBack = function() {
    if (window.history.length > 1) {
        window.history.back();
    } else {
        window.location.href = '/';
    }
};

// === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
document.addEventListener('DOMContentLoaded', async () => {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...');
    
    try {
        window.analyticsManager = new AnalyticsManager();
        await window.analyticsManager.init();
        
        console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≥–æ—Ç–æ–≤–∞');
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
    }
});

// === TELEGRAM WEB APP –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø ===
if (window.Telegram?.WebApp) {
    window.Telegram.WebApp.ready();
    console.log('üì± Telegram Web App –≥–æ—Ç–æ–≤');
}
