class ChannelAnalyzer {
            constructor() {
                this.apiUrl = '/api/analyzer';
                // ‚úÖ –î–û–ë–ê–í–ò–¢–¨ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
                this.telegramBotToken = null;
                this.initializeBotToken();
            }

            async analyzeChannel(url) {
    const username = this.extractUsername(url);
    if (!username) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª');
    }

    this.showLoading();

    try {
        // ‚úÖ –°–ù–ê–ß–ê–õ–ê –ø—Ä–æ–±—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä (–Ω–∞–¥–µ–∂–Ω–µ–µ)
        console.log('üîÑ –ü—Ä–æ–±—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä...');
        const serverResult = await this.getFromServerAnalyzer(url);
        
        if (serverResult.success && serverResult.data) {
            console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
            this.currentChannelData = serverResult.data;
            return serverResult;
        }
        
        // ‚úÖ –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ –ø–æ–º–æ–≥, –ø—Ä–æ–±—É–µ–º —Ä—É—á–Ω–æ–π –≤–≤–æ–¥
        console.log('ü§î –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª 0 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä—É—á–Ω–æ–π –≤–≤–æ–¥...');
        return await this.showManualInputDialog(username, serverResult.data);
        
    } catch (error) {
        console.error('‚ùå –í—Å–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏:', error);
        // ‚úÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑–µ—Ä–≤ - —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ —Å –±–∞–∑–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        return await this.showManualInputDialog(username, null);
    }
}

            async getTelegramChannelInfo(username) {
    try {
        console.log('ü§ñ –ü—Ä–æ–±—É–µ–º Telegram Bot API –¥–ª—è:', username);

        // –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ Telegram Bot API
        const telegramUrl = `https://api.telegram.org/bot${this.telegramBotToken}/getChat?chat_id=@${username}`;

        const response = await fetch(telegramUrl);
        const data = await response.json();

        console.log('üì• –û—Ç–≤–µ—Ç getChat:', data);

        if (data.ok && data.result) {
            const channelInfo = data.result;

            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            const membersResponse = await fetch(
                `https://api.telegram.org/bot${this.telegramBotToken}/getChatMemberCount?chat_id=@${username}`
            );
            const membersData = await membersResponse.json();

            console.log('üë• –û—Ç–≤–µ—Ç getChatMemberCount:', membersData);

            const memberCount = membersData.ok ? membersData.result : 0;

            console.log('üî¢ –§–∏–Ω–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', memberCount);
            console.log('üìä –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ:', this.formatSubscriberCount(memberCount));

            const result = {
                success: true,
                data: {
                    username: channelInfo.username ? `@${channelInfo.username}` : `@${username}`,
                    title: channelInfo.title || this.generateChannelTitle(username),
                    avatar_letter: (channelInfo.title || username).charAt(0).toUpperCase(),
                    subscribers: this.formatSubscriberCount(memberCount),
                    raw_subscriber_count: memberCount, // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Å—ã—Ä–æ–µ —á–∏—Å–ª–æ
                    subscriber_count: memberCount, // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å backend
                    verified: channelInfo.is_verified || false,
                    category: this.suggestCategory(channelInfo.title || username),
                    description: channelInfo.description || this.generateDescription(channelInfo.title || username),
                    engagement_rate: this.calculateEngagementRate(memberCount),
                    channel_type: channelInfo.type,
                    invite_link: channelInfo.invite_link,
                    photo: channelInfo.photo ? channelInfo.photo.big_file_id : null,
                    raw_data: channelInfo
                }
            };

            console.log('‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', result);
            return result;
        } else {
            throw new Error(data.description || '–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ Telegram API:', error);
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞: ${error.message}`);
    }
}

            formatSubscriberCount(count) {
                if (count >= 1000000) {
                    return (count / 1000000).toFixed(1) + 'M';
                } else if (count >= 1000) {
                    return (count / 1000).toFixed(1) + 'K';
                }
                return count.toString();
            }

            calculateEngagementRate(subscriberCount) {
                // –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
                if (subscriberCount < 1000) return (Math.random() * 15 + 10).toFixed(1);
                if (subscriberCount < 10000) return (Math.random() * 10 + 5).toFixed(1);
                if (subscriberCount < 100000) return (Math.random() * 5 + 2).toFixed(1);
                return (Math.random() * 3 + 1).toFixed(1);
            }

            extractUsername(url) {
                // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
                url = url.trim().toLowerCase();

                // –†–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã URL
                const patterns = [
                    /t\.me\/([a-zA-Z0-9_]+)/,
                    /telegram\.me\/([a-zA-Z0-9_]+)/,
                    /@([a-zA-Z0-9_]+)/,
                    /^([a-zA-Z0-9_]+)$/
                ];

                for (const pattern of patterns) {
                    const match = url.match(pattern);
                    if (match) {
                        return match[1];
                    }
                }

                return null;
            }

            generateChannelTitle(username) {
                const titles = [
                    'IT –ù–æ–≤–æ—Å—Ç–∏ –∏ –û–±–∑–æ—Ä—ã',
                    '–ë–∏–∑–Ω–µ—Å –°–æ–≤–µ—Ç—ã',
                    '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ –•–∞–∫–∏',
                    '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã Today',
                    '–î–∏–∑–∞–π–Ω –¢—Ä–µ–Ω–¥—ã',
                    '–°—Ç–∞—Ä—Ç–∞–ø Stories'
                ];
                return titles[Math.floor(Math.random() * titles.length)];
            }

            suggestCategory(title) {
                const keywords = {
                    '—Ç–µ—Ö–Ω–æ–ª–æ–≥': 'technology',
                    'it': 'technology',
                    '–∞–π—Ç–∏': 'technology',
                    '–ø—Ä–æ–≥—Ä–∞–º–º': 'technology',
                    '–±–∏–∑–Ω–µ—Å': 'business',
                    '–ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º': 'business',
                    '–º–∞—Ä–∫–µ—Ç–∏–Ω–≥': 'business',
                    '—Å—Ç–∞—Ä—Ç–∞–ø': 'business',
                    '–∫—Ä–∏–ø—Ç–æ': 'finance',
                    '–∏–Ω–≤–µ—Å—Ç': 'finance',
                    '—Ñ–∏–Ω–∞–Ω—Å': 'finance',
                    '–æ–±—Ä–∞–∑–æ–≤': 'education',
                    '–æ–±—É—á': 'education',
                    '–∫—É—Ä—Å': 'education',
                    '–Ω–æ–≤–æ—Å—Ç': 'news',
                    '–º–µ–¥–∏–∞': 'news',
                    '—Ä–∞–∑–≤–ª–µ—á': 'entertainment',
                    '—é–º–æ—Ä': 'entertainment',
                    '–º–µ–º': 'entertainment',
                    '–¥–∏–∑–∞–π–Ω': 'technology',
                    '—Ñ–æ—Ç–æ': 'lifestyle',
                    '—Å—Ç–∏–ª—å': 'lifestyle'
                };

                const titleLower = title.toLowerCase();
                for (const [keyword, category] of Object.entries(keywords)) {
                    if (titleLower.includes(keyword)) {
                        return category;
                    }
                }

                return 'other';
            }

            generateDescription(title) {
                const descriptions = {
                    'technology': '–ù–æ–≤–æ—Å—Ç–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π, –æ–±–∑–æ—Ä—ã –≥–∞–¥–∂–µ—Ç–æ–≤ –∏ IT-—Ç—Ä–µ–Ω–¥—ã',
                    'business': '–ë–∏–∑–Ω–µ—Å-—Å–æ–≤–µ—Ç—ã, –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–æ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ –∫–æ–º–ø–∞–Ω–∏–π',
                    'education': '–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –∫—É—Ä—Å—ã –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ –Ω–∞–≤—ã–∫–æ–≤',
                    'lifestyle': '–°—Ç–∏–ª—å –∂–∏–∑–Ω–∏, —Å–æ–≤–µ—Ç—ã –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏ –¥–ª—è –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –∂–∏–∑–Ω–∏',
                    'finance': '–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ–Ω—å–≥–∞–º–∏',
                    'news': '–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ —Å–æ–±—ã—Ç–∏—è',
                    'entertainment': '–†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏ —é–º–æ—Ä'
                };

                const category = this.suggestCategory(title);
                return descriptions[category] || '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏';
            }

            showLoading() {
                const preview = document.getElementById('channelPreview');
                preview.classList.add('active');
                preview.innerHTML = `
                    <div style="text-align: center; padding: 20px;">
                        <div class="loading-spinner" style="width: 32px; height: 32px; margin: 0 auto 12px;"></div>
                        <div class="loading-text">–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞...</div>
                        <div style="font-size: var(--font-size-sm); color: var(--text-muted); margin-top: 8px;">
                            –ó–∞–ø—Ä–æ—Å –∫ Telegram API...
                        </div>
                    </div>
                `;
            }

            // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø showChannelPreview
            // –ó–∞–º–µ–Ω–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ —ç—Ç—É:

            showChannelPreview(channelData) {
                    console.log('üñºÔ∏è –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é —Å –¥–∞–Ω–Ω—ã–º–∏:', channelData);
                    const data = channelData?.data || channelData; // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞
                    console.log('üìä –î–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞—Ö –≤ –ø—Ä–µ–≤—å—é:', data.subscribers);
                    console.log('üìà –°—ã—Ä–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:', data.raw_subscriber_count);

                const preview = document.getElementById('channelPreview');
                if (!preview) {
                    console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç channelPreview –Ω–µ –Ω–∞–π–¥–µ–Ω');
                    return;
                }

                // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö


                if (!data) {
                    console.error('‚ùå –î–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
                    return;
                }

                // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
                const title = data.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª';
                const username = data.username || 'unknown';
                const subscribers = data.subscribers || '0';
                const engagement_rate = data.engagement_rate || '0';
                const description = data.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
                const avatar_letter = data.avatar_letter || title.charAt(0).toUpperCase() || '?';
                const category = data.category || 'other';

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–∞–Ω–∞–ª –ø—É–±–ª–∏—á–Ω—ã–º
                const isPublic = data.channel_type === 'channel';
                const statusIcon = data.verified ? '‚úÖ' : (isPublic ? 'üîì' : 'üîí');
                const statusText = data.verified ? '–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω' : (isPublic ? '–ü—É–±–ª–∏—á–Ω—ã–π' : '–ü—Ä–∏–≤–∞—Ç–Ω—ã–π');

                // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 3: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
                try {
                    preview.innerHTML = `
                        <div class="preview-header">
                            <div class="preview-avatar">${avatar_letter}</div>
                            <div class="preview-info">
                                <h4>${title}</h4>
                                <p>@${username}</p>
                                <span style="color: var(--success-color); font-size: var(--font-size-sm);">
                                    ${statusIcon} ${statusText}
                                </span>
                            </div>
                        </div>
                        <div class="preview-stats">
                            <div class="stat-item">
                                <span class="stat-value">${subscribers}</span>
                                <span class="stat-label">–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤</span>
                            </div>
                            <div class="stat-item">
                                <span class="stat-value">${engagement_rate}%</span>
                                <span class="stat-label">–í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å</span>
                            </div>

                        </div>
                        <div style="margin-top: 16px; padding: 12px; background: var(--bg-primary); border-radius: var(--border-radius-sm);">
                            <strong>‚úÖ –ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω –≤ Telegram</strong><br>
                            <span style="color: var(--text-secondary); font-size: var(--font-size-sm);">
                                ${description}
                            </span>
                        </div>
                        ${data.invite_link ? `
                            <div style="margin-top: 12px; padding: 8px; background: var(--bg-tertiary); border-radius: var(--border-radius-sm); font-size: var(--font-size-sm);">
                                <strong>–°—Å—ã–ª–∫–∞:</strong> <a href="${data.invite_link}" target="_blank" style="color: var(--primary-color);">${data.invite_link}</a>
                            </div>
                        ` : ''}
                    `;

                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
                    preview.classList.add('active');

                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ HTML –ø—Ä–µ–≤—å—é:', error);
                    return;
                }

                // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 4: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–∫–∞–∑—ã–≤–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
                try {
                    const additionalFields = document.getElementById('additionalFields');
                    const pricingFields = document.getElementById('pricingFields');

                    if (additionalFields) {
                        additionalFields.style.display = 'block';
                    } else {
                        console.warn('‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç additionalFields –Ω–µ –Ω–∞–π–¥–µ–Ω');
                    }

                    if (pricingFields) {
                        pricingFields.style.display = 'block';
                    } else {
                        console.warn('‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç pricingFields –Ω–µ –Ω–∞–π–¥–µ–Ω');
                    }
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π:', error);
                }

                // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 5: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
                try {
                    const categorySelect = document.getElementById('channelCategory');
                    if (categorySelect) {
                        categorySelect.value = category;
                        console.log('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:', category);
                    } else {
                        console.warn('‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç channelCategory –Ω–µ –Ω–∞–π–¥–µ–Ω');
                    }
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
                }

                try {
                    const descriptionField = document.getElementById('channelDescription');
                    if (descriptionField) {
                        descriptionField.value = description;
                        console.log('‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
                    } else {
                        console.warn('‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç channelDescription –Ω–µ –Ω–∞–π–¥–µ–Ω');
                    }
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –æ–ø–∏—Å–∞–Ω–∏—è:', error);
                }

                // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 6: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏
                try {
                    const submitBtn = document.getElementById('submitBtn');
                    if (submitBtn) {
                        submitBtn.disabled = false;
                        console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞');
                    } else {
                        console.warn('‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç submitBtn –Ω–µ –Ω–∞–π–¥–µ–Ω');
                    }
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–Ω–æ–ø–∫–∏:', error);
                }

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
                try {
                    this.currentChannelData = data;
                    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã');
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞:', error);
                }
            }

            showError(message) {
                const preview = document.getElementById('channelPreview');
                preview.classList.add('active');

                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                let errorDetails = '';
                if (message.includes('not found') || message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω')) {
                    errorDetails = '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å username –∫–∞–Ω–∞–ª–∞. –ö–∞–Ω–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É–±–ª–∏—á–Ω—ã–º.';
                } else if (message.includes('private') || message.includes('–ø—Ä–∏–≤–∞—Ç–Ω—ã–π')) {
                    errorDetails = '–ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –°–¥–µ–ª–∞–π—Ç–µ –∫–∞–Ω–∞–ª –ø—É–±–ª–∏—á–Ω—ã–º.';
                } else if (message.includes('forbidden') || message.includes('–∑–∞–ø—Ä–µ—â–µ–Ω')) {
                    errorDetails = '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–∞–Ω–∞–ª –ø—É–±–ª–∏—á–Ω—ã–π.';
                }

                preview.innerHTML = `
                    <div style="text-align: center; padding: 20px; border-color: var(--danger-color); background: #fef2f2;">
                        <div style="color: var(--danger-color); font-size: 24px; margin-bottom: 12px;">‚ùå</div>
                        <div>
                            <strong>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö</strong><br>
                            <span style="color: var(--text-secondary); font-size: var(--font-size-sm);">
                                ${message}
                            </span>
                            ${errorDetails ? `<br><br><span style="color: var(--text-muted); font-size: var(--font-size-xs);">${errorDetails}</span>` : ''}
                        </div>
                        <div style="margin-top: 16px;">
                            <button onclick="channelAnalyzer.showManualInput()" class="btn btn-secondary btn-sm">
                                ‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é
                            </button>
                        </div>
                    </div>
                `;

                // –°–∫—Ä—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                document.getElementById('additionalFields').style.display = 'none';
                document.getElementById('pricingFields').style.display = 'none';
                document.getElementById('submitBtn').disabled = true;
            }

            showManualInput() {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
                const preview = document.getElementById('channelPreview');
                preview.innerHTML = `
                    <div style="padding: 20px; background: var(--bg-tertiary); border-radius: var(--border-radius-sm);">
                        <h4 style="margin-bottom: 16px;">üìù –†—É—á–Ω–æ–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞</h4>
                        <div style="font-size: var(--font-size-sm); color: var(--text-secondary); margin-bottom: 16px;">
                            –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ –≤—Ä—É—á–Ω—É—é
                        </div>
                        <div class="form-group">
                            <input type="text" id="manualChannelName" class="form-input" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞" style="margin-bottom: 12px;">
                        </div>
                        <div class="form-group">
                            <input type="number" id="manualSubscribers" class="form-input" placeholder="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤" style="margin-bottom: 12px;">
                        </div>
                        <button onclick="channelAnalyzer.applyManualData()" class="btn btn-primary btn-sm">
                            ‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
                        </button>
                    </div>
                `;
            }

            applyManualData() {
                const channelNameElement = document.getElementById('manualChannelName');
                const subscribersElement = document.getElementById('manualSubscribers');

                if (!channelNameElement) {
                    alert('–û—à–∏–±–∫–∞: –ø–æ–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                    return;
                }

                const channelName = channelNameElement.value.trim();
                const subscribers = parseInt(subscribersElement?.value || 0);

                if (!channelName) {
                    alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞');
                    return;
                }

                const manualData = {
                    success: true,
                    data: {
                        username: document.getElementById('channelUrl')?.value || '',
                        title: channelName,
                        avatar_letter: channelName.charAt(0).toUpperCase(),
                        subscribers: this.formatSubscriberCount(subscribers),
                        verified: false,
                        category: this.suggestCategory(channelName),
                        description: this.generateDescription(channelName),
                        engagement_rate: this.calculateEngagementRate(subscribers),
                        channel_type: 'channel'
                    }
                };

                this.showChannelPreview(manualData);
            }
        }
// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –≤ channels-analyzer.js –∏–ª–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —Ñ–æ—Ä–º—ã

function submitChannelForm() {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
        const formData = new FormData(document.getElementById('addChannelForm'));

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞ –æ—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        const channelData = channelAnalyzer.currentChannelData;

        if (!channelData) {
            alert('–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∫–∞–Ω–∞–ª');
            return;
        }

        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        const submitData = {
            username: formData.get('channel_url') || channelData.username,
            title: channelData.title,
            description: formData.get('description') || channelData.description,
            category: formData.get('category') || channelData.category,

            // ‚úÖ –ì–õ–ê–í–ù–û–ï: –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
            subscribers_count: channelData.raw_subscriber_count || 0,
            raw_subscriber_count: channelData.raw_subscriber_count || 0,

            // –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–∞
            channel_data: {
                data: channelData
            }
        };

        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞:', submitData);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        fetch('/api/channels', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Telegram-User-Id': getTelegramUserId() // –í–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è ID
            },
            body: JSON.stringify(submitData)
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                console.log('‚úÖ –ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω:', data);
                alert('–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!');
                // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞
                window.location.href = '/channels/verify/' + data.channel.id;
            } else {
                console.error('‚ùå –û—à–∏–±–∫–∞:', data.error);
                alert('–û—à–∏–±–∫–∞: ' + data.error);
            }
        })
        .catch(error => {
            console.error('‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞:', error);
            alert('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã:', error);
        alert('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã');
    }
}

// üîç –û–¢–õ–ê–î–û–ß–ù–´–ô –ö–û–î –î–õ–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –ü–†–û–ë–õ–ï–ú–´ –° –ü–û–î–ü–ò–°–ß–ò–ö–ê–ú–ò
// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ channels-analyzer.js –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

class SubscriberDebugger {
    constructor() {
        this.debugMode = true;
    }

    // üìä –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    debugSubscriberData(channelData, source = 'unknown') {
        if (!this.debugMode) return;

        console.group(`üîç –û–¢–õ–ê–î–ö–ê –ü–û–î–ü–ò–°–ß–ò–ö–û–í - –ò—Å—Ç–æ—á–Ω–∏–∫: ${source}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è —Å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏
        const subscriberFields = [
            'subscribers',
            'subscriber_count',
            'subscribers_count',
            'raw_subscriber_count',
            'member_count',
            'members_count'
        ];

        console.log('üìã –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞:', channelData);

        subscriberFields.forEach(field => {
            const value = this.getNestedValue(channelData, field);
            if (value !== undefined) {
                console.log(`‚úÖ ${field}: ${value} (—Ç–∏–ø: ${typeof value})`);
            } else {
                console.log(`‚ùå ${field}: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
            }
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ data –æ–±—ä–µ–∫—Ç–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (channelData.data) {
            console.log('üìä –î–∞–Ω–Ω—ã–µ –≤ channelData.data:');
            subscriberFields.forEach(field => {
                const value = channelData.data[field];
                if (value !== undefined) {
                    console.log(`  ‚úÖ data.${field}: ${value} (—Ç–∏–ø: ${typeof value})`);
                } else {
                    console.log(`  ‚ùå data.${field}: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
                }
            });
        }

        console.groupEnd();
    }

    // üîß –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    getNestedValue(obj, path) {
        return path.split('.').reduce((current, key) => {
            return current && current[key] !== undefined ? current[key] : undefined;
        }, obj);
    }

    // üìà –û—Ç–ª–∞–¥–∫–∞ API –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    debugServerResponse(response, endpoint) {
        if (!this.debugMode) return;

        console.group(`üåê –û–¢–õ–ê–î–ö–ê –°–ï–†–í–ï–†–ù–û–ì–û –û–¢–í–ï–¢–ê - ${endpoint}`);
        console.log('üì• –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:', response);

        if (response.channels) {
            console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤: ${response.channels.length}`);

            response.channels.forEach((channel, index) => {
                console.log(`\nüì∫ –ö–∞–Ω–∞–ª ${index + 1}: ${channel.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}`);
                console.log(`  üî¢ subscriber_count: ${channel.subscriber_count}`);
                console.log(`  üî¢ subscribers_count: ${channel.subscribers_count}`);
                console.log(`  üî¢ subscribers: ${channel.subscribers}`);
                console.log(`  üìä –í—Å–µ –ø–æ–ª—è –∫–∞–Ω–∞–ª–∞:`, channel);
            });
        }

        console.groupEnd();
    }

    // üóÑÔ∏è –û—Ç–ª–∞–¥–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ
    async debugDatabaseData() {
        if (!this.debugMode) return;

        console.group('üóÑÔ∏è –û–¢–õ–ê–î–ö–ê –î–ê–ù–ù–´–• –í –ë–ê–ó–ï');

        try {
            // –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤
            const response = await fetch('/api/channels/my', {
                headers: {
                    'X-Telegram-User-Id': window.Telegram?.WebApp?.initDataUnsafe?.user?.id || '373086959'
                }
            });

            const data = await response.json();
            this.debugServerResponse(data, '/api/channels/my');

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API:', error);
        }

        console.groupEnd();
    }

    // üìù –û—Ç–ª–∞–¥–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    debugChannelSubmission(formData, telegramData) {
        if (!this.debugMode) return;

        console.group('üì§ –û–¢–õ–ê–î–ö–ê –û–¢–ü–†–ê–í–ö–ò –ö–ê–ù–ê–õ–ê');
        console.log('üìã –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:', formData);
        console.log('ü§ñ –î–∞–Ω–Ω—ã–µ Telegram API:', telegramData);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        const subscribersInForm = formData.subscribers_count || formData.subscriber_count || 0;
        const subscribersInTelegram = telegramData?.raw_subscriber_count || telegramData?.subscribers || 0;

        console.log(`üìä –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –≤ —Ñ–æ—Ä–º–µ: ${subscribersInForm}`);
        console.log(`üìä –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –∏–∑ Telegram: ${subscribersInTelegram}`);

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
        if (subscribersInTelegram > 0 && subscribersInForm === 0) {
            console.warn('‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: Telegram –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å, –Ω–æ –≤ —Ñ–æ—Ä–º–µ 0!');
            console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ raw_subscriber_count –∏–∑ Telegram –¥–∞–Ω–Ω—ã—Ö');
        }

        console.groupEnd();
    }
}

// üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–ª–∞–¥—á–∏–∫–∞
const subscriberDebugger = new SubscriberDebugger();

// üîß –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–¥–æ–±–∞–≤—å—Ç–µ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç)
function formatSubscriberCount(count) {
    if (count >= 1000000) {
        return (count / 1000000).toFixed(1) + 'M';
    } else if (count >= 1000) {
        return (count / 1000).toFixed(1) + 'K';
    }
    return count.toString();
}

function calculateEngagementRate(subscriberCount) {
    if (subscriberCount < 1000) return (Math.random() * 15 + 10).toFixed(1);
    if (subscriberCount < 10000) return (Math.random() * 10 + 5).toFixed(1);
    if (subscriberCount < 100000) return (Math.random() * 5 + 2).toFixed(1);
    return (Math.random() * 3 + 1).toFixed(1);
}

function suggestCategory(title) {
    const keywords = {
        '—Ç–µ—Ö–Ω–æ–ª–æ–≥': 'technology',
        'it': 'technology',
        '–±–∏–∑–Ω–µ—Å': 'business',
        '–∫—Ä–∏–ø—Ç–æ': 'finance',
        '–Ω–æ–≤–æ—Å—Ç': 'news'
    };

    const titleLower = title.toLowerCase();
    for (const [keyword, category] of Object.entries(keywords)) {
        if (titleLower.includes(keyword)) {
            return category;
        }
    }
    return 'other';
}


        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤
        const channelAnalyzer = new ChannelAnalyzer();