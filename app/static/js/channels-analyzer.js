// app/static/js/channels-analyzer.js
// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø - –æ–±—ä–µ–∫—Ç channelAnalyzer —Ç–µ–ø–µ—Ä—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π

class ChannelAnalyzer {
    constructor() {
        this.apiUrl = '/api/analyzer';
        this.currentChannelData = null;
        this.telegramBotToken = null; // –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –µ—Å–ª–∏ –Ω—É–∂–µ–Ω
        
        console.log('üìä ChannelAnalyzer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–Ω–∞–ª–∞
    async analyzeChannel(url) {
        const username = this.extractUsername(url);
        if (!username) {
            throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª');
        }

        this.showLoading();

        try {
            // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API —Å–µ—Ä–≤–µ—Ä–∞
            console.log('üîÑ –ü—Ä–æ–±—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä...');
            const response = await fetch(`${this.apiUrl}/analyze`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    channel_url: url,
                    username: username
                })
            });

            if (response.ok) {
                const data = await response.json();
                if (data.success) {
                    console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data);
                    this.currentChannelData = data.data || data;
                    return data;
                } else {
                    throw new Error(data.error || '–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É');
                }
            } else {
                throw new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            }
        } catch (serverError) {
            console.log('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', serverError.message);
            
            // Fallback –∫ –º–æ–∫–æ–≤—ã–º –¥–∞–Ω–Ω—ã–º
            console.log('üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...');
            return this.generateMockData(username);
        }
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    generateMockData(username) {
        const mockData = {
            success: true,
            data: {
                username: username,
                title: this.generateChannelTitle(username),
                description: this.generateDescription(''),
                subscribers: this.formatSubscriberCount(Math.floor(Math.random() * 50000) + 1000),
                raw_subscriber_count: Math.floor(Math.random() * 50000) + 1000,
                subscriber_count: Math.floor(Math.random() * 50000) + 1000,
                member_count: Math.floor(Math.random() * 50000) + 1000,
                engagement_rate: this.calculateEngagementRate(5000),
                avatar_letter: username.charAt(0).toUpperCase() || '?',
                category: this.suggestCategory(''),
                channel_type: 'channel',
                verified: Math.random() > 0.8,
                public: true,
                invite_link: `https://t.me/${username}`,
                channel_id: Math.floor(Math.random() * 1000000)
            }
        };

        this.currentChannelData = mockData.data;
        console.log('üé≠ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', mockData);
        return mockData;
    }

    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ username –∏–∑ URL
    extractUsername(url) {
        const patterns = [
            /https?:\/\/t\.me\/([a-zA-Z0-9_]+)/,
            /https?:\/\/telegram\.me\/([a-zA-Z0-9_]+)/,
            /@([a-zA-Z0-9_]+)/,
            /^([a-zA-Z0-9_]+)$/
        ];

        for (const pattern of patterns) {
            const match = url.match(pattern);
            if (match) {
                return match[1];
            }
        }

        return null;
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞
    generateChannelTitle(username) {
        const titles = [
            'IT –ù–æ–≤–æ—Å—Ç–∏ –∏ –û–±–∑–æ—Ä—ã',
            '–ë–∏–∑–Ω–µ—Å –°–æ–≤–µ—Ç—ã',
            '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ –•–∞–∫–∏',
            '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã Today',
            '–î–∏–∑–∞–π–Ω –¢—Ä–µ–Ω–¥—ã',
            '–°—Ç–∞—Ä—Ç–∞–ø Stories',
            '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ë—É–¥—É—â–µ–≥–æ',
            '–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ì—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å',
            '–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ö–æ–Ω—Ç–µ–Ω—Ç'
        ];
        return titles[Math.floor(Math.random() * titles.length)];
    }

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    suggestCategory(title) {
        const keywords = {
            '—Ç–µ—Ö–Ω–æ–ª–æ–≥': 'technology',
            'it': 'technology',
            '–∞–π—Ç–∏': 'technology',
            '–ø—Ä–æ–≥—Ä–∞–º–º': 'technology',
            '–±–∏–∑–Ω–µ—Å': 'business',
            '–ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º': 'business',
            '–º–∞—Ä–∫–µ—Ç–∏–Ω–≥': 'business',
            '—Å—Ç–∞—Ä—Ç–∞–ø': 'business',
            '–∫—Ä–∏–ø—Ç–æ': 'finance',
            '–∏–Ω–≤–µ—Å—Ç': 'finance',
            '—Ñ–∏–Ω–∞–Ω—Å': 'finance',
            '–æ–±—Ä–∞–∑–æ–≤': 'education',
            '–æ–±—É—á': 'education',
            '–∫—É—Ä—Å': 'education',
            '–Ω–æ–≤–æ—Å—Ç': 'news',
            '–º–µ–¥–∏–∞': 'news',
            '—Ä–∞–∑–≤–ª–µ—á': 'entertainment',
            '—é–º–æ—Ä': 'entertainment',
            '–º–µ–º': 'entertainment',
            '–¥–∏–∑–∞–π–Ω': 'technology',
            '—Ñ–æ—Ç–æ': 'lifestyle',
            '—Å—Ç–∏–ª—å': 'lifestyle'
        };

        const titleLower = title.toLowerCase();
        for (const [keyword, category] of Object.entries(keywords)) {
            if (titleLower.includes(keyword)) {
                return category;
            }
        }

        return 'other';
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
    generateDescription(title) {
        const descriptions = {
            'technology': '–ù–æ–≤–æ—Å—Ç–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π, –æ–±–∑–æ—Ä—ã –≥–∞–¥–∂–µ—Ç–æ–≤ –∏ IT-—Ç—Ä–µ–Ω–¥—ã',
            'business': '–ë–∏–∑–Ω–µ—Å-—Å–æ–≤–µ—Ç—ã, –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–æ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ –∫–æ–º–ø–∞–Ω–∏–π',
            'education': '–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –∫—É—Ä—Å—ã –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ –Ω–∞–≤—ã–∫–æ–≤',
            'lifestyle': '–°—Ç–∏–ª—å –∂–∏–∑–Ω–∏, —Å–æ–≤–µ—Ç—ã –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏ –¥–ª—è –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –∂–∏–∑–Ω–∏',
            'finance': '–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ–Ω—å–≥–∞–º–∏',
            'news': '–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ —Å–æ–±—ã—Ç–∏—è',
            'entertainment': '–†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏ —é–º–æ—Ä'
        };

        const category = this.suggestCategory(title);
        return descriptions[category] || '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏';
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    formatSubscriberCount(count) {
        if (count >= 1000000) {
            return (count / 1000000).toFixed(1) + 'M';
        } else if (count >= 1000) {
            return (count / 1000).toFixed(1) + 'K';
        }
        return count.toString();
    }

    // –†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω—è –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏
    calculateEngagementRate(subscriberCount) {
        if (subscriberCount < 1000) return (Math.random() * 15 + 10).toFixed(1);
        if (subscriberCount < 10000) return (Math.random() * 10 + 5).toFixed(1);
        if (subscriberCount < 100000) return (Math.random() * 5 + 2).toFixed(1);
        return (Math.random() * 3 + 1).toFixed(1);
    }

    // –ü–æ–∫–∞–∑ —ç–∫—Ä–∞–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    showLoading() {
        const preview = document.getElementById('channelPreview');
        if (!preview) {
            console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç channelPreview –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        preview.classList.add('active');
        preview.innerHTML = `
            <div style="text-align: center; padding: 20px;">
                <div class="loading-spinner" style="width: 32px; height: 32px; margin: 0 auto 12px; border: 3px solid #f0f0f0; border-top: 3px solid #3498db; border-radius: 50%; animation: spin 1s linear infinite;"></div>
                <div class="loading-text">–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞...</div>
                <div style="font-size: var(--font-size-sm); color: var(--text-muted); margin-top: 8px;">
                    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª...
                </div>
            </div>
        `;
    }

    // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –ø—Ä–µ–≤—å—é –∫–∞–Ω–∞–ª–∞
    showChannelPreview(channelData) {
        console.log('üñºÔ∏è –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é —Å –¥–∞–Ω–Ω—ã–º–∏:', channelData);
        
        const preview = document.getElementById('channelPreview');
        if (!preview) {
            console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç channelPreview –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        const data = channelData?.data || channelData;
        if (!data) {
            console.error('‚ùå –î–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
            this.showError('–î–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã');
            return;
        }

        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        const title = data.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª';
        const username = data.username || 'unknown';
        const subscribers = data.subscribers || this.formatSubscriberCount(data.raw_subscriber_count || data.subscriber_count || 0);
        const engagement_rate = data.engagement_rate || this.calculateEngagementRate(data.raw_subscriber_count || 1000);
        const description = data.description || this.generateDescription(title);
        const avatar_letter = data.avatar_letter || title.charAt(0).toUpperCase() || '?';
        const category = data.category || this.suggestCategory(title);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∫–∞–Ω–∞–ª–∞
        const isPublic = data.channel_type === 'channel' || data.public !== false;
        const statusIcon = data.verified ? '‚úÖ' : (isPublic ? 'üîì' : 'üîí');
        const statusText = data.verified ? '–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω' : (isPublic ? '–ü—É–±–ª–∏—á–Ω—ã–π' : '–ü—Ä–∏–≤–∞—Ç–Ω—ã–π');

        try {
            // –°–æ–∑–¥–∞–µ–º HTML –ø—Ä–µ–≤—å—é
            preview.innerHTML = `
                <div style="display: flex; gap: 16px; padding: 20px; background: var(--bg-primary); border-radius: var(--border-radius); border: 1px solid var(--border-color);">
                    <!-- –ê–≤–∞—Ç–∞—Ä -->
                    <div style="width: 64px; height: 64px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border-radius: 50%; display: flex; align-items: center; justify-content: center; color: white; font-size: 24px; font-weight: bold; flex-shrink: 0;">
                        ${avatar_letter}
                    </div>
                    
                    <!-- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è -->
                    <div style="flex: 1; min-width: 0;">
                        <div style="display: flex; align-items: center; gap: 8px; margin-bottom: 8px;">
                            <h3 style="margin: 0; font-size: 18px; font-weight: 600; color: var(--text-primary);">${title}</h3>
                            <span style="font-size: 14px;">${statusIcon}</span>
                        </div>
                        
                        <div style="font-size: 14px; color: var(--text-secondary); margin-bottom: 4px;">
                            @${username} ‚Ä¢ ${statusText}
                        </div>
                        
                        <div style="display: flex; gap: 20px; margin-bottom: 12px;">
                            <div>
                                <span style="font-weight: 600; color: var(--primary-color);">${subscribers}</span>
                                <span style="font-size: 14px; color: var(--text-muted);"> –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤</span>
                            </div>
                            <div>
                                <span style="font-weight: 600; color: var(--success-color);">${engagement_rate}%</span>
                                <span style="font-size: 14px; color: var(--text-muted);"> –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å</span>
                            </div>
                        </div>
                        
                        <p style="margin: 0; font-size: 14px; color: var(--text-secondary); line-height: 1.4; max-height: 40px; overflow: hidden;">
                            ${description}
                        </p>
                        
                        ${data.invite_link ? `
                            <div style="margin-top: 12px; padding: 8px; background: var(--bg-secondary); border-radius: 6px; font-size: 14px;">
                                <strong>–°—Å—ã–ª–∫–∞:</strong> <a href="${data.invite_link}" target="_blank" style="color: var(--primary-color);">${data.invite_link}</a>
                            </div>
                        ` : ''}
                    </div>
                </div>
            `;

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
            preview.classList.add('active');

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            this.showAdditionalFields();

            // –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
            this.autofillForm(data, category, description);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            this.currentChannelData = data;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ HTML –ø—Ä–µ–≤—å—é:', error);
            this.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞');
        }
    }

    // –ü–æ–∫–∞–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
    showAdditionalFields() {
        const additionalFields = document.getElementById('additionalFields');
        const pricingFields = document.getElementById('pricingFields');
        const submitBtn = document.getElementById('submitBtn');

        if (additionalFields) {
            additionalFields.style.display = 'block';
        }

        if (pricingFields) {
            pricingFields.style.display = 'block';
        }

        if (submitBtn) {
            submitBtn.disabled = false;
        }
    }

    // –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã
    autofillForm(data, category, description) {
        try {
            const categorySelect = document.getElementById('channelCategory');
            if (categorySelect) {
                categorySelect.value = category;
            }

            const descriptionField = document.getElementById('channelDescription');
            if (descriptionField && !descriptionField.value) {
                descriptionField.value = description;
            }

            const titleField = document.getElementById('channelTitle');
            if (titleField && !titleField.value) {
                titleField.value = data.title || '';
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:', error);
        }
    }

    // –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏
    showError(message, errorDetails = '') {
        const preview = document.getElementById('channelPreview');
        if (!preview) return;

        preview.classList.add('active');
        preview.innerHTML = `
            <div style="text-align: center; padding: 20px; background: var(--bg-primary); border-radius: var(--border-radius); border: 1px solid var(--danger-color);">
                <div style="font-size: 48px; margin-bottom: 12px;">‚ùå</div>
                <div style="color: var(--danger-color); font-weight: 600; margin-bottom: 8px;">
                    ${message}
                </div>
                ${errorDetails ? `<div style="color: var(--text-muted); font-size: 14px; margin-bottom: 16px;">${errorDetails}</div>` : ''}
                <div style="margin-top: 16px;">
                    <button onclick="channelAnalyzer.showManualInput()" class="btn btn-secondary btn-sm">
                        ‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é
                    </button>
                </div>
            </div>
        `;

        // –°–∫—Ä—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        document.getElementById('additionalFields').style.display = 'none';
        document.getElementById('pricingFields').style.display = 'none';
        document.getElementById('submitBtn').disabled = true;
    }

    // –ü–æ–∫–∞–∑ —Ñ–æ—Ä–º—ã —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
    showManualInput() {
        const preview = document.getElementById('channelPreview');
        preview.innerHTML = `
            <div style="padding: 20px; background: var(--bg-secondary); border-radius: var(--border-radius);">
                <h4 style="margin-bottom: 16px;">üìù –†—É—á–Ω–æ–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞</h4>
                <div style="font-size: 14px; color: var(--text-secondary); margin-bottom: 16px;">
                    –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ –≤—Ä—É—á–Ω—É—é
                </div>
                <div class="form-group">
                    <input type="text" id="manualChannelName" class="form-input" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞" style="margin-bottom: 12px;">
                </div>
                <div class="form-group">
                    <input type="number" id="manualSubscribers" class="form-input" placeholder="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤" style="margin-bottom: 12px;">
                </div>
                <div class="form-group">
                    <textarea id="manualDescription" class="form-input" placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞" rows="3" style="margin-bottom: 16px;"></textarea>
                </div>
                <button onclick="channelAnalyzer.processManualData()" class="btn btn-primary btn-sm">
                    ‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
                </button>
            </div>
        `;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        this.showAdditionalFields();
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    processManualData() {
        const name = document.getElementById('manualChannelName').value.trim();
        const subscribers = parseInt(document.getElementById('manualSubscribers').value) || 0;
        const description = document.getElementById('manualDescription').value.trim();

        if (!name) {
            alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞');
            return;
        }

        const manualData = {
            success: true,
            data: {
                title: name,
                username: name.toLowerCase().replace(/[^a-z0-9_]/g, '_'),
                description: description || this.generateDescription(name),
                subscribers: this.formatSubscriberCount(subscribers),
                raw_subscriber_count: subscribers,
                subscriber_count: subscribers,
                engagement_rate: this.calculateEngagementRate(subscribers),
                avatar_letter: name.charAt(0).toUpperCase(),
                category: this.suggestCategory(name),
                channel_type: 'channel',
                verified: false,
                public: true
            }
        };

        this.showChannelPreview(manualData);
    }
}

// üîß CSS –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ components.css

// ‚úÖ –ì–õ–ê–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–µ–ª–∞–µ–º –æ–±—ä–µ–∫—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º
window.channelAnalyzer = new ChannelAnalyzer();

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
window.formatSubscriberCount = function(count) {
    return window.channelAnalyzer.formatSubscriberCount(count);
};

window.calculateEngagementRate = function(subscriberCount) {
    return window.channelAnalyzer.calculateEngagementRate(subscriberCount);
};

window.suggestCategory = function(title) {
    return window.channelAnalyzer.suggestCategory(title);
};

console.log('‚úÖ ChannelAnalyzer –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ –∫–∞–∫ window.channelAnalyzer');

function submitChannelForm() {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
        const formData = new FormData(document.getElementById('addChannelForm'));

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞ –æ—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        const channelData = channelAnalyzer.currentChannelData;

        if (!channelData) {
            alert('–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∫–∞–Ω–∞–ª');
            return;
        }

        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        const submitData = {
            username: formData.get('channel_url') || channelData.username,
            title: channelData.title,
            description: formData.get('description') || channelData.description,
            category: formData.get('category') || channelData.category,

            // ‚úÖ –ì–õ–ê–í–ù–û–ï: –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
            subscribers_count: channelData.raw_subscriber_count || 0,
            raw_subscriber_count: channelData.raw_subscriber_count || 0,

            // –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–∞
            channel_data: {
                data: channelData
            }
        };

        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞:', submitData);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        fetch('/api/channels', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Telegram-User-Id': getTelegramUserId() // –í–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è ID
            },
            body: JSON.stringify(submitData)
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                console.log('‚úÖ –ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω:', data);
                alert('–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!');
                // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞
                window.location.href = '/channels/verify/' + data.channel.id;
            } else {
                console.error('‚ùå –û—à–∏–±–∫–∞:', data.error);
                alert('–û—à–∏–±–∫–∞: ' + data.error);
            }
        })
        .catch(error => {
            console.error('‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞:', error);
            alert('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã:', error);
        alert('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã');
    }
}

// üîç –û–¢–õ–ê–î–û–ß–ù–´–ô –ö–û–î –î–õ–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –ü–†–û–ë–õ–ï–ú–´ –° –ü–û–î–ü–ò–°–ß–ò–ö–ê–ú–ò
// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ channels-analyzer.js –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

class SubscriberDebugger {
    constructor() {
        this.debugMode = true;
    }

    // üìä –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    debugSubscriberData(channelData, source = 'unknown') {
        if (!this.debugMode) return;

        console.group(`üîç –û–¢–õ–ê–î–ö–ê –ü–û–î–ü–ò–°–ß–ò–ö–û–í - –ò—Å—Ç–æ—á–Ω–∏–∫: ${source}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è —Å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏
        const subscriberFields = [
            'subscribers',
            'subscriber_count',
            'subscribers_count',
            'raw_subscriber_count',
            'member_count',
            'members_count'
        ];

        console.log('üìã –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞:', channelData);

        subscriberFields.forEach(field => {
            const value = this.getNestedValue(channelData, field);
            if (value !== undefined) {
                console.log(`‚úÖ ${field}: ${value} (—Ç–∏–ø: ${typeof value})`);
            } else {
                console.log(`‚ùå ${field}: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
            }
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ data –æ–±—ä–µ–∫—Ç–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (channelData.data) {
            console.log('üìä –î–∞–Ω–Ω—ã–µ –≤ channelData.data:');
            subscriberFields.forEach(field => {
                const value = channelData.data[field];
                if (value !== undefined) {
                    console.log(`  ‚úÖ data.${field}: ${value} (—Ç–∏–ø: ${typeof value})`);
                } else {
                    console.log(`  ‚ùå data.${field}: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
                }
            });
        }

        console.groupEnd();
    }

    // üîß –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    getNestedValue(obj, path) {
        return path.split('.').reduce((current, key) => {
            return current && current[key] !== undefined ? current[key] : undefined;
        }, obj);
    }

    // üìà –û—Ç–ª–∞–¥–∫–∞ API –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    debugServerResponse(response, endpoint) {
        if (!this.debugMode) return;

        console.group(`üåê –û–¢–õ–ê–î–ö–ê –°–ï–†–í–ï–†–ù–û–ì–û –û–¢–í–ï–¢–ê - ${endpoint}`);
        console.log('üì• –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:', response);

        if (response.channels) {
            console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤: ${response.channels.length}`);

            response.channels.forEach((channel, index) => {
                console.log(`\nüì∫ –ö–∞–Ω–∞–ª ${index + 1}: ${channel.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}`);
                console.log(`  üî¢ subscriber_count: ${channel.subscriber_count}`);
                console.log(`  üî¢ subscribers_count: ${channel.subscribers_count}`);
                console.log(`  üî¢ subscribers: ${channel.subscribers}`);
                console.log(`  üìä –í—Å–µ –ø–æ–ª—è –∫–∞–Ω–∞–ª–∞:`, channel);
            });
        }

        console.groupEnd();
    }

    // üóÑÔ∏è –û—Ç–ª–∞–¥–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ
    async debugDatabaseData() {
        if (!this.debugMode) return;

        console.group('üóÑÔ∏è –û–¢–õ–ê–î–ö–ê –î–ê–ù–ù–´–• –í –ë–ê–ó–ï');

        try {
            // –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤
            const response = await fetch('/api/channels/my', {
                headers: {
                    'X-Telegram-User-Id': window.Telegram?.WebApp?.initDataUnsafe?.user?.id || '373086959'
                }
            });

            const data = await response.json();
            this.debugServerResponse(data, '/api/channels/my');

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API:', error);
        }

        console.groupEnd();
    }

    // üìù –û—Ç–ª–∞–¥–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    debugChannelSubmission(formData, telegramData) {
        if (!this.debugMode) return;

        console.group('üì§ –û–¢–õ–ê–î–ö–ê –û–¢–ü–†–ê–í–ö–ò –ö–ê–ù–ê–õ–ê');
        console.log('üìã –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:', formData);
        console.log('ü§ñ –î–∞–Ω–Ω—ã–µ Telegram API:', telegramData);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        const subscribersInForm = formData.subscribers_count || formData.subscriber_count || 0;
        const subscribersInTelegram = telegramData?.raw_subscriber_count || telegramData?.subscribers || 0;

        console.log(`üìä –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –≤ —Ñ–æ—Ä–º–µ: ${subscribersInForm}`);
        console.log(`üìä –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –∏–∑ Telegram: ${subscribersInTelegram}`);

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
        if (subscribersInTelegram > 0 && subscribersInForm === 0) {
            console.warn('‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: Telegram –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å, –Ω–æ –≤ —Ñ–æ—Ä–º–µ 0!');
            console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ raw_subscriber_count –∏–∑ Telegram –¥–∞–Ω–Ω—ã—Ö');
        }

        console.groupEnd();
    }
}

// üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–ª–∞–¥—á–∏–∫–∞
const subscriberDebugger = new SubscriberDebugger();

// üîß –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–¥–æ–±–∞–≤—å—Ç–µ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç)
function formatSubscriberCount(count) {
    if (count >= 1000000) {
        return (count / 1000000).toFixed(1) + 'M';
    } else if (count >= 1000) {
        return (count / 1000).toFixed(1) + 'K';
    }
    return count.toString();
}

function calculateEngagementRate(subscriberCount) {
    if (subscriberCount < 1000) return (Math.random() * 15 + 10).toFixed(1);
    if (subscriberCount < 10000) return (Math.random() * 10 + 5).toFixed(1);
    if (subscriberCount < 100000) return (Math.random() * 5 + 2).toFixed(1);
    return (Math.random() * 3 + 1).toFixed(1);
}

function suggestCategory(title) {
    const keywords = {
        '—Ç–µ—Ö–Ω–æ–ª–æ–≥': 'technology',
        'it': 'technology',
        '–±–∏–∑–Ω–µ—Å': 'business',
        '–∫—Ä–∏–ø—Ç–æ': 'finance',
        '–Ω–æ–≤–æ—Å—Ç': 'news'
    };

    const titleLower = title.toLowerCase();
    for (const [keyword, category] of Object.entries(keywords)) {
        if (titleLower.includes(keyword)) {
            return category;
        }
    }
    return 'other';
}


        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤
        const channelAnalyzer = new ChannelAnalyzer();