/**
 * –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫–∏ –Ω–æ–≤—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */

class NotificationSystem {
    constructor() {
        this.checkInterval = 30000; // 30 —Å–µ–∫—É–Ω–¥
        this.notificationBadge = null;
        this.init();
    }

    init() {
        this.createNotificationBadge();
        this.startPeriodicCheck();
        this.bindEvents();
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –∑–Ω–∞—á–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —à–∞–ø–∫–µ
     */
    createNotificationBadge() {
        // –ò—â–µ–º –º–µ—Å—Ç–æ –¥–ª—è –∑–Ω–∞—á–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        const header = document.querySelector('header, .header, .navbar');
        if (!header) return;

        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        const notificationContainer = document.createElement('div');
        notificationContainer.className = 'notification-container';
        notificationContainer.innerHTML = `
            <div class="notification-bell" id="notification-bell">
                <span class="bell-icon">üîî</span>
                <span class="notification-badge" id="notification-badge" style="display: none;">0</span>
            </div>
            <div class="notification-dropdown" id="notification-dropdown" style="display: none;">
                <div class="notification-header">
                    <h4>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h4>
                    <button class="mark-all-read" id="mark-all-read">–û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ</button>
                </div>
                <div class="notification-list" id="notification-list">
                    <div class="no-notifications">–ù–µ—Ç –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</div>
                </div>
            </div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
        this.addNotificationStyles();

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ —à–∞–ø–∫—É
        header.appendChild(notificationContainer);
        
        this.notificationBadge = document.getElementById('notification-badge');
        this.notificationBell = document.getElementById('notification-bell');
        this.notificationDropdown = document.getElementById('notification-dropdown');
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç CSS —Å—Ç–∏–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    addNotificationStyles() {
        // –°—Ç–∏–ª–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ /css/components.css
    }

    /**
     * –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è
     */
    bindEvents() {
        // –ö–ª–∏–∫ –ø–æ –∫–æ–ª–æ–∫–æ–ª—å—á–∏–∫—É
        if (this.notificationBell) {
            this.notificationBell.addEventListener('click', (e) => {
                e.stopPropagation();
                this.toggleNotificationDropdown();
            });
        }

        // –ó–∞–∫—Ä—ã—Ç–∏–µ dropdown –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
        document.addEventListener('click', (e) => {
            if (!e.target.closest('.notification-container')) {
                this.hideNotificationDropdown();
            }
        });

        // –ö–Ω–æ–ø–∫–∞ "–û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ"
        const markAllReadBtn = document.getElementById('mark-all-read');
        if (markAllReadBtn) {
            markAllReadBtn.addEventListener('click', () => {
                this.markAllAsRead();
            });
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    startPeriodicCheck() {
        this.checkNotifications();
        setInterval(() => {
            this.checkNotifications();
        }, this.checkInterval);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    async checkNotifications() {
        try {
            const response = await fetch('/api/offers/responses/notifications', {
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('telegram_auth_token')}`,
                    'Content-Type': 'application/json'
                }
            });

            if (response.ok) {
                const data = await response.json();
                if (data.success) {
                    this.updateNotificationBadge(data.notifications);
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –∑–Ω–∞—á–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    updateNotificationBadge(notifications) {
        if (!this.notificationBadge) return;

        const count = notifications.new_responses_24h || 0;
        
        if (count > 0) {
            this.notificationBadge.textContent = count > 99 ? '99+' : count;
            this.notificationBadge.style.display = 'flex';
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
            this.notificationBadge.style.animation = 'pulse 2s infinite';
        } else {
            this.notificationBadge.style.display = 'none';
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º title –¥–ª—è accessibility
        if (this.notificationBell) {
            this.notificationBell.title = count > 0 ? `${count} –Ω–æ–≤—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤` : '–ù–µ—Ç –Ω–æ–≤—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤';
        }
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç/—Å–∫—Ä—ã–≤–∞–µ—Ç dropdown —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    toggleNotificationDropdown() {
        if (!this.notificationDropdown) return;

        const isVisible = this.notificationDropdown.style.display === 'block';
        
        if (isVisible) {
            this.hideNotificationDropdown();
        } else {
            this.showNotificationDropdown();
        }
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç dropdown —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    showNotificationDropdown() {
        if (!this.notificationDropdown) return;

        this.notificationDropdown.style.display = 'block';
        this.loadNotificationList();
    }

    /**
     * –°–∫—Ä—ã–≤–∞–µ—Ç dropdown —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    hideNotificationDropdown() {
        if (!this.notificationDropdown) return;
        this.notificationDropdown.style.display = 'none';
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    async loadNotificationList() {
        const notificationList = document.getElementById('notification-list');
        if (!notificationList) return;

        try {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            notificationList.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>';

            const response = await fetch('/api/offers/my', {
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('telegram_auth_token')}`,
                    'Content-Type': 'application/json'
                }
            });

            if (response.ok) {
                const data = await response.json();
                if (data.success) {
                    this.renderNotificationList(data.offers);
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
            notificationList.innerHTML = '<div class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</div>';
        }
    }

    /**
     * –†–µ–Ω–¥–µ—Ä–∏—Ç —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    renderNotificationList(offers) {
        const notificationList = document.getElementById('notification-list');
        if (!notificationList) return;

        // –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Ñ—Ñ–µ—Ä—ã —Å –Ω–æ–≤—ã–º–∏ –æ—Ç–∫–ª–∏–∫–∞–º–∏
        const offersWithNewResponses = offers.filter(offer => 
            offer.pending_count > 0 || offer.needs_attention
        );

        if (offersWithNewResponses.length === 0) {
            notificationList.innerHTML = '<div class="no-notifications">–ù–µ—Ç –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</div>';
            return;
        }

        const notifications = offersWithNewResponses.map(offer => {
            const timeAgo = this.formatTimeAgo(offer.updated_at);
            const responseText = offer.pending_count === 1 ? '–æ—Ç–∫–ª–∏–∫' : '–æ—Ç–∫–ª–∏–∫–æ–≤';
            
            return `
                <div class="notification-item unread" data-offer-id="${offer.id}">
                    <div class="notification-text">
                        <strong>${offer.pending_count} –Ω–æ–≤—ã—Ö ${responseText}</strong> –Ω–∞ –æ—Ñ—Ñ–µ—Ä "${offer.title}"
                    </div>
                    <div class="notification-time">${timeAgo}</div>
                </div>
            `;
        }).join('');

        notificationList.innerHTML = notifications;

        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–ª–∏–∫–∏
        notificationList.querySelectorAll('.notification-item').forEach(item => {
            item.addEventListener('click', (e) => {
                const offerId = e.currentTarget.getAttribute('data-offer-id');
                this.handleNotificationClick(offerId);
            });
        });
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª–∏–∫ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é
     */
    handleNotificationClick(offerId) {
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ñ—Ñ–µ—Ä–∞
        window.location.href = `/offer/${offerId}`;
        this.hideNotificationDropdown();
    }

    /**
     * –û—Ç–º–µ—á–∞–µ—Ç –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
     */
    async markAllAsRead() {
        try {
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç API –≤—ã–∑–æ–≤ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –≤—Å–µ—Ö –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
            console.log('–û—Ç–º–µ—á–∞–µ–º –≤—Å–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            this.updateNotificationBadge({ new_responses_24h: 0 });
            this.hideNotificationDropdown();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            this.showToast('–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è "–Ω–∞–∑–∞–¥"
     */
    formatTimeAgo(dateString) {
        const date = new Date(dateString);
        const now = new Date();
        const diff = now - date;
        
        const minutes = Math.floor(diff / (1000 * 60));
        const hours = Math.floor(diff / (1000 * 60 * 60));
        const days = Math.floor(diff / (1000 * 60 * 60 * 24));
        
        if (minutes < 60) {
            return `${minutes} –º–∏–Ω –Ω–∞–∑–∞–¥`;
        } else if (hours < 24) {
            return `${hours} —á –Ω–∞–∑–∞–¥`;
        } else {
            return `${days} –¥ –Ω–∞–∑–∞–¥`;
        }
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     */
    showToast(message) {
        const toast = document.createElement('div');
        toast.className = 'toast-notification success';
        toast.textContent = message;

        document.body.appendChild(toast);
        
        setTimeout(() => {
            toast.remove();
        }, 3000);
    }

    /**
     * –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å–ø–∏—Å–∫–µ
     */
    highlightNewResponses() {
        const responseItems = document.querySelectorAll('.response-item');
        responseItems.forEach(item => {
            if (item.dataset.isNew === 'true') {
                item.classList.add('notification-highlight');
            }
        });
    }
}

// CSS –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ /css/components.css

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–æ–≥–¥–∞ DOM –≥–æ—Ç–æ–≤
document.addEventListener('DOMContentLoaded', () => {
    window.notificationSystem = new NotificationSystem();
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.NotificationSystem = NotificationSystem;