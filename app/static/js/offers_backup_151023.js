// app/static/js/offers.js - –ü–û –ê–ù–ê–õ–û–ì–ò–ò –° CHANNELS

// ===== –§–£–ù–ö–¶–ò–Ø –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–Ø –í–ö–õ–ê–î–û–ö (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ channels-ui.js) =====
function switchTab(tabName) {
    console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É:', tabName);

    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã —É –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
    document.querySelectorAll('.nav-card').forEach(card => card.classList.remove('active'));

    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–Ω—Ç—ã –≤–∫–ª–∞–¥–æ–∫
    document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));

    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
    const activeCard = document.querySelector(`[data-tab="${tabName}"]`);
    if (activeCard) {
        activeCard.classList.add('active');
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
    const activeContent = document.getElementById(tabName);
    if (activeContent) {
        activeContent.classList.add('active');
    }

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∫–ª–∞–¥–∫–∏
    if (tabName === 'my-offers') {
        loadMyOffers();
    }
}

// ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø TELEGRAM WEBAPP (–∫–∞–∫ –≤ channels) =====
if (window.Telegram && window.Telegram.WebApp) {
    window.Telegram.WebApp.ready();
    window.Telegram.WebApp.expand();
}

// ===== –ó–ê–ì–†–£–ó–ö–ê –ú–û–ò–• –û–§–§–ï–†–û–í =====
async function loadMyOffers() {
    console.log('üìã –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–∏—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤...');
    const container = document.getElementById('offersGrid');

    if (!container) {
        console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä offersGrid –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }

    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        showOffersLoading();

        const response = await fetch('/api/offers/my', {
            headers: {
                'X-Telegram-User-Id': getTelegramUserId()
            }
        });

        const result = await response.json();

        if (result.success && result.offers && result.offers.length > 0) {
            console.log('‚úÖ –û—Ñ—Ñ–µ—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', result.offers.length);
            renderOffers(result.offers);
        } else {
            console.log('‚ÑπÔ∏è –û—Ñ—Ñ–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            showEmptyOffersState();
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ñ—Ñ–µ—Ä–æ–≤:', error);
        showOffersError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ñ—Ñ–µ—Ä–æ–≤');
    }
}

function renderOffers(offers) {
    const container = document.getElementById('offersGrid');
    const emptyState = document.getElementById('emptyOffersState');

    if (!container) return;

    // –°–∫—Ä—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if (emptyState) {
        emptyState.style.display = 'none';
    }

    container.innerHTML = offers.map(offer => `
        <div class="offer-card">
            <div class="offer-header">
                <div class="offer-title">${escapeHtml(offer.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</div>
                <div class="offer-status status-${offer.status || 'pending'}">${getStatusText(offer.status)}</div>
            </div>
            
            <div class="offer-meta">
                <div class="meta-item">
                    <span>üí∞</span>
                    <span>${formatCurrency(offer.price || offer.budget || 0)} ${offer.currency || 'RUB'}</span>
                </div>
                <div class="meta-item">
                    <span>üìÖ</span>
                    <span>${formatDate(offer.created_at)}</span>
                </div>
                <div class="meta-item">
                    <span>üë•</span>
                    <span>–ú–∏–Ω. ${formatNumber(offer.min_subscribers || 0)} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤</span>
                </div>
                ${offer.responses_count ? `
                <div class="meta-item">
                    <span>üí¨</span>
                    <span>${offer.responses_count} –æ—Ç–∫–ª–∏–∫–æ–≤</span>
                </div>
                ` : ''}
            </div>
        </div>
    `).join('');
}

function showOffersLoading() {
    const container = document.getElementById('offersGrid');
    if (container) {
        container.innerHTML = `
            <div style="grid-column: 1 / -1; text-align: center; padding: 40px;">
                <div class="loading-spinner"></div>
                <div>–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ñ—Ñ–µ—Ä–æ–≤...</div>
            </div>
        `;
    }
}

function showEmptyOffersState() {
    const container = document.getElementById('offersGrid');
    const emptyState = document.getElementById('emptyOffersState');

    if (container) {
        container.innerHTML = '';
    }

    if (emptyState) {
        emptyState.style.display = 'block';
    }
}

function showOffersError(message) {
    const container = document.getElementById('offersGrid');
    if (container) {
        container.innerHTML = `
            <div style="grid-column: 1 / -1; text-align: center; padding: 40px; color: var(--danger-color);">
                <div>‚ùå ${message}</div>
                <button class="btn btn-primary" onclick="loadMyOffers()" style="margin-top: 16px;">
                    üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                </button>
            </div>
        `;
    }
}

// ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò (–∫–∞–∫ –≤ channels) =====
function getStatusText(status) {
    const statusMap = {
        'active': '–ê–∫—Ç–∏–≤–µ–Ω',
        'pending': '–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏',
        'paused': '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
        'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω',
        'draft': '–ß–µ—Ä–Ω–æ–≤–∏–∫'
    };
    return statusMap[status] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
}

function formatCurrency(amount) {
    return Number(amount || 0).toLocaleString('ru-RU');
}

function formatNumber(num) {
    if (num >= 1000000) {
        return (num / 1000000).toFixed(1) + 'M';
    }
    if (num >= 1000) {
        return (num / 1000).toFixed(1) + 'K';
    }
    return num.toString();
}

function formatDate(dateString) {
    if (!dateString) return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric'
    });
}

function getTelegramUserId() {
    if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.initDataUnsafe) {
        return window.Telegram.WebApp.initDataUnsafe.user?.id || 'demo_user';
    }
    return 'demo_user';
}

function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

function goBack() {
    try {
        console.log('üîô –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É');
        window.location.href = '/';
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é:', error);
        window.location = '/';
    }
}

// ===== –ü–û–ò–°–ö –ü–û –û–§–§–ï–†–ê–ú (–∫–∞–∫ –ø–æ–∏—Å–∫ –≤ channels) =====
function setupOffersSearch() {
    const searchInput = document.getElementById('offersSearch');
    if (searchInput) {
        searchInput.addEventListener('input', function() {
            const searchTerm = this.value.toLowerCase();
            const offerCards = document.querySelectorAll('.offer-card');

            offerCards.forEach(card => {
                const title = card.querySelector('.offer-title')?.textContent.toLowerCase() || '';

                if (title.includes(searchTerm)) {
                    card.style.display = 'block';
                } else {
                    card.style.display = 'none';
                }
            });
        });
    }
}

// ===== –ö–õ–ê–°–° –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –û–§–§–ï–†–û–í =====
class OffersManager {
    constructor() {
        this.currentStep = 1;
        this.totalSteps = 4;
        this.formData = {};
        this.init();
    }

    init() {
        console.log('üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OffersManager');
        this.setupEventListeners();
        this.updateStep(this.currentStep);
    }

    setupEventListeners() {
        // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —à–∞–≥–∞–º
        document.getElementById('nextBtn')?.addEventListener('click', () => this.nextStep());
        document.getElementById('prevBtn')?.addEventListener('click', () => this.prevStep());
        document.getElementById('submitBtn')?.addEventListener('click', () => this.submitOffer());



        // –°–ª–∞–π–¥–µ—Ä –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        const subscribersRange = document.querySelector('input[name="min_subscribers"]');
        const subscribersValue = document.getElementById('subscribersValue');

        if (subscribersRange && subscribersValue) {
            subscribersRange.addEventListener('input', function() {
                const value = parseInt(this.value);
                subscribersValue.textContent = value >= 1000000 ? '1M+' :
                                              value >= 1000 ? Math.round(value/1000) + 'K' :
                                              value.toString();
            });
        }
    }

    updateStep(step) {
        console.log('üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —à–∞–≥–∞:', step);

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —à–∞–≥–æ–≤
        document.querySelectorAll('.step').forEach((stepEl, index) => {
            const stepNumber = index + 1;
            stepEl.classList.toggle('active', stepNumber === step);
            stepEl.classList.toggle('completed', stepNumber < step);
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º —à–∞–≥–∏ —Ñ–æ—Ä–º—ã
        document.querySelectorAll('.form-step').forEach(stepEl => {
            stepEl.style.display = stepEl.dataset.step == step ? 'block' : 'none';
        });

        // –£–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∞–º–∏
        const prevBtn = document.getElementById('prevBtn');
        const nextBtn = document.getElementById('nextBtn');
        const submitBtn = document.getElementById('submitBtn');

        if (prevBtn) prevBtn.style.display = step === 1 ? 'none' : 'inline-flex';
        if (nextBtn) nextBtn.style.display = step === this.totalSteps ? 'none' : 'inline-flex';
        if (submitBtn) submitBtn.style.display = step === this.totalSteps ? 'inline-flex' : 'none';

        // –û–±–Ω–æ–≤–ª—è–µ–º progress bar
        const stepperProgress = document.getElementById('stepperProgress');
        if (stepperProgress) {
            const progress = ((step - 1) / (this.totalSteps - 1)) * 100;
            stepperProgress.style.width = progress + '%';
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º —à–∞–≥–µ
        if (step === this.totalSteps) {
            this.updatePreview();
        }

        this.currentStep = step;
    }

    nextStep() {
        if (this.currentStep < this.totalSteps) {
            this.updateStep(this.currentStep + 1);
        }
    }

    prevStep() {
        if (this.currentStep > 1) {
            this.updateStep(this.currentStep - 1);
        }
    }

    updatePreview() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
        const titleInput = document.querySelector('input[name="title"]');
        const budgetInput = document.querySelector('input[name="budget"]');

        if (titleInput) {
            const previewTitle = document.getElementById('previewTitle');
            if (previewTitle) {
                previewTitle.textContent = titleInput.value || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
            }
        }

        if (budgetInput) {
            const previewBudget = document.getElementById('previewBudget');
            if (previewBudget) {
                const budget = budgetInput.value;
                previewBudget.textContent = budget ? `‚ÇΩ${Number(budget).toLocaleString()}` : '–ù–µ —É–∫–∞–∑–∞–Ω';
            }
        }

        // –¢–µ–º–∞—Ç–∏–∫–∏
        const selectedChips = document.querySelectorAll('.chip.selected');
        const previewTopics = document.getElementById('previewTopics');
        if (previewTopics) {
            const topics = Array.from(selectedChips).map(chip => chip.textContent).join(', ');
            previewTopics.textContent = topics || '–ù–µ –≤—ã–±—Ä–∞–Ω—ã';
        }

        // –ì–µ–æ–≥—Ä–∞—Ñ–∏—è
        const geographySelect = document.querySelector('select[name="geography"]');
        const previewGeography = document.getElementById('previewGeography');
        if (previewGeography && geographySelect) {
            const geographyMap = {
                'russia': '–†–æ—Å—Å–∏—è',
                'cis': '–°–ù–ì',
                'europe': '–ï–≤—Ä–æ–ø–∞',
                'world': '–í–µ—Å—å –º–∏—Ä'
            };
            previewGeography.textContent = geographyMap[geographySelect.value] || '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
        }
    }

    async submitOffer() {
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ñ—Ñ–µ—Ä–∞...');

        const submitBtn = document.getElementById('submitBtn');
        const originalText = submitBtn?.textContent;

        try {
            if (submitBtn) {
                submitBtn.disabled = true;
                submitBtn.textContent = '‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ...';
            }

            // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
            const formData = this.collectFormData();

            const response = await fetch('/api/offers', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Telegram-User-Id': getTelegramUserId()
                },
                body: JSON.stringify(formData)
            });

            const result = await response.json();

            if (response.ok && result.success) {
                alert('‚úÖ –û—Ñ—Ñ–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
                // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≤–∫–ª–∞–¥–∫—É "–ú–æ–∏ –æ—Ñ—Ñ–µ—Ä—ã"
                switchTab('my-offers');
            } else {
                throw new Error(result.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞');
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞:', error);
            alert(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
        } finally {
            if (submitBtn) {
                submitBtn.disabled = false;
                submitBtn.textContent = originalText;
            }
        }
    }

    collectFormData() {
        const form = document.getElementById('offerForm');
        const formData = new FormData(form);
        const data = Object.fromEntries(formData.entries());

        // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —á–∏–ø—ã
        data.categories = Array.from(document.querySelectorAll('.chip.selected'))
            .map(chip => chip.dataset.value || chip.textContent);

        return data;
    }
}

// ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø (–∫–∞–∫ –≤ channels) =====
document.addEventListener('DOMContentLoaded', function() {
    console.log('üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ñ—Ñ–µ—Ä–æ–≤');

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ñ—Ñ–µ—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–ø–µ—Ä–≤–∞—è –≤–∫–ª–∞–¥–∫–∞)
    loadMyOffers();

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–∏—Å–∫–∞
    setupOffersSearch();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–æ–≤
    if (typeof OffersManager !== 'undefined') {
        window.offersManager = new OffersManager();
    }

    console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ñ—Ñ–µ—Ä–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
});

// ===== –î–ï–õ–ê–ï–ú –§–£–ù–ö–¶–ò–ò –ì–õ–û–ë–ê–õ–¨–ù–û –î–û–°–¢–£–ü–ù–´–ú–ò (–∫–∞–∫ –≤ channels) =====
window.switchTab = switchTab;
window.loadMyOffers = loadMyOffers;
window.goBack = goBack;
window.OffersManager = OffersManager;