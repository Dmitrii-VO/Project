// static/js/app-init.js - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

// === –ì–õ–ê–í–ù–´–ô –ö–õ–ê–°–° –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ===
class TelegramMiniApp {
    constructor() {
        this.initialized = false;
        this.loadingSteps = [
            '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...',
            '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...',
            '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...',
            '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...'
        ];
        this.currentStep = 0;
    }

    async init() {
        try {
            console.log('üöÄ Starting Telegram Mini App initialization...');

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏
            this.updateLoadingStep(0);

            // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
            const telegramInitialized = initTelegramWebApp();
            await this.delay(500);

            // 2. –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            this.updateLoadingStep(1);
            const user = await getTelegramUser();

            if (user) {
                console.log('‚úÖ User authenticated:', user.first_name);
            } else {
                console.log('‚ö†Ô∏è No user data available');
            }

            await this.delay(500);

            // 3. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            this.updateLoadingStep(2);
            await this.loadAppData();
            await this.delay(500);

            // 4. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            this.updateLoadingStep(3);
            this.setupUI();
            await this.delay(300);

            // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            this.initialized = true;
            console.log('‚úÖ Telegram Mini App fully initialized');

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            this.showApp();

            // Haptic feedback –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            if (window.appGlobals.tg && window.appGlobals.tg.HapticFeedback) {
                window.appGlobals.tg.HapticFeedback.notificationOccurred('success');
            }

        } catch (error) {
            console.error('‚ùå Initialization failed:', error);
            this.showError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
        }
    }

    updateLoadingStep(stepIndex) {
        this.currentStep = stepIndex;
        const loadingScreen = document.getElementById('loading-screen');

        if (loadingScreen && this.loadingSteps[stepIndex]) {
            const textElement = loadingScreen.querySelector('div:last-child');
            if (textElement) {
                textElement.textContent = this.loadingSteps[stepIndex];
            }
        }
    }

    async loadAppData() {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–µ—Å–ª–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
            if (window.location.pathname === '/' || window.location.pathname === '/index') {
                await this.loadStats();
                await this.loadRecentActivity();
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
            const path = window.location.pathname;

            if (path.includes('channels')) {
                await this.loadChannels();
            } else if (path.includes('offers')) {
                await this.loadOffers();
            } else if (path.includes('analytics')) {
                await this.loadAnalytics();
            }

        } catch (error) {
            console.error('‚ùå Error loading app data:', error);
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å
        }
    }

    async loadStats() {
        try {
            const stats = await apiRequest('/api/stats');
            this.updateStatsUI(stats);
        } catch (error) {
            console.error('Error loading stats:', error);
        }
    }

    async loadRecentActivity() {
        try {
            const activities = await apiRequest('/api/recent-activity');
            this.updateActivityUI(activities);
        } catch (error) {
            console.error('Error loading activities:', error);
        }
    }

    async loadChannels() {
        try {
            const channels = await apiRequest('/api/channels');
            console.log('Channels loaded:', channels.length);
        } catch (error) {
            console.error('Error loading channels:', error);
        }
    }

    async loadOffers() {
        try {
            const offers = await apiRequest('/api/offers/incoming');
            console.log('Offers loaded:', offers.length);
        } catch (error) {
            console.error('Error loading offers:', error);
        }
    }

    async loadAnalytics() {
        try {
            const analytics = await apiRequest('/api/analytics');
            console.log('Analytics loaded:', analytics);
        } catch (error) {
            console.error('Error loading analytics:', error);
        }
    }

    updateStatsUI(stats) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        const elements = {
            'statsUsers': stats.users,
            'statsChannels': stats.channels,
            'statsOffers': stats.offers,
            'statsPending': stats.pending_responses
        };

        Object.entries(elements).forEach(([id, value]) => {
            const element = document.getElementById(id);
            if (element) {
                element.textContent = formatNumber(value);
            }
        });
    }

    updateActivityUI(activities) {
        const activityList = document.getElementById('activityList');
        if (!activityList) return;

        if (!activities || activities.length === 0) {
            activityList.innerHTML = `
                <div style="text-align: center; padding: 40px; color: var(--text-secondary);">
                    <span style="font-size: 48px; display: block; margin-bottom: 16px; opacity: 0.6;">üì≠</span>
                    <div>–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</div>
                </div>
            `;
            return;
        }

        activityList.innerHTML = activities.map(activity => `
            <div class="activity-item">
                <div class="activity-icon ${activity.type}">
                    ${this.getActivityIcon(activity.type)}
                </div>
                <div class="activity-content">
                    <div class="activity-text">${activity.text}</div>
                    <div class="activity-time">${formatTime(activity.timestamp)}</div>
                </div>
            </div>
        `).join('');
    }

    getActivityIcon(type) {
        const icons = {
            'offer': 'üéØ',
            'channel': 'üì∫',
            'payment': 'üí∞',
            'response': 'üì®'
        };
        return icons[type] || 'üìã';
    }

    setupUI() {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–æ–∫ Telegram
        this.setupTelegramButtons();

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ñ–æ—Ä–º
        this.setupFormHandlers();

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        this.setupNavigation();
    }

    setupTelegramButtons() {
        if (!window.appGlobals.tg) return;

        const tg = window.appGlobals.tg;
        const path = window.location.pathname;

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if (path === '/' || path === '/index') {
            // –ù–∞ –≥–ª–∞–≤–Ω–æ–π - –∫–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞
            tg.MainButton.setText('–°–æ–∑–¥–∞—Ç—å –æ—Ñ—Ñ–µ—Ä');
            tg.MainButton.onClick(() => navigateTo('/create-offer'));
            tg.MainButton.show();
        } else if (path.includes('create-offer')) {
            // –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å–æ–∑–¥–∞–Ω–∏—è - –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
            tg.MainButton.setText('–°–æ–∑–¥–∞—Ç—å –æ—Ñ—Ñ–µ—Ä');
            tg.MainButton.onClick(() => this.submitCurrentForm());
            tg.MainButton.show();
        } else {
            // –ù–∞ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö —Å–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
            tg.MainButton.hide();
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –µ—Å–ª–∏ –Ω–µ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π
        if (path !== '/' && path !== '/index') {
            tg.BackButton.show();
        } else {
            tg.BackButton.hide();
        }
    }

    setupFormHandlers() {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö —Ñ–æ—Ä–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        const forms = document.querySelectorAll('form');

        forms.forEach(form => {
            form.addEventListener('submit', async (e) => {
                e.preventDefault();
                await this.handleFormSubmit(form);
            });
        });
    }

    setupNavigation() {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        const navLinks = document.querySelectorAll('a[href^="/"], button[onclick*="navigateTo"]');

        navLinks.forEach(link => {
            link.addEventListener('click', (e) => {
                // Haptic feedback –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                if (window.appGlobals.tg && window.appGlobals.tg.HapticFeedback) {
                    window.appGlobals.tg.HapticFeedback.impactOccurred('light');
                }
            });
        });
    }

    async handleFormSubmit(form) {
        const formData = new FormData(form);
        const url = form.action || '/api/default';
        const method = form.method || 'POST';

        try {
            showLoading();

            const response = await apiRequest(url, {
                method: method.toUpperCase(),
                body: JSON.stringify(Object.fromEntries(formData))
            });

            hideLoading();

            if (response.status === 'success') {
                showAlert(response.message || '–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!');

                // Haptic feedback –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
                if (window.appGlobals.tg && window.appGlobals.tg.HapticFeedback) {
                    window.appGlobals.tg.HapticFeedback.notificationOccurred('success');
                }

                // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—Ö–∞
                if (response.redirect) {
                    setTimeout(() => navigateTo(response.redirect), 1000);
                }
            }

        } catch (error) {
            hideLoading();
            showAlert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏');

            if (window.appGlobals.tg && window.appGlobals.tg.HapticFeedback) {
                window.appGlobals.tg.HapticFeedback.notificationOccurred('error');
            }
        }
    }

    submitCurrentForm() {
        const form = document.querySelector('form');
        if (form) {
            form.dispatchEvent(new Event('submit'));
        }
    }

    showApp() {
        hideLoading();

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        const appContainer = document.getElementById('app-container');
        if (appContainer) {
            appContainer.style.opacity = '0';
            appContainer.style.transform = 'translateY(20px)';
            appContainer.style.transition = 'all 0.3s ease-out';

            setTimeout(() => {
                appContainer.style.opacity = '1';
                appContainer.style.transform = 'translateY(0)';
            }, 100);
        }
    }

    showError(message) {
        hideLoading();
        showAlert(message);
    }

    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}

// === –ì–õ–û–ë–ê–õ–¨–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
window.handleMainButtonClick = function() {
    if (window.appInstance && window.appInstance.submitCurrentForm) {
        window.appInstance.submitCurrentForm();
    }
};

// === –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
document.addEventListener('DOMContentLoaded', async () => {
    console.log('üìÑ DOM loaded, starting app initialization...');

    // –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    window.appInstance = new TelegramMiniApp();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    await window.appInstance.init();
});

// –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
document.addEventListener('visibilitychange', () => {
    if (!document.hidden && window.appInstance && window.appInstance.initialized) {
        console.log('üëÅÔ∏è Page became visible, refreshing data...');
        window.appInstance.loadAppData();
    }
});

console.log('‚öôÔ∏è App initialization module loaded');