/**
 * payments.js - JavaScript –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–ª–∞—Ç–µ–∂–µ–π
 * Telegram Mini App - –°–∏—Å—Ç–µ–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π –∏ –≤—ã–≤–æ–¥–æ–≤
 * 
 * –§—É–Ω–∫—Ü–∏–∏:
 * - –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –∏–∑ API
 * - –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤
 * - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–∞–º–∏ –æ–ø–ª–∞—Ç—ã
 * - –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 */

class PaymentsManager {
    constructor() {
        this.isLoading = false;
        this.data = {};
        this.currentTab = 'history';
        
        console.log('üí≥ Payments Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    // === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
    async init() {
        try {
            console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–µ–π...');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
            this.showLoadingState();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å API
            await this.loadPaymentData();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            this.updateStatCards();
            this.loadTransactionHistory();
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–±—ã
            this.setupTabs();
            
            console.log('‚úÖ –ü–ª–∞—Ç–µ–∂–∏ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π:', error);
            this.showErrorState(error.message);
        }
    }

    // === –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• ===
    async loadPaymentData() {
        try {
            this.isLoading = true;
            
            console.log('üì° –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –∏–∑ API...');
            
            const response = await fetch('/api/payments/dashboard', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Telegram-Web-App-Data': window.Telegram?.WebApp?.initData || ''
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            
            if (!result.success) {
                throw new Error(result.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π');
            }

            this.data = result.data || {};
            console.log('üí≥ –î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', this.data);
            
            return this.data;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π:', error);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ API
            try {
                await this.loadFallbackData();
            } catch (fallbackError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ fallback –¥–∞–Ω–Ω—ã—Ö:', fallbackError);
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                this.data = this.generateBasicData();
            }
        } finally {
            this.isLoading = false;
        }
    }

    async loadFallbackData() {
        console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ API...');
        
        // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ endpoints
        try {
            const statsResponse = await fetch('/api/payments/stats', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Telegram-Web-App-Data': window.Telegram?.WebApp?.initData || ''
                }
            });

            if (statsResponse.ok) {
                const statsData = await statsResponse.json();
                if (statsData.success) {
                    this.data = this.processStatsData(statsData);
                    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —á–µ—Ä–µ–∑ /api/payments/stats');
                    return;
                }
            }
        } catch (e) {
            console.warn('‚ö†Ô∏è Fallback —á–µ—Ä–µ–∑ /api/payments/stats –Ω–µ —É–¥–∞–ª—Å—è:', e);
        }

        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        try {
            const userResponse = await fetch('/api/users/current', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Telegram-Web-App-Data': window.Telegram?.WebApp?.initData || ''
                }
            });

            if (userResponse.ok) {
                const userData = await userResponse.json();
                if (userData.success) {
                    this.data = this.processUserData(userData.data);
                    console.log('‚úÖ –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —á–µ—Ä–µ–∑ /api/users/current');
                    return;
                }
            }
        } catch (e) {
            console.warn('‚ö†Ô∏è Fallback —á–µ—Ä–µ–∑ /api/users/current –Ω–µ —É–¥–∞–ª—Å—è:', e);
        }

        throw new Error('–í—Å–µ —Å–ø–æ—Å–æ–±—ã –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —É–¥–∞–ª–∏—Å—å');
    }

    processStatsData(statsData) {
        const payments = statsData.payments || {};
        const escrow = statsData.escrow || {};
        
        return {
            current_balance: payments.total_amount || 0,
            monthly_income: payments.total_amount || 0,
            pending_payments: payments.pending_count || 0,
            completed_payments: payments.completed_count || 0,
            failed_payments: payments.failed_count || 0,
            held_amount: escrow.held_amount || 0,
            released_amount: escrow.released_amount || 0,
            disputed_count: escrow.disputed_count || 0,
            transactions: []
        };
    }

    processUserData(userData) {
        return {
            current_balance: userData.balance || 0,
            monthly_income: userData.balance || 0,
            pending_payments: 0,
            completed_payments: 0,
            failed_payments: 0,
            held_amount: 0,
            released_amount: 0,
            disputed_count: 0,
            transactions: []
        };
    }

    generateBasicData() {
        return {
            current_balance: 0,
            monthly_income: 0,
            pending_payments: 0,
            completed_payments: 0,
            failed_payments: 0,
            held_amount: 0,
            released_amount: 0,
            disputed_count: 0,
            transactions: [
                {
                    id: 'demo_1',
                    type: 'income',
                    amount: 0,
                    description: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö',
                    date: new Date().toISOString(),
                    status: 'info'
                }
            ]
        };
    }

    // === –û–ë–ù–û–í–õ–ï–ù–ò–ï UI ===
    updateStatCards() {
        const elements = {
            'total-balance': this.formatCurrency(this.data.current_balance || 0),
            'monthly-income': this.formatCurrency(this.data.monthly_income || 0),
            'pending-payments': this.formatNumber(this.data.pending_payments || 0),
            'completed-payments': this.formatNumber(this.data.completed_payments || 0)
        };

        Object.entries(elements).forEach(([id, value]) => {
            const element = document.getElementById(id);
            if (element) {
                element.innerHTML = value;
                element.classList.remove('loading-skeleton');
                console.log(`üí≥ –û–±–Ω–æ–≤–ª–µ–Ω —ç–ª–µ–º–µ–Ω—Ç ${id}: ${value}`);
            }
        });
    }

    async loadTransactionHistory() {
        try {
            const historyContainer = document.getElementById('transaction-history');
            if (!historyContainer) return;

            const transactions = this.data.transactions || [];
            
            if (transactions.length === 0) {
                historyContainer.innerHTML = `
                    <div class="empty-state">
                        <div class="empty-icon">üí≥</div>
                        <h3>–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</h3>
                        <p>–í–∞—à–∏ –ø–ª–∞—Ç–µ–∂–∏ –∏ –≤—ã–≤–æ–¥—ã –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å</p>
                    </div>
                `;
                return;
            }

            const transactionsHTML = transactions.map(transaction => {
                const typeIcon = transaction.type === 'income' ? 'üí∞' : 'üí∏';
                const statusClass = transaction.status === 'completed' ? 'success' : 
                                   transaction.status === 'pending' ? 'warning' : 
                                   transaction.status === 'failed' ? 'error' : 'info';
                
                return `
                    <div class="transaction-item">
                        <div class="transaction-icon">${typeIcon}</div>
                        <div class="transaction-details">
                            <div class="transaction-title">${transaction.description || '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è'}</div>
                            <div class="transaction-date">${this.formatDate(transaction.date)}</div>
                        </div>
                        <div class="transaction-amount ${transaction.type}">
                            ${transaction.type === 'income' ? '+' : '-'}${this.formatCurrency(Math.abs(transaction.amount))}
                        </div>
                        <div class="transaction-status ${statusClass}">
                            ${this.getStatusText(transaction.status)}
                        </div>
                    </div>
                `;
            }).join('');

            historyContainer.innerHTML = transactionsHTML;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
        }
    }

    // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–ê–ë–ê–ú–ò ===
    setupTabs() {
        const tabLinks = document.querySelectorAll('.tabs-nav a');
        const tabContents = document.querySelectorAll('.tabs-content');

        tabLinks.forEach(link => {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                
                const tabId = link.getAttribute('data-tab');
                this.showTab(tabId);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
                tabLinks.forEach(l => l.classList.remove('active'));
                link.classList.add('active');
            });
        });
    }

    showTab(tabId) {
        this.currentTab = tabId;
        
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ç–∞–±—ã
        document.querySelectorAll('.tabs-content').forEach(content => {
            content.classList.remove('active');
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —Ç–∞–±
        const targetTab = document.getElementById(tabId);
        if (targetTab) {
            targetTab.classList.add('active');
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Ç–∞–±–∞
        this.loadTabContent(tabId);
        
        console.log(`üìÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω —Ç–∞–±: ${tabId}`);
    }

    async loadTabContent(tabId) {
        switch (tabId) {
            case 'history':
                await this.loadTransactionHistory();
                break;
            case 'withdraw':
                this.setupWithdrawForm();
                break;
            case 'methods':
                this.loadPaymentMethods();
                break;
            case 'analytics':
                this.loadPaymentAnalytics();
                break;
        }
    }

    setupWithdrawForm() {
        const withdrawTab = document.getElementById('withdraw');
        if (!withdrawTab) return;

        withdrawTab.innerHTML = `
            <div class="withdraw-form">
                <h3>–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤</h3>
                <div class="form-group">
                    <label>–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞</label>
                    <div class="available-balance">${this.formatCurrency(this.data.current_balance || 0)}</div>
                </div>
                <div class="form-group">
                    <label for="withdraw-amount">–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞</label>
                    <input type="number" id="withdraw-amount" placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É" min="100" max="${this.data.current_balance || 0}">
                </div>
                <div class="form-group">
                    <label for="withdraw-method">–°–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞</label>
                    <select id="withdraw-method">
                        <option value="card">–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞</option>
                        <option value="qiwi">QIWI –ö–æ—à–µ–ª–µ–∫</option>
                        <option value="yoomoney">–ÆMoney</option>
                    </select>
                </div>
                <button class="btn btn-primary" onclick="paymentsManager.processWithdraw()">
                    –°–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥
                </button>
            </div>
        `;
    }

    loadPaymentMethods() {
        const methodsTab = document.getElementById('methods');
        if (!methodsTab) return;

        methodsTab.innerHTML = `
            <div class="payment-methods">
                <h3>–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã</h3>
                <div class="methods-list">
                    <div class="method-item">
                        <div class="method-icon">üí≥</div>
                        <div class="method-info">
                            <div class="method-name">–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã</div>
                            <div class="method-desc">Visa, MasterCard, –ú–ò–†</div>
                        </div>
                        <div class="method-status active">–ê–∫—Ç–∏–≤–Ω–æ</div>
                    </div>
                    <div class="method-item">
                        <div class="method-icon">üì±</div>
                        <div class="method-info">
                            <div class="method-name">Telegram Payments</div>
                            <div class="method-desc">–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ Telegram</div>
                        </div>
                        <div class="method-status active">–ê–∫—Ç–∏–≤–Ω–æ</div>
                    </div>
                </div>
            </div>
        `;
    }

    loadPaymentAnalytics() {
        const analyticsTab = document.getElementById('analytics');
        if (!analyticsTab) return;

        const monthlyStats = this.calculateMonthlyStats();
        
        analyticsTab.innerHTML = `
            <div class="payment-analytics">
                <h3>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–æ—Ö–æ–¥–æ–≤</h3>
                <div class="analytics-stats">
                    <div class="stat-card">
                        <div class="stat-number">${this.formatCurrency(monthlyStats.thisMonth)}</div>
                        <div class="stat-label">–≠—Ç–æ—Ç –º–µ—Å—è—Ü</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">${this.formatCurrency(monthlyStats.lastMonth)}</div>
                        <div class="stat-label">–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">${monthlyStats.growth > 0 ? '+' : ''}${monthlyStats.growth}%</div>
                        <div class="stat-label">–†–æ—Å—Ç</div>
                    </div>
                </div>
                <div class="analytics-chart">
                    <p>–ì—Ä–∞—Ñ–∏–∫ –¥–æ—Ö–æ–¥–æ–≤ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö</p>
                </div>
            </div>
        `;
    }

    // === –î–ï–ô–°–¢–í–ò–Ø ===
    async processWithdraw() {
        try {
            const amount = parseFloat(document.getElementById('withdraw-amount')?.value || 0);
            const method = document.getElementById('withdraw-method')?.value;

            if (!amount || amount < 100) {
                this.showNotification('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ 100 —Ä—É–±–ª–µ–π', 'error');
                return;
            }

            if (amount > (this.data.current_balance || 0)) {
                this.showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ', 'error');
                return;
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥
            const response = await fetch('/api/payments/withdraw', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Telegram-Web-App-Data': window.Telegram?.WebApp?.initData || ''
                },
                body: JSON.stringify({
                    amount: amount,
                    method: method
                })
            });

            const result = await response.json();

            if (result.success) {
                this.showNotification('–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ', 'success');
                await this.refresh();
            } else {
                this.showNotification(result.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞', 'error');
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏', 'error');
        }
    }

    // === –°–û–°–¢–û–Ø–ù–ò–Ø –ó–ê–ì–†–£–ó–ö–ò ===
    showLoadingState() {
        document.querySelectorAll('.loading-skeleton').forEach(element => {
            element.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞...';
        });
    }

    showErrorState(message) {
        document.querySelectorAll('.loading-skeleton').forEach(element => {
            element.textContent = '–û—à–∏–±–∫–∞';
            element.classList.add('error-color');
        });
        
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π:', message);
        this.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö', 'error');
    }

    // === –£–¢–ò–õ–ò–¢–´ ===
    formatCurrency(amount) {
        return new Intl.NumberFormat('ru-RU', {
            style: 'currency',
            currency: 'RUB',
            minimumFractionDigits: 0
        }).format(amount);
    }

    formatNumber(num) {
        return new Intl.NumberFormat('ru-RU').format(num);
    }

    formatDate(dateString) {
        const date = new Date(dateString);
        return date.toLocaleDateString('ru-RU', {
            day: 'numeric',
            month: 'short',
            hour: '2-digit',
            minute: '2-digit'
        });
    }

    getStatusText(status) {
        const statuses = {
            'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω–æ',
            'pending': '–û–∂–∏–¥–∞–µ—Ç',
            'failed': '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ',
            'processing': '–û–±—Ä–∞–±–æ—Ç–∫–∞',
            'info': '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'
        };
        return statuses[status] || status;
    }

    calculateMonthlyStats() {
        // –ë–∞–∑–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ—é—â–∏—Ö—Å—è –¥–∞–Ω–Ω—ã—Ö
        const thisMonth = this.data.monthly_income || 0;
        const lastMonth = thisMonth * 0.8; // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        const growth = lastMonth > 0 ? ((thisMonth - lastMonth) / lastMonth * 100).toFixed(1) : 0;

        return {
            thisMonth,
            lastMonth,
            growth: parseFloat(growth)
        };
    }

    showNotification(message, type = 'info') {
        console.log(`üì¢ ${type.toUpperCase()}: ${message}`);
        
        if (window.Telegram?.WebApp?.showAlert) {
            window.Telegram.WebApp.showAlert(message);
        } else {
            // Fallback –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
            alert(message);
        }
    }

    // === –û–ë–ù–û–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–• ===
    async refresh() {
        console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π...');
        await this.loadPaymentData();
        this.updateStatCards();
        this.loadTabContent(this.currentTab);
    }
}

// === –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
window.requestWithdraw = function() {
    if (window.paymentsManager) {
        window.paymentsManager.showTab('withdraw');
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        document.querySelectorAll('.tabs-nav a').forEach(link => {
            link.classList.remove('active');
            if (link.getAttribute('data-tab') === 'withdraw') {
                link.classList.add('active');
            }
        });
    }
};

window.addPaymentMethod = function() {
    if (window.paymentsManager) {
        window.paymentsManager.showTab('methods');
        document.querySelectorAll('.tabs-nav a').forEach(link => {
            link.classList.remove('active');
            if (link.getAttribute('data-tab') === 'methods') {
                link.classList.add('active');
            }
        });
    }
};

window.goBack = function() {
    if (window.history.length > 1) {
        window.history.back();
    } else {
        window.location.href = '/';
    }
};

// === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
document.addEventListener('DOMContentLoaded', async () => {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–ª–∞—Ç–µ–∂–µ–π...');
    
    try {
        window.paymentsManager = new PaymentsManager();
        await window.paymentsManager.init();
        
        console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–ª–∞—Ç–µ–∂–µ–π –≥–æ—Ç–æ–≤–∞');
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π:', error);
    }
});

// === TELEGRAM WEB APP –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø ===
if (window.Telegram?.WebApp) {
    window.Telegram.WebApp.ready();
    console.log('üì± Telegram Web App –≥–æ—Ç–æ–≤ –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π');
}