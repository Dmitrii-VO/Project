/**
 * offers-modals.js
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ñ—Ñ–µ—Ä–æ–≤
 */

export class ModalManager {
    constructor() {
        this.activeModals = new Set();
        this.setupGlobalHandlers();
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    create(id, title, content, options = {}) {
        const { size = 'medium', closable = true, backdrop = true } = options;

        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        this.close(id);

        const modal = document.createElement('div');
        modal.id = id;
        modal.className = `modal-overlay modal-${size}`;
        modal.innerHTML = `
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">${title}</h3>
                    ${closable ? `<button class="modal-close" onclick="window.modalManager.close('${id}')">&times;</button>` : ''}
                </div>
                <div class="modal-body">${content}</div>
            </div>
        `;

        document.body.appendChild(modal);
        this.activeModals.add(id);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        setTimeout(() => modal.classList.add('active'), 10);

        return modal;
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    close(modalId) {
        const modal = document.getElementById(modalId);
        if (modal) {
            modal.classList.remove('active');
            setTimeout(() => {
                modal.remove();
                this.activeModals.delete(modalId);
            }, 300);
        }
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    closeAll() {
        this.activeModals.forEach(id => this.close(id));
    }

    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤
    createChannelSelection(offerId, offerTitle, channels, isDraft = false) {
        console.log('üîç –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –∫–∞–Ω–∞–ª–∞–º–∏:', channels.length);
        console.log('üîç –ü–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª:', channels[0]);
        
        const channelsHtml = channels.map((channel, index) => {
            this.currentChannelNumber = index + 1;
            const cardHtml = this.createChannelCard(channel);
            console.log(`üîç –ö–∞—Ä—Ç–æ—á–∫–∞ ${index + 1} —Å–æ–∑–¥–∞–Ω–∞, HTML —Å–æ–¥–µ—Ä–∂–∏—Ç channel-card-compact:`, cardHtml.includes('channel-card-compact'));
            return cardHtml;
        }).join('');
        
        const content = `
            <div class="channel-selection">
                <div class="channel-selection-header">
                    <p>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞: <strong>${offerTitle}</strong></p>
                    <div class="channel-selection-stats">
                        <span id="selected-count">0</span> –∫–∞–Ω–∞–ª–æ–≤ –≤—ã–±—Ä–∞–Ω–æ
                    </div>
                </div>
                
                <div class="channel-filters">
                    <select id="channel-sort" onchange="window.modalManager.sortChannels(this.value)">
                        <option value="subscribers">–ü–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º</option>
                        <option value="price">–ü–æ —Ü–µ–Ω–µ</option>
                        <option value="engagement">–ü–æ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏</option>
                    </select>
                </div>
                
                <div class="channels-grid" id="channels-grid">
                    ${channelsHtml}
                </div>
                
                <div class="channel-selection-actions">
                    <button class="btn btn-secondary" onclick="window.modalManager.close('channel-selection-modal')">
                        –û—Ç–º–µ–Ω–∞
                    </button>
                    <button class="btn btn-primary" onclick="window.modalManager.confirmChannelSelection('${offerId}', ${isDraft})">
                        ${isDraft ? '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è'}
                    </button>
                </div>
            </div>
        `;

        return this.create('channel-selection-modal', 'üì∫ –í—ã–±–æ—Ä –∫–∞–Ω–∞–ª–æ–≤', content, { size: 'large' });
    }

    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    createAcceptProposal(proposalId, offerTitle) {
        const content = `
            <div class="proposal-action">
                <p>–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ñ—Ñ–µ—Ä–∞: <strong>${offerTitle}</strong></p>
                
                <div class="form-field">
                    <label for="accept-comment">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</label>
                    <textarea id="accept-comment" class="form-input" placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏" rows="3"></textarea>
                </div>
                
                <div class="form-field">
                    <label for="accept-deadline">–î–∞—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</label>
                    <input type="date" id="accept-deadline" class="form-input" min="${new Date().toISOString().split('T')[0]}">
                    <div class="form-help">–ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤</div>
                </div>
                
                <div class="form-actions">
                    <button class="btn btn-secondary" onclick="window.modalManager.close('accept-proposal-modal')">
                        –û—Ç–º–µ–Ω–∞
                    </button>
                    <button class="btn btn-primary" onclick="window.modalManager.submitAcceptProposal('${proposalId}')">
                        ‚úÖ –ü—Ä–∏–Ω—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
                    </button>
                </div>
            </div>
        `;

        return this.create('accept-proposal-modal', '‚úÖ –ü—Ä–∏–Ω—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', content);
    }

    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    createRejectProposal(proposalId, offerTitle) {
        const content = `
            <div class="proposal-action">
                <p>–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ñ—Ñ–µ—Ä–∞: <strong>${offerTitle}</strong></p>
                
                <div class="form-field">
                    <label for="reject-reason">–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è</label>
                    <select id="reject-reason" class="form-input" required>
                        <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É</option>
                        <option value="price">–ù–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ü–µ–Ω–∞</option>
                        <option value="timing">–ù–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –≤—Ä–µ–º—è</option>
                        <option value="content">–ù–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç</option>
                        <option value="audience">–ù–µ —Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è</option>
                        <option value="other">–î—Ä—É–≥–∞—è –ø—Ä–∏—á–∏–Ω–∞</option>
                    </select>
                </div>
                
                <div class="form-field">
                    <label for="reject-comment">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</label>
                    <textarea id="reject-comment" class="form-input" placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ—è—Å–Ω–µ–Ω–∏—è"></textarea>
                </div>
                
                <div class="form-actions">
                    <button class="btn btn-secondary" onclick="window.modalManager.close('reject-proposal-modal')">
                        –û—Ç–º–µ–Ω–∞
                    </button>
                    <button class="btn btn-danger" onclick="window.modalManager.submitRejectProposal('${proposalId}')">
                        –û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
                    </button>
                </div>
            </div>
        `;

        return this.create('reject-proposal-modal', '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', content);
    }

    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
    createDeleteConfirmation(offerId) {
        const content = `
            <div class="delete-confirmation">
                <div class="confirmation-icon">‚ö†Ô∏è</div>
                <h3>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</h3>
                <p>–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –æ—Ñ—Ñ–µ—Ä?</p>
                <p class="warning-text">–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å.</p>
                
                <div class="form-actions">
                    <button type="button" class="btn btn-secondary" onclick="window.modalManager?.close?.('delete-confirmation-modal')">
                        –û—Ç–º–µ–Ω–∞
                    </button>
                    <button type="button" class="btn btn-danger" onclick="window.modalManager?.confirmDelete?.('${offerId}')" style="background: #ef4444; color: white; border: 1px solid #ef4444;">
                        üóëÔ∏è –î–∞, —É–¥–∞–ª–∏—Ç—å
                    </button>
                </div>
            </div>
        `;

        const modal = this.create('delete-confirmation-modal', 'üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞', content);
        console.log('üóëÔ∏è –°–æ–∑–¥–∞–Ω–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –æ—Ñ—Ñ–µ—Ä–∞:', offerId);
        return modal;
    }

    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞
    createEditOffer(offer) {
        const content = `
            <div class="edit-offer">
                <form id="edit-offer-form" onsubmit="return false;" onclick="event.stopPropagation();">
                    <div class="form-field">
                        <label for="edit-budget">–ë—é–¥–∂–µ—Ç (‚ÇΩ) <span class="required">*</span></label>
                        <input type="number" id="edit-budget" class="form-input" value="${offer.budget_total || offer.price || ''}" placeholder="100000" min="100" required onclick="event.stopPropagation();">
                    </div>
                    
                    <div class="form-field">
                        <label for="edit-description">–û–±—ä—è–≤–ª–µ–Ω–∏–µ <span class="required">*</span></label>
                        <textarea id="edit-description" class="form-input" rows="4" placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π" required onclick="event.stopPropagation();">${offer.description || ''}</textarea>
                    </div>
                    
                    <div class="form-actions">
                        <button type="button" class="btn btn-secondary" onclick="event.stopPropagation(); window.modalManager?.close?.('edit-offer-modal');">
                            –û—Ç–º–µ–Ω–∞
                        </button>
                        <button type="button" class="btn btn-primary" onclick="event.stopPropagation(); window.modalManager?.saveOfferEdit?.('${offer.id}');">
                            üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
                        </button>
                    </div>
                </form>
            </div>
        `;

        const modal = this.create('edit-offer-modal', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞', content, { size: 'medium' });
        console.log('‚úèÔ∏è –°–æ–∑–¥–∞–Ω–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ñ—Ñ–µ—Ä–∞:', offer.id);
        return modal;
    }

    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–µ—Ç–∞–ª–µ–π –æ—Ñ—Ñ–µ—Ä–∞
    createOfferDetails(offer) {
        const content = `
            <div class="offer-details">
                <div class="offer-meta">
                    <div class="meta-item">
                        <span class="meta-label">–°—Ç–∞—Ç—É—Å:</span>
                        <span class="status-badge ${offer.status}">${this.getStatusText(offer.status)}</span>
                    </div>
                    <div class="meta-item">
                        <span class="meta-label">–¶–µ–Ω–∞:</span>
                        <span class="meta-value">‚ÇΩ ${this.formatPrice(offer.price)}</span>
                    </div>
                    <div class="meta-item">
                        <span class="meta-label">–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</span>
                        <span class="meta-value">${offer.category || '–û–±—â–µ–µ'}</span>
                    </div>
                    <div class="meta-item">
                        <span class="meta-label">–°–æ–∑–¥–∞–Ω:</span>
                        <span class="meta-value">${this.formatDate(offer.created_at)}</span>
                    </div>
                </div>
                
                <div class="offer-description">
                    <h4>–û–ø–∏—Å–∞–Ω–∏–µ</h4>
                    <p>${offer.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</p>
                </div>
                
                <div class="offer-actions">
                    <button class="btn btn-primary" onclick="window.modalManager.editOffer('${offer.id}')">
                        ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                    <button class="btn btn-secondary" onclick="window.modalManager.showOfferStats('${offer.id}')">
                        üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                    </button>
                </div>
            </div>
        `;

        return this.create('offer-details-modal', `üìù ${offer.title || '–î–µ—Ç–∞–ª–∏ –æ—Ñ—Ñ–µ—Ä–∞'}`, content);
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    showNotification(message, type = 'info', duration = 5000) {
        // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        let container = document.getElementById('notifications-container');
        if (!container) {
            container = document.createElement('div');
            container.id = 'notifications-container';
            container.className = 'notifications-container';
            document.body.appendChild(container);
        }
        
        // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.innerHTML = `
            <div class="notification-content">
                <div class="notification-message">${message}</div>
                <button class="notification-close">&times;</button>
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        container.appendChild(notification);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        setTimeout(() => notification.classList.add('show'), 10);
        
        // –§—É–Ω–∫—Ü–∏—è —Å–∫—Ä—ã—Ç–∏—è
        const hideNotification = () => {
            notification.classList.remove('show');
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.remove();
                }
                // –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –µ—Å–ª–∏ –æ–Ω –ø—É—Å—Ç–æ–π
                if (container.children.length === 0) {
                    container.remove();
                }
            }, 300);
        };
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
        setTimeout(hideNotification, duration);
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É
        notification.querySelector('.notification-close').onclick = hideNotification;
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        const notifications = container.querySelectorAll('.notification');
        if (notifications.length > 3) {
            const oldest = notifications[0];
            oldest.classList.remove('show');
            setTimeout(() => {
                if (oldest.parentNode) {
                    oldest.remove();
                }
            }, 300);
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    createChannelCard(channel) {
        const username = channel.username || channel.channel_username || '';
        const displayUsername = username.startsWith('@') ? username : (username ? `@${username}` : '');
        const price = channel.price_per_post || channel.price || 0;
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã –∑–∞ 24—á –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const price24h = channel.price_per_24h || channel.price_24h || price || 0;
        const subscribers = channel.subscriber_count || 0;
        const engagement = channel.engagement_rate || this.calculateEngagement(subscribers);
        const views = channel.avg_views || Math.round(subscribers * 0.3);
        const ads7days = channel.ads_count_7d || 0;
        const description = channel.description || channel.channel_description || '';
        const truncatedDesc = description.length > 60 ? description.substring(0, 60) + '...' : description;
        
        return `
            <div class="channel-card-compact" data-channel-id="${channel.id}">
                <div class="channel-header">
                    <div class="channel-number">${this.currentChannelNumber || 1}.</div>
                    <div class="channel-info">
                        <h4 class="channel-title">${channel.title || channel.channel_name || '–ö–∞–Ω–∞–ª'}</h4>
                        <p class="channel-description">${truncatedDesc}</p>
                        ${displayUsername ? `<span class="channel-username">${displayUsername}</span>` : ''}
                    </div>
                </div>

                <div class="channel-stats">
                    <div class="stats-grid">
                        <!-- –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ + –í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å -->
                        <div class="stat-item">
                            <span class="stat-label">–ü–æ–¥–ø–∏—Å—á–∏–∫–∏</span>
                            <span class="stat-value">üë• ${this.formatNumber(subscribers)}</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-label">–í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å (ER)</span>
                            <span class="stat-value">üìä ${engagement}%</span>
                        </div>
                        <!-- –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞: –ü—Ä–æ—Å–º–æ—Ç—Ä—ã + –†–µ–∫–ª–∞–º–∞ -->
                        <div class="stat-item">
                            <span class="stat-label">–ü—Ä–æ—Å–º–æ—Ç—Ä—ã</span>
                            <span class="stat-value">üëÅ ${this.formatNumber(views)}</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-label">–†–µ–∫–ª–∞–º–∞ –∑–∞ 7 –¥–Ω–µ–π</span>
                            <span class="stat-value">üì¢ ${ads7days}</span>
                        </div>
                    </div>
                </div>

                <div class="channel-pricing">
                    <div class="price-item">
                        <span class="price-label">–¶–µ–Ω–∞ –∑–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä:</span>
                        <span class="price-value">${price > 0 && views > 0 ? (price / views * 1000).toFixed(2) : '0.50'}–†</span>
                    </div>
                    <div class="price-item">
                        <span class="price-label">–¶–µ–Ω–∞ –∑–∞ 24—á:</span>
                        <span class="price-value">${price24h > 0 ? this.formatPrice(price24h) : this.formatPrice(price)}–†</span>
                    </div>
                </div>

                <div class="channel-actions">
                    <button type="button" class="btn-details" onclick="window.modalManager.showChannelDetails('${channel.id}')">
                        –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                    </button>
                    <button type="button" class="btn-add" onclick="window.modalManager.toggleChannelSelection(this, '${channel.id}')">
                        –î–æ–±–∞–≤–∏—Ç—å
                    </button>
                </div>

                <!-- –°–∫—Ä—ã—Ç–∞—è –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è -->
                <div class="channel-details" id="details-${channel.id}" style="display: none;">
                    <div class="demographics">
                        <h5>–ì–µ–Ω–¥–µ—Ä</h5>
                        <div class="gender-stats">
                            <span>–ú:${channel.male_percent || '65'}%</span>
                            <span>–ñ:${channel.female_percent || '35'}%</span>
                        </div>
                    </div>
                    <div class="age-groups">
                        <h5>–í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã</h5>
                        <div class="age-stats">
                            <span>18-24: ${channel.age_18_24 || '5'}%</span>
                            <span>25-30: ${channel.age_25_30 || '20'}%</span>
                            <span>35-30: ${channel.age_35_44 || '25'}%</span>
                            <span>45-25: ${channel.age_45_54 || '25'}%</span>
                            <span>55-15: ${channel.age_55_64 || '15'}%</span>
                            <span>65-5: ${channel.age_65_plus || '5'}%</span>
                        </div>
                    </div>
                    <div class="income-level">
                        <h5>–£—Ä–æ–≤–µ–Ω—å –¥–æ—Ö–æ–¥–∞</h5>
                        <div class="income-stats">
                            <span>‚Üì50%</span>
                            <span>‚Üë30%</span>
                            <span>‚Üë20%</span>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
    showChannelDetails(channelId) {
        const detailsElement = document.getElementById(`details-${channelId}`);
        const button = document.querySelector(`[onclick="window.modalManager.showChannelDetails('${channelId}')"]`);
        
        if (detailsElement && button) {
            if (detailsElement.style.display === 'none' || detailsElement.style.display === '') {
                detailsElement.style.display = 'block';
                button.textContent = '–°–∫—Ä—ã—Ç—å';
                button.classList.add('active');
            } else {
                detailsElement.style.display = 'none';
                button.textContent = '–ü–æ–¥—Ä–æ–±–Ω–µ–µ';
                button.classList.remove('active');
            }
        }
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞ (—Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –∫–Ω–æ–ø–∫–æ–π "–î–æ–±–∞–≤–∏—Ç—å")
    toggleChannelSelection(button, channelId) {
        const channelCard = button.closest('.channel-card-compact');
        
        if (channelCard.classList.contains('selected')) {
            // –£–±–∏—Ä–∞–µ–º –≤—ã–±–æ—Ä
            channelCard.classList.remove('selected');
            button.textContent = '–î–æ–±–∞–≤–∏—Ç—å';
            button.classList.remove('selected');
        } else {
            // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä
            channelCard.classList.add('selected');
            button.textContent = '‚úì –î–æ–±–∞–≤–ª–µ–Ω';
            button.classList.add('selected');
        }
        
        this.updateSelectedCount();
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    calculateEngagement(subscribers) {
        // –ü—Ä–æ—Å—Ç–∞—è —Ñ–æ—Ä–º—É–ª–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ ER –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        if (subscribers < 1000) return '45';
        if (subscribers < 10000) return '32';
        if (subscribers < 100000) return '25';
        return '16';
    }

    updateSelectedCount() {
        const selected = document.querySelectorAll('.channel-card-compact.selected').length;
        const counter = document.getElementById('selected-count');
        if (counter) counter.textContent = selected;
    }

    sortChannels(sortBy) {
        // –õ–æ–≥–∏–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∫–∞–Ω–∞–ª–æ–≤
        console.log('–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ:', sortBy);
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    async confirmChannelSelection(offerId, isDraft) {
        const selectedChannels = Array.from(document.querySelectorAll('.channel-card-compact.selected'))
            .map(card => card.dataset.channelId);
        
        if (selectedChannels.length === 0) {
            this.showNotification('–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–∞–Ω–∞–ª', 'warning');
            return;
        }

        try {
            console.log(`üì§ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞ ${offerId} —Å ${selectedChannels.length} –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏`);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º API –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞
            const response = await fetch(`/api/offers_moderation/complete/${offerId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Telegram-User-Id': window.getTelegramUserId?.() || '373086959'
                },
                body: JSON.stringify({
                    channels: selectedChannels
                })
            });

            const result = await response.json();
            
            if (result.success) {
                this.showNotification(
                    `‚úÖ –û—Ñ—Ñ–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é —Å ${result.channels_count} –∫–∞–Ω–∞–ª–∞–º–∏!`, 
                    'success'
                );
                this.close('channel-selection-modal');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ñ—Ñ–µ—Ä–æ–≤ –µ—Å–ª–∏ –µ—Å—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä
                if (window.offersManager && window.offersManager.loadMyOffers) {
                    setTimeout(() => {
                        window.offersManager.loadMyOffers();
                    }, 1000);
                }
            } else {
                throw new Error(result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: ' + error.message, 'error');
        }
    }

    async submitAcceptProposal(proposalId) {
        const comment = document.getElementById('accept-comment').value;
        const deadline = document.getElementById('accept-deadline').value;

        try {
            console.log('‚úÖ –ü—Ä–∏–Ω—è—Ç–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:', proposalId);
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            const data = {
                message: comment || '',
                scheduled_date: deadline ? `${deadline}T12:00:00` : null
            };

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ API
            const response = await fetch(`/api/proposals/${proposalId}/accept`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Telegram-User-Id': window.getTelegramUserId?.() || '373086959'
                },
                body: JSON.stringify(data)
            });

            const result = await response.json();

            if (response.ok && result.success) {
                this.showNotification('‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!', 'success');
                this.close('accept-proposal-modal');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ñ—Ñ–µ—Ä–æ–≤
                if (window.offersManager?.loadAvailableOffers) {
                    setTimeout(() => window.offersManager.loadAvailableOffers(), 500);
                }
            } else {
                throw new Error(result.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:', error);
            this.showNotification('–û—à–∏–±–∫–∞: ' + error.message, 'error');
        }
    }

    async submitRejectProposal(proposalId) {
        const reason = document.getElementById('reject-reason').value;
        const comment = document.getElementById('reject-comment').value;

        if (!reason) {
            this.showNotification('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è', 'warning');
            return;
        }

        try {
            console.log('‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:', proposalId);
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            const data = {
                reason: comment || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                reason_category: reason,
                custom_reason: comment || ''
            };

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ API
            const response = await fetch(`/api/proposals/${proposalId}/reject`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Telegram-User-Id': window.getTelegramUserId?.() || '373086959'
                },
                body: JSON.stringify(data)
            });

            const result = await response.json();

            if (response.ok && result.success) {
                this.showNotification('‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ', 'success');
                this.close('reject-proposal-modal');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ñ—Ñ–µ—Ä–æ–≤
                if (window.offersManager?.loadAvailableOffers) {
                    setTimeout(() => window.offersManager.loadAvailableOffers(), 500);
                }
            } else {
                throw new Error(result.message || '–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:', error);
            this.showNotification('–û—à–∏–±–∫–∞: ' + error.message, 'error');
        }
    }

    async confirmDelete(offerId) {
        console.log('üóëÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞:', offerId);
        
        try {
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            this.close('delete-confirmation-modal');
            
            // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ OffersManager
            if (window.offersManager) {
                console.log('‚úÖ –í—ã–∑—ã–≤–∞–µ–º confirmDeleteOffer –¥–ª—è –æ—Ñ—Ñ–µ—Ä–∞:', offerId);
                await window.offersManager.confirmDeleteOffer(offerId);
            } else {
                console.error('‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Ñ—Ñ–µ—Ä–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
                this.showNotification('–û—à–∏–±–∫–∞: –º–µ–Ω–µ–¥–∂–µ—Ä –æ—Ñ—Ñ–µ—Ä–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', 'error');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error);
            this.showNotification('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ' + error.message, 'error');
        }
    }

    async saveOfferEdit(offerId) {
        console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –æ—Ñ—Ñ–µ—Ä–∞:', offerId);
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã
            const budget = document.getElementById('edit-budget').value.trim();
            const description = document.getElementById('edit-description').value.trim();
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è
            if (!description) {
                this.showNotification('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è', 'warning');
                return;
            }
            
            if (!budget || parseFloat(budget) < 100) {
                this.showNotification('–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –±—é–¥–∂–µ—Ç (–æ—Ç 100 —Ä—É–±.)', 'warning');
                return;
            }
            
            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –Ω–µ–∏–∑–º–µ–Ω–Ω—ã–º–∏)
            const formData = {
                budget_total: parseFloat(budget),
                description: description
            };
            
            console.log('üìã –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ:', formData);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞
            const response = await fetch(`/api/offers_moderation/${offerId}/update`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Telegram-User-Id': window.getTelegramUserId?.() || '373086959'
                },
                body: JSON.stringify(formData)
            });
            
            const result = await response.json();
            
            if (result.success) {
                this.showNotification('‚úÖ –û—Ñ—Ñ–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!', 'success');
                this.close('edit-offer-modal');
                
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –æ—Ñ—Ñ–µ—Ä–æ–≤ –∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
                if (window.offersManager) {
                    console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
                    
                    // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –±–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏
                    if (window.offersManager.loadMyOffers) {
                        window.offersManager.loadMyOffers();
                    }
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–∫–∂–µ —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
                    if (window.offersManager.loadModerationOffers) {
                        window.offersManager.loadModerationOffers();
                    }
                    
                    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É –Ω–∞ —Å–ª—É—á–∞–π –∑–∞–¥–µ—Ä–∂–µ–∫ —Å–µ—Ä–≤–µ—Ä–∞
                    setTimeout(() => {
                        console.log('üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ (—á–µ—Ä–µ–∑ 1 —Å–µ–∫)');
                        if (window.offersManager.loadMyOffers) {
                            window.offersManager.loadMyOffers();
                        }
                        if (window.offersManager.loadModerationOffers) {
                            window.offersManager.loadModerationOffers();
                        }
                    }, 1000);
                }
            } else {
                throw new Error(result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π:', error);
            this.showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ' + error.message, 'error');
        }
    }

    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    setupGlobalHandlers() {
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–ª–∏–∫ –∏–º–µ–Ω–Ω–æ –ø–æ overlay, –∞ –Ω–µ –ø–æ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É)
        document.addEventListener('click', (event) => {
            if (event.target.classList.contains('modal-overlay') && event.target === event.currentTarget) {
                const modalId = event.target.id;
                if (modalId) this.close(modalId);
            }
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ Escape
        document.addEventListener('keydown', (event) => {
            if (event.key === 'Escape') {
                this.closeAll();
            }
        });
    }

    // –£—Ç–∏–ª–∏—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    formatPrice(price) {
        const numericPrice = typeof price === 'string'
            ? parseFloat(price.replace(/[^0-9.,]/g, '').replace(',', '.')) || 0
            : (price || 0);
        return numericPrice === 0 ? '0' : numericPrice.toLocaleString('ru-RU');
    }

    formatNumber(num) {
        return num ? new Intl.NumberFormat('ru-RU').format(num) : '0';
    }

    formatDate(dateString) {
        if (!dateString) return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
        try {
            const date = new Date(dateString);
            return date.toLocaleDateString('ru-RU', {
                year: 'numeric', month: 'short', day: 'numeric',
                hour: '2-digit', minute: '2-digit'
            });
        } catch (error) {
            return '–û—à–∏–±–∫–∞ –¥–∞—Ç—ã';
        }
    }

    getStatusText(status) {
        const statusTexts = {
            active: '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω',
            draft: 'üìù –ß–µ—Ä–Ω–æ–≤–∏–∫', 
            completed: '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω',
            paused: '‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
        };
        return statusTexts[status] || statusTexts.active;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
export default ModalManager;