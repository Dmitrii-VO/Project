/**
 * offers-manager.js
 * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞–º–∏
 */

import { OffersAPI } from './offers-api.js';
import { OffersTemplates } from './offers-templates.js';
import { ModalManager } from './offers-modals.js';

export class OffersManager {
    constructor() {
        this.api = new OffersAPI();
        this.templates = OffersTemplates;
        this.modals = new ModalManager();
        this.currentTab = 'my-offers';
        this.filters = {};
        this.isInitialized = false;
    }

    async init() {
        if (this.isInitialized) {
            console.log('‚ö†Ô∏è OffersManager —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return;
        }

        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OffersManager');
        
        try {
            this.setupEventListeners();
            this.setupTabSwitching();
            await this.loadInitialData();
            this.isInitialized = true;
            console.log('‚úÖ OffersManager —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OffersManager:', error);
            this.modals.showNotification('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏', 'error');
        }
    }

    setupEventListeners() {
        // –ü–æ–∏—Å–∫ –æ—Ñ—Ñ–µ—Ä–æ–≤
        const searchInput = document.getElementById('offersSearch');
        if (searchInput) {
            searchInput.addEventListener('input', this.debounce(() => {
                this.searchOffers(searchInput.value);
            }, 300));
        }

        // –§–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
        const filterElements = ['findCategoryFilter', 'findBudgetMin', 'findBudgetMax', 'findMinSubscribers'];
        filterElements.forEach(id => {
            const element = document.getElementById(id);
            if (element) {
                element.addEventListener('change', () => this.updateFilters());
            }
        });

        // –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞
        const createOfferForm = document.getElementById('autoOfferForm');
        if (createOfferForm) {
            createOfferForm.addEventListener('submit', (e) => this.handleCreateOffer(e));
        }

        // –§–æ—Ä–º–∞ –∫–∞–º–ø–∞–Ω–∏–∏
        const campaignForm = document.getElementById('campaignForm');
        if (campaignForm) {
            campaignForm.addEventListener('submit', (e) => this.handleCreateCampaign(e));
        }
    }

    setupTabSwitching() {
        document.querySelectorAll('.tabs-nav a').forEach(tab => {
            tab.addEventListener('click', (e) => {
                e.preventDefault();
                const tabName = tab.getAttribute('data-tab');
                this.switchTab(tabName);
            });
        });
    }

    async switchTab(tabName) {
        console.log(`üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É: ${tabName}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        document.querySelectorAll('.tabs-nav a').forEach(tab => tab.classList.remove('active'));
        document.querySelectorAll('.tabs-content').forEach(content => content.classList.remove('active'));
        
        const activeTab = document.querySelector(`[data-tab="${tabName}"]`);
        const activeContent = document.getElementById(tabName);
        
        if (activeTab) activeTab.classList.add('active');
        if (activeContent) activeContent.classList.add('active');
        
        this.currentTab = tabName;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
        await this.loadTabData(tabName);
    }

    async loadTabData(tabName) {
        switch (tabName) {
            case 'my-offers':
                await this.loadMyOffers();
                break;
            case 'find-offer':
                await this.loadAvailableOffers();
                break;
            case 'create-offer':
                this.setupCreateOfferForm();
                break;
            case 'campaigns':
                this.setupCampaignForm();
                break;
        }
    }

    async loadInitialData() {
        await this.loadMyOffers();
    }

    async loadMyOffers() {
        const container = document.getElementById('offersGrid');
        if (!container) return;

        try {
            this.showLoading(container, '–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∞—à–∏—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤...');
            
            // –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            try {
                const result = await this.api.getMyOffers();
                
                if (result.success && result.offers?.length > 0) {
                    this.renderOffers(result.offers, container);
                    this.hideEmptyState();
                    return;
                }
            } catch (apiError) {
                console.log('üì° API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', apiError.message);
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            const testOffers = this.generateTestOffers();
            if (testOffers.length > 0) {
                this.renderOffers(testOffers, container);
                this.hideEmptyState();
            } else {
                this.showEmptyState();
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ñ—Ñ–µ—Ä–æ–≤:', error);
            this.showEmptyState();
        }
    }

    async loadAvailableOffers() {
        const container = document.getElementById('findOffersGrid');
        if (!container) return;

        try {
            this.showLoading(container, '–ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤...');
            
            // –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            try {
                const result = await this.api.getOffers(this.filters);
                
                if (result.success && result.offers?.length > 0) {
                    this.renderOffers(result.offers, container);
                    return;
                }
            } catch (apiError) {
                console.log('üì° API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', apiError.message);
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            const testOffers = this.generateAvailableTestOffers();
            if (testOffers.length > 0) {
                this.renderOffers(testOffers, container);
            } else {
                this.showEmpty(container, '–û—Ñ—Ñ–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –æ—Ñ—Ñ–µ—Ä–æ–≤:', error);
            this.showEmpty(container, '–û—Ñ—Ñ–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞');
        }
    }

    renderOffers(offers, container) {
        const offersHtml = offers.map(offer => this.templates.offerCard(offer)).join('');
        container.innerHTML = `<div class="offers-list">${offersHtml}</div>`;
    }

    async handleCreateOffer(event) {
        event.preventDefault();
        
        const submitBtn = event.target.querySelector('button[type="submit"]');
        const originalText = submitBtn.textContent;
        
        try {
            submitBtn.disabled = true;
            submitBtn.textContent = '‚è≥ –°–æ–∑–¥–∞–µ–º –æ—Ñ—Ñ–µ—Ä...';
            
            const formData = new FormData(event.target);
            const offerData = {
                title: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–±–æ—Ä –∫–∞–Ω–∞–ª–æ–≤',
                description: formData.get('description'),
                budget: parseInt(formData.get('budget')),
                price: Math.min(parseInt(formData.get('budget')) * 0.1, 50000),
                budget_total: parseInt(formData.get('budget')),
                target_audience: 'general',
                category: 'general',
                currency: 'RUB',
                content: formData.get('description')
            };
            
            console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞:', offerData);
            
            const result = await this.api.createOffer(offerData);
            
            if (result.success) {
                console.log('‚úÖ –û—Ñ—Ñ–µ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:', result.offer);
                this.modals.showNotification('–û—Ñ—Ñ–µ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!', 'success');
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤
                await this.showChannelSelection(result.offer.id, result.offer.title);
                
                event.target.reset();
                this.switchTab('my-offers');
            } else {
                throw new Error(result.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞:', error);
            this.modals.showNotification(`–û—à–∏–±–∫–∞: ${error.message}`, 'error');
        } finally {
            submitBtn.disabled = false;
            submitBtn.textContent = originalText;
        }
    }

    async handleCreateCampaign(event) {
        event.preventDefault();
        
        const submitBtn = event.target.querySelector('button[type="submit"]');
        const originalText = submitBtn.textContent;
        
        try {
            submitBtn.disabled = true;
            submitBtn.textContent = '‚è≥ –°–æ–∑–¥–∞–µ–º –∫–∞–º–ø–∞–Ω–∏—é...';
            
            const formData = new FormData(event.target);
            const campaignData = {
                name: formData.get('name'),
                budget_limit: parseFloat(formData.get('budget_limit')),
                add_utm_tags: formData.has('add_utm_tags'),
                track_clicks: formData.has('track_clicks'),
                start_date: formData.get('start_date'),
                end_date: formData.get('end_date'),
                work_weekends: formData.has('work_weekends'),
                work_hours_only: formData.has('work_hours_only'),
                advertiser_type: formData.get('advertiser_type'),
                product_name: formData.get('product_name'),
                advertiser_inn: formData.get('advertiser_inn'),
                ad_content: formData.get('ad_content'),
                status: 'active'
            };
            
            console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏:', campaignData);
            
            // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å API –≤—ã–∑–æ–≤ –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–π
            // const result = await this.api.createCampaign(campaignData);
            
            this.modals.showNotification('–ö–∞–º–ø–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!', 'success');
            event.target.reset();
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏:', error);
            this.modals.showNotification(`–û—à–∏–±–∫–∞: ${error.message}`, 'error');
        } finally {
            submitBtn.disabled = false;
            submitBtn.textContent = originalText;
        }
    }

    async showChannelSelection(offerId, offerTitle) {
        try {
            const channelsResult = await this.api.getRecommendedChannels({ offer_id: offerId });
            
            if (channelsResult.success && channelsResult.channels) {
                this.modals.createChannelSelection(offerId, offerTitle, channelsResult.channels);
            } else {
                this.modals.showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–Ω–∞–ª—ã', 'error');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–∞–ª–æ–≤:', error);
            this.modals.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–∞–ª–æ–≤: ' + error.message, 'error');
        }
    }

    setupCreateOfferForm() {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞
        const today = new Date().toISOString().split('T')[0];
        const budgetInput = document.getElementById('offerBudget');
        if (budgetInput && !budgetInput.value) {
            budgetInput.value = '20000';
        }
    }

    setupCampaignForm() {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º—ã –∫–∞–º–ø–∞–Ω–∏–∏
        const today = new Date().toISOString().split('T')[0];
        const startDateInput = document.getElementById('campaignStartDate');
        const endDateInput = document.getElementById('campaignEndDate');
        
        if (startDateInput) startDateInput.min = today;
        if (endDateInput) endDateInput.min = today;
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç
        if (startDateInput) {
            startDateInput.addEventListener('change', () => {
                if (endDateInput) {
                    endDateInput.min = startDateInput.value;
                    if (endDateInput.value && endDateInput.value < startDateInput.value) {
                        endDateInput.value = startDateInput.value;
                    }
                }
            });
        }
    }

    searchOffers(query) {
        this.filters.search = query;
        if (this.currentTab === 'find-offer') {
            this.loadAvailableOffers();
        }
    }

    updateFilters() {
        this.filters = {
            category: document.getElementById('findCategoryFilter')?.value || '',
            budget_min: document.getElementById('findBudgetMin')?.value || '',
            budget_max: document.getElementById('findBudgetMax')?.value || '',
            min_subscribers: document.getElementById('findMinSubscribers')?.value || ''
        };
        
        if (this.currentTab === 'find-offer') {
            this.loadAvailableOffers();
        }
    }

    clearFilters() {
        this.filters = {};
        document.getElementById('findCategoryFilter').value = '';
        document.getElementById('findBudgetMin').value = '';
        document.getElementById('findBudgetMax').value = '';
        document.getElementById('findMinSubscribers').value = '';
        
        if (this.currentTab === 'find-offer') {
            this.loadAvailableOffers();
        }
    }

    // UI —Å–æ—Å—Ç–æ—è–Ω–∏—è
    showLoading(container, message = '–ó–∞–≥—Ä—É–∑–∫–∞...') {
        container.innerHTML = this.templates.loadingState(message);
    }

    showError(container, message) {
        container.innerHTML = this.templates.errorState(message, () => this.loadTabData(this.currentTab));
    }

    showEmpty(container, title, description, action = null) {
        container.innerHTML = this.templates.emptyState(title, description, action);
    }

    showEmptyState() {
        const emptyState = document.getElementById('emptyOffersState');
        if (emptyState) emptyState.style.display = 'block';
    }

    hideEmptyState() {
        const emptyState = document.getElementById('emptyOffersState');
        if (emptyState) emptyState.style.display = 'none';
    }

    // –£—Ç–∏–ª–∏—Ç—ã
    debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è "–ú–æ–∏ –æ—Ñ—Ñ–µ—Ä—ã"
    generateTestOffers() {
        return [
            {
                id: 1,
                title: '–†–µ–∫–ª–∞–º–∞ –∫—É—Ä—Å–æ–≤ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é',
                description: '–ò—â–µ–º –∫–∞–Ω–∞–ª—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å–æ–≤ –ø–æ Python, JavaScript –∏ React. –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è - –Ω–∞—á–∏–Ω–∞—é—â–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏.',
                price: 15000,
                budget_total: 50000,
                category: 'education',
                status: 'active',
                created_at: new Date().toISOString()
            },
            {
                id: 2,
                title: '–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
                description: '–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã –Ω–æ–≤–æ–≥–æ —Ñ–∏—Ç–Ω–µ—Å-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ò—â–µ–º –∫–∞–Ω–∞–ª—ã –æ –∑–¥–æ—Ä–æ–≤—å–µ, —Å–ø–æ—Ä—Ç–µ –∏ –ó–û–ñ.',
                price: 25000,
                budget_total: 80000,
                category: 'lifestyle',
                status: 'draft',
                created_at: new Date().toISOString()
            },
            {
                id: 3,
                title: '–†–µ–∫–ª–∞–º–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —É—Å–ª—É–≥',
                description: '–†–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö —É—Å–ª—É–≥.',
                price: 30000,
                budget_total: 100000,
                category: 'finance',
                status: 'completed',
                created_at: new Date().toISOString()
            }
        ];
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è "–ù–∞–π—Ç–∏ –æ—Ñ—Ñ–µ—Ä"
    generateAvailableTestOffers() {
        return [
            {
                id: 101,
                title: '–†–µ–∫–ª–∞–º–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞–ø–∞',
                description: '–ò—â–µ–º –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –Ω–æ–≤–æ–π SaaS –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏. –ë—é–¥–∂–µ—Ç –¥–æ 200–∫ —Ä—É–±–ª–µ–π.',
                price: 20000,
                budget_total: 200000,
                category: 'tech',
                status: 'active',
                created_at: new Date().toISOString()
            },
            {
                id: 102,
                title: '–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
                description: '–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã –æ–Ω–ª–∞–π–Ω-—à–∫–æ–ª—ã –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞. –ò—â–µ–º –∫–∞–Ω–∞–ª—ã –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –∏ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–∏.',
                price: 12000,
                budget_total: 150000,
                category: 'education',
                status: 'active',
                created_at: new Date().toISOString()
            },
            {
                id: 103,
                title: '–†–µ–∫–ª–∞–º–∞ e-commerce –ø—Ä–æ–µ–∫—Ç–∞',
                description: '–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –¥–æ–º–∞. –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è - –¥–æ–º–æ—Ö–æ–∑—è–π–∫–∏ –∏ —Å–µ–º—å–∏.',
                price: 18000,
                budget_total: 120000,
                category: 'business',
                status: 'active',
                created_at: new Date().toISOString()
            },
            {
                id: 104,
                title: '–†–µ–∫–ª–∞–º–∞ —Ñ–∏–Ω—Ç–µ—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
                description: '–†–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π. –ò—â–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã.',
                price: 35000,
                budget_total: 300000,
                category: 'finance',
                status: 'active',
                created_at: new Date().toISOString()
            },
            {
                id: 105,
                title: '–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
                description: '–†–µ–∫–ª–∞–º–∞ –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤.',
                price: 22000,
                budget_total: 180000,
                category: 'entertainment',
                status: 'active',
                created_at: new Date().toISOString()
            }
        ];
    }

    // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    showOfferDetails(offerId) {
        // –õ–æ–≥–∏–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π –æ—Ñ—Ñ–µ—Ä–∞
        console.log('–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π –æ—Ñ—Ñ–µ—Ä–∞:', offerId);
        this.modals.showNotification(`–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –æ—Ñ—Ñ–µ—Ä–∞ ${offerId}`, 'info');
    }

    editOffer(offerId) {
        // –õ–æ–≥–∏–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞
        console.log('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞:', offerId);
        this.modals.showNotification(`–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞ ${offerId}`, 'info');
    }

    showOfferStats(offerId) {
        // –õ–æ–≥–∏–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ñ—Ñ–µ—Ä–∞
        console.log('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ñ—Ñ–µ—Ä–∞:', offerId);
        this.modals.showNotification(`–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ñ—Ñ–µ—Ä–∞ ${offerId}`, 'info');
    }

    deleteOffer(offerId) {
        // –õ–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞
        console.log('–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞:', offerId);
        this.modals.createDeleteConfirmation(offerId);
    }

    async confirmDeleteOffer(offerId) {
        try {
            // –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —á–µ—Ä–µ–∑ API
            const result = await this.api.deleteOffer(offerId);
            
            if (result && result.success) {
                this.modals.showNotification('–û—Ñ—Ñ–µ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!', 'success');
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ñ—Ñ–µ—Ä–æ–≤
                await this.loadMyOffers();
                return;
            } else {
                throw new Error(result?.error || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞');
            }
        } catch (error) {
            console.log('üì° API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —É–¥–∞–ª—è–µ–º –∏–∑ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error.message);
            
            // –£–¥–∞–ª—è–µ–º –∏–∑ DOM
            const offerCard = document.querySelector(`[data-offer-id="${offerId}"]`);
            if (offerCard) {
                offerCard.style.transition = 'all 0.3s ease';
                offerCard.style.opacity = '0';
                offerCard.style.transform = 'scale(0.8)';
                
                setTimeout(() => {
                    offerCard.remove();
                    this.modals.showNotification('–û—Ñ—Ñ–µ—Ä —É–¥–∞–ª–µ–Ω!', 'success');
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –æ—Ñ—Ñ–µ—Ä—ã
                    const remainingOffers = document.querySelectorAll('.offer-card').length;
                    if (remainingOffers === 0) {
                        this.showEmptyState();
                    }
                }, 300);
            }
        }
    }
}