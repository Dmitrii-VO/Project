// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ API:
function getTelegramUser() {
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram WebApp
            if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.initDataUnsafe) {
                const user = window.Telegram.WebApp.initDataUnsafe.user;
                if (user) {
                    return user;
                }
            }

            // Fallback: —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
                return {
                    id: 373086959, // YOUR_TELEGRAM_ID –∏–∑ .env
                    username: 'test_user',
                    first_name: 'Test',
                    last_name: 'User'
                };
            }

            return null;
        }
async function loadUserChannels() {
    // ‚úÖ –ó–ê–©–ò–¢–ê –û–¢ –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–• –í–´–ó–û–í–û–í
    if (window.channelsLoading) {
        console.log('‚ö†Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...');
        return;
    }
    window.channelsLoading = true;

    try {
        console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        showLoadingState();

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const telegramUser = getTelegramUser();
        console.log('üë§ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', telegramUser);

        const headers = {
            'Content-Type': 'application/json'
        };

        // –î–æ–±–∞–≤–ª—è–µ–º Telegram –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
        if (telegramUser) {
            headers['X-Telegram-User-Id'] = telegramUser.id.toString();
            console.log('üîë –î–æ–±–∞–≤–ª–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ X-Telegram-User-Id:', telegramUser.id);

            if (telegramUser.username) {
                headers['X-Telegram-Username'] = telegramUser.username;
            }

            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö–æ–¥–∏—Ä—É–µ–º –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –≤ Base64
            if (telegramUser.first_name) {
                try {
                    headers['X-Telegram-First-Name'] = btoa(unescape(encodeURIComponent(telegramUser.first_name)));
                } catch (e) {
                    console.warn('–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è first_name:', e);
                }
            }

            if (telegramUser.last_name) {
                try {
                    headers['X-Telegram-Last-Name'] = btoa(unescape(encodeURIComponent(telegramUser.last_name)));
                } catch (e) {
                    console.warn('–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è last_name:', e);
                }
            }
        } else {
            console.error('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
            headers['X-Telegram-User-Id'] = '373086959';
        }

        // ‚úÖ –ó–∞–ø—Ä–æ—Å –∫ API
        const response = await fetch('/api/channels/my', {
            method: 'GET',
            headers: headers
        });

        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`HTTP error! status: ${response.status} - ${errorText}`);
        }

        const data = await response.json();

        // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        hideLoadingState();

        const channelsGrid = document.getElementById('channelsGrid');
        if (!channelsGrid) {
            console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç channelsGrid –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            return;
        }

        // ‚úÖ –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö
        const existingCards = channelsGrid.querySelectorAll('.stat-card[data-user-channel="true"], .channel-card[data-user-channel="true"]');
        existingCards.forEach(card => card.remove());

        // –°–∫—Ä—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –æ—à–∏–±–æ–∫
        const errorElement = document.getElementById('channelsError');
        if (errorElement) {
            errorElement.style.display = 'none';
        }

        // ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        if (data.success && data.channels && data.channels.length > 0) {
            console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${data.channels.length} –∫–∞–Ω–∞–ª–æ–≤ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞`);

            // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –ø—É—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            const emptyState = document.getElementById('emptyState');
            const loadingElement = document.getElementById('channelsLoading');

            if (emptyState) emptyState.style.display = 'none';
            if (loadingElement) loadingElement.style.display = 'none';

            // ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú –∫–∞–Ω–∞–ª—ã –ë–ï–ó –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø
            let addedCount = 0;
            data.channels.forEach((channel, index) => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–∞—Ä—Ç–æ—á–∫–∞ —Å —Ç–∞–∫–∏–º ID
                const existingCard = channelsGrid.querySelector(`[data-channel-id="${channel.id}"]`);
                if (!existingCard) {
                    const channelCard = createChannelCard(channel);
                    channelsGrid.appendChild(channelCard);
                    addedCount++;
                    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫–∞–Ω–∞–ª: ${channel.title || channel.username}`);
                } else {
                    console.log(`‚ö†Ô∏è –ö–∞–Ω–∞–ª ${channel.title || channel.username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                }
            });

            console.log(`üì∫ –ò—Ç–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: ${addedCount} –∏–∑ ${data.channels.length}`);

            // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–∞–Ω–∞–ª–æ–≤ –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if (typeof updateChannelsCounter === 'function') {
                updateChannelsCounter(data.channels.length);
            }

        } else {
            // ‚úÖ –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            console.log('‚ÑπÔ∏è –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
            showEmptyState();
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–∞–ª–æ–≤:', error);
        hideLoadingState();
        showErrorState(error.message);
    } finally {
        // ‚úÖ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        window.channelsLoading = false;
    }
}

// ‚úÖ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç)

function formatNumber(number) {
    if (!number || number === 0) return '0';

    if (number >= 1000000) {
        return (number / 1000000).toFixed(1) + 'M';
    } else if (number >= 1000) {
        return (number / 1000).toFixed(1) + 'K';
    }
    return number.toString();
}

function formatPrice(price) {
    if (!price) return '0';
    return new Intl.NumberFormat('ru-RU').format(price);
}

function formatDate(dateString) {
    if (!dateString) return '–ù–µ–¥–∞–≤–Ω–æ';

    try {
        const date = new Date(dateString);
        return date.toLocaleDateString('ru-RU', {
            day: 'numeric',
            month: 'short',
            year: 'numeric'
        });
    } catch (e) {
        return '–ù–µ–¥–∞–≤–Ω–æ';
    }
}

// ‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø
window.loadUserChannels = loadUserChannels;
function debugChannelData() {
    console.log('üîß –ó–∞–ø—É—Å–∫ –æ—Ç–ª–∞–¥–∫–∏ –∫–∞–Ω–∞–ª–æ–≤...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º API –Ω–∞–ø—Ä—è–º—É—é
    fetch('/api/channels/my', {
        method: 'GET',
        headers: {
            'Content-Type': 'application/json',
            'X-Telegram-User-Id': '373086959' // –í–∞—à ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        }
    })
    .then(response => response.json())
    .then(data => {
        console.log('üîç –ü—Ä—è–º–æ–π API –æ—Ç–≤–µ—Ç:', data);

        if (data.channels && data.channels.length > 0) {
            const firstChannel = data.channels[0];
            console.log('üîç –ü–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª –¥–µ—Ç–∞–ª—å–Ω–æ:', {
                '–í—Å–µ –ø–æ–ª—è': Object.keys(firstChannel),
                'subscriber_count': firstChannel.subscriber_count,
                'subscribers_count': firstChannel.subscribers_count,
                '–ü–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç': firstChannel
            });
        }
    })
    .catch(error => {
        console.error('‚ùå –û—à–∏–±–∫–∞ API:', error);
    });
}
function createChannelCard(channel) {

    const card = document.createElement('div');
    card.className = 'stat-card';
    card.setAttribute('data-user-channel', 'true');
    card.setAttribute('data-channel-id', channel.id);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–∞
    const status = (channel.is_verified || channel.status === 'verified')
        ? { class: 'status-active', text: '–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω', emoji: '‚úÖ' }
        : { class: 'status-pending', text: '–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏', emoji: '‚è≥' };

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    const title = channel.title || channel.channel_name || `–ö–∞–Ω–∞–ª @${channel.username || channel.channel_username}`;
    const username = (channel.username || channel.channel_username || 'unknown').replace('@', '');

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    const subscribersCount = formatNumber(
        channel.subscriber_count ||     // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ –∏–∑ –ë–î
        channel.subscribers_count ||    // ‚úÖ –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        0
    );

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–µ–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ñ—Ñ–µ—Ä–æ–≤ –∏ –ø–æ—Å—Ç–æ–≤
    const offersCount = formatNumber(channel.offers_count || 0);
    const postsCount = formatNumber(channel.posts_count || 0);

    const description = channel.description || channel.channel_description || '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ';
    const createdAt = formatDate(channel.created_at);

    // HTML –∫–∞—Ä—Ç–æ—á–∫–∏ —Å —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    card.innerHTML = `
        <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞–Ω–∞–ª–∞ -->
        <div class="channel-header">
            <div class="channel-info">
                <div class="channel-title">${title}</div>
            </div>
            <div class="channel-status ${status.class}">
                ${status.text}
            </div>
        </div>

        <!-- –ò–°–ü–†–ê–í–õ–ï–ù–û: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ -->
        <div class="channel-stats">
            <div class="stat-item">
                <span class="stat-number">${subscribersCount}</span>
                <div class="stat-label">–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤</div>
            </div>
            <div class="stat-item">
                <span class="stat-number">${postsCount}</span>
                <div class="stat-label">–ü–æ—Å—Ç–æ–≤</div>
            </div>
            <div class="stat-item">
                <span class="stat-number">${offersCount}</span>
                <div class="stat-label">–û—Ñ—Ñ–µ—Ä–æ–≤</div>
            </div>
        </div>

        <!-- –ë–ª–æ–∫ —Ü–µ–Ω—ã (–µ—Å–ª–∏ –µ—Å—Ç—å) -->
        ${channel.price_per_post ? `
        <div class="channel-pricing">
            <div class="pricing-title">–¶–µ–Ω–∞ –∑–∞ –ø–æ—Å—Ç</div>
            <div class="pricing-value">${formatPrice(channel.price_per_post)} ‚ÇΩ</div>
        </div>
        ` : ''}

        <!-- –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π -->
        <div class="channel-actions">
            ${(channel.is_verified || channel.status === 'verified') ? `
                <button class="btn btn-secondary" onclick="showChannelStats(${channel.id})">
                    üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                </button>
                <button class="btn btn-secondary" onclick="showChannelSettings(${channel.id})">
                    ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
                </button>
            ` : `
                <button class="btn btn-primary" onclick="startChannelVerification(${channel.id}, '${title?.replace(/'/g, "\\'")}', '${username || ""}')">
                    üîê –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å
                </button>
            `}
            <button class="btn btn-danger" onclick="showDeleteConfirmation(${channel.id}, '${title.replace(/'/g, '&apos;')}', '@${username}')">
                üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
            </button>
        </div>
    `;

    console.log('‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ –∫–∞–Ω–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    return card;
}
// –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
async function refreshChannelStatistics(channelId) {
    try {
        const telegramUser = getTelegramUser();
        const headers = {
            'Content-Type': 'application/json'
        };

        if (telegramUser) {
            headers['X-Telegram-User-Id'] = telegramUser.id.toString();
        }

        const response = await fetch(`/api/channels/${channelId}`, {
            method: 'GET',
            headers: headers
        });

        if (response.ok) {
            const data = await response.json();
            if (data.success || data.id) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∫–∞–Ω–∞–ª–∞
                updateChannelCard(channelId, data);
            }
        }
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–∞ ${channelId}:`, error);
    }
}
function updateChannelCard(channelId, channelData) {
    const card = document.querySelector(`[data-channel-id="${channelId}"]`);
    if (!card) return;

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    const subscribersElement = card.querySelector('.stat-item:nth-child(1) .stat-number');
    if (subscribersElement) {
        subscribersElement.textContent = formatNumber(
            channelData.subscriber_count ||
            channelData.subscribers_count ||
            0
        );
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å—Ç—ã
    const postsElement = card.querySelector('.stat-item:nth-child(2) .stat-number');
    if (postsElement) {
        postsElement.textContent = formatNumber(channelData.posts_count || 0);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ñ—Ñ–µ—Ä—ã
    const offersElement = card.querySelector('.stat-item:nth-child(3) .stat-number');
    if (offersElement) {
        offersElement.textContent = formatNumber(channelData.offers_count || 0);
    }
}
function verifyChannel(channelId) {
            console.log(`üîç –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞ ${channelId}`);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            const button = event.target;
            const originalText = button.innerHTML;
            button.innerHTML = '‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º...';
            button.disabled = true;

            const telegramUser = getTelegramUser();
            const headers = {
                'Content-Type': 'application/json'
            };

            if (telegramUser) {
                headers['X-Telegram-User-Id'] = telegramUser.id.toString();
                if (telegramUser.username) headers['X-Telegram-Username'] = telegramUser.username;
                if (telegramUser.first_name) headers['X-Telegram-First-Name'] = telegramUser.first_name;
                if (telegramUser.last_name) headers['X-Telegram-Last-Name'] = telegramUser.last_name;
            }

            fetch(`/api/channels/${channelId}/verify`, {
                method: 'PUT',
                headers: headers
            })
                .then(response => response.json())
                .then(data => {
                    console.log('–û—Ç–≤–µ—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', data);

                    if (data.success) {
                        // –£—Å–ø–µ—à–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è
                        showVerificationSuccess(data);

                        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                        updateChannelStatus(channelId, 'verified');

                        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
                        setTimeout(() => {
                            loadUserChannels();
                        }, 1000);

                    } else {
                        // –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
                        showVerificationError(data);
                    }
                })
                .catch(error => {
                    console.error('–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
                    showVerificationError({
                        error: '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞',
                        instructions: ['–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞']
                    });
                })
                .finally(() => {
                    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
                    button.innerHTML = originalText;
                    button.disabled = false;
                });
        }
function requestVerification(channelId) {
            return verifyChannel(channelId);
        }
async function startChannelVerification(channelId, channelName, channelUsername) {
    console.log(`üîê –ó–∞–ø—É—Å–∫ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞ ${channelId}`);

    try {
        const telegramUser = getTelegramUser();
        if (!telegramUser) {
            throw new Error('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        showNotification('info', '‚è≥ –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é...');

        const headers = {
            'Content-Type': 'application/json',
            'X-Telegram-User-Id': telegramUser.id.toString()
        };

        if (telegramUser.username) {
            headers['X-Telegram-Username'] = telegramUser.username;
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ endpoint, —á—Ç–æ –∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
        const response = await fetch('/api/channels', {
            method: 'POST',
            headers: headers,
            body: JSON.stringify({
                username: channelUsername?.replace('@', '') || 'unknown',
                category: 'other',
                description: '–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞',
                payment_terms: 'prepayment',
                action: 'reverify', // –§–ª–∞–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
                channel_id: channelId
            })
        });

        const result = await response.json();

        if (!result.success) {
            throw new Error(result.error || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Ç–æ—á–Ω–æ –∫–∞–∫ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞
        const verificationCode = result.verification_code || result.channel?.verification_code;
        const usernameForDisplay = result.channel?.username || channelUsername;

        if (verificationCode) {
            // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ (–¢–û–ß–ù–û —Ç–∞–∫–æ–µ –∂–µ –∫–∞–∫ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏)
            const modal = document.createElement('div');
            modal.style.cssText = `
                position: fixed; top: 0; left: 0; width: 100%; height: 100%;
                background: rgba(0,0,0,0.8); z-index: 10000;
                display: flex; align-items: center; justify-content: center;
            `;

            modal.innerHTML = `
                <div style="
                    background: white; padding: 20px; border-radius: 15px;
                    max-width: min(500px, 95vw); margin: 10px; text-align: center;
                    box-shadow: 0 10px 30px rgba(0,0,0,0.3);
                    max-height: 95vh; overflow-y: auto;
                ">
                    <div style="font-size: 48px; margin-bottom: 20px;">üìù</div>
                    <h3 style="color: #333; margin-bottom: 20px;">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–ª–∞–¥–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–º</h3>

                    <div style="
                        background: #e3f2fd; padding: 20px; border-radius: 10px;
                        margin: 20px 0; border-left: 4px solid #2196f3;
                    ">
                        <h4 style="color: #1976d2; margin-bottom: 15px;">üîê –ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:</h4>

                        <div style="
                            background: #333; color: #00ff00; padding: 15px;
                            border-radius: 8px; font-family: 'Courier New', monospace;
                            font-size: 20px; font-weight: bold; letter-spacing: 2px;
                            margin: 15px 0; cursor: pointer; user-select: all;
                            box-shadow: 0 2px 8px rgba(0,0,0,0.3);
                        " onclick="
                            navigator.clipboard.writeText('${verificationCode}');
                            this.style.background='#1b5e20';
                            this.innerHTML='${verificationCode} ‚úÖ';
                            setTimeout(() => {
                                this.style.background='#333';
                                this.innerHTML='${verificationCode}';
                            }, 2000);
                        ">${verificationCode}</div>

                        <small style="color: #666;">–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–¥, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å</small>
                    </div>

                    <div style="
                        background: #f5f5f5; padding: 20px; border-radius: 10px;
                        margin: 20px 0; text-align: left;
                    ">
                        <h4 style="color: #333; margin-bottom: 15px;">üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</h4>

                        <ol style="margin: 0; padding-left: 20px; color: #555;">
                            <li style="margin-bottom: 10px;">
                                –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∞—à –∫–∞–Ω–∞–ª <strong>@${usernameForDisplay}</strong>
                            </li>
                            <li style="margin-bottom: 10px;">
                                –û–ø—É–±–ª–∏–∫—É–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º: <strong>${verificationCode}</strong>
                            </li>
                            <li style="margin-bottom: 10px;">
                                –ü–µ—Ä–µ—Å–ª–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—à–µ–º—É –±–æ—Ç—É <strong>@YOUR_BOT_USERNAME</strong>
                            </li>
                            <li style="margin-bottom: 10px;">
                                –ü–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –±–æ—Ç–µ
                            </li>
                        </ol>
                    </div>

                    <div style="
                        background: #fff3cd; padding: 15px; border-radius: 8px;
                        margin: 15px 0; border-left: 4px solid #ffc107;
                    ">
                        <small style="color: #856404;">
                            üí° <strong>–°–æ–≤–µ—Ç:</strong> –ü–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞ –≤—ã –º–æ–∂–µ—Ç–µ —Å—Ä–∞–∑—É —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞.
                            –ì–ª–∞–≤–Ω–æ–µ —É—Å–ø–µ—Ç—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å –µ–≥–æ –±–æ—Ç—É!
                        </small>
                    </div>

                    <button onclick="
                        document.body.removeChild(this.closest('div').parentElement);
                        loadUserChannels();
                    " style="
                        background: #2196f3; color: white; border: none;
                        padding: 12px 30px; border-radius: 8px; font-size: 16px;
                        cursor: pointer; margin-top: 15px; font-weight: 600;
                    ">–ü–æ–Ω—è—Ç–Ω–æ, –ø–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞–Ω–∞–ª–∞–º</button>

                    <div style="margin-top: 15px;">
                        <a href="https://t.me/YOUR_BOT_USERNAME" target="_blank" style="
                            color: #2196f3; text-decoration: none; font-size: 14px; font-weight: 600;
                        ">ü§ñ –û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏</a>
                    </div>
                </div>
            `;

            document.body.appendChild(modal);

        } else {
            // Fallback –¥–ª—è —Å–ª—É—á–∞–µ–≤ –±–µ–∑ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
            showSuccessNotification('‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞!');
        }

    } catch (error) {
        console.error('üí• –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
        showErrorNotification(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
}

// –ò –≤—Å–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è:
function showLoadingState() {
    const channelsGrid = document.getElementById('channelsGrid');
    if (!channelsGrid) return;

    // –°–ù–ê–ß–ê–õ–ê –°–ö–†–´–í–ê–ï–ú –í–°–ï –°–û–°–¢–û–Ø–ù–ò–Ø
    const emptyState = document.getElementById('emptyState');
    const errorElement = document.getElementById('channelsError');

    if (emptyState) emptyState.style.display = 'none';
    if (errorElement) errorElement.style.display = 'none';

    // –£–ë–ò–†–ê–ï–ú –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –ö–ê–†–¢–û–ß–ö–ò –ü–ï–†–ï–î –ü–û–ö–ê–ó–û–ú –ó–ê–ì–†–£–ó–ö–ò
    const existingCards = channelsGrid.querySelectorAll('.stat-card[data-user-channel="true"], .channel-card[data-user-channel="true"]');
    existingCards.forEach(card => card.remove());

    let loadingElement = document.getElementById('channelsLoading');
    if (!loadingElement) {
        loadingElement = document.createElement('div');
        loadingElement.id = 'channelsLoading';
        loadingElement.className = 'loading-state';
        loadingElement.style.gridColumn = '1 / -1';
        loadingElement.innerHTML = `
            <div style="text-align: center; padding: 40px;">
                <div class="loading-spinner"></div>
                <div class="loading-text">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–Ω–∞–ª–æ–≤...</div>
            </div>
        `;
        channelsGrid.appendChild(loadingElement);
    }
    loadingElement.style.display = 'block';
}
function hideLoadingState() {
    const loadingElement = document.getElementById('channelsLoading');
    if (loadingElement) {
        loadingElement.style.display = 'none';
    }
}
function showEmptyState() {
    const channelsGrid = document.getElementById('channelsGrid');
    if (!channelsGrid) return;

    if (!document.getElementById('emptyState')) {
        const emptyState = document.createElement('div');
        emptyState.id = 'emptyState';
        emptyState.className = 'empty-state';
        emptyState.style.gridColumn = '1 / -1';  // ‚Üê –î–û–ë–ê–í–õ–ï–ù–û –¥–ª—è –∑–∞–Ω—è—Ç–∏—è –≤—Å–µ–π —à–∏—Ä–∏–Ω—ã
        emptyState.innerHTML = `
            <div class="stat-icon">üì∫</div>
            <h3>–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤</h3>
            <p>–î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è–º–∏</p>
            <button class="btn btn-primary" onclick="switchTab('add-channel')">
                ‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª
            </button>
        `;
        channelsGrid.appendChild(emptyState);
    }

    document.getElementById('emptyState').style.display = 'block';
}
function showErrorState(errorMessage) {
    const channelsGrid = document.getElementById('channelsGrid');
    if (!channelsGrid) return;

    let errorElement = document.getElementById('channelsError');
    if (!errorElement) {
        errorElement = document.createElement('div');
        errorElement.id = 'channelsError';
        errorElement.className = 'error-state';
        channelsGrid.appendChild(errorElement);
    }

    errorElement.innerHTML = `
        <div style="text-align: center; padding: 40px; background: #fef2f2; border-radius: var(--border-radius); border: 2px solid var(--danger-color);">
            <div style="font-size: 48px; margin-bottom: 16px;">‚ùå</div>
            <h3 style="color: var(--danger-color);">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–∞–ª–æ–≤</h3>
            <p style="color: var(--text-secondary); margin: 16px 0;">
                ${errorMessage}
            </p>
            <button class="btn btn-primary" onclick="loadUserChannels()">
                üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </button>
        </div>
    `;
    errorElement.style.display = 'block';
}
function showChannelStats(channelId) {
    showInfoNotification('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)');
}
function showChannelSettings(channelId) {
    showInfoNotification('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞ —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã');
}
function editChannel(channelId) {
            alert('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)');
        }
function goBack() {
    try {
        console.log('üîô –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É');

        // –í–°–ï–ì–î–ê –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –¥–∞–∂–µ –≤ Telegram WebApp
        window.location.href = '/';

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é:', error);
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
        try {
            window.location.replace('/');
        } catch (e) {
            // –ö—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å –≥–ª–∞–≤–Ω–æ–π
            window.location = '/';
        }
    }
}
// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ channels-core.js –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª

async function updateChannelWithTelegramData(channelId, username) {
    try {
        console.log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞ ${channelId} (@${username})`);

        // –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram API
        const telegramData = await channelAnalyzer.getTelegramChannelInfo(username);

        if (!telegramData.success) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram API');
        }

        console.log('üìä –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram:', telegramData);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        const response = await fetch(`/api/channels/${channelId}/update-stats`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
                'X-Telegram-User-Id': getTelegramUserId()
            },
            body: JSON.stringify({
                telegram_data: telegramData,
                raw_subscriber_count: telegramData.data.raw_subscriber_count,
                title: telegramData.data.title,
                description: telegramData.data.description
            })
        });

        const result = await response.json();

        if (result.success) {
            console.log(`‚úÖ –ö–∞–Ω–∞–ª ${channelId} –æ–±–Ω–æ–≤–ª–µ–Ω:`, result);
            return result;
        } else {
            throw new Error(result.error || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
        }

    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ ${channelId}:`, error);
        throw error;
    }
}

async function updateAllChannelsWithZeroSubscribers() {
    try {
        console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ —Å 0 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤...');

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
        const response = await fetch('/api/channels/my', {
            headers: {
                'X-Telegram-User-Id': getTelegramUserId()
            }
        });

        const data = await response.json();

        if (!data.success) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤');
        }

        // –ù–∞—Ö–æ–¥–∏–º –∫–∞–Ω–∞–ª—ã —Å 0 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        const channelsToUpdate = data.channels.filter(channel =>
            channel.subscriber_count === 0 || channel.subscribers_count === 0
        );

        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${channelsToUpdate.length} –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`);

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª
        const results = [];
        for (const channel of channelsToUpdate) {
            try {
                console.log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–Ω–∞–ª: ${channel.title} (@${channel.username})`);

                const result = await updateChannelWithTelegramData(
                    channel.id,
                    channel.username.replace('@', '')
                );

                results.push({
                    channel_id: channel.id,
                    success: true,
                    old_count: channel.subscriber_count,
                    new_count: result.channel.subscriber_count
                });

                // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await new Promise(resolve => setTimeout(resolve, 1000));

            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${channel.title}:`, error);
                results.push({
                    channel_id: channel.id,
                    success: false,
                    error: error.message
                });
            }
        }

        console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:', results);

        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (results.some(r => r.success)) {
            console.log('üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤...');
            await loadUserChannels();
        }

        return results;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
async function fixChannelData(channelId) {
    try {
        // –ù–∞—Ö–æ–¥–∏–º –∫–∞–Ω–∞–ª –≤ —Ç–µ–∫—É—â–µ–º —Å–ø–∏—Å–∫–µ
        const channelCard = document.querySelector(`[data-channel-id="${channelId}"]`);
        if (!channelCard) {
            throw new Error('–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ');
        }

        // –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏
        const usernameElement = channelCard.querySelector('.channel-username');
        if (!usernameElement) {
            throw new Error('Username –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞—Ä—Ç–æ—á–∫–µ');
        }

        const username = usernameElement.textContent.replace('@', '').trim();

        console.log(`üõ†Ô∏è –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞ ${channelId} (@${username})`);

        const result = await updateChannelWithTelegramData(channelId, username);

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        const subscribersElement = channelCard.querySelector('.subscribers-count');
        if (subscribersElement && result.channel.subscriber_count > 0) {
            subscribersElement.textContent = formatSubscriberCount(result.channel.subscriber_count);
        }

        console.log(`‚úÖ –ö–∞–Ω–∞–ª ${channelId} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω!`);
        return result;

    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ ${channelId}:`, error);
        alert(`–û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${error.message}`);
        throw error;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏
window.updateChannelWithTelegramData = updateChannelWithTelegramData;
window.updateAllChannelsWithZeroSubscribers = updateAllChannelsWithZeroSubscribers;
window.fixChannelData = fixChannelData;

// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–ª—è onclick
window.verifyChannel = verifyChannel;
window.loadUserChannels = loadUserChannels;
window.showChannelStats = showChannelStats;
window.showChannelSettings = showChannelSettings;
window.editChannel = editChannel;
window.refreshChannelStatistics = refreshChannelStatistics;
window.updateChannelCard = updateChannelCard;
window.debugChannelData = debugChannelData;