// app/static/js/offers.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø

// ===== –§–£–ù–ö–¶–ò–Ø –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–Ø –í–ö–õ–ê–î–û–ö =====
function switchTab(tabName) {
    console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É:', tabName);

    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã —É –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
    document.querySelectorAll('.nav-card').forEach(card => card.classList.remove('active'));

    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–Ω—Ç—ã –≤–∫–ª–∞–¥–æ–∫
    document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));

    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
    const activeCard = document.querySelector(`[data-tab="${tabName}"]`);
    if (activeCard) {
        activeCard.classList.add('active');
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
    const activeContent = document.getElementById(tabName);
    if (activeContent) {
        activeContent.classList.add('active');
    }

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∫–ª–∞–¥–∫–∏
    if (tabName === 'my-offers') {
        loadMyOffers();
    }
}

// ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø TELEGRAM WEBAPP =====
if (window.Telegram && window.Telegram.WebApp) {
    window.Telegram.WebApp.ready();
    window.Telegram.WebApp.expand();
}

// –§–£–ù–ö–¶–ò–Ø –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ü–†–ê–í–ò–õ–¨–ù–û–ô –¶–ï–ù–´
function getOfferPriceInfo(offer) {
    console.log('üí∞ –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω—ã –¥–ª—è –æ—Ñ—Ñ–µ—Ä–∞', offer.id, ':', {
        price: offer.price,
        budget_total: offer.budget_total,
        max_price_per_post: offer.max_price_per_post
    });

    let displayPrice = 0;
    let priceType = '';

    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: budget_total > price > max_price_per_post
    if (offer.budget_total && parseFloat(offer.budget_total) > 0) {
        displayPrice = offer.budget_total;
        priceType = '–û–±—â–∏–π –±—é–¥–∂–µ—Ç';
    } else if (offer.price && parseFloat(offer.price) > 0) {
        displayPrice = offer.price;
        priceType = '–¶–µ–Ω–∞ –∑–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ';
    } else {
        displayPrice = 0;
        priceType = '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞';
    }

    console.log(`üí∞ –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ—Ñ—Ñ–µ—Ä–∞ ${offer.id}: ${displayPrice} (${priceType})`);

    return {
        amount: displayPrice,
        type: priceType,
        formatted: formatPrice(displayPrice)
    };
}
// –§–£–ù–ö–¶–ò–Ø –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø –¶–ï–ù–´
function formatPrice(price) {
    console.log('üí∞ –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É:', price, '—Ç–∏–ø:', typeof price);

    let numericPrice = 0;

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
    if (typeof price === 'string') {
        const cleanPrice = price.replace(/[^0-9.,]/g, '').replace(',', '.');
        numericPrice = parseFloat(cleanPrice) || 0;
    } else if (typeof price === 'number') {
        numericPrice = price;
    } else {
        numericPrice = 0;
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á
    if (numericPrice === 0) {
        return '0';
    }

    return numericPrice.toLocaleString('ru-RU', {
        minimumFractionDigits: 0,
        maximumFractionDigits: 2
    });
}

// –§–£–ù–ö–¶–ò–Ø –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø –î–ê–¢–´
function formatDate(dateString) {
    if (!dateString) return '–ù–µ —É–∫–∞–∑–∞–Ω–∞';

    try {
        const date = new Date(dateString);
        return date.toLocaleDateString('ru-RU', {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit'
        });
    } catch (e) {
        return dateString;
    }
}

// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø renderOffers
function renderOffers(offers) {
    console.log('üé® –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –æ—Ñ—Ñ–µ—Ä–æ–≤:', offers.length);
    const container = document.getElementById('offersGrid');

    if (!container) {
        console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä offersGrid –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }

    if (!offers || offers.length === 0) {
        showEmptyOffersState();
        return;
    }

    let html = '';

    offers.forEach((offer, index) => {
        console.log(`üìã –û—Ñ—Ñ–µ—Ä ${index + 1}:`, {
            id: offer.id,
            title: offer.title,
            price: offer.price,
            priceType: typeof offer.price
        });

        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        const title = offer.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
        const description = offer.description || offer.content || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è';
        const rawPrice = offer.price || 0;
        const currency = offer.currency || 'RUB';
        const category = offer.category || '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
        const status = offer.status || 'active';
        const deadline = offer.deadline || '–ù–µ —É–∫–∞–∑–∞–Ω';
        const responseCount = offer.response_count || 0;
        const createdAt = offer.created_at || '';

        // –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã
        const formattedPrice = formatPrice(rawPrice);
        const formattedDate = formatDate(createdAt);

        console.log(`üí∞ –¶–µ–Ω–∞ –¥–ª—è –æ—Ñ—Ñ–µ—Ä–∞ ${offer.id}: ${rawPrice} -> ${formattedPrice}`);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        const statusClass = status === 'active' ? 'status-active' : 'status-inactive';
        const statusText = {
            'active': '–ê–∫—Ç–∏–≤–µ–Ω',
            'paused': '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
            'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω',
            'cancelled': '–û—Ç–º–µ–Ω–µ–Ω'
        }[status] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

        // –û–±—Ä–µ–∑–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        const shortDescription = description.length > 150 ?
            description.substring(0, 150) + '...' : description;

        html += `
            <div class="offer-card" data-offer-id="${offer.id}" style="background: white; border: 1px solid #ddd; border-radius: 12px; padding: 20px; margin-bottom: 20px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);">
                <div class="offer-header" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
                    <h3 style="margin: 0; color: #333; font-size: 18px; font-weight: 600;">${title}</h3>
                    <span style="padding: 4px 12px; border-radius: 12px; font-size: 12px; font-weight: 500; background: ${status === 'active' ? '#d4edda' : '#f8d7da'}; color: ${status === 'active' ? '#155724' : '#721c24'};">${statusText}</span>
                </div>
                
                <div style="margin-bottom: 15px;">
                    <div style="display: flex; align-items: baseline; gap: 8px;">
                        <span style="font-size: 28px; font-weight: bold; color: #007bff;">${formattedPrice}</span>
                        <span style="font-size: 16px; color: #666; font-weight: 500;">${currency}</span>
                    </div>
                </div>
                
                <div style="margin-bottom: 15px;">
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px; font-size: 14px;">
                        <div style="display: flex; justify-content: space-between;">
                            <span style="color: #666;">üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</span>
                            <span style="font-weight: 600;">${category}</span>
                        </div>
                        <div style="display: flex; justify-content: space-between;">
                            <span style="color: #666;">üìÖ –î–µ–¥–ª–∞–π–Ω:</span>
                            <span style="font-weight: 600;">${deadline}</span>
                        </div>
                        <div style="display: flex; justify-content: space-between;">
                            <span style="color: #666;">üìä –û—Ç–∫–ª–∏–∫–æ–≤:</span>
                            <span style="font-weight: 600;">${responseCount}</span>
                        </div>
                        <div style="display: flex; justify-content: space-between;">
                            <span style="color: #666;">üìÖ –°–æ–∑–¥–∞–Ω:</span>
                            <span style="font-weight: 600;">${formattedDate}</span>
                        </div>
                    </div>
                </div>
                
                <div style="background: #f8f9fa; padding: 12px; border-radius: 8px; margin-bottom: 15px;">
                    <p style="margin: 0; font-size: 14px; line-height: 1.4; color: #495057;">${shortDescription}</p>
                </div>
                
                <div style="display: flex; gap: 10px; flex-wrap: wrap;">
                    <button onclick="editOffer(${offer.id})" style="padding: 8px 16px; border: 1px solid #ddd; background: white; border-radius: 6px; cursor: pointer; font-size: 13px;">
                        ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                    <button onclick="viewOfferDetails(${offer.id})" style="padding: 8px 16px; border: 1px solid #007bff; background: #007bff; color: white; border-radius: 6px; cursor: pointer; font-size: 13px;">
                        üëÅÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                    </button>
                    ${responseCount > 0 ? `
                    <button onclick="manageResponses(${offer.id})" style="padding: 8px 16px; border: 1px solid #28a745; background: #28a745; color: white; border-radius: 6px; cursor: pointer; font-size: 13px;">
                        üí¨ –û—Ç–∫–ª–∏–∫–∏ (${responseCount})
                    </button>` : ''}
                </div>
                
                <div style="margin-top: 10px; font-size: 12px; color: #666;">
                    ID: ${offer.id}
                </div>
            </div>
        `;
    });

    container.innerHTML = html;
    console.log('‚úÖ –û—Ñ—Ñ–µ—Ä—ã –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏');
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function editOffer(offerId) {
    alert(`–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞ ${offerId} (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)`);
}

function viewOfferDetails(offerId) {
    alert(`–î–µ—Ç–∞–ª–∏ –æ—Ñ—Ñ–µ—Ä–∞ ${offerId} (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)`);
}

function manageResponses(offerId) {
    alert(`–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–∏–∫–∞–º–∏ –¥–ª—è –æ—Ñ—Ñ–µ—Ä–∞ ${offerId} (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)`);
}

// ===== –§–£–ù–ö–¶–ò–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø USER ID =====
function getTelegramUserId() {
    console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ Telegram User ID...');
    
    // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ Telegram WebApp
    if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.initDataUnsafe) {
        const user = window.Telegram.WebApp.initDataUnsafe.user;
        if (user && user.id) {
            console.log('‚úÖ User ID –∏–∑ Telegram WebApp:', user.id);
            return user.id.toString();
        }
    }
    
    // Fallback –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const fallbackId = '373086959';
    console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback User ID:', fallbackId);
    return fallbackId;
}

// ===== –ó–ê–ì–†–£–ó–ö–ê –ú–û–ò–• –û–§–§–ï–†–û–í =====
async function loadMyOffers() {
    console.log('üìã –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–∏—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤...');
    const container = document.getElementById('offersGrid');

    if (!container) {
        console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä offersGrid –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }

    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        showOffersLoading();

        const userId = getTelegramUserId();
        console.log('üë§ –ò—Å–ø–æ–ª—å–∑—É–µ–º User ID:', userId);

        const response = await fetch('/api/offers/my', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'X-Telegram-User-Id': userId
            }
        });

        console.log('üåê API Response Status:', response.status);
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        const result = await response.json();
        console.log('üì¶ API Response Data:', result);

        if (result.success && result.offers && result.offers.length > 0) {
            console.log('‚úÖ –û—Ñ—Ñ–µ—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', result.offers.length);
            renderOffers(result.offers);
        } else {
            console.log('‚ÑπÔ∏è –û—Ñ—Ñ–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            showEmptyOffersState();
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ñ—Ñ–µ—Ä–æ–≤:', error);
        showOffersError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ñ—Ñ–µ—Ä–æ–≤: ' + error.message);
    }
}

// ===== –°–û–°–¢–û–Ø–ù–ò–Ø –ó–ê–ì–†–£–ó–ö–ò =====
function showOffersLoading() {
    const container = document.getElementById('offersGrid');
    if (container) {
        container.innerHTML = `
            <div class="loading-state">
                <div class="loading-spinner">‚è≥</div>
                <p>–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ñ—Ñ–µ—Ä–æ–≤...</p>
            </div>
        `;
    }
}

function showEmptyOffersState() {
    const container = document.getElementById('offersGrid');
    if (container) {
        container.innerHTML = `
            <div class="empty-state">
                <div class="empty-icon">üìù</div>
                <h3>–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ñ—Ñ–µ—Ä–æ–≤</h3>
                <p>–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –æ—Ñ—Ñ–µ—Ä, –Ω–∞–∂–∞–≤ –Ω–∞ "–°–æ–∑–¥–∞—Ç—å –æ—Ñ—Ñ–µ—Ä"</p>
                <button class="btn btn-primary" onclick="switchTab('create-offer')">
                    –°–æ–∑–¥–∞—Ç—å –æ—Ñ—Ñ–µ—Ä
                </button>
            </div>
        `;
    }
}

function showOffersError(message) {
    const container = document.getElementById('offersGrid');
    if (container) {
        container.innerHTML = `
            <div class="error-state">
                <div class="error-icon">‚ùå</div>
                <h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
                <p>${message}</p>
                <button class="btn btn-outline" onclick="loadMyOffers()">
                    –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                </button>
            </div>
        `;
    }
}

// ===== –ü–û–ò–°–ö –ü–û –û–§–§–ï–†–ê–ú =====
function setupOffersSearch() {
    const searchInput = document.getElementById('offersSearch');
    
    if (searchInput) {
        searchInput.addEventListener('input', function() {
            const searchTerm = this.value.toLowerCase().trim();
            const offerCards = document.querySelectorAll('.offer-card');

            offerCards.forEach(card => {
                const title = card.querySelector('.offer-title')?.textContent.toLowerCase() || '';
                
                if (title.includes(searchTerm)) {
                    card.style.display = 'block';
                } else {
                    card.style.display = 'none';
                }
            });
        });
    }
}

// ===== –§–£–ù–ö–¶–ò–Ø –í–û–ó–í–†–ê–¢–ê =====
function goBack() {
    if (window.history.length > 1) {
        window.history.back();
    } else {
        window.location.href = '/';
    }
}

// ===== –ö–õ–ê–°–° –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –û–§–§–ï–†–û–í =====
class OffersManager {
    constructor() {
        this.currentStep = 1;
        this.totalSteps = 4;
        this.formData = {};
        this.init();
    }

    init() {
        console.log('üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OffersManager');
        this.setupEventListeners();
        this.updateStep(this.currentStep);
    }

    setupEventListeners() {
        // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —à–∞–≥–∞–º
        document.getElementById('nextBtn')?.addEventListener('click', () => this.nextStep());
        document.getElementById('prevBtn')?.addEventListener('click', () => this.prevStep());
        document.getElementById('submitBtn')?.addEventListener('click', () => this.submitOffer());

        // –°–ª–∞–π–¥–µ—Ä –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        const subscribersRange = document.querySelector('input[name="min_subscribers"]');
        const subscribersValue = document.getElementById('subscribersValue');

        if (subscribersRange && subscribersValue) {
            subscribersRange.addEventListener('input', function() {
                const value = parseInt(this.value);
                subscribersValue.textContent = value >= 1000000 ? '1M+' :
                                              value >= 1000 ? Math.round(value/1000) + 'K' :
                                              value.toString();
            });
        }
    }

    updateStep(step) {
        console.log('üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —à–∞–≥–∞:', step);

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —à–∞–≥–æ–≤
        document.querySelectorAll('.step').forEach((stepEl, index) => {
            const stepNumber = index + 1;
            stepEl.classList.toggle('active', stepNumber === step);
            stepEl.classList.toggle('completed', stepNumber < step);
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º —à–∞–≥–∏ —Ñ–æ—Ä–º—ã
        document.querySelectorAll('.form-step').forEach(stepEl => {
            stepEl.style.display = stepEl.dataset.step == step ? 'block' : 'none';
        });

        // –£–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∞–º–∏
        const prevBtn = document.getElementById('prevBtn');
        const nextBtn = document.getElementById('nextBtn');
        const submitBtn = document.getElementById('submitBtn');

        if (prevBtn) prevBtn.style.display = step === 1 ? 'none' : 'inline-flex';
        if (nextBtn) nextBtn.style.display = step === this.totalSteps ? 'none' : 'inline-flex';
        if (submitBtn) submitBtn.style.display = step === this.totalSteps ? 'inline-flex' : 'none';
    }

    nextStep() {
        if (this.currentStep < this.totalSteps) {
            this.currentStep++;
            this.updateStep(this.currentStep);
        }
    }

    prevStep() {
        if (this.currentStep > 1) {
            this.currentStep--;
            this.updateStep(this.currentStep);
        }
    }

    async submitOffer() {
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ñ—Ñ–µ—Ä–∞ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)...');

    const submitBtn = document.getElementById('submitBtn');
    const originalText = submitBtn?.textContent;

    try {
        if (submitBtn) {
            submitBtn.disabled = true;
            submitBtn.textContent = '‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ...';
        }

        console.log('üîç –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã...');

        // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        const data = {
            title: '',
            description: '',
            budget_total: 0,
            price: 0,
            currency: 'RUB',
            category: 'general'
        };

        // –ù–∞–∑–≤–∞–Ω–∏–µ
        const titleField = document.querySelector('input[name="title"]');
        if (titleField && titleField.value) {
            data.title = titleField.value.trim();
        } else {
            data.title = '–ù–æ–≤—ã–π –æ—Ñ—Ñ–µ—Ä';
        }

        // –û–ø–∏—Å–∞–Ω–∏–µ
        const descField = document.querySelector('textarea[name="description"]') ||
                         document.querySelector('input[name="description"]');
        if (descField && descField.value) {
            data.description = descField.value.trim();
        } else {
            data.description = '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞';
        }

        // –ì–õ–ê–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª–µ price —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—â–∏–π –±—é–¥–∂–µ—Ç!
        const priceField = document.querySelector('input[name="price"]');
        if (priceField && priceField.value) {
            const inputValue = parseFloat(priceField.value);
            console.log(`üí∞ –ù–∞–π–¥–µ–Ω–æ –≤ –ø–æ–ª–µ price: ${inputValue}`);

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á—Ç–æ —ç—Ç–æ - –±—é–¥–∂–µ—Ç –∏–ª–∏ —Ü–µ–Ω–∞ –∑–∞ –ø–æ—Å—Ç
            // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –±–æ–ª—å—à–æ–µ (>10000), —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –æ–±—â–∏–º –±—é–¥–∂–µ—Ç–æ–º
            if (inputValue >= 10000) {
                data.budget_total = inputValue;
                data.price = Math.min(inputValue, 10000); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑—É–º–Ω—É—é —Ü–µ–Ω—É –∑–∞ –ø–æ—Å—Ç
                console.log(`üí∞ –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º –∫–∞–∫ –æ–±—â–∏–π –±—é–¥–∂–µ—Ç: ${data.budget_total}`);
            } else {
                data.price = inputValue;
                data.budget_total = inputValue;
                console.log(`üí∞ –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º –∫–∞–∫ —Ü–µ–Ω—É –∑–∞ –ø–æ—Å—Ç: ${data.price}`);
            }
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ budget
        const budgetField = document.querySelector('input[name="budget"]');
        if (budgetField && budgetField.value) {
            const budgetValue = parseFloat(budgetField.value);
            if (budgetValue > 0) {
                data.budget_total = budgetValue;
                console.log(`üí∞ –ù–∞–π–¥–µ–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç: ${data.budget_total}`);
            }
        }

        // –ö–∞—Ç–µ–≥–æ—Ä–∏—è
        const categoryField = document.querySelector('select[name="category"]');
        if (categoryField && categoryField.value) {
            data.category = categoryField.value;
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        data.content = data.description;

        const audienceField = document.querySelector('input[name="target_audience"]');
        if (audienceField && audienceField.value) {
            data.target_audience = audienceField.value.trim();
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!data.title || data.title.length < 3) {
            throw new Error('–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞');
        }

        if (!data.description || data.description.length < 5) {
            throw new Error('–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤');
        }

        if (!data.budget_total || data.budget_total <= 0) {
            throw new Error('–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –±—é–¥–∂–µ—Ç');
        }

        console.log('üöÄ –û–¢–ü–†–ê–í–õ–Ø–ï–ú –î–ê–ù–ù–´–ï:');
        console.log(JSON.stringify(data, null, 2));

        const response = await fetch('/api/offers', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Telegram-User-Id': getTelegramUserId()
            },
            body: JSON.stringify(data)
        });

        const result = await response.json();
        console.log('üì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', result);

        if (response.ok && result.success) {
            alert('‚úÖ –û—Ñ—Ñ–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');

            // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
            if (priceField) priceField.value = '';
            if (titleField) titleField.value = '';
            if (descField) descField.value = '';

            switchTab('my-offers');
        } else {
            throw new Error(result.error || result.errors?.join(', ') || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞');
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞:', error);
        alert(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    } finally {
        if (submitBtn) {
            submitBtn.disabled = false;
            submitBtn.textContent = originalText;
        }
    }
}

    collectFormData() {
        const form = document.getElementById('offerForm');
        const formData = new FormData(form);
        const data = Object.fromEntries(formData.entries());

        // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —á–∏–ø—ã
        data.categories = Array.from(document.querySelectorAll('.chip.selected'))
            .map(chip => chip.dataset.value || chip.textContent);

        return data;
    }
}

// ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====
document.addEventListener('DOMContentLoaded', function() {
    console.log('üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ñ—Ñ–µ—Ä–æ–≤');

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ñ—Ñ–µ—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–ø–µ—Ä–≤–∞—è –≤–∫–ª–∞–¥–∫–∞)
    loadMyOffers();

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–∏—Å–∫–∞
    setupOffersSearch();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–æ–≤
    // –ü–ï–†–ï–û–ü–†–ï–î–ï–õ–ï–ù–ò–ï submitOffer –≤ –∫–æ–Ω—Ü–µ offers.js - —Ç–æ–∂–µ –∑–∞–º–µ–Ω–∏—Ç–µ
if (typeof OffersManager !== 'undefined') {
    OffersManager.prototype.submitOffer = async function() {
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ñ—Ñ–µ—Ä–∞ (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)...');

        const submitBtn = document.getElementById('submitBtn');
        const originalText = submitBtn?.textContent;

        try {
            if (submitBtn) {
                submitBtn.disabled = true;
                submitBtn.textContent = '‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ...';
            }

            // –ü–†–ê–í–ò–õ–¨–ù–´–ô —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–æ–ª—è price
            const priceField = document.querySelector('input[name="price"]');
            const titleField = document.querySelector('input[name="title"]');
            const descField = document.querySelector('textarea[name="description"]') ||
                             document.querySelector('input[name="description"]');

            const inputValue = priceField ? parseFloat(priceField.value) : 0;

            const data = {
                title: titleField?.value || '–ù–æ–≤—ã–π –æ—Ñ—Ñ–µ—Ä',
                description: descField?.value || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞',
                budget_total: inputValue, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∫ –æ–±—â–∏–π –±—é–¥–∂–µ—Ç
                price: Math.min(inputValue, 10000), // –†–∞–∑—É–º–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ –ø–æ—Å—Ç
                currency: 'RUB',
                category: 'general'
            };

            data.content = data.description;

            console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è):', data);

            const response = await fetch('/api/offers', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Telegram-User-Id': getTelegramUserId()
                },
                body: JSON.stringify(data)
            });

            const result = await response.json();

            if (response.ok && result.success) {
                alert('‚úÖ –û—Ñ—Ñ–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
                switchTab('my-offers');
            } else {
                throw new Error(result.error || result.errors?.join(', ') || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞');
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞:', error);
            alert(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
        } finally {
            if (submitBtn) {
                submitBtn.disabled = false;
                submitBtn.textContent = originalText;
            }
        }
    };
}

    console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ñ—Ñ–µ—Ä–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
});

// ===== –≠–ö–°–ü–û–†–¢ –§–£–ù–ö–¶–ò–ô =====
window.switchTab = switchTab;
window.loadMyOffers = loadMyOffers;
window.goBack = goBack;
window.OffersManager = OffersManager;
window.getTelegramUserId = getTelegramUserId;


// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–°–ù–û–í–ù–û–ô –§–û–†–ú–´ - –¥–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ–Ω–µ—Ü offers.js

// –û–¢–õ–ê–î–ö–ê –¶–ï–ù - –¥–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ–Ω–µ—Ü offers.js
document.addEventListener('DOMContentLoaded', function() {
    setTimeout(() => {
        const debugBtn = document.createElement('button');
        debugBtn.textContent = 'üí∞ –û—Ç–ª–∞–¥–∫–∞ —Ü–µ–Ω';
        debugBtn.style.cssText = 'position: fixed; top: 60px; right: 10px; z-index: 9999; background: #28a745; color: white; border: none; padding: 8px; border-radius: 5px; font-size: 12px;';
        debugBtn.onclick = function() {
            console.log('üîç –û–¢–õ–ê–î–ö–ê –¶–ï–ù –û–§–§–ï–†–û–í');
            fetch('/api/offers/my', {
                headers: { 'X-Telegram-User-Id': getTelegramUserId() }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success && data.offers) {
                    data.offers.forEach((offer, index) => {
                        console.log(`–û—Ñ—Ñ–µ—Ä ${index + 1}:`);
                        console.log('  ID:', offer.id);
                        console.log('  –¶–µ–Ω–∞ (–∏—Å—Ö–æ–¥–Ω–∞—è):', offer.price, typeof offer.price);
                        console.log('  –¶–µ–Ω–∞ (—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è):', formatPrice(offer.price));
                        console.log('  ---');
                    });
                }
            });
        };
        document.body.appendChild(debugBtn);
    }, 1000);
});

// –ö–ù–û–ü–ö–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –¶–ï–ù - –¥–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ–Ω–µ—Ü offers.js
document.addEventListener('DOMContentLoaded', function() {
    setTimeout(() => {
        const priceDebugBtn = document.createElement('button');
        priceDebugBtn.textContent = 'üîç –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω';
        priceDebugBtn.style.cssText = 'position: fixed; top: 110px; right: 10px; z-index: 9999; background: #dc3545; color: white; border: none; padding: 8px; border-radius: 5px; font-size: 12px;';
        priceDebugBtn.onclick = function() {
            console.log('üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –¶–ï–ù –û–§–§–ï–†–û–í');
            console.log('=' * 50);

            fetch('/api/offers/my', {
                headers: { 'X-Telegram-User-Id': getTelegramUserId() }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success && data.offers) {
                    data.offers.forEach((offer, index) => {
                        console.log(`\nüìã –û—Ñ—Ñ–µ—Ä ${index + 1} (ID: ${offer.id}):`);
                        console.log('  –ù–∞–∑–≤–∞–Ω–∏–µ:', offer.title);
                        console.log('  price:', offer.price, typeof offer.price);
                        console.log('  budget_total:', offer.budget_total, typeof offer.budget_total);
                        console.log('  max_price_per_post:', offer.max_price_per_post, typeof offer.max_price_per_post);

                        const priceInfo = getOfferPriceInfo(offer);
                        console.log('  ‚Üí –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è:', priceInfo.formatted, `(${priceInfo.type})`);
                        console.log('  ---');
                    });
                }
            });
        };
        document.body.appendChild(priceDebugBtn);
    }, 1000);
});

// –û–¢–õ–ê–î–ö–ê –ü–û–õ–ï–ô –§–û–†–ú–´ - –¥–æ–±–∞–≤—å—Ç–µ –≤ offers.js
function debugFormFields() {
    console.log('üîç –û–¢–õ–ê–î–ö–ê –ü–û–õ–ï–ô –§–û–†–ú–´');
    console.log('========================');

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø–æ–ª—è –≤–≤–æ–¥–∞
    const allInputs = document.querySelectorAll('input, textarea, select');
    console.log('üìù –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ–π:', allInputs.length);

    allInputs.forEach(input => {
        if (input.name || input.id) {
            console.log(`–ü–æ–ª–µ: ${input.name || input.id} = "${input.value}" (—Ç–∏–ø: ${input.type})`);
        }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–ª—è —Ü–µ–Ω—ã/–±—é–¥–∂–µ—Ç–∞
    const priceFields = [
        'input[name="price"]',
        'input[name="budget"]',
        'input[name="budget_total"]',
        'input[name="total_budget"]',
        'input[name="max_price"]',
        'input[name="max_price_per_post"]',
        '#offerPrice',
        '#budget',
        '#totalBudget'
    ];

    console.log('\nüí∞ –ü–û–õ–Ø –¶–ï–ù–´/–ë–Æ–î–ñ–ï–¢–ê:');
    priceFields.forEach(selector => {
        const field = document.querySelector(selector);
        if (field) {
            console.log(`${selector}: "${field.value}" (name: ${field.name})`);
        }
    });

    return true;
}

// –ö–ù–û–ü–ö–ê –ü–†–û–í–ï–†–ö–ò –§–û–†–ú–´
document.addEventListener('DOMContentLoaded', function() {
    setTimeout(() => {
        const formDebugBtn = document.createElement('button');
        formDebugBtn.textContent = 'üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º—ã';
        formDebugBtn.style.cssText = 'position: fixed; top: 160px; right: 10px; z-index: 9999; background: #6f42c1; color: white; border: none; padding: 8px; border-radius: 5px; font-size: 12px;';
        formDebugBtn.onclick = function() {
            console.log('üîç –ü–†–û–í–ï–†–ö–ê –§–û–†–ú–´ –°–û–ó–î–ê–ù–ò–Ø –û–§–§–ï–†–ê');
            debugFormFields();
        };
        document.body.appendChild(formDebugBtn);
    }, 1000);
});