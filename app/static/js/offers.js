// app/static/js/offers.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –ë–ï–ó –ö–û–ù–§–õ–ò–ö–¢–û–í

console.log('üìù –ó–∞–≥—Ä—É–∑–∫–∞ offers.js - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è');

// ===== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï =====
let offersManager = null;

// ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø TELEGRAM WEBAPP =====
if (window.Telegram && window.Telegram.WebApp) {
    window.Telegram.WebApp.ready();
    window.Telegram.WebApp.expand();
}

// ===== –§–£–ù–ö–¶–ò–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø USER ID =====
function getTelegramUserId() {
    console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ Telegram User ID...');

    if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.initDataUnsafe) {
        const user = window.Telegram.WebApp.initDataUnsafe.user;
        if (user && user.id) {
            console.log('‚úÖ User ID –∏–∑ Telegram WebApp:', user.id);
            return user.id.toString();
        }
    }

    const fallbackId = '373086959';
    console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback User ID:', fallbackId);
    return fallbackId;
}

// ===== –§–£–ù–ö–¶–ò–Ø –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–Ø –í–ö–õ–ê–î–û–ö =====
function switchTab(tabName) {
    console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É:', tabName);

    document.querySelectorAll('.nav-card').forEach(card => card.classList.remove('active'));
    document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));

    const activeCard = document.querySelector(`[data-tab="${tabName}"]`);
    if (activeCard) {
        activeCard.classList.add('active');
    }

    const activeContent = document.getElementById(tabName);
    if (activeContent) {
        activeContent.classList.add('active');
    }

    if (tabName === 'my-offers') {
        loadMyOffers();
    } else if (tabName === 'create-offer') {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OffersManager —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É —Å–æ–∑–¥–∞–Ω–∏—è
        initializeOffersManager();
    }
}

// ===== –§–£–ù–ö–¶–ò–ò –ó–ê–ì–†–£–ó–ö–ò –ò –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –û–§–§–ï–†–û–í =====
function formatPrice(price) {
    let numericPrice = 0;

    if (typeof price === 'string') {
        const cleanPrice = price.replace(/[^0-9.,]/g, '').replace(',', '.');
        numericPrice = parseFloat(cleanPrice) || 0;
    } else if (typeof price === 'number') {
        numericPrice = price;
    }

    if (numericPrice === 0) return '0';

    return numericPrice.toLocaleString('ru-RU', {
        minimumFractionDigits: 0,
        maximumFractionDigits: 2
    });
}

function formatDate(dateString) {
    if (!dateString) return '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
    try {
        const date = new Date(dateString);
        return date.toLocaleDateString('ru-RU', {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit'
        });
    } catch (e) {
        return dateString;
    }
}

function renderOffers(offers) {
    console.log('üé® –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –æ—Ñ—Ñ–µ—Ä–æ–≤:', offers.length);
    const container = document.getElementById('offersGrid');

    if (!container) {
        console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä offersGrid –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }

    if (!offers || offers.length === 0) {
        showEmptyOffersState();
        return;
    }

    let html = '';
    offers.forEach((offer) => {
        const title = offer.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
        const description = offer.description || offer.content || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è';
        const rawPrice = offer.price || 0;
        const currency = offer.currency || 'RUB';
        const category = offer.category || '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
        const status = offer.status || 'active';
        const responseCount = offer.response_count || 0;
        const createdAt = offer.created_at || '';

        const formattedPrice = formatPrice(rawPrice);
        const formattedDate = formatDate(createdAt);

        const statusText = {
            'active': '–ê–∫—Ç–∏–≤–µ–Ω',
            'paused': '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
            'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω',
            'cancelled': '–û—Ç–º–µ–Ω–µ–Ω'
        }[status] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

        const shortDescription = description.length > 150 ?
            description.substring(0, 150) + '...' : description;

        html += `
            <div class="offer-card" data-offer-id="${offer.id}" style="background: white; border: 1px solid #ddd; border-radius: 12px; padding: 20px; margin-bottom: 20px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);">
                <div class="offer-header" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
                    <h3 style="margin: 0; color: #333; font-size: 18px; font-weight: 600;">${title}</h3>
                    <span style="padding: 4px 12px; border-radius: 12px; font-size: 12px; font-weight: 500; background: ${status === 'active' ? '#d4edda' : '#f8d7da'}; color: ${status === 'active' ? '#155724' : '#721c24'};">${statusText}</span>
                </div>
                
                <div style="margin-bottom: 15px;">
                    <div style="display: flex; align-items: baseline; gap: 8px;">
                        <span style="font-size: 28px; font-weight: bold; color: #007bff;">${formattedPrice}</span>
                        <span style="font-size: 16px; color: #666; font-weight: 500;">${currency}</span>
                    </div>
                </div>
                
                <div style="margin-bottom: 15px;">
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px; font-size: 14px;">
                        <div style="display: flex; justify-content: space-between;">
                            <span style="color: #666;">üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</span>
                            <span style="font-weight: 600;">${category}</span>
                        </div>
                        <div style="display: flex; justify-content: space-between;">
                            <span style="color: #666;">üìä –û—Ç–∫–ª–∏–∫–æ–≤:</span>
                            <span style="font-weight: 600;">${responseCount}</span>
                        </div>
                        <div style="display: flex; justify-content: space-between;">
                            <span style="color: #666;">üìÖ –°–æ–∑–¥–∞–Ω:</span>
                            <span style="font-weight: 600;">${formattedDate}</span>
                        </div>
                    </div>
                </div>
                
                <div style="background: #f8f9fa; padding: 12px; border-radius: 8px; margin-bottom: 15px;">
                    <p style="margin: 0; font-size: 14px; line-height: 1.4; color: #495057;">${shortDescription}</p>
                </div>
                
                <div style="display: flex; gap: 10px; flex-wrap: wrap;">
                    <button onclick="editOffer(${offer.id})" style="padding: 8px 16px; border: 1px solid #ddd; background: white; border-radius: 6px; cursor: pointer; font-size: 13px;">
                        ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                    <button onclick="viewOfferDetails(${offer.id})" style="padding: 8px 16px; border: 1px solid #007bff; background: #007bff; color: white; border-radius: 6px; cursor: pointer; font-size: 13px;">
                        üëÅÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                    </button>
                    ${responseCount > 0 ? `
                    <button onclick="manageResponses(${offer.id})" style="padding: 8px 16px; border: 1px solid #28a745; background: #28a745; color: white; border-radius: 6px; cursor: pointer; font-size: 13px;">
                        üí¨ –û—Ç–∫–ª–∏–∫–∏ (${responseCount})
                    </button>` : ''}
                    ${status === 'active' || status === 'paused' ? `
                    <button onclick="cancelOffer(${offer.id}, '${title.replace(/'/g, "\\'")}', this)" style="padding: 8px 16px; border: 1px solid #ffc107; background: #ffc107; color: #212529; border-radius: 6px; cursor: pointer; font-size: 13px;">
                        ‚ùå –û—Ç–º–µ–Ω–∏—Ç—å
                    </button>` : ''}
                    ${status === 'paused' ? `
                    <button onclick="resumeOffer(${offer.id}, this)" style="padding: 8px 16px; border: 1px solid #28a745; background: #28a745; color: white; border-radius: 6px; cursor: pointer; font-size: 13px;">
                        ‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å
                    </button>` : ''}
                    ${status === 'active' ? `
                    <button onclick="pauseOffer(${offer.id}, this)" style="padding: 8px 16px; border: 1px solid #6c757d; background: #6c757d; color: white; border-radius: 6px; cursor: pointer; font-size: 13px;">
                        ‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                    </button>` : ''}
                    ${status === 'completed' || status === 'cancelled' ? `
                    <button onclick="deleteOffer(${offer.id}, '${title.replace(/'/g, "\\'")}', this)" style="padding: 8px 16px; border: 1px solid #dc3545; background: #dc3545; color: white; border-radius: 6px; cursor: pointer; font-size: 13px;">
                        üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                    </button>` : ''}
                </div>
                
                <div style="margin-top: 10px; font-size: 12px; color: #666;">
                    ID: ${offer.id}
                </div>
            </div>
        `;
    });

    container.innerHTML = html;
    console.log('‚úÖ –û—Ñ—Ñ–µ—Ä—ã –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω—ã');
}

async function loadMyOffers() {
    console.log('üìã –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–∏—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤...');
    const container = document.getElementById('offersGrid');

    if (!container) {
        console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä offersGrid –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }

    try {
        showOffersLoading();

        const userId = getTelegramUserId();
        const response = await fetch('/api/offers/my', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'X-Telegram-User-Id': userId
            }
        });

        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        const result = await response.json();

        if (result.success && result.offers && result.offers.length > 0) {
            console.log('‚úÖ –û—Ñ—Ñ–µ—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', result.offers.length);
            renderOffers(result.offers);
        } else {
            console.log('‚ÑπÔ∏è –û—Ñ—Ñ–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            showEmptyOffersState();
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ñ—Ñ–µ—Ä–æ–≤:', error);
        showOffersError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ñ—Ñ–µ—Ä–æ–≤: ' + error.message);
    }
}

function showOffersLoading() {
    const container = document.getElementById('offersGrid');
    if (container) {
        container.innerHTML = `
            <div class="loading-state">
                <div class="loading-spinner">‚è≥</div>
                <p>–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ñ—Ñ–µ—Ä–æ–≤...</p>
            </div>
        `;
    }
}

function showEmptyOffersState() {
    const container = document.getElementById('offersGrid');
    if (container) {
        container.innerHTML = `
            <div class="empty-state">
                <div class="empty-icon">üìù</div>
                <h3>–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ñ—Ñ–µ—Ä–æ–≤</h3>
                <p>–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –æ—Ñ—Ñ–µ—Ä, –Ω–∞–∂–∞–≤ –Ω–∞ "–°–æ–∑–¥–∞—Ç—å –æ—Ñ—Ñ–µ—Ä"</p>
                <button class="btn btn-primary" onclick="switchTab('create-offer')">
                    –°–æ–∑–¥–∞—Ç—å –æ—Ñ—Ñ–µ—Ä
                </button>
            </div>
        `;
    }
}

function showOffersError(message) {
    const container = document.getElementById('offersGrid');
    if (container) {
        container.innerHTML = `
            <div class="error-state">
                <div class="error-icon">‚ùå</div>
                <h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
                <p>${message}</p>
                <button class="btn btn-outline" onclick="loadMyOffers()">
                    –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                </button>
            </div>
        `;
    }
}

// ===== –ö–õ–ê–°–° –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –û–§–§–ï–†–û–í - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø =====
class OffersManager {
    constructor() {
        this.currentStep = 1;
        this.totalSteps = 4;
        this.formData = {};
        this.isInitialized = false;
    }

    init() {
        if (this.isInitialized) {
            console.log('‚ö†Ô∏è OffersManager —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return;
        }

        console.log('üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OffersManager');
        this.setupEventListeners();
        this.updateStep(this.currentStep);
        this.isInitialized = true;
    }

    setupEventListeners() {
        console.log('üîó –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π...');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–æ–∫ –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        const nextBtn = document.getElementById('nextBtn');
        const prevBtn = document.getElementById('prevBtn');
        const submitBtn = document.getElementById('submitBtn');

        if (nextBtn) {
            console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ "–î–∞–ª–µ–µ" –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫');
            nextBtn.addEventListener('click', (e) => {
                e.preventDefault();
                console.log('üîÑ –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ "–î–∞–ª–µ–µ"');
                this.nextStep();
            });
        } else {
            console.error('‚ùå –ö–Ω–æ–ø–∫–∞ "–î–∞–ª–µ–µ" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
        }

        if (prevBtn) {
            console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫');
            prevBtn.addEventListener('click', (e) => {
                e.preventDefault();
                console.log('üîÑ –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ "–ù–∞–∑–∞–¥"');
                this.prevStep();
            });
        }

        if (submitBtn) {
            console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ "–°–æ–∑–¥–∞—Ç—å" –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫');
            submitBtn.addEventListener('click', (e) => {
                e.preventDefault();
                console.log('üîÑ –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ "–°–æ–∑–¥–∞—Ç—å"');
                this.submitOffer();
            });
        }

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∏–ø–æ–≤
        this.setupChips();

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª–∞–π–¥–µ—Ä–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        this.setupSubscribersSlider();
    }

    setupChips() {
        document.querySelectorAll('.chip').forEach(chip => {
            chip.addEventListener('click', function() {
                this.classList.toggle('selected');
            });
        });
    }

    setupSubscribersSlider() {
        const subscribersRange = document.querySelector('input[name="min_subscribers"]');
        const subscribersValue = document.getElementById('subscribersValue');

        if (subscribersRange && subscribersValue) {
            subscribersRange.addEventListener('input', function() {
                const value = parseInt(this.value);
                subscribersValue.textContent = value >= 1000000 ? '1M+' :
                                              value >= 1 ? Math.round(value/1000) + 'K' :
                                              value.toString();
            });
        }
    }

    updateStep(step) {
        console.log('üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —à–∞–≥–∞:', step);

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —à–∞–≥–æ–≤
        document.querySelectorAll('.step').forEach((stepEl, index) => {
            const stepNumber = index + 1;
            stepEl.classList.toggle('active', stepNumber === step);
            stepEl.classList.toggle('completed', stepNumber < step);
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º —à–∞–≥–∏ —Ñ–æ—Ä–º—ã
        document.querySelectorAll('.form-step').forEach(stepEl => {
            stepEl.style.display = stepEl.dataset.step == step ? 'block' : 'none';
        });

        // –£–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∞–º–∏
        const prevBtn = document.getElementById('prevBtn');
        const nextBtn = document.getElementById('nextBtn');
        const submitBtn = document.getElementById('submitBtn');

        if (prevBtn) prevBtn.style.display = step === 1 ? 'none' : 'inline-flex';
        if (nextBtn) nextBtn.style.display = step === this.totalSteps ? 'none' : 'inline-flex';
        if (submitBtn) submitBtn.style.display = step === this.totalSteps ? 'inline-flex' : 'none';

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        const stepperProgress = document.getElementById('stepperProgress');
        if (stepperProgress) {
            const progress = ((step - 1) / (this.totalSteps - 1)) * 100;
            stepperProgress.style.width = progress + '%';
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º —à–∞–≥–µ
        if (step === this.totalSteps) {
            this.updatePreview();
        }

        this.currentStep = step;
    }

    nextStep() {
        console.log('‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É');
        if (this.currentStep < this.totalSteps) {
            this.updateStep(this.currentStep + 1);
        }
    }

    prevStep() {
        console.log('‚¨ÖÔ∏è –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É');
        if (this.currentStep > 1) {
            this.updateStep(this.currentStep - 1);
        }
    }

    updatePreview() {
        console.log('üîç –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞');

        const titleInput = document.querySelector('input[name="title"]');
        const budgetInput = document.querySelector('input[name="budget"]');

        if (titleInput) {
            const previewTitle = document.getElementById('previewTitle');
            if (previewTitle) {
                previewTitle.textContent = titleInput.value || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
            }
        }

        if (budgetInput) {
            const previewBudget = document.getElementById('previewBudget');
            if (previewBudget) {
                const budget = budgetInput.value;
                previewBudget.textContent = budget ? formatPrice(budget) + ' RUB' : '–ù–µ —É–∫–∞–∑–∞–Ω';
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ–º–∞—Ç–∏–∫–∏
        const selectedTopics = Array.from(document.querySelectorAll('.chip.selected'))
            .map(chip => chip.textContent);
        const previewTopics = document.getElementById('previewTopics');
        if (previewTopics) {
            previewTopics.textContent = selectedTopics.length > 0 ? selectedTopics.join(', ') : '–ù–µ –≤—ã–±—Ä–∞–Ω—ã';
        }
    }

    async submitOffer() {
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ñ—Ñ–µ—Ä–∞...');

        const submitBtn = document.getElementById('submitBtn');
        const originalText = submitBtn?.textContent;

        try {
            if (submitBtn) {
                submitBtn.disabled = true;
                submitBtn.textContent = '‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ...';
            }

            // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
            const data = {
                title: '',
                description: '',
                budget_total: 0,
                price: 0,
                currency: 'RUB',
                category: 'general'
            };

            // –ù–∞–∑–≤–∞–Ω–∏–µ
            const titleField = document.querySelector('input[name="title"]');
            if (titleField && titleField.value) {
                data.title = titleField.value.trim();
            } else {
                throw new Error('–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞');
            }

            // –û–ø–∏—Å–∞–Ω–∏–µ
            const descField = document.querySelector('textarea[name="description"]');
            if (descField && descField.value) {
                data.description = descField.value.trim();
            } else {
                throw new Error('–£–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞');
            }

            // –ë—é–¥–∂–µ—Ç
            const budgetField = document.querySelector('input[name="budget"]');
            if (budgetField && budgetField.value) {
                const budgetValue = parseFloat(budgetField.value);
                if (budgetValue > 0) {
                    data.budget_total = budgetValue;
                    data.price = Math.min(budgetValue, 10000);
                } else {
                    throw new Error('–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –±—é–¥–∂–µ—Ç');
                }
            } else {
                throw new Error('–£–∫–∞–∂–∏—Ç–µ –±—é–¥–∂–µ—Ç');
            }

            // –ö–∞—Ç–µ–≥–æ—Ä–∏—è
            const categoryField = document.querySelector('select[name="category"]');
            if (categoryField && categoryField.value) {
                data.category = categoryField.value;
            }

            data.content = data.description;

            console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ:', data);

            const response = await fetch('/api/offers', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Telegram-User-Id': getTelegramUserId()
                },
                body: JSON.stringify(data)
            });

            const result = await response.json();

            if (response.ok && result.success) {
                alert('‚úÖ –û—Ñ—Ñ–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');

                // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
                document.getElementById('offerForm').reset();
                document.querySelectorAll('.chip.selected').forEach(chip => {
                    chip.classList.remove('selected');
                });

                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–µ—Ä–≤–æ–º—É —à–∞–≥—É
                this.updateStep(1);

                // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ø–∏—Å–∫—É –æ—Ñ—Ñ–µ—Ä–æ–≤
                switchTab('my-offers');
            } else {
                throw new Error(result.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞');
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞:', error);
            alert(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
        } finally {
            if (submitBtn) {
                submitBtn.disabled = false;
                submitBtn.textContent = originalText;
            }
        }
    }
}

// ===== –§–£–ù–ö–¶–ò–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò OFFERS MANAGER =====
function initializeOffersManager() {
    console.log('üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ—Ñ—Ñ–µ—Ä–æ–≤...');

    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
    if (!offersManager) {
        offersManager = new OffersManager();
    }

    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ —á—Ç–æ DOM –≥–æ—Ç–æ–≤
    setTimeout(() => {
        offersManager.init();
    }, 100);
}

// ===== –ü–û–ò–°–ö –ü–û –û–§–§–ï–†–ê–ú =====
function setupOffersSearch() {
    const searchInput = document.getElementById('offersSearch');

    if (searchInput) {
        searchInput.addEventListener('input', function() {
            const searchTerm = this.value.toLowerCase().trim();
            const offerCards = document.querySelectorAll('.offer-card');

            offerCards.forEach(card => {
                const title = card.querySelector('h3')?.textContent.toLowerCase() || '';
                card.style.display = title.includes(searchTerm) ? 'block' : 'none';
            });
        });
    }
}

// ===== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====
function editOffer(offerId) {
    alert(`–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞ ${offerId} (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)`);
}

function viewOfferDetails(offerId) {
    alert(`–î–µ—Ç–∞–ª–∏ –æ—Ñ—Ñ–µ—Ä–∞ ${offerId} (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)`);
}

function goBack() {
    if (window.history.length > 1) {
        window.history.back();
    } else {
        window.location.href = '/';
    }
}

// ===== –§–£–ù–ö–¶–ò–Ø –£–î–ê–õ–ï–ù–ò–Ø –û–§–§–ï–†–ê =====
async function deleteOffer(offerId, offerTitle, buttonElement) {
    console.log('üóëÔ∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞:', offerId);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    const confirmMessage = `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ—Ñ—Ñ–µ—Ä "${offerTitle}"?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`;

    if (!confirm(confirmMessage)) {
        console.log('‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
        return;
    }

    const originalText = buttonElement?.textContent;

    try {
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
        if (buttonElement) {
            buttonElement.disabled = true;
            buttonElement.textContent = '‚è≥ –£–¥–∞–ª–µ–Ω–∏–µ...';
            buttonElement.style.opacity = '0.6';
        }

        console.log('üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ...');

        const response = await fetch(`/api/offers/${offerId}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
                'X-Telegram-User-Id': getTelegramUserId()
            }
        });

        const result = await response.json();
        console.log('üì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', result);

        if (response.ok && result.success) {
            console.log('‚úÖ –û—Ñ—Ñ–µ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            alert(`‚úÖ ${result.message || '–û—Ñ—Ñ–µ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'}`);

            // –£–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
            const offerCard = buttonElement?.closest('.offer-card');
            if (offerCard) {
                offerCard.style.transition = 'all 0.3s ease';
                offerCard.style.transform = 'scale(0.9)';
                offerCard.style.opacity = '0';

                setTimeout(() => {
                    offerCard.remove();

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –æ—Ñ—Ñ–µ—Ä—ã
                    const remainingOffers = document.querySelectorAll('.offer-card');
                    if (remainingOffers.length === 0) {
                        showEmptyOffersState();
                    }
                }, 300);
            }

        } else {
            throw new Error(result.error || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞');
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞:', error);
        alert(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
        if (buttonElement) {
            buttonElement.disabled = false;
            buttonElement.textContent = originalText;
            buttonElement.style.opacity = '1';
        }
    }
}

// ===== –ú–ê–°–°–û–í–û–ï –£–î–ê–õ–ï–ù–ò–ï –û–§–§–ï–†–û–í =====
async function deleteMultipleOffers() {
    console.log('üóëÔ∏è –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–æ–≤');

    const selectedOffers = document.querySelectorAll('.offer-card input[type="checkbox"]:checked');

    if (selectedOffers.length === 0) {
        alert('–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ñ—Ñ–µ—Ä—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
        return;
    }

    const confirmMessage = `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å ${selectedOffers.length} –æ—Ñ—Ñ–µ—Ä(–æ–≤)?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`;

    if (!confirm(confirmMessage)) {
        return;
    }

    let deletedCount = 0;
    let errorCount = 0;

    for (const checkbox of selectedOffers) {
        const offerCard = checkbox.closest('.offer-card');
        const offerId = offerCard?.dataset.offerId;

        if (offerId) {
            try {
                const response = await fetch(`/api/offers/${offerId}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Telegram-User-Id': getTelegramUserId()
                    }
                });

                const result = await response.json();

                if (response.ok && result.success) {
                    deletedCount++;
                    offerCard.remove();
                } else {
                    errorCount++;
                    console.error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞ ${offerId}:`, result.error);
                }

            } catch (error) {
                errorCount++;
                console.error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞ ${offerId}:`, error);
            }
        }
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (deletedCount > 0) {
        alert(`‚úÖ –£–¥–∞–ª–µ–Ω–æ –æ—Ñ—Ñ–µ—Ä–æ–≤: ${deletedCount}${errorCount > 0 ? `\n‚ùå –û—à–∏–±–æ–∫: ${errorCount}` : ''}`);
    } else {
        alert('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ—Ñ—Ñ–µ—Ä–∞');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –æ—Ñ—Ñ–µ—Ä—ã
    const remainingOffers = document.querySelectorAll('.offer-card');
    if (remainingOffers.length === 0) {
        showEmptyOffersState();
    }
}

// ===== –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –°–¢–ê–¢–£–°–û–ú –û–§–§–ï–†–ê =====

async function cancelOffer(offerId, offerTitle, buttonElement) {
    console.log('‚ùå –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–º–µ–Ω—É –æ—Ñ—Ñ–µ—Ä–∞:', offerId);

    // –¢–æ–ª—å–∫–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏—á–∏–Ω—ã
    const confirmMessage = `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ—Ñ–µ—Ä "${offerTitle}"?\n\n–ü–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –≤—ã —Å–º–æ–∂–µ—Ç–µ –µ–≥–æ —É–¥–∞–ª–∏—Ç—å.`;

    if (!confirm(confirmMessage)) {
        console.log('‚ùå –û—Ç–º–µ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
        return;
    }

    await updateOfferStatus(offerId, 'cancelled', '–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º', buttonElement, '–û—Ç–º–µ–Ω–∞...');
}

async function pauseOffer(offerId, buttonElement) {
    console.log('‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ñ—Ñ–µ—Ä–∞:', offerId);

    // –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏—á–∏–Ω—ã
    await updateOfferStatus(offerId, 'paused', '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º', buttonElement, '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞...');
}

async function resumeOffer(offerId, buttonElement) {
    console.log('‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞:', offerId);

    await updateOfferStatus(offerId, 'active', '–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º', buttonElement, '–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...');
}

async function completeOffer(offerId, buttonElement) {
    console.log('‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞:', offerId);

    if (!confirm('–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ñ—Ñ–µ—Ä? –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –µ–≥–æ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å.')) {
        return;
    }

    await updateOfferStatus(offerId, 'completed', '–ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º', buttonElement, '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ...');
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
async function updateOfferStatus(offerId, newStatus, reason, buttonElement, loadingText) {
    const originalText = buttonElement?.textContent;

    try {
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
        if (buttonElement) {
            buttonElement.disabled = true;
            buttonElement.textContent = `‚è≥ ${loadingText}`;
            buttonElement.style.opacity = '0.6';
        }

        console.log(`üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ñ—Ñ–µ—Ä–∞ ${offerId} –Ω–∞ ${newStatus}`);

        const response = await fetch(`/api/offers/${offerId}/status`, {
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json',
                'X-Telegram-User-Id': getTelegramUserId()
            },
            body: JSON.stringify({
                status: newStatus,
                reason: reason || ''
            })
        });

        const result = await response.json();
        console.log('üì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', result);

        if (response.ok && result.success) {
            console.log(`‚úÖ –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${newStatus}`);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            alert(`‚úÖ ${result.message}`);

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            updateOfferCardStatus(offerId, newStatus);

        } else {
            throw new Error(result.error || `–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ ${newStatus}`);
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
        alert(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
        if (buttonElement) {
            buttonElement.disabled = false;
            buttonElement.textContent = originalText;
            buttonElement.style.opacity = '1';
        }
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
function updateOfferCardStatus(offerId, newStatus) {
    const offerCard = document.querySelector(`[data-offer-id="${offerId}"]`);
    if (!offerCard) return;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å-–±–µ–π–¥–∂
    const statusBadge = offerCard.querySelector('.offer-header span');
    if (statusBadge) {
        const statusTexts = {
            'active': '–ê–∫—Ç–∏–≤–µ–Ω',
            'paused': '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
            'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω',
            'cancelled': '–û—Ç–º–µ–Ω–µ–Ω'
        };

        const statusColors = {
            'active': { bg: '#d4edda', color: '#155724' },
            'paused': { bg: '#fff3cd', color: '#856404' },
            'completed': { bg: '#d1ecf1', color: '#0c5460' },
            'cancelled': { bg: '#f8d7da', color: '#721c24' }
        };

        statusBadge.textContent = statusTexts[newStatus] || newStatus;
        const colors = statusColors[newStatus] || statusColors['active'];
        statusBadge.style.background = colors.bg;
        statusBadge.style.color = colors.color;
    }

    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
    setTimeout(() => {
        loadMyOffers();
    }, 1000);
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏
window.cancelOffer = cancelOffer;
window.pauseOffer = pauseOffer;
window.resumeOffer = resumeOffer;
window.completeOffer = completeOffer;
window.updateOfferStatus = updateOfferStatus;

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏
window.deleteOffer = deleteOffer;
window.deleteMultipleOffers = deleteMultipleOffers;
// ===== –û–°–ù–û–í–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====
document.addEventListener('DOMContentLoaded', function() {
    console.log('üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ñ—Ñ–µ—Ä–æ–≤');

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ñ—Ñ–µ—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    loadMyOffers();

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–∏—Å–∫–∞
    setupOffersSearch();

    console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ñ—Ñ–µ—Ä–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
});

// ===== –≠–ö–°–ü–û–†–¢ –§–£–ù–ö–¶–ò–ô =====
window.switchTab = switchTab;
window.loadMyOffers = loadMyOffers;
window.goBack = goBack;
window.OffersManager = OffersManager;
window.getTelegramUserId = getTelegramUserId;
window.editOffer = editOffer;
window.viewOfferDetails = viewOfferDetails;

console.log('‚úÖ offers.js –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ');