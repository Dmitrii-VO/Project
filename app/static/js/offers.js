// app/static/js/offers.js - –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø

// ===== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï =====
let offersManager = null;

// ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø TELEGRAM WEBAPP =====
if (window.Telegram?.WebApp) {
    window.Telegram.WebApp.ready();
    window.Telegram.WebApp.expand();
}

// ===== HTML –®–ê–ë–õ–û–ù–´ =====
const Templates = {
    statusBadge(status, text) {
        const statusTexts = {
            active: '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω',
            draft: 'üìù –ß–µ—Ä–Ω–æ–≤–∏–∫', 
            completed: '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω',
            paused: '‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
        };
        const displayText = text || statusTexts[status] || statusTexts.active;
        return `<span class="status-badge ${status}">${displayText}</span>`;
    },

    button(text, onclick, style = 'primary', size = 'sm') {
        const classes = `btn-${style} btn-${size}`;
        return `<button class="${classes}" onclick="${onclick}">${text}</button>`;
    },

    modal(title, content, id = 'modal') {
        return `
            <div id="${id}" class="modal-overlay">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3>${title}</h3>
                        <button class="modal-close" onclick="closeResponseModal('${id}')">&times;</button>
                    </div>
                    <div class="modal-body">${content}</div>
                </div>
            </div>
        `;
    },

    formField(label, type, id, options = {}) {
        const { required = false, placeholder = '', style = '' } = options;
        const req = required ? '<span class="required">*</span>' : '';
        const extraStyle = style ? ` style="${style}"` : '';
        
        if (type === 'select' && options.items) {
            return `
                <div class="form-field">
                    <label for="${id}">${label} ${req}</label>
                    <select id="${id}" ${required ? 'required' : ''}${extraStyle}>
                        ${options.items.map(item => `<option value="${item.value}">${item.text}</option>`).join('')}
                    </select>
                </div>
            `;
        }
        
        if (type === 'textarea') {
            return `
                <div class="form-field">
                    <label for="${id}">${label} ${req}</label>
                    <textarea id="${id}" ${required ? 'required' : ''} placeholder="${placeholder}"${extraStyle}></textarea>
                </div>
            `;
        }
        
        return `
            <div class="form-field">
                <label for="${id}">${label} ${req}</label>
                <input type="${type}" id="${id}" ${required ? 'required' : ''} placeholder="${placeholder}"${extraStyle}>
            </div>
        `;
    },

    infoCard(title, content, emoji = 'üìù') {
        return `<div class="info-card"><h4>${emoji} ${title}</h4>${content}</div>`;
    }
};

// ===== –£–¢–ò–õ–ò–¢–´ =====
const Utils = {
    formatPrice(price) {
        const numericPrice = typeof price === 'string'
            ? parseFloat(price.replace(/[^0-9.,]/g, '').replace(',', '.')) || 0
            : (price || 0);
        return numericPrice === 0 ? '0' : numericPrice.toLocaleString('ru-RU', {
            minimumFractionDigits: 0,
            maximumFractionDigits: 2
        });
    },

    formatNumber(num) {
        return num ? new Intl.NumberFormat('ru-RU').format(num) : '0';
    },

    formatDate(dateString) {
        if (!dateString) return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
        try {
            const date = new Date(dateString);
            if (isNaN(date.getTime())) return '–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞';
            return date.toLocaleDateString('ru-RU', {
                year: 'numeric', month: 'short', day: 'numeric',
                hour: '2-digit', minute: '2-digit'
            });
        } catch (error) {
            return '–û—à–∏–±–∫–∞ –¥–∞—Ç—ã';
        }
    },

    showLoading(container, message = '–ó–∞–≥—Ä—É–∑–∫–∞...') {
        if (container) {
            container.innerHTML = `<div class="loading-state"><div class="loading-spinner">‚è≥</div><p>${message}</p></div>`;
        }
    },

    showError(container, message, retryCallback = null) {
        if (container) {
            const retryBtn = retryCallback ? Templates.button('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', `${retryCallback.name}()`, 'outline') : '';
            container.innerHTML = `<div class="error-state"><div class="error-icon">‚ùå</div><h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3><p>${message}</p>${retryBtn}</div>`;
        }
    },

    showEmpty(container, title, description, action = null) {
        if (container) {
            container.innerHTML = `<div class="empty-state"><div class="empty-icon">üìù</div><h3>${title}</h3><p>${description}</p>${action || ''}</div>`;
        }
    }
};

// ===== API REQUESTS =====
const ApiClient = {
    async request(url, options = {}) {
        const defaultOptions = {
            headers: {
                'Content-Type': 'application/json',
                'X-Telegram-User-Id': getTelegramUserId()
            }
        };

        const config = { ...defaultOptions, ...options };
        if (config.headers) {
            config.headers = { ...defaultOptions.headers, ...config.headers };
        }

        const response = await fetch(url, config);
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        return response.json();
    },

    async get(url) { return this.request(url, { method: 'GET' }); },
    async post(url, data) { return this.request(url, { method: 'POST', body: JSON.stringify(data) }); },
    async patch(url, data) { return this.request(url, { method: 'PATCH', body: JSON.stringify(data) }); },
    async delete(url) { return this.request(url, { method: 'DELETE' }); },

    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
    async loadData(config) {
        const { 
            url, container, loadingMessage = '–ó–∞–≥—Ä—É–∑–∫–∞...', 
            emptyTitle = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö', emptyDescription = '', emptyAction = '',
            renderer, retryCallback, filters = {}
        } = config;
        
        const containerEl = typeof container === 'string' ? document.getElementById(container) : container;
        if (!containerEl) return;

        try {
            Utils.showLoading(containerEl, loadingMessage);
            
            const params = new URLSearchParams();
            Object.keys(filters).forEach(key => {
                if (filters[key] !== null && filters[key] !== '') {
                    params.append(key, filters[key]);
                }
            });
            
            const fullUrl = `${url}${params.toString() ? '?' + params.toString() : ''}`;
            const result = await this.get(fullUrl);
            
            if (result.success && result.offers?.length > 0) {
                renderer ? renderer(result.offers) : containerEl.innerHTML = JSON.stringify(result.offers);
            } else {
                Utils.showEmpty(containerEl, emptyTitle, emptyDescription, emptyAction);
            }
        } catch (error) {
            Utils.showError(containerEl, '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ' + error.message, retryCallback);
        }
    }
};

// ===== –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –í–ö–õ–ê–î–û–ö =====
function switchTab(tabName) {

    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    document.querySelectorAll('.nav-card').forEach(card => card.classList.remove('active'));
    document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));

    const activeCard = document.querySelector(`[data-tab="${tabName}"]`);
    const activeContent = document.getElementById(tabName);

    if (activeCard) activeCard.classList.add('active');
    if (activeContent) activeContent.classList.add('active');

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
    const tabActions = {
        'my-offers': loadMyOffers,
        'create-offer': initializeOffersManager,
        'find-offer': () => setTimeout(() => loadAvailableOffers({}), 100),
    };

    if (tabActions[tabName]) {
        tabActions[tabName]();
    }
}

// ===== –†–ï–ù–î–ï–†–ò–ù–ì –û–§–§–ï–†–û–í =====
const OfferRenderer = {
    renderOffers(offers) {
        const container = document.getElementById('offersGrid');

        if (!container) {
            return;
        }

        if (!offers?.length) {
            Utils.showEmpty(container, '–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ñ—Ñ–µ—Ä–æ–≤',
                '–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –æ—Ñ—Ñ–µ—Ä, –Ω–∞–∂–∞–≤ –Ω–∞ "–°–æ–∑–¥–∞—Ç—å –æ—Ñ—Ñ–µ—Ä"',
                '<button class="btn btn-primary" onclick="switchTab(\'create-offer\')">–°–æ–∑–¥–∞—Ç—å –æ—Ñ—Ñ–µ—Ä</button>'
            );
            return;
        }

        container.innerHTML = offers.map(offer => this.renderOfferCard(offer)).join('');
    },

    renderOfferCard(offer) {
        const {
            id, title = '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è', description = '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è',
            price = 0, budget_total = 0, currency = 'RUB', category = 'general',
            status = 'active', response_count = 0, created_at = '',
            creator_username = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π', creator_name = '', 
            creator_telegram_id = 'N/A', creator_db_id = 'N/A'
        } = offer;

        const displayPrice = budget_total || price || 0;
        const formattedPrice = Utils.formatPrice(displayPrice);
        const formattedDate = Utils.formatDate(created_at);
        let shortDescription = description.length > 80 ? description.substring(0, 80) + '...' : description;
        
        // –î–ª—è —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ—è—Å–Ω–µ–Ω–∏–µ
        if (status === 'draft') {
            shortDescription = 'üìù –ß–µ—Ä–Ω–æ–≤–∏–∫ —Ç—Ä–µ–±—É–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è - –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è. ' + shortDescription;
        }
        const shortTitle = title.length > 25 ? title.substring(0, 25) + '...' : title;

        const actionButtons = this.getActionButtons(id, status, title, response_count);
        const creatorDisplay = creator_name ? creator_name : (creator_username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π');

        return `
            <div class="offer-card-compact" data-offer-id="${id}" style="background: white; border: 1px solid #e2e8f0; border-radius: 8px; padding: 12px; margin-bottom: 12px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); position: relative;">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
                    <h3 style="margin: 0; color: #2d3748; font-size: 14px; font-weight: 600; flex: 1;">${shortTitle}</h3>
                    ${Templates.statusBadge(status)}
                </div>
                
                <div style="margin-bottom: 6px; font-size: 10px; color: #68d391; font-weight: 500;">
                    üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å: ${creatorDisplay}
                </div>
                
                <div style="margin-bottom: 8px;">
                    <span style="font-size: 18px; font-weight: bold; color: #667eea;">${formattedPrice}</span>
                    <span style="font-size: 12px; color: #718096; margin-left: 4px;">${currency}</span>
                    <div style="font-size: 10px; color: #a0aec0;">–æ–±—â–∏–π –±—é–¥–∂–µ—Ç</div>
                </div>
                
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 8px; font-size: 11px; margin-bottom: 8px;">
                    <div style="display: flex; justify-content: space-between;">
                        <span style="color: #718096;">üìÅ</span>
                        <span style="font-weight: 500; text-align: right;">${category}</span>
                    </div>
                    <div style="display: flex; justify-content: space-between;">
                        <span style="color: #718096;">üí¨</span>
                        <span style="font-weight: 500; text-align: right;">${response_count}</span>
                    </div>
                    <div style="display: flex; justify-content: space-between; grid-column: 1 / -1;">
                        <span style="color: #718096;">üìÖ</span>
                        <span style="font-weight: 500;">${formattedDate}</span>
                    </div>
                </div>
                
                <div style="background: #f7fafc; padding: 8px; border-radius: 4px; margin-bottom: 8px; font-size: 11px; line-height: 1.3; color: #4a5568;">${shortDescription}</div>
                
                <div style="display: flex; gap: 4px; flex-wrap: wrap;">
                    ${actionButtons}
                </div>
                
                <div style="margin-top: 4px; font-size: 9px; color: #a0aec0; text-align: right;">
                    –û—Ñ—Ñ–µ—Ä ID: ${id} | –°–æ–∑–¥–∞—Ç–µ–ª—å: ${creator_db_id} (TG: ${creator_telegram_id})
                </div>
            </div>
        `;
    },

    getActionButtons(id, status, title, responseCount) {
        const baseButtonStyle = 'padding: 4px 8px; border-radius: 4px; cursor: pointer; font-size: 10px; flex: 1;';
        const buttonConfigs = {
            active: [
                { text: '‚è∏Ô∏è –ü–∞—É–∑–∞', color: '#ed8936', action: `pauseOffer(${id}, this)` },
                { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', color: '#e53e3e', action: `cancelOffer(${id}, '${title.replace(/'/g, "\\'")}', this)` }
            ],
            paused: [
                { text: '‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å', color: '#48bb78', action: `resumeOffer(${id}, this)` },
                { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', color: '#e53e3e', action: `cancelOffer(${id}, '${title.replace(/'/g, "\\'")}', this)` }
            ],
            cancelled: [
                { text: 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', color: '#e53e3e', action: `deleteOffer(${id}, '${title.replace(/'/g, "\\'")}', this)`, flex: '2' }
            ],
            completed: [
                { text: 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', color: '#e53e3e', action: `deleteOffer(${id}, '${title.replace(/'/g, "\\'")}', this)`, flex: '2' }
            ],
            draft: [
                { text: 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', color: '#e53e3e', action: `deleteOffer(${id}, '${title.replace(/'/g, "\\'")}', this)`, flex: '2' }
            ]
        };

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        const detailsButtonText = status === 'draft' ? 'üìù –ó–∞–≤–µ—Ä—à–∏—Ç—å' : 'üëÅÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ';
        
        let buttons = [
            `<button onclick="viewOfferDetails(${id})" style="${baseButtonStyle} border: 1px solid #667eea; background: #667eea; color: white;">${detailsButtonText}</button>`
        ];

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–∫–ª–∏–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤
        if (responseCount > 0 && status !== 'draft') {
            buttons.push(`<button onclick="manageResponses(${id})" style="${baseButtonStyle} border: 1px solid #48bb78; background: #48bb78; color: white;">üí¨ ${responseCount}</button>`);
        }

        const statusButtons = buttonConfigs[status] || [];
        statusButtons.forEach(btn => {
            const flexStyle = btn.flex ? `flex: ${btn.flex};` : 'flex: 1;';
            buttons.push(`<button onclick="${btn.action}" style="${baseButtonStyle} border: 1px solid ${btn.color}; background: ${btn.color}; color: white; ${flexStyle}">${btn.text}</button>`);
        });

        return `<div style="display: flex; gap: 4px; margin-top: 8px;">${buttons.join('')}</div>`;
    }
};

// ===== –ó–ê–ì–†–£–ó–ö–ê –û–§–§–ï–†–û–í =====
async function loadMyOffers() {
    await ApiClient.loadData({
        url: '/api/offers/my',
        container: 'offersGrid', 
        loadingMessage: '–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ñ—Ñ–µ—Ä–æ–≤...',
        emptyTitle: '–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ñ—Ñ–µ—Ä–æ–≤',
        emptyDescription: '–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –æ—Ñ—Ñ–µ—Ä, –Ω–∞–∂–∞–≤ –Ω–∞ "–°–æ–∑–¥–∞—Ç—å –æ—Ñ—Ñ–µ—Ä"',
        emptyAction: Templates.button('–°–æ–∑–¥–∞—Ç—å –æ—Ñ—Ñ–µ—Ä', 'switchTab(\'create-offer\')', 'primary', 'md'),
        renderer: OfferRenderer.renderOffers.bind(OfferRenderer),
        retryCallback: loadMyOffers
    });
}

// ===== –ü–û–ò–°–ö –î–û–°–¢–£–ü–ù–´–• –û–§–§–ï–†–û–í =====
function applyFindFilters() {
    const filters = {
        search: document.getElementById('findOffersSearch')?.value.trim() || '',
        category: document.getElementById('findCategoryFilter')?.value || '',
        min_budget: parseFloat(document.getElementById('findBudgetMin')?.value) || null,
        max_budget: parseFloat(document.getElementById('findBudgetMax')?.value) || null,
        min_subscribers: parseInt(document.getElementById('findMinSubscriber')?.value) || null
    };

    Object.keys(filters).forEach(key => {
        if (filters[key] === null || filters[key] === '') {
            delete filters[key];
        }
    });

    loadAvailableOffers(filters);
}

function clearFindFilters() {
    ['findOffersSearch', 'findCategoryFilter', 'findBudgetMin', 'findBudgetMax', 'findMinSubscriber']
        .forEach(id => {
            const el = document.getElementById(id);
            if (el) el.value = '';
        });
    loadAvailableOffers({});
}

async function loadAvailableOffers(filters = {}) {
    console.log('loadAvailableOffers –≤—ã–∑–≤–∞–Ω–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏:', filters);
    await ApiClient.loadData({
        url: '/api/offers',
        container: 'findOffersGrid',
        loadingMessage: '–ü–æ–∏—Å–∫ –æ—Ñ—Ñ–µ—Ä–æ–≤...',
        emptyTitle: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤',
        emptyDescription: '–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –æ—Ñ—Ñ–µ—Ä–æ–≤, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è',
        emptyAction: Templates.button('üìã –ú–æ–∏ –æ—Ñ—Ñ–µ—Ä—ã', 'switchTab(\'my-offers\')', 'primary', 'md'),
        renderer: renderAvailableOffers,
        filters: filters
    });
    
    const loading = document.getElementById('findOffersLoading');
    if (loading) loading.style.display = 'none';
}

async function renderAvailableOffers(offers) {
    console.log('renderAvailableOffers –≤—ã–∑–≤–∞–Ω–∞ —Å –¥–∞–Ω–Ω—ã–º–∏:', offers);
    const container = document.getElementById('findOffersGrid');

    if (!container) {
        console.error('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä findOffersGrid –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }

    if (!offers?.length) {
        console.log('–ù–µ—Ç –æ—Ñ—Ñ–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        Utils.showEmpty(container, '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤',
            '–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –æ—Ñ—Ñ–µ—Ä–æ–≤, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è',
            Templates.button('üìã –ú–æ–∏ –æ—Ñ—Ñ–µ—Ä—ã', 'switchTab(\'my-offers\')', 'primary', 'md')
        );
        return;
    }

    // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ñ—Ñ–µ—Ä–∞ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ—Ç–∫–ª–∏–∫–∞—Ö
    const offersWithResponses = await Promise.all(offers.map(async (offer) => {
        try {
            const responseResult = await ApiClient.get(`/api/offers/${offer.id}/my-responses`);
            const existingResponses = responseResult.success ? responseResult.responses : [];
            return { ...offer, existingResponses };
        } catch (error) {
            console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç–∫–ª–∏–∫–∏ –¥–ª—è –æ—Ñ—Ñ–µ—Ä–∞ ${offer.id}:`, error);
            return { ...offer, existingResponses: [] };
        }
    }));

    container.innerHTML = offersWithResponses.map(offer => {
        const {
            id, title = '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è', description = '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è',
            price = 0, budget_total = 0, currency = 'RUB',
            target_audience = '–ù–µ —É–∫–∞–∑–∞–Ω–æ', requirements = '–ù–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π',
            category = 'general', status = 'active',
            created_at, expires_at,
            creator_username = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä', creator_name = '',
            existingResponses = []
        } = offer;

        const isExpired = expires_at && new Date(expires_at) < new Date();
        const statusClass = isExpired ? 'expired' : status;
        const timeLeft = expires_at ? getTimeUntilExpiry(expires_at) : null;
        
        const displayPrice = budget_total || price;
        const formattedPrice = Utils.formatPrice(displayPrice);
        const shortDescription = description.length > 120 ? description.substring(0, 120) + '...' : description;
        const advertiserName = creator_name ? `${creator_name}` : creator_username;
        const createdDate = Utils.formatDate(created_at);
        
        // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        const categoryNames = {
            'general': '–û–±—â–∏–µ',
            'tech': '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
            'finance': '–§–∏–Ω–∞–Ω—Å—ã',
            'lifestyle': '–û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏',
            'education': '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
            'entertainment': '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',
            'business': '–ë–∏–∑–Ω–µ—Å'
        };
        
        const categoryName = categoryNames[category] || '–î—Ä—É–≥–æ–µ';

        return `
            <div class="available-offer-card" data-offer-id="${id}" style="background: white; border: 1px solid #e2e8f0; border-radius: 8px; padding: 16px; margin-bottom: 16px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
                <div class="offer-header" style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 12px;">
                    <div class="offer-title" style="flex: 1;">
                        <h3 style="margin: 0; color: #2d3748; font-size: 16px; font-weight: 600; line-height: 1.3;">${title}</h3>
                        <div class="offer-meta" style="margin-top: 4px; font-size: 12px; color: #718096;">
                            üë§ ${advertiserName} ‚Ä¢ üìÇ ${categoryName} ‚Ä¢ üìÖ ${createdDate}
                            ${timeLeft ? ` ‚Ä¢ ‚è∞ ${timeLeft.text}` : ''}
                        </div>
                    </div>
                    <div class="offer-price" style="text-align: right; margin-left: 12px;">
                        <div style="font-size: 18px; font-weight: 600; color: #2b6cb0;">${formattedPrice}</div>
                        <div style="font-size: 11px; color: #718096;">${currency}</div>
                    </div>
                </div>
                
                <div class="offer-description" style="margin-bottom: 12px; color: #4a5568; font-size: 14px; line-height: 1.4;">
                    ${shortDescription}
                </div>
                
                <div class="offer-audience" style="margin-bottom: 12px; padding: 8px; background: #f7fafc; border-radius: 6px; font-size: 13px;">
                    <strong>üéØ –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è:</strong> ${target_audience}
                </div>
                
                ${existingResponses.length > 0 ? `
                <div class="response-status" style="margin-bottom: 12px; padding: 8px; background: #e6fffa; border-left: 4px solid #38b2ac; border-radius: 4px; font-size: 13px;">
                    <strong>üìù –í–∞—à–∏ –æ—Ç–∫–ª–∏–∫–∏:</strong> ${existingResponses.length} —à—Ç.
                    <div style="margin-top: 4px; font-size: 12px; color: #4a5568;">
                        ${existingResponses.map(resp => `
                            <div style="margin-top: 2px;">
                                ‚Ä¢ ${resp.channel.title}: ${ResponseManager.getResponseStatusText(resp.status)}
                            </div>
                        `).join('')}
                    </div>
                </div>
                ` : ''}
                
                <div class="offer-actions" style="display: flex; gap: 8px; justify-content: flex-end;">
                    <button class="btn btn-outline" onclick="viewAvailableOfferDetails(${id})" style="padding: 6px 12px; font-size: 12px; border: 1px solid #e2e8f0; background: white; color: #4a5568; border-radius: 4px;">
                        üëÅÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                    </button>
                    ${existingResponses.length > 0 ? `
                        <button class="btn btn-secondary" onclick="respondToOffer(${id})" style="padding: 6px 12px; font-size: 12px; background: #a0aec0; color: white; border: none; border-radius: 4px;">
                            ‚úÖ –û—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å
                        </button>
                    ` : `
                        <button class="btn btn-primary" onclick="console.log('–ö–Ω–æ–ø–∫–∞ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞–∂–∞—Ç–∞, ID:', ${id}); respondToOffer(${id})" style="padding: 6px 12px; font-size: 12px; background: #4299e1; color: white; border: none; border-radius: 4px;">
                            üì© –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è
                        </button>
                    `}
                </div>
            </div>
        `;
    }).join('');
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
function getTimeUntilExpiry(expiresAt) {
    const now = new Date();
    const expiry = new Date(expiresAt);
    const diffMs = expiry.getTime() - now.getTime();
    
    if (diffMs <= 0) return null;
    
    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
    const diffDays = Math.floor(diffHours / 24);
    
    if (diffDays > 0) {
        return {
            text: `${diffDays} –¥–Ω.`,
            isUrgent: diffDays <= 1
        };
    } else if (diffHours > 0) {
        return {
            text: `${diffHours} —á.`,
            isUrgent: diffHours <= 6
        };
    } else {
        const diffMinutes = Math.floor(diffMs / (1000 * 60));
        return {
            text: `${diffMinutes} –º–∏–Ω.`,
            isUrgent: true
        };
    }
}

// ===== –°–û–ó–î–ê–ù–ò–ï –û–§–§–ï–†–û–í - –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –ú–ï–ù–ï–î–ñ–ï–† =====
class OffersManager {
    constructor() {
        this.currentStep = 1;
        this.totalSteps = 4;
        this.formData = {};
        this.isInitialized = false;
    }

    init() {
        if (this.isInitialized) {
            return;
        }

        this.setupEventListeners();
        this.updateStep(this.currentStep);
        this.isInitialized = true;
    }

    setupEventListeners() {
        const controls = {
            nextBtn: () => this.nextStep(),
            prevBtn: () => this.prevStep(),
            submitBtn: () => this.submitOffer()
        };

        Object.keys(controls).forEach(id => {
            const element = document.getElementById(id);
            if (element) {
                element.addEventListener('click', (e) => {
                    e.preventDefault();
                    controls[id]();
                });
            }
        });

        this.setupChips();
        this.setupsubscriberlider();
        this.setupPreviewUpdaters();
    }

    setupChips() {
        document.querySelectorAll('.chip').forEach(chip => {
            chip.addEventListener('click', function() {
                this.classList.toggle('selected');
            });
        });
    }

    setupsubscriberlider() {
        const subscriberRange = document.querySelector('input[name="min_subscribers"]');
        const subscriberValue = document.getElementById('subscriberValue');

        if (subscriberRange && subscriberValue) {
            subscriberRange.addEventListener('input', function() {
                const value = parseInt(this.value);
                subscriberValue.textContent = value >= 1000000 ? '1M+' :
                                              value >= 1000 ? Math.round(value/1000) + 'K' :
                                              value.toString();
            });
        }
    }

    setupPreviewUpdaters() {
        const updateTriggers = [
            'input[name="title"]',
            'input[name="budget"]',
            'select[name="geography"]'
        ];

        updateTriggers.forEach(selector => {
            const element = document.querySelector(selector);
            if (element) {
                element.addEventListener('input', () => this.updatePreview());
                element.addEventListener('change', () => this.updatePreview());
            }
        });

        document.querySelectorAll('.chip').forEach(chip => {
            chip.addEventListener('click', () => {
                setTimeout(() => this.updatePreview(), 10);
            });
        });
    }

    updateStep(step) {

        document.querySelectorAll('.step').forEach((stepEl, index) => {
            const stepNumber = index + 1;
            stepEl.classList.toggle('active', stepNumber === step);
            stepEl.classList.toggle('completed', stepNumber < step);
        });

        document.querySelectorAll('.form-step').forEach(stepEl => {
            stepEl.style.display = stepEl.dataset.step == step ? 'block' : 'none';
        });

        const controls = {
            prevBtn: step > 1,
            nextBtn: step < this.totalSteps,
            submitBtn: step === this.totalSteps
        };

        Object.keys(controls).forEach(id => {
            const element = document.getElementById(id);
            if (element) {
                element.style.display = controls[id] ? 'inline-flex' : 'none';
            }
        });

        const progress = ((step - 1) / (this.totalSteps - 1)) * 100;
        const progressEl = document.getElementById('stepperProgress');
        if (progressEl) {
            progressEl.style.width = progress + '%';
        }

        if (step === this.totalSteps) {
            this.updatePreview();
        }

        this.currentStep = step;
    }

    nextStep() {
        if (this.currentStep < this.totalSteps) {
            this.updateStep(this.currentStep + 1);
        }
    }

    prevStep() {
        if (this.currentStep > 1) {
            this.updateStep(this.currentStep - 1);
        }
    }

    updatePreview() {
        const previewUpdates = {
            previewTitle: () => document.querySelector('input[name="title"]')?.value || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
            previewBudget: () => {
                const budget = document.querySelector('input[name="budget"]')?.value;
                const maxPrice = document.querySelector('input[name="max_price"]')?.value;

                let budgetText = '';
                if (budget) budgetText += `${Utils.formatPrice(budget)} RUB –æ–±—â–∏–π`;
                if (maxPrice) {
                    if (budgetText) budgetText += ' | ';
                    budgetText += `${Utils.formatPrice(maxPrice)} RUB –∑–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ`;
                } else if (budget) {
                    const estimatedMaxPrice = Math.min(parseFloat(budget) * 0.1, 50000);
                    if (budgetText) budgetText += ' | ';
                    budgetText += `~${Utils.formatPrice(estimatedMaxPrice)} RUB –∑–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ`;
                }
                return budgetText || '–ù–µ —É–∫–∞–∑–∞–Ω';
            },
            previewTopics: () => {
                const ageGroups = ['18-25 –ª–µ—Ç', '26-35 –ª–µ—Ç', '36-45 –ª–µ—Ç', '46+ –ª–µ—Ç'];
                const allSelected = Array.from(document.querySelectorAll('.chip.selected'))
                    .map(chip => chip.textContent.trim());
                const topics = allSelected.filter(text => !ageGroups.includes(text));
                return topics.length > 0 ? topics.join(', ') : '–ù–µ –≤—ã–±—Ä–∞–Ω—ã';
            },
            previewAudience: () => {
                const ageGroups = ['18-25 –ª–µ—Ç', '26-35 –ª–µ—Ç', '36-45 –ª–µ—Ç', '46+ –ª–µ—Ç'];
                const allSelected = Array.from(document.querySelectorAll('.chip.selected'))
                    .map(chip => chip.textContent.trim());
                const audience = allSelected.filter(text => ageGroups.includes(text));
                return audience.length > 0 ? audience.join(', ') : '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
            },
            previewGeography: () => {
                const geographySelect = document.querySelector('select[name="geography"]');
                const geographyText = {
                    'russia': '–†–æ—Å—Å–∏—è',
                    'cis': '–°–ù–ì',
                    'europe': '–ï–≤—Ä–æ–ø–∞',
                    'world': '–í–µ—Å—å –º–∏—Ä'
                };
                return geographyText[geographySelect?.value] || '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
            }
        };

        Object.keys(previewUpdates).forEach(elementId => {
            const element = document.getElementById(elementId);
            if (element) {
                element.textContent = previewUpdates[elementId]();
            }
        });
    }

    async submitOffer() {
        const submitBtn = document.getElementById('submitBtn');
        const originalText = submitBtn?.textContent;

        try {
            if (submitBtn) {
                submitBtn.disabled = true;
                submitBtn.textContent = '‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ...';
            }

            const data = this.collectFormData();

            const result = await ApiClient.post('/api/offers', data);

            if (result.success) {
                showChannelSelectionModal(result.offer.id, result.offer.title);
                this.resetForm();
                switchTab('my-offers');
            } else {
                throw new Error(result.error || result.errors?.join(', ') || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞');
            }
        } catch (error) {
            alert(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
        } finally {
            if (submitBtn) {
                submitBtn.disabled = false;
                submitBtn.textContent = originalText;
            }
        }
    }

    collectFormData() {
        const getFieldValue = (name, defaultValue = '') => {
            const field = document.querySelector(`[name="${name}"]`);
            return field?.value?.trim() || defaultValue;
        };

        const data = {
            title: getFieldValue('title'),
            description: getFieldValue('description'),
            content: getFieldValue('description'), // –î—É–±–ª–∏—Ä—É–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            currency: 'RUB',
            category: getFieldValue('category', 'general')
        };

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã —Å fallback –ª–æ–≥–∏–∫–æ–π
        const maxPrice = parseFloat(getFieldValue('max_price')) || 0;
        const budget = parseFloat(getFieldValue('budget')) || 0;

        if (maxPrice > 0) {
            data.price = maxPrice;
        } else if (budget > 0) {
            data.price = Math.min(budget * 0.1, 50000);
        } else {
            throw new Error('–£–∫–∞–∂–∏—Ç–µ –æ–±—â–∏–π –±—é–¥–∂–µ—Ç –∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∑–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ');
        }

        if (budget > 0) data.budget_total = budget;

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        const additionalFields = ['geography', 'min_subscribers'];
        additionalFields.forEach(field => {
            const value = getFieldValue(field);
            if (value) data[field] = field === 'min_subscribers' ? parseInt(value) : value;
        });

        // –°–æ–±–∏—Ä–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —á–∏–ø—ã
        const selectedChips = Array.from(document.querySelectorAll('.chip.selected'))
            .map(chip => chip.textContent.trim());

        if (selectedChips.length > 0) {
            data.topics = selectedChips.join(', ');
            data.target_audience = selectedChips.join(', ');
        }

        return data;
    }

    resetForm() {
        document.getElementById('offerForm')?.reset();
        document.querySelectorAll('.chip.selected').forEach(chip => {
            chip.classList.remove('selected');
        });
        this.updateStep(1);
    }
}

// ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –û–¢–ö–õ–ò–ö–ê–ú–ò =====
const ResponseManager = {
    async acceptOffer(offerId) {
        try {
            const channelsResult = await ApiClient.get('/api/channels/my');

            if (!channelsResult.success) {
                throw new Error(channelsResult.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–∞–ª–æ–≤');
            }

            const verifiedChannels = (channelsResult.channels || []).filter(channel =>
                channel.is_verified === true || channel.is_verified === 1 || channel.status === 'verified'
            );

            if (verifiedChannels.length === 0) {
                alert('–£ –≤–∞—Å –Ω–µ—Ç –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∏ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ –∫–∞–Ω–∞–ª –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –∫–∞–Ω–∞–ª—ã".');
                return;
            }

            const offerCard = document.querySelector(`[data-offer-id="${offerId}"]`);
            const titleElement = offerCard?.querySelector('h3');
            const offer = {
                id: offerId,
                title: titleElement?.textContent?.trim() || '–û—Ñ—Ñ–µ—Ä'
            };

            this.showResponseModal(offerId, offer, verifiedChannels);
        } catch (error) {
            alert(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
        }
    },

    async showResponseModal(offerId, offer, verifiedChannels) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ—Ç–∫–ª–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —ç—Ç–æ—Ç –æ—Ñ—Ñ–µ—Ä
        let existingResponses = [];
        try {
            const responseResult = await ApiClient.get(`/api/offers/${offerId}/my-responses`);
            if (responseResult.success) {
                existingResponses = responseResult.responses || [];
            }
        } catch (error) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ—Ç–∫–ª–∏–∫–∏:', error);
        }

        const channelOptions = verifiedChannels.map(channel => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ—Ç–∫–ª–∏–∫ —Å —ç—Ç–∏–º –∫–∞–Ω–∞–ª–æ–º
            const existingResponse = existingResponses.find(r => r.channel_id === channel.id);
            const statusText = existingResponse ? this.getResponseStatusText(existingResponse.status) : '';
            
            return {
                value: channel.id,
                text: `${channel.title} (@${channel.username}) - ${Utils.formatNumber(channel.subscriber_count)} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤${statusText}`,
                disabled: existingResponse ? true : false,
                existingResponse: existingResponse
            };
        });

        // –°–æ–∑–¥–∞–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è select —Å —É—á–µ—Ç–æ–º —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–∫–ª–∏–∫–æ–≤
        const selectOptions = channelOptions.map(option => {
            const disabledAttr = option.disabled ? 'disabled' : '';
            const selectedAttr = '';
            return `<option value="${option.value}" ${disabledAttr} ${selectedAttr}>${option.text}</option>`;
        }).join('');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ—Ç–∫–ª–∏–∫–∞—Ö
        let existingResponsesWarning = '';
        if (existingResponses.length > 0) {
            existingResponsesWarning = `
                <div class="alert alert-info" style="margin-bottom: 20px;">
                    <span>üí°</span>
                    <div>
                        <strong>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</strong> –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å ${existingResponses.length} –æ—Ç–∫–ª–∏–∫(–æ–≤) –Ω–∞ —ç—Ç–æ—Ç –æ—Ñ—Ñ–µ—Ä.
                        –ö–∞–Ω–∞–ª—ã —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –æ—Ç–∫–ª–∏–∫–∞–º–∏ –æ—Ç–º–µ—á–µ–Ω—ã –∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞.
                    </div>
                </div>
            `;
        }

        const formContent = `
            ${Templates.infoCard(offer.title, '', 'üéØ')}
            ${existingResponsesWarning}
            <form id="responseForm">
                <div class="form-field">
                    <label for="selectedChannel">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª <span class="required">*</span></label>
                    <select id="selectedChannel" required>
                        <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª...</option>
                        ${selectOptions}
                    </select>
                </div>
                ${Templates.formField('–°–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—é', 'textarea', 'responseMessage', { 
                    required: true, 
                    placeholder: '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –ø–æ—á–µ–º—É –≤–∞—à –∫–∞–Ω–∞–ª –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —ç—Ç–æ–≥–æ –æ—Ñ—Ñ–µ—Ä–∞...',
                    style: 'min-height:120px;'
                })}
                <div class="button-group">
                    ${Templates.button('–û—Ç–º–µ–Ω–∞', 'closeResponseModal(\'responseModal\')', 'outline', 'md')}
                    <button type="submit" class="btn-primary btn-md">–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∫–ª–∏–∫</button>
                </div>
            </form>
        `;

        const modal = document.createElement('div');
        const modalHTML = Templates.modal('üìù –û—Ç–∫–ª–∏–∫ –Ω–∞ –æ—Ñ—Ñ–µ—Ä', formContent, 'responseModal');
        modal.innerHTML = modalHTML;
        const modalElement = modal.firstElementChild;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å 'active' –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        if (modalElement) {
            modalElement.classList.add('active');
        }
        
        document.body.appendChild(modalElement);

        // –ñ–¥–µ–º, –ø–æ–∫–∞ —ç–ª–µ–º–µ–Ω—Ç –ø–æ—è–≤–∏—Ç—Å—è –≤ DOM, –∑–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        setTimeout(() => {
            const form = document.getElementById('responseForm');
            if (form) {
                form.addEventListener('submit', async (e) => {
                    e.preventDefault();
                    await this.submitResponse(offerId, modalElement);
                });
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
            const closeButton = modalElement.querySelector('.modal-close');
            if (closeButton) {
                console.log('–î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è');
                closeButton.addEventListener('click', (e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    console.log('–ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–∞–∂–∞—Ç–∞ —á–µ—Ä–µ–∑ addEventListener');
                    closeResponseModal('responseModal');
                });
            }
        }, 100);
    },

    getResponseStatusText(status) {
        const statusMap = {
            'pending': ' [‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞]',
            'accepted': ' [‚úÖ –ü—Ä–∏–Ω—è—Ç]',
            'rejected': ' [‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω]',
            'viewed': ' [üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω]'
        };
        return statusMap[status] || ` [${status}]`;
    },

    async submitResponse(offerId, modal) {
        const selectedChannelId = document.getElementById('selectedChannel').value;
        const message = document.getElementById('responseMessage').value.trim();

        if (!selectedChannelId || !message) {
            alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
            return;
        }

        try {
            const result = await ApiClient.post(`/api/offers/${offerId}/respond`, {
                channel_id: parseInt(selectedChannelId),
                message: message
            });

            if (result.success) {
                alert('‚úÖ ' + result.message);
                modal.remove();

                const offerCard = document.querySelector(`[data-offer-id="${offerId}"]`);
                const respondButton = offerCard?.querySelector('button[onclick*="respondToOffer"]');
                if (respondButton) {
                    respondButton.style.background = '#a0aec0';
                    respondButton.textContent = '‚úÖ –û—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω';
                    respondButton.disabled = true;
                    respondButton.onclick = null;
                }
            } else {
                throw new Error(result.error || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∫–ª–∏–∫–∞');
            }
        } catch (error) {
            alert(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
        }
    },

    async manageResponses(offerId) {

        try {
            const result = await ApiClient.get(`/api/offers/${offerId}/responses`);

            if (!result.success) {
                throw new Error(result.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–∫–ª–∏–∫–æ–≤');
            }

            const offer = { id: offerId, title: result.offer?.title || `–û—Ñ—Ñ–µ—Ä #${offerId}` };
            this.showResponsesModal(offer, result.responses || []);
        } catch (error) {
            alert(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–∫–ª–∏–∫–æ–≤: ${error.message}`);
        }
    },

    showResponsesModal(offer, responses) {
        const modal = document.createElement('div');
        modal.className = 'modal';
        modal.style.background = 'rgba(0,0,0,0.8)';

    modal.innerHTML = `
        <div style="background: white; border-radius: 12px; padding: 24px; max-width: 800px; width: 100%; max-height: 90vh; overflow-y: auto; position: relative;">
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                <h3 style="margin: 0; color: #2d3748; font-size: 20px;">üí¨ –û—Ç–∫–ª–∏–∫–∏ –Ω–∞ –æ—Ñ—Ñ–µ—Ä "${offer.title}"</h3>
                <button onclick="closeModal()" class="modal-close">&times;</button>
            </div>
            
            <div style="background: #f7fafc; padding: 16px; border-radius: 8px; margin-bottom: 20px;">
                <h4 style="margin: 0 0 4px 0; color: #2d3748;">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h4>
                <p style="margin: 0; color: #718096; font-size: 14px;">–í—Å–µ–≥–æ –æ—Ç–∫–ª–∏–∫–æ–≤: <strong>${responses.length}</strong></p>
            </div>

            <div>${responses.length > 0 ? this.renderResponsesList(responses) : this.renderEmptyResponses()}</div>
        </div>
    `;

    document.body.appendChild(modal);
    document.body.style.overflow = 'hidden';

    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            modal.remove();
            document.body.style.overflow = 'auto';
        }
    });
},

    renderResponsesList(responses) {
        return responses.map(response => {
            const channelTitle = response.channel_title || '–ö–∞–Ω–∞–ª –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
            const channelUsername = response.channel_username || 'username';
            const channelsubscriber = response.channel_subscriber || 0;
            const message = response.message || '';
            const status = response.status || 'pending';
            const placement = response.placement || null;

            return `
                <div style="border: 1px solid #e2e8f0; border-radius: 8px; padding: 16px; margin-bottom: 12px; background: white;">
                    <div style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 12px;">
                        <div style="flex: 1;">
                            <h5 style="margin: 0 0 4px 0; color: #2d3748; font-size: 16px;">üì∫ ${channelTitle}</h5>
                            <div style="font-size: 14px; color: #718096;">@${channelUsername} ‚Ä¢ üë• ${Utils.formatNumber(channelsubscriber)} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤</div>
                        </div>
                        <div style="padding: 4px 12px; border-radius: 20px; font-size: 12px; font-weight: 600; background: ${this.getStatusColor(status)}; color: #2d3748;">${this.getStatusText(status)}</div>
                    </div>

                    ${message ? `
                        <div style="background: #f7fafc; padding: 12px; border-radius: 6px; margin: 12px 0; border-left: 4px solid #4299e1;">
                            <div style="font-size: 12px; color: #4299e1; font-weight: 600; margin-bottom: 4px;">üí¨ –°–û–û–ë–©–ï–ù–ò–ï:</div>
                            <div style="font-size: 14px; color: #2d3748;">${message}</div>
                        </div>
                    ` : ''}

                    ${placement ? this.renderPlacementInfo(placement) : ''}

                    <div style="display: flex; gap: 8px; margin-top: 12px;">
                        ${status === 'pending' ? `
                            <button onclick="ResponseManager.respondToResponse('${response.id}', 'accepted')" style="padding: 6px 12px; background: #48bb78; color: white; border: none; border-radius: 4px; cursor: pointer; font-size: 12px;">‚úÖ –ü—Ä–∏–Ω—è—Ç—å</button>
                            <button onclick="ResponseManager.showRejectModal('${response.id}')" style="padding: 6px 12px; background: #f56565; color: white; border: none; border-radius: 4px; cursor: pointer; font-size: 12px;">‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å</button>
                        ` : ''}
                        ${status === 'accepted' && placement && placement.status === 'pending_placement' ? `
                            <button onclick="ResponseManager.cancelPlacement('${placement.id}')" style="padding: 6px 12px; background: #ed8936; color: white; border: none; border-radius: 4px; cursor: pointer; font-size: 12px;">üö´ –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ</button>
                        ` : ''}
                    </div>
                </div>
            `;
        }).join('');
    },

    renderPlacementInfo(placement) {
        if (!placement) return '';

        const deadline = new Date(placement.deadline);
        const now = new Date();
        const isExpired = deadline < now;
        const timeLeft = this.getTimeLeft(deadline);

        return `
            <div style="background: #e6fffa; padding: 12px; border-radius: 6px; margin: 12px 0; border-left: 4px solid #38b2ac;">
                <div style="font-size: 12px; color: #38b2ac; font-weight: 600; margin-bottom: 8px;">üìÖ –†–ê–ó–ú–ï–©–ï–ù–ò–ï</div>
                <div style="font-size: 14px; color: #2d3748; margin-bottom: 4px;">
                    üí∞ –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ: <strong>${placement.funds_reserved || 0} —Ä—É–±.</strong>
                </div>
                <div style="font-size: 14px; color: #2d3748; margin-bottom: 4px;">
                    üìÖ –î–µ–¥–ª–∞–π–Ω: <strong>${deadline.toLocaleString('ru-RU')}</strong>
                </div>
                <div style="font-size: 14px; color: ${isExpired ? '#e53e3e' : '#38b2ac'}; font-weight: 600;" data-deadline="${placement.deadline}">
                    ‚è∞ ${isExpired ? '–°—Ä–æ–∫ –∏—Å—Ç—ë–∫' : timeLeft}
                </div>
                ${placement.ereit_token ? `
                    <div style="font-size: 12px; color: #718096; margin-top: 4px;">
                        üîó –¢–æ–∫–µ–Ω: <code>${placement.ereit_token}</code>
                    </div>
                ` : ''}
            </div>
        `;
    },

    getTimeLeft(deadline) {
        const now = new Date();
        const diff = deadline - now;
        
        if (diff <= 0) return '–°—Ä–æ–∫ –∏—Å—Ç—ë–∫';
        
        const hours = Math.floor(diff / (1000 * 60 * 60));
        const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
        
        if (hours > 0) {
            return `–û—Å—Ç–∞–ª–æ—Å—å: ${hours}—á ${minutes}–º–∏–Ω`;
        } else {
            return `–û—Å—Ç–∞–ª–æ—Å—å: ${minutes}–º–∏–Ω`;
        }
    },

    async cancelPlacement(placementId) {
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
            return;
        }

        try {
            const result = await ApiClient.patch(`/api/offers/placements/${placementId}/cancel`, {
                reason: '–û—Ç–º–µ–Ω–µ–Ω–æ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª–µ–º'
            });

            if (result.success) {
                alert('‚úÖ –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ');
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–∫–ª–∏–∫–æ–≤
                location.reload();
            } else {
                throw new Error(result.error || '–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Ä–∞–∑–º–µ—â–µ–Ω–∏—è');
            }
        } catch (error) {
            alert(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
        }
    },

    showRejectModal(responseId) {
        const reasons = [
            '–ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –∞—É–¥–∏—Ç–æ—Ä–∏—è –∫–∞–Ω–∞–ª–∞',
            '–°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞',
            '–ö–∞–Ω–∞–ª –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º',
            '–î—Ä—É–≥–∞—è –ø—Ä–∏—á–∏–Ω–∞'
        ];

        const reasonOptions = reasons.map(reason => 
            `<label style="display: block; margin: 8px 0; cursor: pointer;">
                <input type="radio" name="rejectReason" value="${reason}" style="margin-right: 8px;">
                ${reason}
            </label>`
        ).join('');

        const modalContent = `
            <div style="background: white; border-radius: 12px; padding: 24px; max-width: 500px; width: 100%; position: relative;">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                    <h3 style="margin: 0; color: #2d3748; font-size: 18px;">‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</h3>
                    <button onclick="closeModal('rejectModal')" class="modal-close" style="background: none; border: none; font-size: 24px; cursor: pointer; color: #718096;">&times;</button>
                </div>
                
                <div style="margin-bottom: 20px;">
                    <p style="color: #4a5568; margin-bottom: 16px;">–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:</p>
                    
                    <form id="rejectForm">
                        <div style="margin-bottom: 16px;">
                            ${reasonOptions}
                        </div>
                        
                        <div id="customReasonBlock" style="display: none; margin-top: 12px;">
                            <label style="display: block; margin-bottom: 8px; font-weight: 600; color: #2d3748;">
                                –û–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É:
                            </label>
                            <textarea 
                                id="customReasonText" 
                                placeholder="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è..."
                                style="width: 100%; min-height: 80px; padding: 8px; border: 1px solid #e2e8f0; border-radius: 4px; resize: vertical;"
                            ></textarea>
                        </div>
                        
                        <div style="display: flex; gap: 12px; margin-top: 20px;">
                            <button type="button" onclick="closeModal('rejectModal')" style="flex: 1; padding: 10px; background: #e2e8f0; color: #4a5568; border: none; border-radius: 6px; cursor: pointer;">
                                –û—Ç–º–µ–Ω–∞
                            </button>
                            <button type="submit" style="flex: 1; padding: 10px; background: #f56565; color: white; border: none; border-radius: 6px; cursor: pointer;">
                                –û—Ç–∫–ª–æ–Ω–∏—Ç—å
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        `;

        const modal = document.createElement('div');
        modal.id = 'rejectModal';
        modal.className = 'modal';
        modal.className = 'modal-backdrop';
        modal.innerHTML = modalContent;
        
        document.body.appendChild(modal);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–æ–∫
        const radioInputs = modal.querySelectorAll('input[name="rejectReason"]');
        const customReasonBlock = modal.querySelector('#customReasonBlock');
        
        radioInputs.forEach(input => {
            input.addEventListener('change', function() {
                if (this.value === '–î—Ä—É–≥–∞—è –ø—Ä–∏—á–∏–Ω–∞') {
                    customReasonBlock.style.display = 'block';
                } else {
                    customReasonBlock.style.display = 'none';
                }
            });
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
        modal.querySelector('#rejectForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const selectedReason = modal.querySelector('input[name="rejectReason"]:checked');
            if (!selectedReason) {
                alert('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è');
                return;
            }

            let reason = selectedReason.value;
            if (reason === '–î—Ä—É–≥–∞—è –ø—Ä–∏—á–∏–Ω–∞') {
                const customText = modal.querySelector('#customReasonText').value.trim();
                if (!customText) {
                    alert('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è');
                    return;
                }
                reason = customText;
            }

            await ResponseManager.respondToResponse(responseId, 'rejected', reason);
            closeModal('rejectModal');
        });
    },

    renderEmptyResponses() {
        return `
            <div style="text-align: center; padding: 40px 20px;">
                <div style="font-size: 48px; margin-bottom: 16px;">üì≠</div>
                <h4 style="margin: 0 0 8px 0; color: #2d3748;">–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∫–ª–∏–∫–æ–≤</h4>
                <p style="margin: 0; color: #718096;">–û—Ç–∫–ª–∏–∫–∏ –Ω–∞—á–Ω—É—Ç –ø–æ—Å—Ç—É–ø–∞—Ç—å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.</p>
            </div>
        `;
    },

    getStatusText(status) {
        const texts = {
            'pending': '–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏',
            'accepted': '–ü—Ä–∏–Ω—è—Ç',
            'rejected': '–û—Ç–∫–ª–æ–Ω—ë–Ω',
            'pending_placement': '–û–∂–∏–¥–∞–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è',
            'placed': '–†–∞–∑–º–µ—â–µ–Ω–æ',
            'expired': '–°—Ä–æ–∫ –∏—Å—Ç—ë–∫'
        };
        return texts[status] || status;
    },

    getStatusColor(status) {
        const colors = {
            'pending': '#feb2b2',
            'accepted': '#9ae6b4',
            'rejected': '#fed7d7',
            'pending_placement': '#fef5e7',
            'placed': '#c6f6d5',
            'expired': '#fed7d7'
        };
        return colors[status] || '#e2e8f0';
    },

    async respondToResponse(responseId, action, reason = '') {

        try {
            let message = reason || '';
            if (action === 'rejected' && !message) {
                message = prompt('–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):') || '';
            }

            const result = await ApiClient.patch(`/api/offers/responses/${responseId}/status`, {
                status: action,
                message: message
            });

            if (result.success) {
                const actionText = action === 'accepted' ? '–ø—Ä–∏–Ω—è—Ç' : '–æ—Ç–∫–ª–æ–Ω—ë–Ω';
                alert(`‚úÖ –û—Ç–∫–ª–∏–∫ ${actionText}`);


                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
                document.querySelector('div[style*="position: fixed"]')?.remove();
                document.body.style.overflow = 'auto';
                setTimeout(() => loadMyOffers(), 500);
            } else {
                throw new Error(result.error || '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∫–ª–∏–∫–∞');
            }
        } catch (error) {
            alert(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
        }
    }
};


// ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê–ú–ò –û–§–§–ï–†–û–í =====
const OfferStatusManager = {
    async updateStatus(offerId, newStatus, reason = '', buttonElement = null, loadingText = '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...') {
        const originalText = buttonElement?.textContent;

        try {
            if (buttonElement) {
                buttonElement.disabled = true;
                buttonElement.textContent = `‚è≥ ${loadingText}`;
                buttonElement.style.opacity = '0.6';
            }

            const result = await ApiClient.patch(`/api/offers/${offerId}/status`, {
                status: newStatus,
                reason: reason
            });

            if (result.success) {
                alert(`‚úÖ ${result.message}`);
                this.updateOfferCardStatus(offerId, newStatus);
            } else {
                throw new Error(result.error || `–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ ${newStatus}`);
            }
        } catch (error) {
            alert(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);

            if (buttonElement) {
                buttonElement.disabled = false;
                buttonElement.textContent = originalText;
                buttonElement.style.opacity = '1';
            }
        }
    },

    updateOfferCardStatus(offerId, newStatus) {
        const offerCard = document.querySelector(`[data-offer-id="${offerId}"]`);
        if (!offerCard) return;

        const statusBadge = offerCard.querySelector('.offer-header span');
        if (statusBadge) {
            const statusConfig = {
                'active': { bg: '#d4edda', color: '#155724', text: '–ê–∫—Ç–∏–≤–µ–Ω' },
                'paused': { bg: '#fff3cd', color: '#856404', text: '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' },
                'completed': { bg: '#d1ecf1', color: '#0c5460', text: '–ó–∞–≤–µ—Ä—à–µ–Ω' },
                'cancelled': { bg: '#f8d7da', color: '#721c24', text: '–û—Ç–º–µ–Ω–µ–Ω' }
            };

            const config = statusConfig[newStatus] || statusConfig.active;
            statusBadge.textContent = config.text;
            statusBadge.style.background = config.bg;
            statusBadge.style.color = config.color;
        }

        setTimeout(() => loadMyOffers(), 1000);
    },

    async deleteOffer(offerId, offerTitle, buttonElement) {
        if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ—Ñ—Ñ–µ—Ä "${offerTitle}"?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`)) {
            return;
        }

        const originalText = buttonElement?.textContent;

        try {
            if (buttonElement) {
                buttonElement.disabled = true;
                buttonElement.textContent = '‚è≥ –£–¥–∞–ª–µ–Ω–∏–µ...';
                buttonElement.style.opacity = '0.6';
            }

            const result = await ApiClient.delete(`/api/offers/${offerId}`);

            if (result.success) {
                showNotification('success', `‚úÖ ${result.message || '–û—Ñ—Ñ–µ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'}`);

                const offerCard = buttonElement?.closest('.offer-card-compact');
                if (offerCard) {
                    // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
                    offerCard.style.transition = 'all 0.4s ease';
                    offerCard.style.transform = 'scale(0.95)';
                    offerCard.style.opacity = '0';
                    offerCard.style.marginBottom = '0';
                    offerCard.style.height = '0';
                    offerCard.style.padding = '0';
                    offerCard.style.overflow = 'hidden';

                    setTimeout(() => {
                        offerCard.remove();
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –æ—Ñ—Ñ–µ—Ä—ã
                        const remainingOffers = document.querySelectorAll('.offer-card-compact');
                        if (remainingOffers.length === 0) {
                            const offersGrid = document.getElementById('offersGrid');
                            if (offersGrid) {
                                Utils.showEmpty(offersGrid, '–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ñ—Ñ–µ—Ä–æ–≤',
                                    '–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –æ—Ñ—Ñ–µ—Ä, –Ω–∞–∂–∞–≤ –Ω–∞ "–°–æ–∑–¥–∞—Ç—å –æ—Ñ—Ñ–µ—Ä"',
                                    '<button class="btn btn-primary" onclick="switchTab(\'create-offer\')">–°–æ–∑–¥–∞—Ç—å –æ—Ñ—Ñ–µ—Ä</button>'
                                );
                            }
                        }
                    }, 400);
                }
            } else {
                throw new Error(result.error || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞');
            }
        } catch (error) {
            alert(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);

            if (buttonElement) {
                buttonElement.disabled = false;
                buttonElement.textContent = originalText;
                buttonElement.style.opacity = '1';
            }
        }
    }
};

// ===== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò =====
function initializeOffersManager() {
    if (!offersManager) {
        offersManager = new OffersManager();
    }
    setTimeout(() => offersManager.init(), 100);
}

// –°—Ç–∞—Ç—É—Å—ã –æ—Ñ—Ñ–µ—Ä–æ–≤
async function cancelOffer(offerId, offerTitle, buttonElement) {
    if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ—Ñ–µ—Ä "${offerTitle}"?`)) return;
    await OfferStatusManager.updateStatus(offerId, 'cancelled', '–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º', buttonElement, '–û—Ç–º–µ–Ω–∞...');
}

async function pauseOffer(offerId, buttonElement) {
    await OfferStatusManager.updateStatus(offerId, 'paused', '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º', buttonElement, '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞...');
}

async function resumeOffer(offerId, buttonElement) {
    await OfferStatusManager.updateStatus(offerId, 'active', '–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º', buttonElement, '–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...');
}

async function deleteOffer(offerId, offerTitle, buttonElement) {
    await OfferStatusManager.deleteOffer(offerId, offerTitle, buttonElement);
}

// –û—Ç–∫–ª–∏–∫–∏ –∏ –¥–µ—Ç–∞–ª–∏
async function acceptOffer(offerId) {
    await ResponseManager.acceptOffer(offerId);
}

async function manageResponses(offerId) {
    await ResponseManager.manageResponses(offerId);
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –æ—Ñ—Ñ–µ—Ä–∞–º–∏
async function viewAvailableOfferDetails(offerId) {
    try {
        const result = await ApiClient.get(`/api/offers/${offerId}`);
        if (result.success) {
            const offer = result.offer;
            alert(`–î–µ—Ç–∞–ª–∏ –æ—Ñ—Ñ–µ—Ä–∞ "${offer.title}"\n\n–û–ø–∏—Å–∞–Ω–∏–µ: ${offer.description}\n–¶–µ–Ω–∞: ${offer.budget_total || offer.price} ${offer.currency}\n–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: ${offer.target_audience}\n–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: ${offer.requirements || '–ù–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π'}`);
        } else {
            alert('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –æ—Ñ—Ñ–µ—Ä–∞');
        }
    } catch (error) {
        alert('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –æ—Ñ—Ñ–µ—Ä–∞');
    }
}

async function respondToOffer(offerId) {
    await ResponseManager.acceptOffer(offerId);
}

async function viewOfferDetails(offerId) {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—Ñ—Ñ–µ—Ä–∞
        const result = await ApiClient.get(`/api/offers/${offerId}`);
        
        if (!result.success) {
            throw new Error(result.error || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –æ—Ñ—Ñ–µ—Ä–∞');
        }
        
        const offer = result.offer;
        
        // –ï—Å–ª–∏ –æ—Ñ—Ñ–µ—Ä - —á–µ—Ä–Ω–æ–≤–∏–∫, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤
        if (offer.status === 'draft') {
            showChannelSelectionModalForDraft(offerId, offer.title);
        } else {
            // –î–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
            showOfferDetailsModal(offer);
        }
        
    } catch (error) {
        alert(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
}


function setupOffersSearch() {
    const searchInput = document.getElementById('offersSearch');
    if (searchInput) {
        searchInput.addEventListener('input', function() {
            const searchTerm = this.value.toLowerCase().trim();
            document.querySelectorAll('.offer-card-compact').forEach(card => {
                const title = card.querySelector('h3')?.textContent.toLowerCase() || '';
                card.style.display = title.includes(searchTerm) ? 'block' : 'none';
            });
        });
    }
}
// ===== –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û –í–´–ë–û–†–ê –ö–ê–ù–ê–õ–û–í =====

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ—Ä–∞–±–æ—Ç–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∫–∞–∑–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –æ—Ñ—Ñ–µ—Ä–∞

async function showChannelSelectionModal(offerId, offerTitle) {

    try {
        // –ü–æ–ª—É—á–∞–µ–º Telegram User ID (–≥–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞)
        const telegramUserId = getTelegramUserId?.();

        if (!telegramUserId) {
            showNotification('error', '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
            return;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        showLoadingOverlay?.('–ü–æ–¥–±–∏—Ä–∞–µ–º –∫–∞–Ω–∞–ª—ã...');

        // –ó–∞–ø—Ä–æ—Å –∫ API –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
        const response = await fetch(`/api/offers_management/${offerId}/recommended-channels?limit=20`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'X-Telegram-User-Id': telegramUserId
            }
        });


        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ HTTP
        if (!response.ok) {
            const errorText = await response.text();
            hideLoadingOverlay?.();
            showNotification('error', `‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–∞–ª–æ–≤: HTTP ${response.status}: ${errorText}`);
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º fallback —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            setTimeout(() => {
                showNotification('info', '‚úÖ –û—Ñ—Ñ–µ—Ä —Å–æ–∑–¥–∞–Ω! –í—ã–±–æ—Ä –∫–∞–Ω–∞–ª–æ–≤ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –æ—Ñ—Ñ–µ—Ä—ã"');
            }, 2000);
            return;
        }

        // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
        const data = await response.json();

        hideLoadingOverlay?.();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
        if (data && data.success && Array.isArray(data.channels) && data.channels.length > 0) {
            createChannelModal(offerId, offerTitle, data.channels);
        } else if (data && data.success && Array.isArray(data.channels) && data.channels.length === 0) {
            // –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤, –Ω–æ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω
            showNotification('info', 'üì∫ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∫–∞–Ω–∞–ª—ã –ø–æ–∑–∂–µ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –æ—Ñ—Ñ–µ—Ä—ã"');
        } else if (data && data.error) {
            // –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É
            showNotification('error', `‚ùå –û—à–∏–±–∫–∞: ${data.error}`);
            setTimeout(() => {
                showNotification('info', '‚úÖ –û—Ñ—Ñ–µ—Ä —Å–æ–∑–¥–∞–Ω! –í—ã–±–æ—Ä –∫–∞–Ω–∞–ª–æ–≤ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –æ—Ñ—Ñ–µ—Ä—ã"');
            }, 2000);
        } else {
            // –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
            showNotification('error', '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            setTimeout(() => {
                showNotification('info', '‚úÖ –û—Ñ—Ñ–µ—Ä —Å–æ–∑–¥–∞–Ω! –í—ã–±–æ—Ä –∫–∞–Ω–∞–ª–æ–≤ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –æ—Ñ—Ñ–µ—Ä—ã"');
            }, 2000);
        }

    } catch (error) {
        hideLoadingOverlay?.();
        showNotification('error', `‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–∞–ª–æ–≤: ${error.message}`);
        setTimeout(() => {
            showNotification('info', '‚úÖ –û—Ñ—Ñ–µ—Ä —Å–æ–∑–¥–∞–Ω! –í—ã–±–æ—Ä –∫–∞–Ω–∞–ª–æ–≤ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –æ—Ñ—Ñ–µ—Ä—ã"');
        }, 2000);
    }
}


function createChannelModal(offerId, offerTitle, channels, isDraft = false) {
    const modal = document.createElement('div');
    modal.id = 'channelModal';
    modal.className = 'modal';
    modal.style.display = 'flex';
    
    const buttonText = isDraft ? '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å';
    const onClickFunction = isDraft ? `completeDraftAndSendProposals(${offerId})` : `sendProposals(${offerId})`;
    const skipButton = isDraft ? '' : `<button class="btn btn-secondary" onclick="saveOfferAsDraft(${offerId}); closeChannelModal()">–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å</button>`;
    
    modal.innerHTML = `
        <div class="modal-overlay" onclick="closeChannelModal()"></div>
        <div class="modal-content large-modal">
            <div class="modal-header">
                <h2>${isDraft ? 'üìù –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞' : 'üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã'}</h2>
                <button class="modal-close" onclick="closeChannelModal()">&times;</button>
            </div>
            <div class="modal-body">
                <div class="offer-info">
                    <h3>${offerTitle}</h3>
                    <p>–ù–∞–π–¥–µ–Ω–æ: <strong>${channels.length}</strong> –∫–∞–Ω–∞–ª–æ–≤</p>
                </div>
                <div class="channels-list">
                    ${channels.map(ch => `
                        <div class="channel-card nav-card" data-channel-id="${ch.id}" onclick="toggleChannel(this)">
                            <div class="channel-checkbox"></div>
                            <div class="nav-icon">${ch.title.substring(0,2).toUpperCase()}</div>
                            <div class="nav-content">
                                <h3>${ch.title}</h3>
                                <p>@${ch.username || 'no_username'} ‚Ä¢ ${formatSubs(ch.subscriber_count)} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤</p>
                            </div>
                        </div>
                    `).join('')}
                </div>
            </div>
            <div class="modal-footer">
                <span id="selectedCount">–í—ã–±—Ä–∞–Ω–æ: 0</span>
                <div class="modal-actions">
                    ${skipButton}
                    <button class="btn btn-primary" id="sendBtn" onclick="${onClickFunction}" disabled>${buttonText}</button>
                </div>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
}

function toggleChannel(card) {
    const isSelected = card.classList.contains('selected');
    if (isSelected) {
        card.classList.remove('selected');
        card.style.border = '2px solid #e2e8f0';
        card.style.background = 'white';
        const checkbox = card.querySelector('.channel-checkbox');
        if (checkbox) {
            checkbox.innerHTML = '';
        }
    } else {
        card.classList.add('selected');
        card.style.border = '2px solid #4299e1';
        card.style.background = '#ebf8ff';
        const checkbox = card.querySelector('.channel-checkbox');
        if (checkbox) {
            checkbox.innerHTML = '‚úì';
        }
    }
    updateCount();
}

function updateCount() {
    const count = document.querySelectorAll('.channel-card.selected').length;
    document.getElementById('selectedCount').textContent = `–í—ã–±—Ä–∞–Ω–æ: ${count}`;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ (—Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤ –∏ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤)
    const sendBtn = document.getElementById('sendBtn');
    if (sendBtn) {
        sendBtn.disabled = count === 0;
    }
}

async function sendProposals(offerId) {
    const channelIds = Array.from(document.querySelectorAll('.channel-card.selected'))
        .map(card => parseInt(card.dataset.channelId));
    
    try {
        const telegramUserId = getTelegramUserId();
        
        if (!telegramUserId) {
            showNotification('error', '–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Telegram User ID');
            return;
        }
        
        const headers = {
            'Content-Type': 'application/json',
            'X-Telegram-User-Id': telegramUserId,
            'X-User-Id': telegramUserId,
            'telegram-user-id': telegramUserId
        };
        
        const response = await fetch(`/api/offers_management/${offerId}/select-channels`, {
            method: 'POST',
            headers: headers,
            body: JSON.stringify({channel_ids: channelIds, message: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫ —É—á–∞—Å—Ç–∏—é'})
        });
        
        const result = await response.json();
        if (response.ok && result.success) {
            closeChannelModal();
            showNotification('success', `‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ ${channelIds.length} –∫–∞–Ω–∞–ª–æ–≤!`);
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ñ—Ñ–µ—Ä–æ–≤ –¥–ª—è —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤
            setTimeout(() => loadMyOffers(), 1000);
        } else {
            const errorMessage = result.message || result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
            showNotification('error', `–û—à–∏–±–∫–∞: ${errorMessage}`);
        }
    } catch (error) {
        showNotification('error', `–û—à–∏–±–∫–∞: ${error.message}`);
    }
}

async function completeDraftAndSendProposals(offerId) {
    const channelIds = Array.from(document.querySelectorAll('.channel-card.selected'))
        .map(card => parseInt(card.dataset.channelId));
    
    if (channelIds.length === 0) {
        showNotification('warning', '‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–∞–Ω–∞–ª');
        return;
    }
    
    try {
        const telegramUserId = getTelegramUserId();
        
        if (!telegramUserId) {
            showNotification('error', '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram');
            return;
        }
        
        const headers = {
            'Content-Type': 'application/json',
            'X-Telegram-User-Id': telegramUserId,
            'X-User-Id': telegramUserId,
            'telegram-user-id': telegramUserId
        };
        
        // –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ (–æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ active)
        const completeResponse = await fetch(`/api/offers/${offerId}/complete-draft`, {
            method: 'POST',
            headers: headers,
            body: JSON.stringify({
                channel_ids: channelIds
            })
        });
        
        const completeResult = await completeResponse.json();
        
        if (completeResponse.ok && completeResult.success) {
            // –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª—ã
            const proposalsResponse = await fetch(`/api/offers_management/${offerId}/select-channels`, {
                method: 'POST',
                headers: headers,
                body: JSON.stringify({channel_ids: channelIds, message: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫ —É—á–∞—Å—Ç–∏—é'})
            });
            
            const proposalsResult = await proposalsResponse.json();
            
            if (proposalsResponse.ok && proposalsResult.success) {
                closeChannelModal();
                showNotification('success', `‚úÖ –û—Ñ—Ñ–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ ${channelIds.length} –∫–∞–Ω–∞–ª–æ–≤!`);
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ñ—Ñ–µ—Ä–æ–≤
                setTimeout(() => loadMyOffers(), 1000);
            } else {
                const errorMessage = proposalsResult.message || proposalsResult.error || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π';
                showNotification('error', `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${errorMessage}`);
            }
        } else {
            const errorMessage = completeResult.message || completeResult.error || '–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞';
            showNotification('error', `‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ${errorMessage}`);
        }
    } catch (error) {
        showNotification('error', `‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
}

function closeChannelModal() {
    const modal = document.getElementById('channelModal');
    if (modal) modal.remove();
}

async function saveOfferAsDraft(offerId) {
    try {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ñ—Ñ–µ—Ä–∞ –Ω–∞ draft
        const response = await fetch(`/api/offers/${offerId}`, {
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json',
                'X-Telegram-User-Id': getTelegramUserId(),
                'X-User-Id': getTelegramUserId(),
                'telegram-user-id': getTelegramUserId()
            },
            body: JSON.stringify({ status: 'draft' })
        });

        if (response.ok) {
            showNotification('info', 'üìù –û—Ñ—Ñ–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –æ—Ñ—Ñ–µ—Ä—ã"');
        } else {
            showNotification('error', '‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞');
        }
    } catch (error) {
        showNotification('error', '‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞');
    }
}

async function showChannelSelectionModalForDraft(offerId, offerTitle) {

    try {
        const telegramUserId = getTelegramUserId();
        
        if (!telegramUserId) {
            showNotification('error', '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram');
            return;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        showLoadingOverlay?.('–ü–æ–¥–±–∏—Ä–∞–µ–º –∫–∞–Ω–∞–ª—ã...');

        // –ó–∞–ø—Ä–æ—Å –∫ API –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
        const response = await fetch(`/api/offers_management/${offerId}/recommended-channels?limit=20`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'X-Telegram-User-Id': telegramUserId,
                'X-User-Id': telegramUserId,
                'telegram-user-id': telegramUserId
            }
        });


        if (!response.ok) {
            const errorText = await response.text();
            hideLoadingOverlay?.();
            showNotification('error', `‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–∞–ª–æ–≤: HTTP ${response.status}: ${errorText}`);
            return;
        }

        const data = await response.json();

        hideLoadingOverlay?.();

        if (data && data.success && Array.isArray(data.channels) && data.channels.length > 0) {
            createChannelModal(offerId, offerTitle, data.channels, true);
        } else {
            showNotification('info', 'üì∫ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }

    } catch (error) {
        hideLoadingOverlay?.();
        showNotification('error', `‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
}

function showOfferDetailsModal(offer) {
    // –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ñ—Ñ–µ—Ä–∞
    alert(`–î–µ—Ç–∞–ª–∏ –æ—Ñ—Ñ–µ—Ä–∞ "${offer.title}"\n\n–°—Ç–∞—Ç—É—Å: ${offer.status}\n–¶–µ–Ω–∞: ${offer.price} ${offer.currency}\n–û–ø–∏—Å–∞–Ω–∏–µ: ${offer.description}`);
}


function formatSubs(count) {
    if (count >= 1000000) return (count/1000000).toFixed(1) + 'M';
    if (count >= 1000) return (count/1000).toFixed(1) + 'K';
    return count.toString();
}

function showLoadingOverlay(text) {
    const div = document.createElement('div');
    div.id = 'loading';
    div.className = 'loading-overlay';
    div.innerHTML = `<div>${text}<div style="margin-top:10px;border:3px solid #fff;border-top:3px solid transparent;border-radius:50%;width:30px;height:30px;animation:spin 1s linear infinite;"></div></div>`;
    document.body.appendChild(div);
}

function hideLoadingOverlay() {
    const el = document.getElementById('loading');
    if (el) el.remove();
}

function acceptProposal(proposalId, title) {
    showAcceptModal(proposalId, title);
}

function rejectProposal(proposalId, title) {
    showRejectModal(proposalId, title);
}
// ===== –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û –ü–†–ò–ù–Ø–¢–ò–Ø –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø =====
function showAcceptModal(proposalId, offerTitle) {
    const modal = createModal('accept-proposal-modal', '–ü—Ä–∏–Ω—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ');
    
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤—Ç—Ä–∞—à–Ω—é—é –¥–∞—Ç—É –∫–∞–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    const minDate = tomorrow.toISOString().split('T')[0];
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é –∫–∞–∫ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—É—é
    const weekLater = new Date();
    weekLater.setDate(weekLater.getDate() + 7);
    const recommendedDate = weekLater.toISOString().split('T')[0];
    
    modal.innerHTML = `
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h3>‚úÖ –ü—Ä–∏–Ω—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ</h3>
                    <button class="modal-close" onclick="closeModal('accept-proposal-modal')">&times;</button>
                </div>
                
                <div class="modal-body">
                    <div class="proposal-info">
                        <h4>üì¢ ${offerTitle}</h4>
                        <p class="text-muted">–£–∫–∞–∂–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è</p>
                    </div>
                    
                    <form id="acceptProposalForm">
                        <div class="form-group">
                            <label for="scheduledDate">üìÖ –î–∞—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è *</label>
                            <input type="date" 
                                   id="scheduledDate" 
                                   class="form-control" 
                                   min="${minDate}"
                                   value="${recommendedDate}"
                                   required>
                            <small class="form-help">–ú–∏–Ω–∏–º—É–º –∑–∞–≤—Ç—Ä–∞</small>
                        </div>
                        
                        <div class="form-group">
                            <label for="scheduledTime">üïê –í—Ä–µ–º—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è *</label>
                            <input type="time" 
                                   id="scheduledTime" 
                                   class="form-control" 
                                   value="12:00"
                                   required>
                            <small class="form-help">–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: 12:00-18:00</small>
                        </div>
                        
                        <div class="form-group">
                            <label for="proposedPrice">üí∞ –í–∞—à–∞ —Ü–µ–Ω–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</label>
                            <div class="input-group">
                                <input type="number" 
                                       id="proposedPrice" 
                                       class="form-control" 
                                       min="0" 
                                       step="0.01" 
                                       placeholder="–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è —Ü–µ–Ω—ã –∏–∑ –æ—Ñ—Ñ–µ—Ä–∞">
                                <span class="input-group-text">‚ÇΩ</span>
                            </div>
                            <small class="form-help">–ú–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ—é —Ü–µ–Ω—É</small>
                        </div>
                        
                        <div class="form-group">
                            <label for="responseNotes">üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</label>
                            <textarea id="responseNotes" 
                                      class="form-control" 
                                      rows="3" 
                                      maxlength="500"
                                      placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è..."></textarea>
                            <small class="form-help">–ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤</small>
                        </div>
                    </form>
                </div>
                
                <div class="modal-footer">
                    <button class="btn btn-secondary" onclick="closeModal('accept-proposal-modal')">
                        –û—Ç–º–µ–Ω–∞
                    </button>
                    <button class="btn btn-success" onclick="submitAcceptProposal(${proposalId})">
                        ‚úÖ –ü—Ä–∏–Ω—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
                    </button>
                </div>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    modal.style.display = 'flex';
    
    // –§–æ–∫—É—Å –Ω–∞ –¥–∞—Ç—É
    setTimeout(() => document.getElementById('scheduledDate').focus(), 100);
}

// ===== –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û –û–¢–ö–õ–û–ù–ï–ù–ò–Ø –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø =====
function showRejectModal(proposalId, offerTitle) {
    const modal = createModal('reject-proposal-modal', '–û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ');
    
    modal.innerHTML = `
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h3>‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ</h3>
                    <button class="modal-close" onclick="closeModal('reject-proposal-modal')">&times;</button>
                </div>
                
                <div class="modal-body">
                    <div class="proposal-info">
                        <h4>üì¢ ${offerTitle}</h4>
                        <p class="text-muted">–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è</p>
                    </div>
                    
                    <form id="rejectProposalForm">
                        <div class="form-group">
                            <label for="rejectionReason">‚ùå –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è *</label>
                            <select id="rejectionReason" class="form-control" required>
                                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É...</option>
                                <option value="–ù–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ü–µ–Ω–∞">üí∞ –ù–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ü–µ–Ω–∞</option>
                                <option value="–ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç —Ç–µ–º–∞—Ç–∏–∫–∞">üéØ –ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç —Ç–µ–º–∞—Ç–∏–∫–∞</option>
                                <option value="–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Å—Ä–æ–∫">‚è∞ –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Å—Ä–æ–∫</option>
                                <option value="–ö–∞–Ω–∞–ª —Å–µ–π—á–∞—Å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω">üì¥ –ö–∞–Ω–∞–ª —Å–µ–π—á–∞—Å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω</option>
                                <option value="–ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞">üìù –ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞</option>
                                <option value="–ó–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º–∏ –∫–∞–º–ø–∞–Ω–∏—è–º–∏">üìã –ó–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º–∏ –∫–∞–º–ø–∞–Ω–∏—è–º–∏</option>
                                <option value="–î—Ä—É–≥–æ–µ">‚ùì –î—Ä—É–≥–æ–µ</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label for="rejectionComment">üí¨ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</label>
                            <textarea id="rejectionComment" 
                                      class="form-control" 
                                      rows="3" 
                                      maxlength="500"
                                      placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –æ—Ñ—Ñ–µ—Ä–∞..."></textarea>
                            <small class="form-help">–ü–æ–º–æ–∂–µ—Ç —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—é —É–ª—É—á—à–∏—Ç—å –±—É–¥—É—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</small>
                        </div>
                        
                        <div class="rejection-warning">
                            <div class="warning-icon">‚ö†Ô∏è</div>
                            <div class="warning-text">
                                –ü–æ—Å–ª–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –ø—Ä–∏–Ω—è—Ç—å. 
                                –†–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø—Ä–∏—á–∏–Ω–æ–π.
                            </div>
                        </div>
                    </form>
                </div>
                
                <div class="modal-footer">
                    <button class="btn btn-secondary" onclick="closeModal('reject-proposal-modal')">
                        –û—Ç–º–µ–Ω–∞
                    </button>
                    <button class="btn btn-danger" onclick="submitRejectProposal(${proposalId})">
                        ‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
                    </button>
                </div>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    modal.style.display = 'flex';
    
    // –§–æ–∫—É—Å –Ω–∞ –ø—Ä–∏—á–∏–Ω—É
    setTimeout(() => document.getElementById('rejectionReason').focus(), 100);
}

// ===== –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–ü–†–ê–í–ö–ò –§–û–†–ú =====

async function submitAcceptProposal(proposalId) {
    try {
        const form = document.getElementById('acceptProposalForm');
        const submitBtn = document.querySelector('.btn-success');
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
        if (!form.checkValidity()) {
            form.reportValidity();
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
        const formData = {
            scheduled_date: document.getElementById('scheduledDate').value,
            scheduled_time: document.getElementById('scheduledTime').value,
            proposed_price: document.getElementById('proposedPrice').value || null,
            response_notes: document.getElementById('responseNotes').value.trim() || null
        };
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã
        const selectedDate = new Date(formData.scheduled_date);
        const tomorrow = new Date();
        tomorrow.setDate(tomorrow.getDate() + 1);
        
        if (selectedDate < tomorrow) {
            showError('–î–∞—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ —Ä–∞–Ω–µ–µ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è');
            return;
        }
        
        // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        submitBtn.disabled = true;
        submitBtn.innerHTML = '‚è≥ –ü—Ä–∏–Ω–∏–º–∞–µ–º...';
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        const response = await fetch(`/api/proposals/${proposalId}/accept`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(formData)
        });
        
        const result = await response.json();
        
        if (result.success) {
            closeModal('accept-proposal-modal');
            showSuccess('‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ! –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—é.');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
            if (typeof loadAvailableOffers === 'function') {
                loadAvailableOffers();
            }
        } else {
            throw new Error(result.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è');
        }
        
    } catch (error) {
        showError('–û—à–∏–±–∫–∞: ' + error.message);
    } finally {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
        const submitBtn = document.querySelector('.btn-success');
        if (submitBtn) {
            submitBtn.disabled = false;
            submitBtn.innerHTML = '‚úÖ –ü—Ä–∏–Ω—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ';
        }
    }
}

async function submitRejectProposal(proposalId) {
    try {
        const form = document.getElementById('rejectProposalForm');
        const submitBtn = document.querySelector('.btn-danger');
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
        if (!form.checkValidity()) {
            form.reportValidity();
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
        const rejectionReason = document.getElementById('rejectionReason').value;
        const rejectionComment = document.getElementById('rejectionComment').value.trim();
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –ø—Ä–∏—á–∏–Ω—É
        let fullReason = rejectionReason;
        if (rejectionComment) {
            fullReason += `. ${rejectionComment}`;
        }
        
        // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        submitBtn.disabled = true;
        submitBtn.innerHTML = '‚è≥ –û—Ç–∫–ª–æ–Ω—è–µ–º...';
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        const response = await fetch(`/api/proposals/${proposalId}/reject`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                reason: fullReason
            })
        });
        
        const result = await response.json();
        
        if (result.success) {
            closeModal('reject-proposal-modal');
            showSuccess('‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—é.');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
            if (typeof loadAvailableOffers === 'function') {
                loadAvailableOffers();
            }
        } else {
            throw new Error(result.message || '–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è');
        }
        
    } catch (error) {
        showError('–û—à–∏–±–∫–∞: ' + error.message);
    } finally {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
        const submitBtn = document.querySelector('.btn-danger');
        if (submitBtn) {
            submitBtn.disabled = false;
            submitBtn.innerHTML = '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ';
        }
    }
}

// ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –ú–û–î–ê–õ–¨–ù–´–• –û–ö–û–ù =====

function createModal(id, title) {
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const existingModal = document.getElementById(id);
    if (existingModal) {
        existingModal.remove();
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modal = document.createElement('div');
    modal.id = id;
    modal.className = 'modal';
    
    return modal;
}

function closeResponseModal(modalId) {
    console.log('closeResponseModal –≤—ã–∑–≤–∞–Ω–∞ —Å modalId:', modalId);
    const modal = document.getElementById(modalId);
    console.log('–ù–∞–π–¥–µ–Ω–Ω—ã–π modal —ç–ª–µ–º–µ–Ω—Ç:', modal);
    if (modal) {
        console.log('–ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ...');
        // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å active –¥–ª—è –∑–∞–ø—É—Å–∫–∞ CSS –∞–Ω–∏–º–∞—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
        modal.classList.remove('active');
        // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
        setTimeout(() => {
            console.log('–£–¥–∞–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏–∑ DOM');
            modal.remove();
        }, 300);
    } else {
        console.error('–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ ID:', modalId);
    }
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –µ–≥–æ
document.addEventListener('click', function(event) {
    if (event.target.classList.contains('modal-overlay')) {
        event.target.classList.remove('active');
        setTimeout(() => event.target.remove(), 300);
    }
});

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ Escape
document.addEventListener('keydown', function(event) {
    if (event.key === 'Escape') {
        const modals = document.querySelectorAll('.modal-overlay.active');
        modals.forEach(modal => {
            modal.classList.remove('active');
            setTimeout(() => modal.remove(), 300);
        });
    }
});

// ===== –§–£–ù–ö–¶–ò–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô =====

function showSuccess(message) {
    showNotification(message, 'success');
}

function showError(message) {
    showNotification(message, 'error');
}

function showNotification(message, type = 'info') {
    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.innerHTML = `
        <div class="notification-content">
            <div class="notification-message">${message}</div>
            <button class="notification-close">&times;</button>
        </div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    document.body.appendChild(notification);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    setTimeout(() => notification.classList.add('show'), 10);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => notification.remove(), 300);
    }, 5000);
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É
    notification.querySelector('.notification-close').onclick = () => {
        notification.classList.remove('show');
        setTimeout(() => notification.remove(), 300);
    };
}

// –≠–∫—Å–ø–æ—Ä—Ç
window.showChannelSelectionModal = showChannelSelectionModal;
window.closeChannelModal = closeChannelModal;
window.toggleChannel = toggleChannel;
window.sendProposals = sendProposals;
window.saveOfferAsDraft = saveOfferAsDraft;
window.showChannelSelectionModalForDraft = showChannelSelectionModalForDraft;
window.updateCount = updateCount;
// ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====

// ===== –ì–õ–û–ë–ê–õ–¨–ù–´–ô –î–û–°–¢–£–ü –ö –§–£–ù–ö–¶–ò–Ø–ú =====
window.ResponseManager = ResponseManager;
window.manageResponses = (offerId) => ResponseManager.manageResponses(offerId);
window.acceptOffer = (offerId) => ResponseManager.acceptOffer(offerId);

// ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====
document.addEventListener('DOMContentLoaded', function() {
    loadMyOffers();
    setupOffersSearch();
    startTimerUpdates(); // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–æ–≤
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–æ–≤
function startTimerUpdates() {
    setInterval(() => {
        const timers = document.querySelectorAll('[data-deadline]');
        timers.forEach(timer => {
            const deadline = new Date(timer.getAttribute('data-deadline'));
            const timeLeft = ResponseManager.getTimeLeft(deadline);
            timer.textContent = timeLeft;
            
            // –ï—Å–ª–∏ —Å—Ä–æ–∫ –∏—Å—Ç—ë–∫, –æ–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç
            if (timeLeft === '–°—Ä–æ–∫ –∏—Å—Ç—ë–∫') {
                timer.style.color = '#e53e3e';
            }
        });
    }, 60000); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
}

