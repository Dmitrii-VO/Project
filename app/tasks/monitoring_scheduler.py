#!/usr/bin/env python3
"""
–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ—Å—Ç–æ–≤ –∏ —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
"""

import asyncio
import logging
import schedule
import time
from datetime import datetime, timedelta
from typing import Dict, List
import threading

logger = logging.getLogger(__name__)


class MonitoringScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    
    def __init__(self):
        self.running = False
        self.tasks = []
        
    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        if self.running:
            logger.warning("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
            
        self.running = True
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á
        self._setup_schedule()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        scheduler_thread = threading.Thread(target=self._run_scheduler, daemon=True)
        scheduler_thread.start()
        
        logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        self.running = False
        logger.info("‚èπÔ∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def _setup_schedule(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á"""
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–∑–º–µ—â–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        schedule.every(30).minutes.do(self._run_placement_monitoring)
        
        # –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å—Ç–æ–≤ –∫–∞–∂–¥—ã–π —á–∞—Å
        schedule.every().hour.do(self._run_stats_collection)
        
        # –°–±–æ—Ä eREIT —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        schedule.every(30).minutes.do(self._run_ereit_stats_collection)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Ä–∞–∑–º–µ—â–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
        schedule.every(10).minutes.do(self._run_expiry_check)
        
        # –ù–û–í–û–ï: –ö–æ–Ω—Ç—Ä–æ–ª—å –¥–µ–¥–ª–∞–π–Ω–æ–≤ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
        schedule.every(15).minutes.do(self._run_deadline_monitoring)
        
        # –ù–û–í–û–ï: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞
        schedule.every(2).hours.do(self._run_deletion_monitoring)
        
        # –ù–û–í–û–ï: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–π –∫–∞–∂–¥—ã–π —á–∞—Å
        schedule.every().hour.do(self._run_placement_completion)
        
        # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–ª–∞—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00
        schedule.every().day.at("09:00").do(self._run_payment_planning)
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 2:00
        schedule.every().sunday.at("02:00").do(self._run_cleanup)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –¥–∞—à–±–æ—Ä–¥–æ–≤ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        schedule.every(5).minutes.do(self._run_dashboard_cache_update)
        
        logger.info("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ (–≤–∫–ª—é—á–∞—è –∫–æ–Ω—Ç—Ä–æ–ª—å –¥–µ–¥–ª–∞–π–Ω–æ–≤, —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–æ–≤)")
    
    def _run_scheduler(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        while self.running:
            try:
                schedule.run_pending()
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
                time.sleep(60)
    
    def _run_placement_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–∑–º–µ—â–µ–Ω–∏–π"""
        try:
            logger.info("üîç –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–π...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
            asyncio.run(self._async_placement_monitoring())
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–π: {e}")
    
    async def _async_placement_monitoring(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–∑–º–µ—â–µ–Ω–∏–π"""
        from app.services.channel_monitor import ChannelMonitor
        from app.config.telegram_config import AppConfig
        
        monitor = ChannelMonitor(bot_token=AppConfig.BOT_TOKEN)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        results = await monitor.check_pending_placements()
        
        found_count = len([r for r in results if r['status'] == 'found'])
        total_count = len(results)
        
        if total_count > 0:
            logger.info(f"üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–∑–º–µ—â–µ–Ω–∏–π: {found_count}/{total_count} –ø–æ—Å—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ")
        
        return results
    
    def _run_stats_collection(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            logger.info("üìä –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
            
            asyncio.run(self._async_stats_collection())
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    async def _async_stats_collection(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        from app.services.stats_collector import StatsCollector
        
        collector = StatsCollector()
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–∑–º–µ—â–µ–Ω–∏–π
        results = await collector.collect_placement_stats()
        
        logger.info(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–±—Ä–∞–Ω–∞ –¥–ª—è {len(results)} —Ä–∞–∑–º–µ—â–µ–Ω–∏–π")
        
        return results
    
    def _run_expiry_check(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        try:
            logger.info("‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Ä–∞–∑–º–µ—â–µ–Ω–∏–π...")
            
            asyncio.run(self._async_expiry_check())
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Ä–∞–∑–º–µ—â–µ–Ω–∏–π: {e}")
    
    async def _async_expiry_check(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Ä–∞–∑–º–µ—â–µ–Ω–∏–π"""
        from app.services.channel_monitor import ChannelMonitor
        from app.config.telegram_config import AppConfig
        
        monitor = ChannelMonitor(bot_token=AppConfig.BOT_TOKEN)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        results = await monitor.check_expired_placements()
        
        if results:
            logger.info(f"‚è∞ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Ä–∞–∑–º–µ—â–µ–Ω–∏–π: {len(results)}")
        
        return results
    
    def _run_deadline_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–µ–¥–ª–∞–π–Ω–æ–≤"""
        try:
            logger.info("‚è∞ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–µ–¥–ª–∞–π–Ω–æ–≤...")
            
            asyncio.run(self._async_deadline_monitoring())
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–µ–¥–ª–∞–π–Ω–æ–≤: {e}")
    
    async def _async_deadline_monitoring(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–µ–¥–ª–∞–π–Ω–æ–≤"""
        from app.services.deadline_monitor import monitor_deadlines
        
        results = await monitor_deadlines()
        
        expired_count = len(results.get('expired', []))
        warning_count = len(results.get('warnings', []))
        
        if expired_count > 0 or warning_count > 0:
            logger.info(f"‚è∞ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–µ–¥–ª–∞–π–Ω–æ–≤: {expired_count} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ, {warning_count} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
        
        return results
    
    def _run_deletion_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤"""
        try:
            logger.info("üîç –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤...")
            
            asyncio.run(self._async_deletion_monitoring())
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤: {e}")
    
    async def _async_deletion_monitoring(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤"""
        from app.services.post_deletion_monitor import monitor_post_deletions
        
        results = await monitor_post_deletions()
        
        deleted_count = len([r for r in results if r['status'] == 'deleted'])
        total_count = len(results)
        
        if total_count > 0:
            logger.info(f"üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–¥–∞–ª–µ–Ω–∏—è: –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ {total_count} –ø–æ—Å—Ç–æ–≤, —É–¥–∞–ª–µ–Ω–æ {deleted_count}")
        
        return results
    
    def _run_ereit_stats_collection(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–±–æ—Ä eREIT —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            logger.info("üìä –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ eREIT —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
            
            asyncio.run(self._async_ereit_stats_collection())
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ eREIT —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    async def _async_ereit_stats_collection(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Å–±–æ—Ä eREIT —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        from app.services.ereit_integration import collect_ereit_statistics
        
        results = await collect_ereit_statistics()
        
        success_count = len([r for r in results if r['status'] == 'success'])
        total_count = len(results)
        
        if total_count > 0:
            logger.info(f"üìà eREIT —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {success_count}/{total_count} —Ä–∞–∑–º–µ—â–µ–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
        
        return results
    
    def _run_placement_completion(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–π"""
        try:
            logger.info("üèÅ –ó–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏–π...")
            
            asyncio.run(self._async_placement_completion())
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏–π: {e}")
    
    async def _async_placement_completion(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–π"""
        from app.services.placement_completion import complete_placements
        
        results = await complete_placements()
        
        completed_count = len([r for r in results if r['status'] == 'completed_successfully'])
        total_count = len(results)
        
        if total_count > 0:
            logger.info(f"üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–π: {completed_count}/{total_count} —É—Å–ø–µ—à–Ω–æ")
        
        return results
    
    def _run_payment_planning(self):
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –≤—ã–ø–ª–∞—Ç—ã"""
        try:
            logger.info("üí∞ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–ª–∞—Ç...")
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –≤—ã–ø–ª–∞—Ç—ã –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ä–∞–∑–º–µ—â–µ–Ω–∏–π
            planned_payments = self._plan_payments()
            
            if planned_payments:
                logger.info(f"üí∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –≤—ã–ø–ª–∞—Ç: {len(planned_payments)}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–ø–ª–∞—Ç: {e}")
    
    def _plan_payments(self) -> List[Dict]:
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –≤—ã–ø–ª–∞—Ç—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞–º –∫–∞–Ω–∞–ª–æ–≤"""
        from app.models import execute_db_query
        
        # –ù–∞—Ö–æ–¥–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –±–µ–∑ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤—ã–ø–ª–∞—Ç
        completed_placements = execute_db_query("""
            SELECT p.*, 
                   r.user_id as channel_owner_id,
                   r.channel_title,
                   u.telegram_id as channel_owner_telegram_id
            FROM offer_placements p
            JOIN offer_responses r ON p.response_id = r.id
            JOIN users u ON r.user_id = u.id
            WHERE p.status = 'completed'
            AND p.id NOT IN (SELECT placement_id FROM payments WHERE placement_id IS NOT NULL)
        """, fetch_all=True)
        
        planned_payments = []
        
        for placement in completed_placements:
            try:
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞–Ω–∏—Ä—É–µ–º–æ–π –≤—ã–ø–ª–∞—Ç–µ
                payment_id = execute_db_query("""
                    INSERT INTO payments (
                        placement_id, 
                        user_id, 
                        amount, 
                        currency, 
                        status, 
                        scheduled_at,
                        created_at,
                        updated_at
                    ) VALUES (?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
                """, (
                    placement['id'],
                    placement['channel_owner_id'],
                    placement['funds_reserved'],
                    'RUB',
                    'scheduled',
                    (datetime.now() + timedelta(days=3)).isoformat()  # –í—ã–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ 3 –¥–Ω—è
                ))
                
                planned_payments.append({
                    'payment_id': payment_id,
                    'placement_id': placement['id'],
                    'amount': placement['funds_reserved'],
                    'channel_owner_id': placement['channel_owner_id']
                })
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è {placement['id']}: {e}")
        
        return planned_payments
    
    def _run_cleanup(self):
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        try:
            logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
            
            cleanup_results = self._cleanup_old_data()
            
            logger.info(f"üßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {cleanup_results}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def _cleanup_old_data(self) -> Dict:
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î"""
        from app.models import execute_db_query
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
        old_notifications = execute_db_query("""
            DELETE FROM notifications 
            WHERE created_at < datetime('now', '-30 days')
        """)
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ –æ—à–∏–±–æ–∫ (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)
        old_logs = execute_db_query("""
            DELETE FROM error_logs 
            WHERE created_at < datetime('now', '-7 days')
        """)
        
        # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (—Å—Ç–∞—Ä—à–µ 90 –¥–Ω–µ–π)
        old_placements = execute_db_query("""
            UPDATE offer_placements 
            SET status = 'archived'
            WHERE status = 'completed' 
            AND updated_at < datetime('now', '-90 days')
        """)
        
        return {
            'notifications_deleted': old_notifications or 0,
            'logs_deleted': old_logs or 0,
            'placements_archived': old_placements or 0
        }
    
    def _run_dashboard_cache_update(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à –¥–∞—à–±–æ—Ä–¥–æ–≤"""
        try:
            logger.debug("üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –¥–∞—à–±–æ—Ä–¥–æ–≤...")
            
            self._update_dashboard_cache()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –¥–∞—à–±–æ—Ä–¥–æ–≤: {e}")
    
    def _update_dashboard_cache(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–æ–≤"""
        from app.models.database import execute_db_query
        
        try:
            # –ö—ç—à–∏—Ä—É–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            overview_stats = execute_db_query("""
                SELECT 
                    COUNT(*) as total_placements,
                    COUNT(CASE WHEN status = 'active' THEN 1 END) as active_placements,
                    COUNT(CASE WHEN status = 'completed' THEN 1 END) as completed_placements,
                    SUM(CASE WHEN status IN ('active', 'completed') THEN funds_reserved ELSE 0 END) as total_revenue
                FROM offer_placements
                WHERE created_at >= datetime('now', '-30 days')
            """, fetch_one=True)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–∑–º–µ—â–µ–Ω–∏–π
            execute_db_query("""
                CREATE TEMPORARY TABLE IF NOT EXISTS dashboard_cache_temp AS
                SELECT 
                    p.id,
                    p.status,
                    COALESCE(ps.views_count, 0) as views,
                    COALESCE(es.clicks, 0) as clicks,
                    datetime('now') as cached_at
                FROM offer_placements p
                LEFT JOIN placement_statistics ps ON p.id = ps.placement_id 
                    AND ps.id = (SELECT MAX(id) FROM placement_statistics WHERE placement_id = p.id)
                LEFT JOIN ereit_statistics es ON p.id = es.placement_id 
                    AND es.id = (SELECT MAX(id) FROM ereit_statistics WHERE placement_id = p.id)
                WHERE p.status = 'active'
            """)
            
            logger.debug("‚úÖ –ö—ç—à –¥–∞—à–±–æ—Ä–¥–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –¥–∞—à–±–æ—Ä–¥–æ–≤: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
_scheduler_instance = None


def get_scheduler() -> MonitoringScheduler:
    """–ü–æ–ª—É—á–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ (—Å–∏–Ω–≥–ª—Ç–æ–Ω)"""
    global _scheduler_instance
    if _scheduler_instance is None:
        _scheduler_instance = MonitoringScheduler()
    return _scheduler_instance


def start_monitoring():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
    scheduler = get_scheduler()
    scheduler.start()


def stop_monitoring():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
    scheduler = get_scheduler()
    scheduler.stop()


if __name__ == "__main__":
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫
    scheduler = MonitoringScheduler()
    scheduler.start()
    
    try:
        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        while True:
            time.sleep(60)
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        scheduler.stop()