# app/utils/notifications.py
"""
–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è Telegram Mini App
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ
"""

import sqlite3
import logging
import requests
import json
from datetime import datetime
from typing import Dict, Any, Optional, List
import os
import sys
from urllib.parse import quote

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, os.getcwd())

logger = logging.getLogger(__name__)
DATABASE_PATH = 'telegram_mini_app.db'


class NotificationService:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""

    def __init__(self):
        self.bot_token = self._get_bot_token()
        self.base_url = f"https://api.telegram.org/bot{self.bot_token}" if self.bot_token else None

    def _get_bot_token(self) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            # –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            from app.config.telegram_config import AppConfig
            return AppConfig.BOT_TOKEN
        except:
            # Fallback –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            return os.environ.get('BOT_TOKEN')

    @staticmethod
    def send_telegram_notification(telegram_id: int, message: str, metadata: Dict[str, Any] = None) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        
        Args:
            telegram_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            metadata: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        try:
            service = NotificationService()
            if not service.bot_token:
                logger.warning("BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è")
                return False

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            url = f"{service.base_url}/sendMessage"
            data = {
                'chat_id': telegram_id,
                'text': message,
                'parse_mode': 'HTML',
                'disable_web_page_preview': True
            }

            response = requests.post(url, json=data, timeout=10)
            
            if response.status_code == 200:
                result = response.json()
                if result.get('ok'):
                    logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                    service._save_notification_to_db(telegram_id, message, 'sent', metadata)
                    return True
                else:
                    logger.error(f"‚ùå Telegram API error: {result.get('description')}")
                    service._save_notification_to_db(telegram_id, message, 'failed', metadata)
                    return False
            else:
                logger.error(f"‚ùå HTTP error {response.status_code}")
                service._save_notification_to_db(telegram_id, message, 'failed', metadata)
                return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            try:
                service._save_notification_to_db(telegram_id, message, 'error', metadata)
            except:
                pass
            return False

    def _save_notification_to_db(self, telegram_id: int, message: str, status: str, metadata: Dict[str, Any] = None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = sqlite3.connect(DATABASE_PATH)
            cursor = conn.cursor()

            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS notifications (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    telegram_id INTEGER NOT NULL,
                    message TEXT NOT NULL,
                    status TEXT NOT NULL DEFAULT 'pending',
                    metadata TEXT,
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                    sent_at DATETIME,
                    error_message TEXT
                )
            ''')

            # –í—Å—Ç–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            cursor.execute('''
                INSERT INTO notifications (telegram_id, message, status, metadata, sent_at)
                VALUES (?, ?, ?, ?, ?)
            ''', (
                telegram_id,
                message,
                status,
                json.dumps(metadata) if metadata else None,
                datetime.now().isoformat() if status == 'sent' else None
            ))

            conn.commit()
            conn.close()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –ë–î: {e}")

    @staticmethod
    def send_welcome_notification(user) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            welcome_message = f"""
üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É —Ä–µ–∫–ª–∞–º—ã!</b>

–ü—Ä–∏–≤–µ—Ç, {user.first_name or user.username or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!

–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å —Å–≤–æ–∏ –∫–∞–Ω–∞–ª—ã –¥–ª—è –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è  
‚Ä¢ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ —Ä–µ–∫–ª–∞–º—ã

üéÅ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: {getattr(user, 'referral_code', 'REF001')}
–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!

–ù–∞—á–Ω–∏—Ç–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ üëá
            """

            return NotificationService.send_telegram_notification(
                user.telegram_id,
                welcome_message,
                {
                    'type': 'welcome',
                    'user_id': getattr(user, 'id', None),
                    'referral_code': getattr(user, 'referral_code', 'REF001')
                }
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False

    @staticmethod
    def send_balance_notification(user, amount: float, transaction_type: str) -> bool:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞"""
        try:
            if transaction_type == 'deposit':
                emoji = "üí∞"
                action = "–ø–æ–ø–æ–ª–Ω–µ–Ω"
            elif transaction_type == 'withdrawal':
                emoji = "üí∏"
                action = "—Å–ø–∏—Å–∞–Ω"
            elif transaction_type == 'earning':
                emoji = "üéâ"
                action = "–Ω–∞—á–∏—Å–ª–µ–Ω –¥–æ—Ö–æ–¥"
            else:
                emoji = "üí≥"
                action = "–∏–∑–º–µ–Ω–µ–Ω"

            message = f"""
{emoji} <b>–ë–∞–ª–∞–Ω—Å {action}</b>

–°—É–º–º–∞: {abs(amount):,.2f} ‚ÇΩ
–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {getattr(user, 'balance', 0):,.2f} ‚ÇΩ

–í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –º–æ–∂–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ "–ü–ª–∞—Ç–µ–∂–∏".
            """

            return NotificationService.send_telegram_notification(
                user.telegram_id,
                message,
                {
                    'type': 'balance_change',
                    'user_id': getattr(user, 'id', None),
                    'amount': amount,
                    'transaction_type': transaction_type
                }
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–∞–ª–∞–Ω—Å–µ: {e}")
            return False

    @staticmethod
    def send_offer_notification(user, offer, notification_type: str) -> bool:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –æ—Ñ—Ñ–µ—Ä–∞—Ö"""
        try:
            if notification_type == 'created':
                message = f"""
üöÄ <b>–û—Ñ—Ñ–µ—Ä —Å–æ–∑–¥–∞–Ω!</b>

üì¢ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {offer.title}
üí∞ <b>–ë—é–¥–∂–µ—Ç:</b> {getattr(offer, 'budget', 0)} ‚ÇΩ
üéØ <b>–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è:</b> {getattr(offer, 'target_audience', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}

–í–∞—à –æ—Ñ—Ñ–µ—Ä –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –≤–ª–∞–¥–µ–ª—å—Ü–∞–º –∫–∞–Ω–∞–ª–æ–≤.
                """
            elif notification_type == 'new_response':
                message = f"""
üì© <b>–ù–æ–≤—ã–π –æ—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞—à –æ—Ñ—Ñ–µ—Ä!</b>

üì¢ <b>–û—Ñ—Ñ–µ—Ä:</b> {offer.title}
üë§ <b>–ö–∞–Ω–∞–ª:</b> {getattr(offer, 'channel_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª')}
üí∞ <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞:</b> {getattr(offer, 'proposed_price', 0)} ‚ÇΩ

–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.
                """
            else:
                message = f"üìã –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ –æ—Ñ—Ñ–µ—Ä—É: {offer.title}"

            return NotificationService.send_telegram_notification(
                user.telegram_id,
                message,
                {
                    'type': f'offer_{notification_type}',
                    'offer_id': getattr(offer, 'id', None),
                    'user_id': getattr(user, 'id', None)
                }
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ñ—Ñ–µ—Ä–µ: {e}")
            return False

    @staticmethod
    def send_channel_notification(user, channel, notification_type: str) -> bool:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–∞–Ω–∞–ª–∞—Ö"""
        try:
            if notification_type == 'verified':
                message = f"""
‚úÖ <b>–ö–∞–Ω–∞–ª –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!</b>

üì∫ <b>–ö–∞–Ω–∞–ª:</b> {getattr(channel, 'title', '–í–∞—à –∫–∞–Ω–∞–ª')}
üë• <b>–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:</b> {getattr(channel, 'subscriber_count', 0):,}

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª–µ–π!
                """
            elif notification_type == 'verification_failed':
                message = f"""
‚ùå <b>–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞</b>

üì∫ <b>–ö–∞–Ω–∞–ª:</b> {getattr(channel, 'title', '–í–∞—à –∫–∞–Ω–∞–ª')}
üìù <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {getattr(channel, 'verification_error', '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏')}

–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏.
                """
            elif notification_type == 'new_offer':
                message = f"""
üíé <b>–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞!</b>

üì∫ <b>–ö–∞–Ω–∞–ª:</b> {getattr(channel, 'title', '–í–∞—à –∫–∞–Ω–∞–ª')}
üí∞ <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞:</b> {getattr(channel, 'offer_price', 0)} ‚ÇΩ

–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.
                """
            else:
                message = f"üìã –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞: {getattr(channel, 'title', '–í–∞—à –∫–∞–Ω–∞–ª')}"

            return NotificationService.send_telegram_notification(
                user.telegram_id,
                message,
                {
                    'type': f'channel_{notification_type}',
                    'channel_id': getattr(channel, 'id', None),
                    'user_id': getattr(user, 'id', None)
                }
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–∞–Ω–∞–ª–µ: {e}")
            return False


# === –§–£–ù–ö–¶–ò–ò –î–õ–Ø –û–ë–†–ê–¢–ù–û–ô –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò ===

def send_telegram_message(telegram_id: int, message: str, parse_mode: str = 'HTML') -> bool:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    return NotificationService.send_telegram_notification(telegram_id, message)


# === –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ö–û–ù–¢–†–ê–ö–¢–û–í (–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞) ===

def send_contract_notification(contract_id, notification_type, extra_data=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º"""
    try:
        bot_token = NotificationService()._get_bot_token()
        if not bot_token:
            logger.warning("BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è")
            return

        conn = sqlite3.connect(DATABASE_PATH)
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ
        cursor.execute('''
            SELECT c.*,
                   o.title as offer_title,
                   u_adv.telegram_id as advertiser_telegram_id,
                   u_adv.first_name as advertiser_name,
                   u_pub.telegram_id as publisher_telegram_id,
                   u_pub.first_name as publisher_name,
                   or_resp.channel_title
            FROM contracts c
            JOIN offers o ON c.offer_id = o.id
            JOIN users u_adv ON c.advertiser_id = u_adv.id  
            JOIN users u_pub ON c.publisher_id = u_pub.id
            JOIN offer_responses or_resp ON c.response_id = or_resp.id
            WHERE c.id = ?
        ''', (contract_id,))

        data = cursor.fetchone()
        conn.close()

        if not data:
            return

        def format_date(date_str):
            """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã"""
            try:
                if date_str:
                    dt = datetime.fromisoformat(date_str.replace('Z', '+00:00'))
                    return dt.strftime('%d.%m.%Y %H:%M')
                return '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
            except:
                return str(date_str)

        if notification_type == 'created':
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
            advertiser_msg = f"""üìã <b>–ö–æ–Ω—Ç—Ä–∞–∫—Ç —Å–æ–∑–¥–∞–Ω!</b>

üéØ <b>–û—Ñ—Ñ–µ—Ä:</b> {data['offer_title']}
üí∞ <b>–°—É–º–º–∞:</b> {data['price']} RUB
üì∫ <b>–ö–∞–Ω–∞–ª:</b> {data['channel_title']}
üë§ <b>–ò–∑–¥–∞—Ç–µ–ª—å:</b> {data['publisher_name']}

‚è∞ <b>–°—Ä–æ–∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:</b> {format_date(data['placement_deadline'])}
üîç <b>–°—Ä–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:</b> {data['monitoring_duration']} –¥–Ω–µ–π

üì± –ò–∑–¥–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ä–µ–∫–ª–∞–º—É –∏ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏."""

            publisher_msg = f"""‚úÖ <b>–í–∞—à –æ—Ç–∫–ª–∏–∫ –ø—Ä–∏–Ω—è—Ç! –ö–æ–Ω—Ç—Ä–∞–∫—Ç —Å–æ–∑–¥–∞–Ω.</b>

üéØ <b>–û—Ñ—Ñ–µ—Ä:</b> {data['offer_title']}
üí∞ <b>–û–ø–ª–∞—Ç–∞:</b> {data['price']} RUB
üë§ <b>–†–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—å:</b> {data['advertiser_name']}

‚è∞ <b>–†–∞–∑–º–µ—Å—Ç–∏—Ç–µ —Ä–µ–∫–ª–∞–º—É –¥–æ:</b> {format_date(data['placement_deadline'])}

üìù <b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:</b>
1. –†–∞–∑–º–µ—Å—Ç–∏—Ç–µ —Ä–µ–∫–ª–∞–º—É –≤ —Å–≤–æ–µ–º –∫–∞–Ω–∞–ª–µ
2. –ü–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –ø–æ—Å—Ç –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
3. –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—á–Ω–µ—Ç—Å—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
4. –û–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""

            NotificationService.send_telegram_notification(data['advertiser_telegram_id'], advertiser_msg)
            NotificationService.send_telegram_notification(data['publisher_telegram_id'], publisher_msg)

        elif notification_type == 'placement_verified':
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            verification_passed = extra_data.get('verified', False) if extra_data else False

            if verification_passed:
                adv_msg = f"""‚úÖ <b>–†–∞–∑–º–µ—â–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!</b>

üéØ <b>–û—Ñ—Ñ–µ—Ä:</b> {data['offer_title']}
üì∫ <b>–ö–∞–Ω–∞–ª:</b> {data['channel_title']}

üîç –ù–∞—á–∞—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞ {data['monitoring_duration']} –¥–Ω–µ–π.
–û–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""

                pub_msg = f"""‚úÖ <b>–†–∞–∑–º–µ—â–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!</b>

üéØ <b>–û—Ñ—Ñ–µ—Ä:</b> {data['offer_title']}
üí∞ <b>–ö –æ–ø–ª–∞—Ç–µ:</b> {data['price']} RUB

üîç –ù–∞—á–∞—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞ {data['monitoring_duration']} –¥–Ω–µ–π.
–ù–µ —É–¥–∞–ª—è–π—Ç–µ –ø–æ—Å—Ç –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞!"""
            else:
                error_msg = extra_data.get('message') if extra_data else '–†–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º'

                pub_msg = f"""‚ùå <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞</b>

üéØ <b>–û—Ñ—Ñ–µ—Ä:</b> {data['offer_title']}
‚ùå <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {error_msg}

üîÑ –ò—Å–ø—Ä–∞–≤—å—Ç–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –∏ –ø–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ."""

                adv_msg = f"""‚ùå <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞</b>

üéØ <b>–û—Ñ—Ñ–µ—Ä:</b> {data['offer_title']}
üì∫ <b>–ö–∞–Ω–∞–ª:</b> {data['channel_title']}
‚ùå <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {error_msg}

–ò–∑–¥–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ."""

            NotificationService.send_telegram_notification(data['advertiser_telegram_id'], adv_msg)
            NotificationService.send_telegram_notification(data['publisher_telegram_id'], pub_msg)

        elif notification_type == 'completed':
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
            payment_id = extra_data.get('payment_id') if extra_data else 'N/A'
            amount = extra_data.get('amount') if extra_data else data['price']

            adv_msg = f"""‚úÖ <b>–ö–æ–Ω—Ç—Ä–∞–∫—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!</b>

üéØ <b>–û—Ñ—Ñ–µ—Ä:</b> {data['offer_title']}
üì∫ <b>–ö–∞–Ω–∞–ª:</b> {data['channel_title']}
üí∞ <b>–°—É–º–º–∞:</b> {amount} RUB

‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ.
üí≥ –ü–ª–∞—Ç–µ–∂ #{payment_id} –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è."""

            pub_msg = f"""üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ö–æ–Ω—Ç—Ä–∞–∫—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω.</b>

üéØ <b>–û—Ñ—Ñ–µ—Ä:</b> {data['offer_title']}
üí∞ <b>–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:</b> {amount} RUB

üí≥ –ü–ª–∞—Ç–µ–∂ #{payment_id} –ø–æ—Å—Ç—É–ø–∏—Ç –Ω–∞ –≤–∞—à —Å—á–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.
–°–ø–∞—Å–∏–±–æ –∑–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É!"""

            NotificationService.send_telegram_notification(data['advertiser_telegram_id'], adv_msg)
            NotificationService.send_telegram_notification(data['publisher_telegram_id'], pub_msg)

        elif notification_type == 'violation':
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏
            reason = extra_data.get('reason') if extra_data else '–ù–∞—Ä—É—à–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞'

            pub_msg = f"""‚ö†Ô∏è <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–∞—Ä—É—à–µ–Ω–∏–µ!</b>

üéØ <b>–û—Ñ—Ñ–µ—Ä:</b> {data['offer_title']}
‚ùå <b>–ü—Ä–æ–±–ª–µ–º–∞:</b> {reason}

üîÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."""

            adv_msg = f"""‚ö†Ô∏è <b>–ù–∞—Ä—É—à–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞</b>

üéØ <b>–û—Ñ—Ñ–µ—Ä:</b> {data['offer_title']}
üì∫ <b>–ö–∞–Ω–∞–ª:</b> {data['channel_title']}
‚ùå <b>–ü—Ä–æ–±–ª–µ–º–∞:</b> {reason}

–ú—ã —É–≤–µ–¥–æ–º–∏–ª–∏ –∏–∑–¥–∞—Ç–µ–ª—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""

            NotificationService.send_telegram_notification(data['advertiser_telegram_id'], adv_msg)
            NotificationService.send_telegram_notification(data['publisher_telegram_id'], pub_msg)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É: {e}")


# === –≠–ö–°–ü–û–†–¢ ===
__all__ = [
    'NotificationService',
    'send_telegram_message', 
    'send_contract_notification'
]