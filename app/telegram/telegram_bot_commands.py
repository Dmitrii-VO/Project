#!/usr/bin/env python3
"""
–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ Telegram –±–æ—Ç–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ—Ñ—Ñ–µ—Ä–æ–≤
–ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è–º–∏
"""

import sqlite3
import json
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Callable
from dataclasses import dataclass
import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.config.telegram_config import AppConfig

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

@dataclass
class BotCommand:
    """–ö–æ–º–∞–Ω–¥–∞ –±–æ—Ç–∞"""
    command: str
    description: str
    handler: Callable
    admin_only: bool = False
    channel_owner_only: bool = False

class TelegramBotExtension:
    """–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ Telegram –±–æ—Ç–∞"""
    
    def __init__(self, bot_instance=None):
        self.bot = bot_instance
        self.db_path = getattr(AppConfig, 'DATABASE_PATH', 'telegram_mini_app.db')
        self.commands = self._register_commands()
        
    def get_db_connection(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = sqlite3.connect(self.db_path)
            conn.row_factory = sqlite3.Row
            return conn
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            return None
    
    def get_user_by_telegram_id(self, telegram_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID"""
        try:
            conn = self.get_db_connection()
            if not conn:
                return None
            
            cursor = conn.cursor()
            cursor.execute("""
                SELECT id, telegram_id, username, first_name, last_name, is_admin
                FROM users WHERE telegram_id = ?
            """, (telegram_id,))
            
            result = cursor.fetchone()
            conn.close()
            
            return dict(result) if result else None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return None
    
    def get_user_channels(self, user_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = self.get_db_connection()
            if not conn:
                return []
            
            cursor = conn.cursor()
            cursor.execute("""
                SELECT id, title, username, subscriber_count, is_verified, is_active
                FROM channels 
                WHERE owner_id = ? AND is_active = 1
                ORDER BY subscriber_count DESC
            """, (user_id,))
            
            results = cursor.fetchall()
            conn.close()
            
            return [dict(row) for row in results]
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤: {e}")
            return []
    
    def get_user_proposals(self, user_id: int, status: str = None) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = self.get_db_connection()
            if not conn:
                return []
            
            cursor = conn.cursor()
            
            query = """
                SELECT 
                    op.id, op.status, op.created_at, op.expires_at,
                    op.rejection_reason, op.responded_at,
                    o.title as offer_title, o.budget as offer_budget,
                    c.title as channel_title, c.username as channel_username
                FROM offer_proposals op
                JOIN channels c ON op.channel_id = c.id
                JOIN offers o ON op.offer_id = o.id
                WHERE c.owner_id = ?
            """
            
            params = [user_id]
            
            if status:
                query += " AND op.status = ?"
                params.append(status)
            
            query += " ORDER BY op.created_at DESC LIMIT 20"
            
            cursor.execute(query, params)
            results = cursor.fetchall()
            conn.close()
            
            return [dict(row) for row in results]
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {e}")
            return []
    
    def get_user_offers(self, user_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = self.get_db_connection()
            if not conn:
                return []
            
            cursor = conn.cursor()
            cursor.execute("""
                SELECT 
                    o.id, o.title, o.status, o.budget, o.created_at,
                    o.selected_channels_count,
                    COUNT(op.id) as total_proposals,
                    SUM(CASE WHEN op.status = 'accepted' THEN 1 ELSE 0 END) as accepted_count
                FROM offers o
                LEFT JOIN offer_proposals op ON o.id = op.offer_id
                WHERE o.created_by = ?
                GROUP BY o.id, o.title, o.status, o.budget, o.created_at
                ORDER BY o.created_at DESC
                LIMIT 10
            """, (user_id,))
            
            results = cursor.fetchall()
            conn.close()
            
            return [dict(row) for row in results]
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–æ–≤: {e}")
            return []
    
    def _register_commands(self) -> List[BotCommand]:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
        return [
            BotCommand(
                command="my_proposals",
                description="üìã –ú–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Ö–æ–¥—è—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
                handler=self.handle_my_proposals
            ),
            BotCommand(
                command="my_offers",
                description="üéØ –ú–æ–∏ –æ—Ñ—Ñ–µ—Ä—ã - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –æ—Ñ—Ñ–µ—Ä—ã",
                handler=self.handle_my_offers
            ),
            BotCommand(
                command="my_channels",
                description="üì¢ –ú–æ–∏ –∫–∞–Ω–∞–ª—ã - —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∫–∞–Ω–∞–ª–æ–≤",
                handler=self.handle_my_channels
            ),
            BotCommand(
                command="proposal_stats",
                description="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π",
                handler=self.handle_proposal_stats
            ),
            BotCommand(
                command="accept_proposal",
                description="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
                handler=self.handle_accept_proposal
            ),
            BotCommand(
                command="reject_proposal",
                description="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
                handler=self.handle_reject_proposal
            ),
            BotCommand(
                command="placement_status",
                description="üì§ –°—Ç–∞—Ç—É—Å —Ä–∞–∑–º–µ—â–µ–Ω–∏–π",
                handler=self.handle_placement_status
            ),
            BotCommand(
                command="help_offers",
                description="‚ùì –ü–æ–º–æ—â—å –ø–æ —Å–∏—Å—Ç–µ–º–µ –æ—Ñ—Ñ–µ—Ä–æ–≤",
                handler=self.handle_help_offers
            )
        ]
    
    def handle_my_proposals(self, update, context) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /my_proposals"""
        try:
            telegram_id = update.effective_user.id
            user = self.get_user_by_telegram_id(telegram_id)
            
            if not user:
                update.message.reply_text(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ."
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            proposals = self.get_user_proposals(user['id'])
            
            if not proposals:
                update.message.reply_text(
                    "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ —Ä–µ–∫–ª–∞–º—ã.\n\n"
                    "–î–æ–±–∞–≤—å—Ç–µ –∏ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ —Å–≤–æ–∏ –∫–∞–Ω–∞–ª—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è!"
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = "üìã <b>–í–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:</b>\n\n"
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            status_groups = {}
            for proposal in proposals:
                status = proposal['status']
                if status not in status_groups:
                    status_groups[status] = []
                status_groups[status].append(proposal)
            
            status_emojis = {
                'sent': 'üì®',
                'accepted': '‚úÖ',
                'rejected': '‚ùå',
                'expired': '‚è∞'
            }
            
            status_names = {
                'sent': '–û–∂–∏–¥–∞—é—Ç –æ—Ç–≤–µ—Ç–∞',
                'accepted': '–ü—Ä–∏–Ω—è—Ç—ã–µ',
                'rejected': '–û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ',
                'expired': '–ò—Å—Ç–µ–∫—à–∏–µ'
            }
            
            for status, proposals_list in status_groups.items():
                emoji = status_emojis.get(status, 'üìÑ')
                name = status_names.get(status, status.title())
                
                message += f"{emoji} <b>{name}</b> ({len(proposals_list)}):\n"
                
                for proposal in proposals_list[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ —Å—Ç–∞—Ç—É—Å
                    message += f"‚Ä¢ {proposal['offer_title']}\n"
                    message += f"  üí∞ {proposal['offer_budget']} —Ä—É–±.\n"
                    message += f"  üì¢ {proposal['channel_title']}\n"
                    
                    if status == 'sent':
                        expires_at = datetime.fromisoformat(proposal['expires_at'])
                        remaining = expires_at - datetime.now()
                        if remaining.total_seconds() > 0:
                            hours = int(remaining.total_seconds() // 3600)
                            message += f"  ‚è± –û—Å—Ç–∞–ª–æ—Å—å: {hours} —á.\n"
                    
                    message += f"  üÜî ID: {proposal['id']}\n\n"
                
                if len(proposals_list) > 5:
                    message += f"  ... –∏ –µ—â–µ {len(proposals_list) - 5}\n\n"
            
            message += "üí° <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
            message += "‚Ä¢ /accept_proposal <ID> - –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ\n"
            message += "‚Ä¢ /reject_proposal <ID> - –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ\n"
            message += "‚Ä¢ /placement_status - —Å—Ç–∞—Ç—É—Å —Ä–∞–∑–º–µ—â–µ–Ω–∏–π"
            
            update.message.reply_text(message, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ /my_proposals: {e}")
            update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.")
    
    def handle_my_offers(self, update, context) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /my_offers"""
        try:
            telegram_id = update.effective_user.id
            user = self.get_user_by_telegram_id(telegram_id)
            
            if not user:
                update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            offers = self.get_user_offers(user['id'])
            
            if not offers:
                update.message.reply_text(
                    "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ñ—Ñ–µ—Ä–æ–≤.\n\n"
                    "–°–æ–∑–¥–∞–π—Ç–µ –æ—Ñ—Ñ–µ—Ä —á–µ—Ä–µ–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–µ–∫–ª–∞–º–Ω—É—é –∫–∞–º–ø–∞–Ω–∏—é!"
                )
                return
            
            message = "üéØ <b>–í–∞—à–∏ –æ—Ñ—Ñ–µ—Ä—ã:</b>\n\n"
            
            for offer in offers:
                status_emoji = {
                    'draft': 'üìù',
                    'matching': 'üîç',
                    'started': 'üöÄ',
                    'in_progress': '‚è≥',
                    'completed': '‚úÖ',
                    'cancelled': '‚ùå'
                }.get(offer['status'], 'üìÑ')
                
                message += f"{status_emoji} <b>{offer['title']}</b>\n"
                message += f"üí∞ –ë—é–¥–∂–µ—Ç: {offer['budget']} —Ä—É–±.\n"
                message += f"üìä –°—Ç–∞—Ç—É—Å: {offer['status']}\n"
                message += f"üì§ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {offer['total_proposals'] or 0}\n"
                message += f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: {offer['accepted_count'] or 0}\n"
                message += f"üÜî ID: {offer['id']}\n\n"
            
            message += "üí° –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –æ—Ñ—Ñ–µ—Ä–∞–º–∏ —á–µ—Ä–µ–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
            
            update.message.reply_text(message, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ /my_offers: {e}")
            update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ñ—Ñ–µ—Ä–æ–≤.")
    
    def handle_my_channels(self, update, context) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /my_channels"""
        try:
            telegram_id = update.effective_user.id
            user = self.get_user_by_telegram_id(telegram_id)
            
            if not user:
                update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            channels = self.get_user_channels(user['id'])
            
            if not channels:
                update.message.reply_text(
                    "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤.\n\n"
                    "–î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∫–∞–Ω–∞–ª—ã —á–µ—Ä–µ–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ —Ä–µ–∫–ª–∞–º—ã!"
                )
                return
            
            message = "üì¢ <b>–í–∞—à–∏ –∫–∞–Ω–∞–ª—ã:</b>\n\n"
            
            for channel in channels:
                verified_emoji = "‚úÖ" if channel['is_verified'] else "‚è≥"
                
                message += f"{verified_emoji} <b>{channel['title']}</b>\n"
                if channel['username']:
                    message += f"üîó @{channel['username']}\n"
                message += f"üë• {channel['subscriber_count']} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n"
                message += f"üìä –°—Ç–∞—Ç—É—Å: {'–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω' if channel['is_verified'] else '–û–∂–∏–¥–∞–µ—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏'}\n"
                message += f"üÜî ID: {channel['id']}\n\n"
            
            message += "üí° –¢–æ–ª—å–∫–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –ø–æ–ª—É—á–∞—é—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"
            
            update.message.reply_text(message, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ /my_channels: {e}")
            update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–æ–≤.")
    
    def handle_accept_proposal(self, update, context) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /accept_proposal"""
        try:
            if not context.args:
                update.message.reply_text(
                    "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.\n"
                    "–ü—Ä–∏–º–µ—Ä: /accept_proposal 123"
                )
                return
            
            try:
                proposal_id = int(context.args[0])
            except ValueError:
                update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.")
                return
            
            telegram_id = update.effective_user.id
            user = self.get_user_by_telegram_id(telegram_id)
            
            if not user:
                update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
            proposal = self._get_proposal_by_id(proposal_id, user['id'])
            
            if not proposal:
                update.message.reply_text("‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –≤–∞–º –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç.")
                return
            
            if proposal['status'] != 'sent':
                update.message.reply_text(
                    f"‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å '{proposal['status']}' –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–Ω—è—Ç–æ."
                )
                return
            
            # –ü—Ä–∏–Ω–∏–º–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
            if self._accept_proposal(proposal_id):
                message = f"‚úÖ <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!</b>\n\n"
                message += f"üéØ –û—Ñ—Ñ–µ—Ä: {proposal['offer_title']}\n"
                message += f"üí∞ –ë—é–¥–∂–µ—Ç: {proposal['offer_budget']} —Ä—É–±.\n"
                message += f"üì¢ –ö–∞–Ω–∞–ª: {proposal['channel_title']}\n\n"
                message += f"üìÖ –†–∞–∑–º–µ—Å—Ç–∏—Ç–µ –ø–æ—Å—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."
                
                update.message.reply_text(message, parse_mode='HTML')
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—é
                self._notify_advertiser_proposal_accepted(proposal_id)
                
            else:
                update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ /accept_proposal: {e}")
            update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.")
    
    def handle_reject_proposal(self, update, context) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /reject_proposal"""
        try:
            if len(context.args) < 2:
                update.message.reply_text(
                    "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è.\n"
                    "–ü—Ä–∏–º–µ—Ä: /reject_proposal 123 –ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ —Ç–µ–º–∞—Ç–∏–∫–µ"
                )
                return
            
            try:
                proposal_id = int(context.args[0])
                reason = ' '.join(context.args[1:])
            except ValueError:
                update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.")
                return
            
            telegram_id = update.effective_user.id
            user = self.get_user_by_telegram_id(telegram_id)
            
            if not user:
                update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
            proposal = self._get_proposal_by_id(proposal_id, user['id'])
            
            if not proposal:
                update.message.reply_text("‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –≤–∞–º –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç.")
                return
            
            if proposal['status'] != 'sent':
                update.message.reply_text(
                    f"‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å '{proposal['status']}' –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ."
                )
                return
            
            # –û—Ç–∫–ª–æ–Ω—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
            if self._reject_proposal(proposal_id, reason):
                message = f"‚ùå <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ</b>\n\n"
                message += f"üéØ –û—Ñ—Ñ–µ—Ä: {proposal['offer_title']}\n"
                message += f"üì¢ –ö–∞–Ω–∞–ª: {proposal['channel_title']}\n"
                message += f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
                message += f"‚úÖ –†–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏."
                
                update.message.reply_text(message, parse_mode='HTML')
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—é
                self._notify_advertiser_proposal_rejected(proposal_id, reason)
                
            else:
                update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ /reject_proposal: {e}")
            update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.")
    
    def handle_placement_status(self, update, context) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /placement_status"""
        try:
            telegram_id = update.effective_user.id
            user = self.get_user_by_telegram_id(telegram_id)
            
            if not user:
                update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            placements = self._get_user_placements(user['id'])
            
            if not placements:
                update.message.reply_text(
                    "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–∑–º–µ—â–µ–Ω–∏–π.\n\n"
                    "–ü—Ä–∏–Ω–∏–º–∞–π—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ —Ä–µ–∫–ª–∞–º—ã, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∑–¥–µ—Å—å —Å—Ç–∞—Ç—É—Å!"
                )
                return
            
            message = "üì§ <b>–°—Ç–∞—Ç—É—Å —Ä–∞–∑–º–µ—â–µ–Ω–∏–π:</b>\n\n"
            
            for placement in placements:
                status_emoji = {
                    'pending': '‚è≥',
                    'placed': 'üì§',
                    'monitoring': 'üëÄ',
                    'completed': '‚úÖ',
                    'failed': '‚ùå'
                }.get(placement['status'], 'üìÑ')
                
                message += f"{status_emoji} <b>{placement['offer_title']}</b>\n"
                message += f"üì¢ {placement['channel_title']}\n"
                message += f"üìä –°—Ç–∞—Ç—É—Å: {placement['status']}\n"
                
                if placement['post_url']:
                    message += f"üîó –ü–æ—Å—Ç: {placement['post_url']}\n"
                
                if placement['final_views_count']:
                    message += f"üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {placement['final_views_count']}\n"
                
                message += f"üÜî ID: {placement['id']}\n\n"
            
            message += "üí° –ü–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"
            
            update.message.reply_text(message, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ /placement_status: {e}")
            update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–π.")
    
    def handle_proposal_stats(self, update, context) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /proposal_stats"""
        try:
            telegram_id = update.effective_user.id
            user = self.get_user_by_telegram_id(telegram_id)
            
            if not user:
                update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = self._get_user_proposal_stats(user['id'])
            
            message = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:</b>\n\n"
            
            message += f"üì® –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ: {stats['total']}\n"
            message += f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: {stats['accepted']} ({stats['acceptance_rate']:.1f}%)\n"
            message += f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {stats['rejected']} ({stats['rejection_rate']:.1f}%)\n"
            message += f"‚è∞ –ò—Å—Ç–µ–∫–ª–æ: {stats['expired']}\n"
            message += f"‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞: {stats['pending']}\n\n"
            
            message += f"üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {stats['total_earnings']:.2f} —Ä—É–±.\n"
            message += f"üì§ –†–∞–∑–º–µ—â–µ–Ω–∏–π: {stats['total_placements']}\n"
            message += f"üëÅ –í—Å–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {stats['total_views']}\n\n"
            
            if stats['top_categories']:
                message += "üèÜ <b>–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>\n"
                for category, count in stats['top_categories'][:3]:
                    message += f"‚Ä¢ {category}: {count}\n"
            
            update.message.reply_text(message, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ /proposal_stats: {e}")
            update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
    
    def handle_help_offers(self, update, context) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help_offers"""
        message = "‚ùì <b>–ü–æ–º–æ—â—å –ø–æ —Å–∏—Å—Ç–µ–º–µ –æ—Ñ—Ñ–µ—Ä–æ–≤</b>\n\n"
        
        message += "üéØ <b>–î–ª—è —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª–µ–π:</b>\n"
        message += "‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –æ—Ñ—Ñ–µ—Ä—ã —á–µ—Ä–µ–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
        message += "‚Ä¢ –í—ã–±–∏—Ä–∞–π—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–∞–Ω–∞–ª—ã\n"
        message += "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n\n"
        
        message += "üì¢ <b>–î–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –∫–∞–Ω–∞–ª–æ–≤:</b>\n"
        message += "‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –∏ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ –∫–∞–Ω–∞–ª—ã\n"
        message += "‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏\n"
        message += "‚Ä¢ –ü—Ä–∏–Ω–∏–º–∞–π—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω—è–π—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n\n"
        
        message += "ü§ñ <b>–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:</b>\n"
        message += "‚Ä¢ /my_proposals - –º–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n"
        message += "‚Ä¢ /my_offers - –º–æ–∏ –æ—Ñ—Ñ–µ—Ä—ã\n"
        message += "‚Ä¢ /my_channels - –º–æ–∏ –∫–∞–Ω–∞–ª—ã\n"
        message += "‚Ä¢ /accept_proposal <ID> - –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ\n"
        message += "‚Ä¢ /reject_proposal <ID> <–ø—Ä–∏—á–∏–Ω–∞> - –æ—Ç–∫–ª–æ–Ω–∏—Ç—å\n"
        message += "‚Ä¢ /placement_status - —Å—Ç–∞—Ç—É—Å —Ä–∞–∑–º–µ—â–µ–Ω–∏–π\n"
        message += "‚Ä¢ /proposal_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
        
        message += "üí° <b>–ü—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç—ã:</b>\n"
        message += "1. –†–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–µ—Ç –æ—Ñ—Ñ–µ—Ä\n"
        message += "2. –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–∞–Ω–∞–ª—ã\n"
        message += "3. –í–ª–∞–¥–µ–ª—å—Ü–∞–º –∫–∞–Ω–∞–ª–æ–≤ –ø—Ä–∏—Ö–æ–¥—è—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
        message += "4. –ü—Ä–∏–Ω—è—Ç–∏–µ/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π\n"
        message += "5. –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n\n"
        
        message += "üîó –ü–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"
        
        update.message.reply_text(message, parse_mode='HTML')
    
    def _get_proposal_by_id(self, proposal_id: int, user_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ ID"""
        try:
            conn = self.get_db_connection()
            if not conn:
                return None
            
            cursor = conn.cursor()
            cursor.execute("""
                SELECT 
                    op.id, op.status, op.offer_id, op.channel_id,
                    o.title as offer_title, o.budget as offer_budget,
                    c.title as channel_title
                FROM offer_proposals op
                JOIN offers o ON op.offer_id = o.id
                JOIN channels c ON op.channel_id = c.id
                WHERE op.id = ? AND c.owner_id = ?
            """, (proposal_id, user_id))
            
            result = cursor.fetchone()
            conn.close()
            
            return dict(result) if result else None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}")
            return None
    
    def _accept_proposal(self, proposal_id: int) -> bool:
        """–ü—Ä–∏–Ω—è—Ç–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
        try:
            conn = self.get_db_connection()
            if not conn:
                return False
            
            cursor = conn.cursor()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            cursor.execute("""
                UPDATE offer_proposals 
                SET status = 'accepted', responded_at = CURRENT_TIMESTAMP
                WHERE id = ?
            """, (proposal_id,))
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏
            cursor.execute("""
                INSERT INTO offer_placements (proposal_id, status, created_at)
                VALUES (?, 'pending', CURRENT_TIMESTAMP)
            """, (proposal_id,))
            
            conn.commit()
            conn.close()
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}")
            return False
    
    def _reject_proposal(self, proposal_id: int, reason: str) -> bool:
        """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
        try:
            conn = self.get_db_connection()
            if not conn:
                return False
            
            cursor = conn.cursor()
            cursor.execute("""
                UPDATE offer_proposals 
                SET status = 'rejected', responded_at = CURRENT_TIMESTAMP, 
                    rejection_reason = ?
                WHERE id = ?
            """, (reason, proposal_id))
            
            conn.commit()
            conn.close()
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}")
            return False
    
    def _get_user_placements(self, user_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = self.get_db_connection()
            if not conn:
                return []
            
            cursor = conn.cursor()
            cursor.execute("""
                SELECT 
                    opl.id, opl.status, opl.post_url, opl.final_views_count,
                    o.title as offer_title, c.title as channel_title
                FROM offer_placements opl
                JOIN offer_proposals op ON opl.proposal_id = op.id
                JOIN offers o ON op.offer_id = o.id
                JOIN channels c ON op.channel_id = c.id
                WHERE c.owner_id = ?
                ORDER BY opl.created_at DESC
                LIMIT 10
            """, (user_id,))
            
            results = cursor.fetchall()
            conn.close()
            
            return [dict(row) for row in results]
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏–π: {e}")
            return []
    
    def _get_user_proposal_stats(self, user_id: int) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = self.get_db_connection()
            if not conn:
                return {}
            
            cursor = conn.cursor()
            
            # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            cursor.execute("""
                SELECT 
                    COUNT(*) as total,
                    SUM(CASE WHEN status = 'accepted' THEN 1 ELSE 0 END) as accepted,
                    SUM(CASE WHEN status = 'rejected' THEN 1 ELSE 0 END) as rejected,
                    SUM(CASE WHEN status = 'expired' THEN 1 ELSE 0 END) as expired,
                    SUM(CASE WHEN status = 'sent' THEN 1 ELSE 0 END) as pending
                FROM offer_proposals op
                JOIN channels c ON op.channel_id = c.id
                WHERE c.owner_id = ?
            """, (user_id,))
            
            main_stats = cursor.fetchone()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–π
            cursor.execute("""
                SELECT 
                    COUNT(*) as total_placements,
                    SUM(final_views_count) as total_views
                FROM offer_placements opl
                JOIN offer_proposals op ON opl.proposal_id = op.id
                JOIN channels c ON op.channel_id = c.id
                WHERE c.owner_id = ?
            """, (user_id,))
            
            placement_stats = cursor.fetchone()
            
            # –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            cursor.execute("""
                SELECT o.category, COUNT(*) as count
                FROM offer_proposals op
                JOIN offers o ON op.offer_id = o.id
                JOIN channels c ON op.channel_id = c.id
                WHERE c.owner_id = ? AND op.status = 'accepted'
                GROUP BY o.category
                ORDER BY count DESC
                LIMIT 5
            """, (user_id,))
            
            top_categories = cursor.fetchall()
            
            conn.close()
            
            total = main_stats['total'] or 0
            accepted = main_stats['accepted'] or 0
            rejected = main_stats['rejected'] or 0
            
            return {
                'total': total,
                'accepted': accepted,
                'rejected': rejected,
                'expired': main_stats['expired'] or 0,
                'pending': main_stats['pending'] or 0,
                'acceptance_rate': (accepted / total * 100) if total > 0 else 0,
                'rejection_rate': (rejected / total * 100) if total > 0 else 0,
                'total_placements': placement_stats['total_placements'] or 0,
                'total_views': placement_stats['total_views'] or 0,
                'total_earnings': 0,  # –ü–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ
                'top_categories': [(row['category'], row['count']) for row in top_categories]
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}
    
    def _notify_advertiser_proposal_accepted(self, proposal_id: int):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—é –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            from .telegram_notifications import TelegramNotificationService
            
            service = TelegramNotificationService()
            service.send_proposal_accepted_notification(proposal_id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–Ω—è—Ç–∏–∏: {e}")
    
    def _notify_advertiser_proposal_rejected(self, proposal_id: int, reason: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—é –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            from .telegram_notifications import TelegramNotificationService
            
            service = TelegramNotificationService()
            service.send_proposal_rejected_notification(proposal_id, reason)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏: {e}")
    
    def register_handlers(self, dispatcher):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        try:
            from telegram.ext import CommandHandler
            
            for command in self.commands:
                handler = CommandHandler(command.command, command.handler)
                dispatcher.add_handler(handler)
                
            logger.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(self.commands)} –∫–æ–º–∞–Ω–¥ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ—Ñ—Ñ–µ—Ä–æ–≤")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
    
    def get_commands_list(self) -> List[Dict[str, str]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –º–µ–Ω—é –±–æ—Ç–∞"""
        return [
            {"command": cmd.command, "description": cmd.description}
            for cmd in self.commands
        ]

# ================================================================
# CALLBACK HANDLERS
# ================================================================

class CallbackHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ inline –∫–Ω–æ–ø–æ–∫"""
    
    def __init__(self, bot_extension: TelegramBotExtension):
        self.bot_extension = bot_extension
    
    def handle_accept_proposal_callback(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
        try:
            query = update.callback_query
            query.answer()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–∑ callback_data
            proposal_id = int(query.data.split('_')[-1])
            
            telegram_id = update.effective_user.id
            user = self.bot_extension.get_user_by_telegram_id(telegram_id)
            
            if not user:
                query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏ –ø—Ä–∏–Ω–∏–º–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
            proposal = self.bot_extension._get_proposal_by_id(proposal_id, user['id'])
            
            if not proposal:
                query.edit_message_text("‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                return
            
            if proposal['status'] != 'sent':
                query.edit_message_text(f"‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å: {proposal['status']}")
                return
            
            if self.bot_extension._accept_proposal(proposal_id):
                message = f"‚úÖ <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!</b>\n\n"
                message += f"üéØ {proposal['offer_title']}\n"
                message += f"üì¢ {proposal['channel_title']}\n\n"
                message += f"üìÖ –†–∞–∑–º–µ—Å—Ç–∏—Ç–µ –ø–æ—Å—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤"
                
                query.edit_message_text(message, parse_mode='HTML')
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è
                self.bot_extension._notify_advertiser_proposal_accepted(proposal_id)
            else:
                query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –ø—Ä–∏–Ω—è—Ç–∏—è: {e}")
            query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
    
    def handle_reject_proposal_callback(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
        try:
            query = update.callback_query
            query.answer()
            
            # –î–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Å–∏–º —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É
            proposal_id = int(query.data.split('_')[-1])
            
            message = f"‚ùå –î–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n\n"
            message += f"<code>/reject_proposal {proposal_id} –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è</code>\n\n"
            message += f"–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            message += f"<code>/reject_proposal {proposal_id} –ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ —Ç–µ–º–∞—Ç–∏–∫–µ</code>"
            
            query.edit_message_text(message, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {e}")
            query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
    
    def register_callback_handlers(self, dispatcher):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback"""
        try:
            from telegram.ext import CallbackQueryHandler
            
            handlers = [
                CallbackQueryHandler(
                    self.handle_accept_proposal_callback,
                    pattern=r'^accept_proposal_\d+$'
                ),
                CallbackQueryHandler(
                    self.handle_reject_proposal_callback,
                    pattern=r'^reject_proposal_\d+$'
                )
            ]
            
            for handler in handlers:
                dispatcher.add_handler(handler)
                
            logger.info("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ—Ñ—Ñ–µ—Ä–æ–≤")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")

# ================================================================
# MAIN FUNCTION FOR TESTING
# ================================================================

def main():
    """–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    extension = TelegramBotExtension()
    commands = extension.get_commands_list()
    
    print("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
    for cmd in commands:
        print(f"/{cmd['command']} - {cmd['description']}")

if __name__ == "__main__":
    main()