#!/usr/bin/env python3
"""
Telegram Bot Commands –¥–ª—è webhook —Å–∏—Å—Ç–µ–º—ã
–ü–µ—Ä–µ–ø–∏—Å–∞–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ HTTP webhook –±–µ–∑ python-telegram-bot library
"""

import sqlite3
import json
import logging
import requests
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
from dataclasses import dataclass
import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.config.telegram_config import AppConfig

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

@dataclass
class BotCommand:
    """–ö–æ–º–∞–Ω–¥–∞ –±–æ—Ç–∞"""
    command: str
    description: str
    admin_only: bool = False
    channel_owner_only: bool = False

class TelegramBotExtension:
    """–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ Telegram –±–æ—Ç–∞ –¥–ª—è webhook"""
    
    def __init__(self):
        self.db_path = getattr(AppConfig, 'DATABASE_PATH', 'telegram_mini_app.db')
        self.bot_token = getattr(AppConfig, 'BOT_TOKEN', None)
        self.base_url = f"https://api.telegram.org/bot{self.bot_token}" if self.bot_token else None
        self.commands = self._register_commands()
        
    def get_db_connection(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = sqlite3.connect(self.db_path)
            conn.row_factory = sqlite3.Row
            return conn
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            return None
    
    def send_telegram_message(self, chat_id: int, response_data: dict) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram Bot API"""
        try:
            if not self.bot_token:
                logger.error("BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return False
            
            url = f"{self.base_url}/sendMessage"
            data = {
                'chat_id': chat_id,
                'text': response_data.get('text', '–°–æ–æ–±—â–µ–Ω–∏–µ'),
                'parse_mode': response_data.get('parse_mode', 'HTML'),
                'disable_web_page_preview': response_data.get('disable_web_page_preview', True)
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –µ—Å–ª–∏ –µ—Å—Ç—å
            if 'reply_markup' in response_data:
                data['reply_markup'] = json.dumps(response_data['reply_markup'])
            
            response = requests.post(url, json=data, timeout=10)
            
            if response.status_code == 200 and response.json().get('ok'):
                logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    def get_user_by_telegram_id(self, telegram_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID"""
        try:
            conn = self.get_db_connection()
            if not conn:
                return None
            
            cursor = conn.cursor()
            cursor.execute("""
                SELECT id, telegram_id, username, first_name, last_name, is_admin
                FROM users WHERE telegram_id = ?
            """, (telegram_id,))
            
            result = cursor.fetchone()
            conn.close()
            
            return dict(result) if result else None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return None
    
    def get_user_channels(self, user_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = self.get_db_connection()
            if not conn:
                return []
            
            cursor = conn.cursor()
            cursor.execute("""
                SELECT id, title, username, subscriber_count, is_verified, is_active
                FROM channels 
                WHERE owner_id = ? AND is_active = 1
                ORDER BY subscriber_count DESC
            """, (user_id,))
            
            results = cursor.fetchall()
            conn.close()
            
            return [dict(row) for row in results]
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤: {e}")
            return []
    
    def get_user_proposals(self, user_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = self.get_db_connection()
            if not conn:
                return []
            
            cursor = conn.cursor()
            cursor.execute("""
                SELECT 
                    op.id, op.offer_id, op.status, op.response_message,
                    op.proposed_price, op.created_at, op.responded_at, op.expires_at,
                    o.title as offer_title, o.description as offer_description,
                    COALESCE(o.budget_total, o.price, 0) as offer_budget,
                    o.target_audience,
                    c.title as channel_title, c.username as channel_username,
                    c.subscriber_count
                FROM offer_proposals op
                JOIN offers o ON op.offer_id = o.id
                JOIN channels c ON op.channel_id = c.id
                WHERE c.owner_id = ?
                ORDER BY op.created_at DESC
                LIMIT 20
            """, (user_id,))
            
            results = cursor.fetchall()
            conn.close()
            
            return [dict(row) for row in results]
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {e}")
            return []
    
    def get_user_offers(self, user_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)"""
        try:
            conn = self.get_db_connection()
            if not conn:
                return []
            
            cursor = conn.cursor()
            cursor.execute("""
                SELECT 
                    o.id, o.title, o.status, 
                    COALESCE(o.budget_total, o.price, 0) as budget,
                    o.created_at,
                    COUNT(r.id) as total_proposals,
                    COUNT(CASE WHEN r.status = 'accepted' THEN 1 END) as accepted_count
                FROM offers o
                LEFT JOIN offer_responses r ON o.id = r.offer_id
                WHERE o.created_by = ?
                GROUP BY o.id, o.title, o.status, o.budget_total, o.price, o.created_at
                ORDER BY o.created_at DESC
                LIMIT 10
            """, (user_id,))
            
            results = cursor.fetchall()
            conn.close()
            
            return [dict(row) for row in results]
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–æ–≤: {e}")
            return []
    
    def _register_commands(self) -> List[BotCommand]:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
        return [
            BotCommand(
                command="my_proposals",
                description="üìã –ú–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Ö–æ–¥—è—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"
            ),
            BotCommand(
                command="my_offers", 
                description="üéØ –ú–æ–∏ –æ—Ñ—Ñ–µ—Ä—ã - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –æ—Ñ—Ñ–µ—Ä—ã"
            ),
            BotCommand(
                command="my_channels",
                description="üì¢ –ú–æ–∏ –∫–∞–Ω–∞–ª—ã - —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∫–∞–Ω–∞–ª–æ–≤"
            ),
            BotCommand(
                command="proposal_stats",
                description="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"
            ),
            BotCommand(
                command="help_offers",
                description="‚ùì –ü–æ–º–æ—â—å –ø–æ —Å–∏—Å—Ç–µ–º–µ –æ—Ñ—Ñ–µ—Ä–æ–≤"
            ),
            BotCommand(
                command="post_published",
                description="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"
            )
        ]

   
    # ================================================================
    # COMMAND HANDLERS - –ø–µ—Ä–µ–ø–∏—Å–∞–Ω—ã –¥–ª—è webhook
    # ================================================================
    
    def handle_my_proposals(self, telegram_id: int) -> dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /my_proposals"""
        try:
            user = self.get_user_by_telegram_id(telegram_id)
            
            if not user:
                return {
                    'text': "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.",
                    'parse_mode': 'HTML'
                }
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            proposals = self.get_user_proposals(user['id'])
            
            if not proposals:
                return {
                    'text': "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ —Ä–µ–∫–ª–∞–º—ã.\n\n"
                           "–î–æ–±–∞–≤—å—Ç–µ –∏ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ —Å–≤–æ–∏ –∫–∞–Ω–∞–ª—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è!",
                    'parse_mode': 'HTML'
                }
            
            message = "üìã <b>–í–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:</b>\n\n"
            
            for proposal in proposals[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
                status_emoji = {
                    'pending': '‚è≥',
                    'accepted': '‚úÖ',
                    'rejected': '‚ùå',
                    'completed': 'üéâ'
                }.get(proposal['status'], 'üìÑ')
                
                message += f"{status_emoji} <b>{proposal['offer_title']}</b>\n"
                message += f"üì¢ –ö–∞–Ω–∞–ª: {proposal['channel_title']}\n"  # –ò–°–ü–†–ê–í–õ–ï–ù–û
                message += f"üí∞ –û—Ñ—Ñ–µ—Ä: {proposal['offer_budget'] or '–ù–µ —É–∫–∞–∑–∞–Ω'} —Ä—É–±.\n"  # –ò–°–ü–†–ê–í–õ–ï–ù–û
                message += f"üìä –°—Ç–∞—Ç—É—Å: {proposal['status']}\n"
                message += f"üÜî ID: {proposal['id']}\n\n"
            
            if len(proposals) > 5:
                message += f"... –∏ –µ—â–µ {len(proposals) - 5} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π\n\n"
            
            message += "üí° –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ —á–µ—Ä–µ–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
            
            return {
                'text': message,
                'parse_mode': 'HTML'
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ /my_proposals: {e}")
            return {
                'text': "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.",
                'parse_mode': 'HTML'
            }
    
    def handle_my_offers(self, telegram_id: int) -> dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /my_offers"""
        try:
            user = self.get_user_by_telegram_id(telegram_id)
            
            if not user:
                return {
                    'text': "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    'parse_mode': 'HTML'
                }
            
            offers = self.get_user_offers(user['id'])
            
            if not offers:
                return {
                    'text': "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ñ—Ñ–µ—Ä–æ–≤.\n\n"
                           "–°–æ–∑–¥–∞–π—Ç–µ –æ—Ñ—Ñ–µ—Ä —á–µ—Ä–µ–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–µ–∫–ª–∞–º–Ω—É—é –∫–∞–º–ø–∞–Ω–∏—é!",
                    'parse_mode': 'HTML'
                }
            
            message = "üéØ <b>–í–∞—à–∏ –æ—Ñ—Ñ–µ—Ä—ã:</b>\n\n"
            
            for offer in offers:
                status_emoji = {
                    'draft': 'üìù',
                    'matching': 'üîç', 
                    'started': 'üöÄ',
                    'in_progress': '‚è≥',
                    'completed': '‚úÖ',
                    'cancelled': '‚ùå'
                }.get(offer['status'], 'üìÑ')
                
                message += f"{status_emoji} <b>{offer['title']}</b>\n"
                message += f"üí∞ –ë—é–¥–∂–µ—Ç: {offer['budget']} —Ä—É–±.\n"
                message += f"üìä –°—Ç–∞—Ç—É—Å: {offer['status']}\n"
                message += f"üì§ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {offer['total_proposals'] or 0}\n"
                message += f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: {offer['accepted_count'] or 0}\n"
                message += f"üÜî ID: {offer['id']}\n\n"
            
            message += "üí° –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –æ—Ñ—Ñ–µ—Ä–∞–º–∏ —á–µ—Ä–µ–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
            
            return {
                'text': message,
                'parse_mode': 'HTML'
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ /my_offers: {e}")
            return {
                'text': "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ñ—Ñ–µ—Ä–æ–≤.",
                'parse_mode': 'HTML'
            }
    
    def handle_my_channels(self, telegram_id: int) -> dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /my_channels"""
        try:
            user = self.get_user_by_telegram_id(telegram_id)
            
            if not user:
                return {
                    'text': "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    'parse_mode': 'HTML'
                }
            
            channels = self.get_user_channels(user['id'])
            
            if not channels:
                return {
                    'text': "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤.\n\n"
                           "–î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∫–∞–Ω–∞–ª—ã —á–µ—Ä–µ–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ —Ä–µ–∫–ª–∞–º—ã!",
                    'parse_mode': 'HTML'
                }
            
            message = "üì¢ <b>–í–∞—à–∏ –∫–∞–Ω–∞–ª—ã:</b>\n\n"
            
            for channel in channels:
                verified_emoji = "‚úÖ" if channel['is_verified'] else "‚è≥"
                active_emoji = "üü¢" if channel['is_active'] else "üî¥"
                
                message += f"{verified_emoji}{active_emoji} <b>{channel['title']}</b>\n"
                
                if channel['username']:
                    message += f"üîó @{channel['username']}\n"
                
                message += f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {channel['subscriber_count'] or 0}\n"
                message += f"üÜî ID: {channel['id']}\n\n"
            
            message += "üí° –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –∫–∞–Ω–∞–ª–∞–º–∏ —á–µ—Ä–µ–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
            
            return {
                'text': message,
                'parse_mode': 'HTML'
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ /my_channels: {e}")
            return {
                'text': "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–æ–≤.",
                'parse_mode': 'HTML'
            }
    
    def handle_proposal_stats(self, telegram_id: int) -> dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /proposal_stats"""
        try:
            user = self.get_user_by_telegram_id(telegram_id)
            
            if not user:
                return {
                    'text': "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    'parse_mode': 'HTML'
                }
            
            conn = self.get_db_connection()
            if not conn:
                return {
                    'text': "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
                    'parse_mode': 'HTML'
                }
            
            cursor = conn.cursor()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –∫–∞–Ω–∞–ª–æ–≤
            cursor.execute("""
                SELECT 
                    COUNT(*) as total_proposals,
                    COUNT(CASE WHEN r.status = 'pending' THEN 1 END) as pending_count,
                    COUNT(CASE WHEN r.status = 'accepted' THEN 1 END) as accepted_count,
                    COUNT(CASE WHEN r.status = 'rejected' THEN 1 END) as rejected_count
                FROM offer_responses r
                JOIN channels c ON r.channel_id = c.id
                WHERE c.owner_id = ?
            """, (user['id'],))
            
            stats = cursor.fetchone()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ñ—Ñ–µ—Ä–∞–º (–¥–ª—è —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª–µ–π)
            cursor.execute("""
                SELECT 
                    COUNT(*) as total_offers,
                    COUNT(CASE WHEN o.status = 'active' THEN 1 END) as active_offers,
                    COUNT(CASE WHEN o.status = 'completed' THEN 1 END) as completed_offers
                FROM offers o
                WHERE o.advertiser_id = ?
            """, (user['id'],))
            
            offer_stats = cursor.fetchone()
            conn.close()
            
            message = "üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
            
            if stats and stats['total_proposals'] > 0:
                message += "üìã <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–∫–∞–∫ –≤–ª–∞–¥–µ–ª–µ—Ü –∫–∞–Ω–∞–ª–∞):</b>\n"
                message += f"üì§ –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ: {stats['total_proposals']}\n"
                message += f"‚è≥ –û–∂–∏–¥–∞—é—Ç –æ—Ç–≤–µ—Ç–∞: {stats['pending_count']}\n"
                message += f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: {stats['accepted_count']}\n"
                message += f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {stats['rejected_count']}\n\n"
            
            if offer_stats and offer_stats['total_offers'] > 0:
                message += "üéØ <b>–û—Ñ—Ñ–µ—Ä—ã (–∫–∞–∫ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—å):</b>\n"
                message += f"üìä –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: {offer_stats['total_offers']}\n"
                message += f"üöÄ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {offer_stats['active_offers']}\n"
                message += f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {offer_stats['completed_offers']}\n\n"
            
            if not stats['total_proposals'] and not offer_stats['total_offers']:
                message += "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n"
                message += "üí° –î–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª—ã –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –æ—Ñ—Ñ–µ—Ä—ã!"
            
            return {
                'text': message,
                'parse_mode': 'HTML'
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ /proposal_stats: {e}")
            return {
                'text': "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.",
                'parse_mode': 'HTML'
            }
    
    def handle_help_offers(self, telegram_id: int) -> dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help_offers"""
        return {
            'text': """
‚ùì <b>–ü–æ–º–æ—â—å –ø–æ —Å–∏—Å—Ç–µ–º–µ –æ—Ñ—Ñ–µ—Ä–æ–≤</b>

üéØ <b>–î–ª—è —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª–µ–π:</b>
‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –æ—Ñ—Ñ–µ—Ä—ã —á–µ—Ä–µ–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é –∏ –±—é–¥–∂–µ—Ç
‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ –æ—Ç–∫–ª–∏–∫–∏ –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –∫–∞–Ω–∞–ª–æ–≤
‚Ä¢ –í—ã–±–∏—Ä–∞–π—Ç–µ –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è

üì¢ <b>–î–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –∫–∞–Ω–∞–ª–æ–≤:</b>
‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ –∏ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ –∫–∞–Ω–∞–ª—ã
‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏
‚Ä¢ –ü—Ä–∏–Ω–∏–º–∞–π—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω—è–π—Ç–µ –æ—Ñ—Ñ–µ—Ä—ã
‚Ä¢ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –Ω–∞ —Ä–µ–∫–ª–∞–º–µ

üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
/my_proposals - –≤–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
/my_offers - –≤–∞—à–∏ –æ—Ñ—Ñ–µ—Ä—ã  
/my_channels - –≤–∞—à–∏ –∫–∞–Ω–∞–ª—ã
/proposal_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üåê –ü–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
            """,
            'parse_mode': 'HTML'
        }
    
    def get_commands_list(self) -> List[Dict[str, str]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –º–µ–Ω—é –±–æ—Ç–∞"""
        return [
            {"command": cmd.command, "description": cmd.description}
            for cmd in self.commands
        ]
    
    def process_command(self, command: str, telegram_id: int) -> dict:
        """–ì–ª–∞–≤–Ω—ã–π —Ä–æ—É—Ç–µ—Ä –∫–æ–º–∞–Ω–¥"""
        command_map = {
            'my_proposals': self.handle_my_proposals,
            'my_offers': self.handle_my_offers,
            'my_channels': self.handle_my_channels,
            'proposal_stats': self.handle_proposal_stats,
            'help_offers': self.handle_help_offers,
            'post_published': self.handle_post_published
        }
        
        handler = command_map.get(command)
        if handler:
            return handler(telegram_id)
        else:
            return {
                'text': f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: /{command}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help_offers –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.",
                'parse_mode': 'HTML'
            }
    
    def process_command_with_args(self, command: str, telegram_id: int, args: list) -> dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏"""
        if command == 'post_published':
            return self.handle_post_published_with_link(telegram_id, args)
        else:
            return self.process_command(command, telegram_id)
    
    def handle_post_published(self, telegram_id: int) -> dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /post_published - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        try:
            from app.models import execute_db_query
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
            user = self.get_user_by_telegram_id(telegram_id)
            if not user:
                return {
                    'text': "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.",
                    'parse_mode': 'HTML'
                }
            
            # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º pending_placement
            placements = execute_db_query("""
                SELECT p.*, 
                       r.offer_id,
                       o.title as offer_title,
                       o.description as offer_description,
                       COALESCE(o.budget_total, o.price) as offer_price,
                       u.telegram_id as advertiser_telegram_id,
                       u.first_name as advertiser_first_name,
                       u.last_name as advertiser_last_name,
                       c.username as channel_username,
                       c.title as channel_title,
                       r.id as response_id
                FROM offer_placements p
                JOIN offer_responses r ON p.response_id = r.id
                JOIN channels c ON r.channel_id = c.id
                JOIN users ch_owner ON r.user_id = ch_owner.id
                JOIN offers o ON r.offer_id = o.id
                JOIN users u ON o.created_by = u.id
                WHERE ch_owner.telegram_id = ? 
                AND p.status = 'pending_placement'
                AND r.status = 'accepted'
                ORDER BY p.created_at DESC
                LIMIT 1
            """, (telegram_id,), fetch_one=True)
            
            if not placements:
                return {
                    'text': """‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–∑–º–µ—â–µ–Ω–∏–π –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
                    
üìå –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
/post_published <—Å—Å—ã–ª–∫–∞_–Ω–∞_–ø–æ—Å—Ç>

–ü—Ä–∏–º–µ—Ä: /post_published https://t.me/your_channel/123

üîÑ –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–∏–Ω—è—Ç—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.""",
                    'parse_mode': 'HTML'
                }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–µ
            execute_db_query("""
                UPDATE offer_placements 
                SET status = 'active',
                    placement_start = CURRENT_TIMESTAMP,
                    updated_at = CURRENT_TIMESTAMP
                WHERE id = ?
            """, (placements['id'],))
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏
            try:
                from app.telegram.telegram_notifications import TelegramNotificationService
                notification_service = TelegramNotificationService()
                
                advertiser_message = f"""üéâ <b>–í–∞—à–∞ —Ä–µ–∫–ª–∞–º–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∞!</b>

üì¢ <b>–ö–∞–Ω–∞–ª:</b> @{placements.get('channel_username', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
üìã <b>–û—Ñ—Ñ–µ—Ä:</b> {placements['offer_title']}
üí∞ <b>–°—É–º–º–∞:</b> {placements['offer_price']} —Ä—É–±.
üÜî <b>ID —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:</b> {placements['id']}

‚úÖ –í–ª–∞–¥–µ–ª–µ—Ü –∫–∞–Ω–∞–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞.
üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞—á–∞—Ç–æ."""
                
                notification_service.send_notification(
                    user_id=placements['advertiser_telegram_id'],
                    message=advertiser_message,
                    notification_type='placement_confirmed'
                )
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—é: {e}")
            
            return {
                'text': f"""‚úÖ <b>–†–∞–∑–º–µ—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!</b>

üì¢ <b>–û—Ñ—Ñ–µ—Ä:</b> {placements['offer_title']}
üí∞ <b>–°—É–º–º–∞:</b> {placements['offer_price']} —Ä—É–±.
üÜî <b>ID —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:</b> {placements['id']}

üéâ –†–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏.
üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ.

üíº –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.""",
                'parse_mode': 'HTML'
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /post_published: {e}")
            return {
                'text': "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                'parse_mode': 'HTML'
            }
    
    def handle_post_published_with_link(self, telegram_id: int, args: list) -> dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /post_published —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –ø–æ—Å—Ç"""
        try:
            from app.models import execute_db_query
            import re
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–∫–∏
            if not args:
                return {
                    'text': """‚ùå –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /post_published <—Å—Å—ã–ª–∫–∞>
–ü—Ä–∏–º–µ—Ä: /post_published https://t.me/your_channel/123""",
                    'parse_mode': 'HTML'
                }
            
            post_url = args[0]
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ Telegram –ø–æ—Å—Ç
            telegram_url_pattern = r'https://t\.me/([^/]+)/(\d+)'
            match = re.match(telegram_url_pattern, post_url)
            
            if not match:
                return {
                    'text': """‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Å—Ç.

–°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
https://t.me/channel_name/message_id

–ü—Ä–∏–º–µ—Ä: https://t.me/your_channel/123""",
                    'parse_mode': 'HTML'
                }
            
            channel_username = match.group(1)
            message_id = int(match.group(2))
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
            user = self.get_user_by_telegram_id(telegram_id)
            if not user:
                return {
                    'text': "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.",
                    'parse_mode': 'HTML'
                }
            
            # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º pending_placement
            placements = execute_db_query("""
                SELECT p.*, 
                       r.offer_id,
                       o.title as offer_title,
                       o.description as offer_description,
                       COALESCE(o.budget_total, o.price) as offer_price,
                       u.telegram_id as advertiser_telegram_id,
                       u.first_name as advertiser_first_name,
                       u.last_name as advertiser_last_name,
                       c.username as channel_username,
                       c.title as channel_title,
                       r.id as response_id
                FROM offer_placements p
                JOIN offer_responses r ON p.response_id = r.id
                JOIN channels c ON r.channel_id = c.id
                JOIN users ch_owner ON r.user_id = ch_owner.id
                JOIN offers o ON r.offer_id = o.id
                JOIN users u ON o.created_by = u.id
                WHERE ch_owner.telegram_id = ? 
                AND p.status = 'pending_placement'
                AND r.status = 'accepted'
                ORDER BY p.created_at DESC
                LIMIT 1
            """, (telegram_id,), fetch_one=True)
            
            if not placements:
                return {
                    'text': """‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–∑–º–µ—â–µ–Ω–∏–π –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
                    
üîÑ –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–∏–Ω—è—Ç—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.""",
                    'parse_mode': 'HTML'
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–∞–Ω–∞–ª–∞
            placement_channel = placements['channel_username']
            if placement_channel and placement_channel != channel_username:
                return {
                    'text': f"""‚ùå –°—Å—ã–ª–∫–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –∫–∞–Ω–∞–ª @{channel_username}, –Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –∫–∞–Ω–∞–ª–µ @{placement_channel}.

–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø—É–±–ª–∏–∫—É–µ—Ç–µ –ø–æ—Å—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –∫–∞–Ω–∞–ª–µ.""",
                    'parse_mode': 'HTML'
                }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Å—Ç
            execute_db_query("""
                UPDATE offer_placements 
                SET status = 'active',
                    post_url = ?,
                    placement_start = CURRENT_TIMESTAMP,
                    updated_at = CURRENT_TIMESTAMP
                WHERE id = ?
            """, (post_url, placements['id']))
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏
            try:
                from app.telegram.telegram_notifications import TelegramNotificationService
                notification_service = TelegramNotificationService()
                
                channel_name = f"@{channel_username}"
                publish_time = datetime.now().strftime("%d %B, %H:%M")
                
                advertiser_message = f"""üì§ <b>–†–µ–∫–ª–∞–º–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∞!</b>

üì∫ <b>–ö–∞–Ω–∞–ª:</b> {channel_name}
üîó <b>–°—Å—ã–ª–∫–∞:</b> {post_url}
‚è∞ <b>–†–∞–∑–º–µ—â–µ–Ω–æ:</b> {publish_time}

üìã <b>–û—Ñ—Ñ–µ—Ä:</b> {placements['offer_title']}
üí∞ <b>–°—É–º–º–∞:</b> {placements['offer_price']} —Ä—É–±.
üÜî <b>ID —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:</b> {placements['id']}

üìä <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–∞—á–∞—Ç–æ</b>
–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ —á–∞—Å"""
                
                notification_service.send_notification(
                    user_id=placements['advertiser_telegram_id'],
                    message=advertiser_message,
                    notification_type='post_published'
                )
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—é: {e}")
            
            return {
                'text': f"""‚úÖ <b>–†–∞–∑–º–µ—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!</b>

üì∫ <b>–ö–∞–Ω–∞–ª:</b> @{channel_username}
üîó <b>–°—Å—ã–ª–∫–∞:</b> {post_url}
üìã <b>–û—Ñ—Ñ–µ—Ä:</b> {placements['offer_title']}
üí∞ <b>–°—É–º–º–∞:</b> {placements['offer_price']} —Ä—É–±.
üÜî <b>ID —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:</b> {placements['id']}

üéâ –†–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏.
üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ.

üíº –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.""",
                'parse_mode': 'HTML'
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /post_published —Å —Å—Å—ã–ª–∫–æ–π: {e}")
            return {
                'text': "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                'parse_mode': 'HTML'
            }

# ================================================================
# TESTING FUNCTION
# ================================================================

def main():
    """–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    extension = TelegramBotExtension()
    commands = extension.get_commands_list()
    
    print("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
    for cmd in commands:
        print(f"/{cmd['command']} - {cmd['description']}")

if __name__ == "__main__":
    main()