#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram Bot
–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –æ—Ñ—Ñ–µ—Ä–æ–≤
"""

import sqlite3
import requests
import json
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
from dataclasses import dataclass
from enum import Enum
import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.config.telegram_config import AppConfig

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

class NotificationType(Enum):
    """–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    NEW_PROPOSAL = "new_proposal"
    PROPOSAL_REMINDER = "proposal_reminder"
    PROPOSAL_EXPIRED = "proposal_expired"
    PROPOSAL_ACCEPTED = "proposal_accepted"
    PROPOSAL_REJECTED = "proposal_rejected"
    PLACEMENT_REQUIRED = "placement_required"
    PLACEMENT_SUBMITTED = "placement_submitted"
    PLACEMENT_VERIFIED = "placement_verified"
    PLACEMENT_FAILED = "placement_failed"
    CAMPAIGN_COMPLETED = "campaign_completed"

@dataclass
class NotificationData:
    """–î–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    user_id: int
    telegram_id: int
    notification_type: NotificationType
    title: str
    message: str
    data: Dict[str, Any]
    buttons: Optional[List[Dict[str, str]]] = None
    priority: int = 1  # 1 - –Ω–∏–∑–∫–∏–π, 2 - —Å—Ä–µ–¥–Ω–∏–π, 3 - –≤—ã—Å–æ–∫–∏–π

class TelegramNotificationService:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram"""
    
    def __init__(self):
        self.bot_token = self._get_bot_token()
        self.base_url = f"https://api.telegram.org/bot{self.bot_token}" if self.bot_token else None
        self.db_path = getattr(AppConfig, 'DATABASE_PATH', 'telegram_mini_app.db')
        
    def _get_bot_token(self) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞"""
        try:
            return AppConfig.BOT_TOKEN
        except:
            return os.environ.get('BOT_TOKEN')
    
    def get_db_connection(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = sqlite3.connect(self.db_path)
            conn.row_factory = sqlite3.Row
            return conn
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            return None
    
    def send_notification(self, notification: NotificationData) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            if not self.bot_token:
                logger.warning("BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è")
                return False
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_text = f"<b>{notification.title}</b>\n\n{notification.message}"
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            send_data = {
                'chat_id': notification.telegram_id,
                'text': message_text,
                'parse_mode': 'HTML',
                'disable_web_page_preview': True
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
            if notification.buttons:
                keyboard = {
                    'inline_keyboard': [
                        [{'text': btn['text'], 'callback_data': btn['callback_data']}] 
                        for btn in notification.buttons
                    ]
                }
                send_data['reply_markup'] = json.dumps(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            response = requests.post(
                f"{self.base_url}/sendMessage",
                json=send_data,
                timeout=10
            )
            
            if response.status_code == 200:
                result = response.json()
                if result.get('ok'):
                    logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {notification.notification_type.value} -> {notification.telegram_id}")
                    self._save_notification_log(notification, 'sent', result.get('result', {}).get('message_id'))
                    return True
                else:
                    error_msg = result.get('description', 'Unknown error')
                    logger.error(f"‚ùå Telegram API error: {error_msg}")
                    self._save_notification_log(notification, 'failed', error_message=error_msg)
                    return False
            else:
                logger.error(f"‚ùå HTTP error {response.status_code}: {response.text}")
                self._save_notification_log(notification, 'failed', error_message=f"HTTP {response.status_code}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            self._save_notification_log(notification, 'failed', error_message=str(e))
            return False
    
    def _save_notification_log(self, notification: NotificationData, status: str, 
                              message_id: Optional[int] = None, error_message: Optional[str] = None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            conn = self.get_db_connection()
            if not conn:
                return
            
            cursor = conn.cursor()
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ª–æ–≥–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS notification_logs (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    telegram_id INTEGER,
                    notification_type TEXT,
                    title TEXT,
                    message TEXT,
                    status TEXT,
                    message_id INTEGER,
                    error_message TEXT,
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                    data TEXT
                )
            """)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥
            cursor.execute("""
                INSERT INTO notification_logs (
                    user_id, telegram_id, notification_type, title, message,
                    status, message_id, error_message, data
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                notification.user_id,
                notification.telegram_id,
                notification.notification_type.value,
                notification.title,
                notification.message,
                status,
                message_id,
                error_message,
                json.dumps(notification.data)
            ))
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    def send_new_proposal_notification(self, proposal_id: int) -> bool:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏"""
        try:
            proposal_data = self._get_proposal_data(proposal_id)
            if not proposal_data:
                return False
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = f"üì¢ <b>–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Ä–µ–∫–ª–∞–º–µ!</b>\n\n"
            message += f"üéØ <b>–û—Ñ—Ñ–µ—Ä:</b> {proposal_data['offer_title']}\n"
            message += f"üí∞ <b>–ë—é–¥–∂–µ—Ç:</b> {proposal_data['offer_budget']} —Ä—É–±.\n"
            message += f"üìä <b>–í–∞—à –∫–∞–Ω–∞–ª:</b> {proposal_data['channel_title']}\n"
            message += f"üë• <b>–ü–æ–¥–ø–∏—Å—á–∏–∫–∏:</b> {proposal_data['subscriber_count']}\n\n"
            
            if proposal_data['offer_description']:
                message += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{proposal_data['offer_description'][:200]}...\n\n"
            
            message += f"‚è± <b>–°—Ä–æ–∫ –æ—Ç–≤–µ—Ç–∞:</b> {proposal_data['expires_at']}\n\n"
            message += f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã /my_proposals –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ —á–µ—Ä–µ–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
            buttons = [
                {'text': '‚úÖ –ü—Ä–∏–Ω—è—Ç—å', 'callback_data': f'accept_proposal_{proposal_id}'},
                {'text': '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', 'callback_data': f'reject_proposal_{proposal_id}'},
                {'text': 'üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ', 'callback_data': f'proposal_details_{proposal_id}'}
            ]
            
            notification = NotificationData(
                user_id=proposal_data['channel_owner_id'],
                telegram_id=proposal_data['channel_owner_telegram_id'],
                notification_type=NotificationType.NEW_PROPOSAL,
                title="–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Ä–µ–∫–ª–∞–º–µ",
                message=message,
                data={
                    'proposal_id': proposal_id,
                    'offer_id': proposal_data['offer_id'],
                    'channel_id': proposal_data['channel_id']
                },
                buttons=buttons,
                priority=2
            )
            
            return self.send_notification(notification)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏: {e}")
            return False
    
    def send_proposal_reminder(self, proposal_id: int) -> bool:
        """–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏"""
        try:
            proposal_data = self._get_proposal_data(proposal_id)
            if not proposal_data:
                return False
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
            expires_at = datetime.fromisoformat(proposal_data['expires_at'])
            remaining = expires_at - datetime.now()
            
            if remaining.total_seconds() <= 0:
                return False  # –£–∂–µ –∏—Å—Ç–µ–∫–ª–æ
            
            hours_remaining = int(remaining.total_seconds() // 3600)
            
            message = f"‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏</b>\n\n"
            message += f"üéØ <b>–û—Ñ—Ñ–µ—Ä:</b> {proposal_data['offer_title']}\n"
            message += f"üí∞ <b>–ë—é–¥–∂–µ—Ç:</b> {proposal_data['offer_budget']} —Ä—É–±.\n"
            message += f"üìä <b>–í–∞—à –∫–∞–Ω–∞–ª:</b> {proposal_data['channel_title']}\n\n"
            message += f"‚è± <b>–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏:</b> {hours_remaining} —á–∞—Å–æ–≤\n\n"
            message += f"‚ùóÔ∏è –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞!"
            
            buttons = [
                {'text': '‚úÖ –ü—Ä–∏–Ω—è—Ç—å', 'callback_data': f'accept_proposal_{proposal_id}'},
                {'text': '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', 'callback_data': f'reject_proposal_{proposal_id}'}
            ]
            
            notification = NotificationData(
                user_id=proposal_data['channel_owner_id'],
                telegram_id=proposal_data['channel_owner_telegram_id'],
                notification_type=NotificationType.PROPOSAL_REMINDER,
                title="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏",
                message=message,
                data={
                    'proposal_id': proposal_id,
                    'hours_remaining': hours_remaining
                },
                buttons=buttons,
                priority=3
            )
            
            return self.send_notification(notification)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏: {e}")
            return False
    
    def send_proposal_accepted_notification(self, proposal_id: int) -> bool:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—é –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
        try:
            proposal_data = self._get_proposal_data(proposal_id)
            if not proposal_data:
                return False
            
            message = f"‚úÖ <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!</b>\n\n"
            message += f"üì¢ <b>–ö–∞–Ω–∞–ª:</b> {proposal_data['channel_title']}\n"
            message += f"üë• <b>–ü–æ–¥–ø–∏—Å—á–∏–∫–∏:</b> {proposal_data['subscriber_count']}\n"
            message += f"üéØ <b>–í–∞—à –æ—Ñ—Ñ–µ—Ä:</b> {proposal_data['offer_title']}\n\n"
            message += f"üìÖ <b>–û–∂–∏–¥–∞–π—Ç–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤</b>\n\n"
            message += f"üîî –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –ø–æ—Å—Ç –±—É–¥–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω"
            
            notification = NotificationData(
                user_id=proposal_data['offer_creator_id'],
                telegram_id=proposal_data['offer_creator_telegram_id'],
                notification_type=NotificationType.PROPOSAL_ACCEPTED,
                title="–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ",
                message=message,
                data={
                    'proposal_id': proposal_id,
                    'offer_id': proposal_data['offer_id']
                },
                priority=2
            )
            
            return self.send_notification(notification)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–Ω—è—Ç–∏–∏: {e}")
            return False
    
    def send_proposal_rejected_notification(self, proposal_id: int, rejection_reason: str) -> bool:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—é –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
        try:
            proposal_data = self._get_proposal_data(proposal_id)
            if not proposal_data:
                return False
            
            message = f"‚ùå <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ</b>\n\n"
            message += f"üì¢ <b>–ö–∞–Ω–∞–ª:</b> {proposal_data['channel_title']}\n"
            message += f"üéØ <b>–í–∞—à –æ—Ñ—Ñ–µ—Ä:</b> {proposal_data['offer_title']}\n\n"
            message += f"üìù <b>–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:</b>\n{rejection_reason}\n\n"
            message += f"üí° –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏"
            
            notification = NotificationData(
                user_id=proposal_data['offer_creator_id'],
                telegram_id=proposal_data['offer_creator_telegram_id'],
                notification_type=NotificationType.PROPOSAL_REJECTED,
                title="–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ",
                message=message,
                data={
                    'proposal_id': proposal_id,
                    'rejection_reason': rejection_reason
                },
                priority=1
            )
            
            return self.send_notification(notification)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏: {e}")
            return False
    
    def send_placement_submitted_notification(self, placement_id: int, post_url: str) -> bool:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—é –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞"""
        try:
            placement_data = self._get_placement_data(placement_id)
            if not placement_data:
                return False
            
            message = f"üì§ <b>–ü–æ—Å—Ç —Ä–∞–∑–º–µ—â–µ–Ω!</b>\n\n"
            message += f"üì¢ <b>–ö–∞–Ω–∞–ª:</b> {placement_data['channel_title']}\n"
            message += f"üéØ <b>–í–∞—à –æ—Ñ—Ñ–µ—Ä:</b> {placement_data['offer_title']}\n"
            message += f"üîó <b>–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç:</b> {post_url}\n\n"
            message += f"‚úÖ –ü–æ—Å—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å—Å—è –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏\n"
            message += f"üìä –í—ã –ø–æ–ª—É—á–∏—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏"
            
            buttons = [
                {'text': 'üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å—Ç', 'url': post_url},
                {'text': 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'callback_data': f'placement_stats_{placement_id}'}
            ]
            
            notification = NotificationData(
                user_id=placement_data['offer_creator_id'],
                telegram_id=placement_data['offer_creator_telegram_id'],
                notification_type=NotificationType.PLACEMENT_SUBMITTED,
                title="–ü–æ—Å—Ç —Ä–∞–∑–º–µ—â–µ–Ω",
                message=message,
                data={
                    'placement_id': placement_id,
                    'post_url': post_url
                },
                buttons=buttons,
                priority=2
            )
            
            return self.send_notification(notification)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏: {e}")
            return False
    
    def send_placement_failed_notification(self, placement_id: int, reason: str) -> bool:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ —Å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º"""
        try:
            placement_data = self._get_placement_data(placement_id)
            if not placement_data:
                return False
            
            message = f"‚ö†Ô∏è <b>–ü—Ä–æ–±–ª–µ–º–∞ —Å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º</b>\n\n"
            message += f"üì¢ <b>–ö–∞–Ω–∞–ª:</b> {placement_data['channel_title']}\n"
            message += f"üéØ <b>–í–∞—à –æ—Ñ—Ñ–µ—Ä:</b> {placement_data['offer_title']}\n\n"
            message += f"‚ùå <b>–ü—Ä–æ–±–ª–µ–º–∞:</b> {reason}\n\n"
            message += f"üîî –ú—ã —É–≤–µ–¥–æ–º–∏–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞–Ω–∞–ª–∞ –æ –ø—Ä–æ–±–ª–µ–º–µ"
            
            notification = NotificationData(
                user_id=placement_data['offer_creator_id'],
                telegram_id=placement_data['offer_creator_telegram_id'],
                notification_type=NotificationType.PLACEMENT_FAILED,
                title="–ü—Ä–æ–±–ª–µ–º–∞ —Å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º",
                message=message,
                data={
                    'placement_id': placement_id,
                    'reason': reason
                },
                priority=3
            )
            
            return self.send_notification(notification)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–±–ª–µ–º–µ: {e}")
            return False
    
    def _get_proposal_data(self, proposal_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            conn = self.get_db_connection()
            if not conn:
                return None
            
            cursor = conn.cursor()
            cursor.execute("""
                SELECT 
                    op.id, op.offer_id, op.channel_id, op.expires_at,
                    -- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ñ—Ñ–µ—Ä–µ
                    o.title as offer_title, o.description as offer_description,
                    o.budget as offer_budget, o.created_by as offer_creator_id,
                    -- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ
                    c.title as channel_title, c.subscriber_count, c.owner_id as channel_owner_id,
                    -- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ –∫–∞–Ω–∞–ª–∞
                    u_channel.telegram_id as channel_owner_telegram_id,
                    -- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ –æ—Ñ—Ñ–µ—Ä–∞
                    u_offer.telegram_id as offer_creator_telegram_id
                FROM offer_proposals op
                JOIN offers o ON op.offer_id = o.id
                JOIN channels c ON op.channel_id = c.id
                JOIN users u_channel ON c.owner_id = u_channel.id
                JOIN users u_offer ON o.created_by = u_offer.id
                WHERE op.id = ?
            """, (proposal_id,))
            
            result = cursor.fetchone()
            conn.close()
            
            return dict(result) if result else None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}")
            return None
    
    def _get_placement_data(self, placement_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            conn = self.get_db_connection()
            if not conn:
                return None
            
            cursor = conn.cursor()
            cursor.execute("""
                SELECT 
                    opl.id, opl.proposal_id, opl.post_url,
                    -- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ñ—Ñ–µ—Ä–µ
                    o.title as offer_title, o.created_by as offer_creator_id,
                    -- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ
                    c.title as channel_title, c.owner_id as channel_owner_id,
                    -- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ –æ—Ñ—Ñ–µ—Ä–∞
                    u_offer.telegram_id as offer_creator_telegram_id,
                    -- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ –∫–∞–Ω–∞–ª–∞
                    u_channel.telegram_id as channel_owner_telegram_id
                FROM offer_placements opl
                JOIN offer_proposals op ON opl.proposal_id = op.id
                JOIN offers o ON op.offer_id = o.id
                JOIN channels c ON op.channel_id = c.id
                JOIN users u_offer ON o.created_by = u_offer.id
                JOIN users u_channel ON c.owner_id = u_channel.id
                WHERE opl.id = ?
            """, (placement_id,))
            
            result = cursor.fetchone()
            conn.close()
            
            return dict(result) if result else None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {e}")
            return None

# ================================================================
# –ú–ê–°–°–û–í–´–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø
# ================================================================

class NotificationQueue:
    """–û—á–µ—Ä–µ–¥—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    
    def __init__(self):
        self.service = TelegramNotificationService()
        self.queue = []
        self.failed_notifications = []
    
    def add_notification(self, notification: NotificationData):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å"""
        self.queue.append(notification)
    
    def process_queue(self, batch_size: int = 10, delay: float = 1.0) -> Dict[str, int]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        import time
        
        processed = 0
        sent = 0
        failed = 0
        
        while self.queue and processed < batch_size:
            notification = self.queue.pop(0)
            
            try:
                if self.service.send_notification(notification):
                    sent += 1
                else:
                    failed += 1
                    self.failed_notifications.append(notification)
                
                processed += 1
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                if processed < batch_size and self.queue:
                    time.sleep(delay)
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
                failed += 1
                self.failed_notifications.append(notification)
                processed += 1
        
        return {
            'processed': processed,
            'sent': sent,
            'failed': failed,
            'remaining': len(self.queue)
        }
    
    def retry_failed_notifications(self) -> Dict[str, int]:
        """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if not self.failed_notifications:
            return {'processed': 0, 'sent': 0, 'failed': 0}
        
        retry_queue = self.failed_notifications.copy()
        self.failed_notifications.clear()
        
        sent = 0
        failed = 0
        
        for notification in retry_queue:
            try:
                if self.service.send_notification(notification):
                    sent += 1
                else:
                    failed += 1
                    self.failed_notifications.append(notification)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
                failed += 1
                self.failed_notifications.append(notification)
        
        return {
            'processed': len(retry_queue),
            'sent': sent,
            'failed': failed
        }

# ================================================================
# UTILITY FUNCTIONS
# ================================================================

def send_new_proposal_notifications(offer_id: int, channel_ids: List[int]) -> Dict[str, int]:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö"""
    try:
        service = TelegramNotificationService()
        queue = NotificationQueue()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        conn = service.get_db_connection()
        if not conn:
            return {'sent': 0, 'failed': 0}
        
        cursor = conn.cursor()
        cursor.execute("""
            SELECT id FROM offer_proposals 
            WHERE offer_id = ? AND channel_id IN ({})
        """.format(','.join('?' * len(channel_ids))), [offer_id] + channel_ids)
        
        proposal_ids = [row[0] for row in cursor.fetchall()]
        conn.close()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å
        for proposal_id in proposal_ids:
            if service.send_new_proposal_notification(proposal_id):
                pass  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        
        return {'sent': len(proposal_ids), 'failed': 0}
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        return {'sent': 0, 'failed': 1}

def send_daily_reminders() -> Dict[str, int]:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    try:
        service = TelegramNotificationService()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫–∞—é—Ç –∑–∞–≤—Ç—Ä–∞
        conn = service.get_db_connection()
        if not conn:
            return {'sent': 0, 'failed': 0}
        
        cursor = conn.cursor()
        cursor.execute("""
            SELECT id FROM offer_proposals 
            WHERE status = 'sent' 
            AND expires_at BETWEEN datetime('now') AND datetime('now', '+24 hours')
            AND reminder_sent_at IS NULL
        """)
        
        proposal_ids = [row[0] for row in cursor.fetchall()]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        sent = 0
        failed = 0
        
        for proposal_id in proposal_ids:
            if service.send_proposal_reminder(proposal_id):
                sent += 1
                # –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                cursor.execute("""
                    UPDATE offer_proposals 
                    SET reminder_sent_at = CURRENT_TIMESTAMP 
                    WHERE id = ?
                """, (proposal_id,))
            else:
                failed += 1
        
        conn.commit()
        conn.close()
        
        return {'sent': sent, 'failed': failed}
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
        return {'sent': 0, 'failed': 1}

# ================================================================
# MAIN FUNCTION FOR TESTING
# ================================================================

def main():
    """–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    service = TelegramNotificationService()
    
    # –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    test_notification = NotificationData(
        user_id=1,
        telegram_id=373086959,  # –í–∞—à Telegram ID
        notification_type=NotificationType.NEW_PROPOSAL,
        title="–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
        message="–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ—Ñ—Ñ–µ—Ä–æ–≤",
        data={'test': True},
        buttons=[
            {'text': '–¢–µ—Å—Ç', 'callback_data': 'test_callback'}
        ]
    )
    
    result = service.send_notification(test_notification)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏: {result}")

if __name__ == "__main__":
    main()