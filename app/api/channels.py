"""
–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π API –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤ –±–µ–∑ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
"""
from flask import Blueprint, request, jsonify
import logging
import sqlite3
import os
import re
import random
from datetime import datetime
from app.services.telegram_verification import verify_channel

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ Blueprint
channels_bp = Blueprint('channels', __name__)

# –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DATABASE_PATH = 'telegram_mini_app.db'


def get_db_connection():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect(DATABASE_PATH)
    conn.row_factory = sqlite3.Row
    return conn

def extract_username_from_url(url):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç username –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ URL Telegram"""
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
    url = url.strip()

    # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ —á–∏—Å—Ç—ã–π username
    if not url.startswith('http') and not url.startswith('@'):
        return url.lstrip('@')

    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è username
    patterns = [
        r'https?://t\.me/([a-zA-Z0-9_]+)',  # https://t.me/username
        r'https?://telegram\.me/([a-zA-Z0-9_]+)',  # https://telegram.me/username
        r'@([a-zA-Z0-9_]+)',  # @username
        r'^([a-zA-Z0-9_]+)$'  # –ø—Ä–æ—Å—Ç–æ username
    ]

    for pattern in patterns:
        match = re.search(pattern, url)
        if match:
            username = match.group(1)
            logger.info(f"üîç –ò–∑–≤–ª–µ—á–µ–Ω username: {username} –∏–∑ URL: {url}")
            return username

    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å username –∏–∑: {url}")
    return url.lstrip('@')


@channels_bp.route('/my', methods=['GET'])
def get_my_channels():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        telegram_user_id = request.headers.get('X-Telegram-User-Id')

        if not telegram_user_id:
            return jsonify({
                'success': False,
                'error': 'X-Telegram-User-Id header is required'
            }), 400

        logger.info(f"üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è Telegram ID: {telegram_user_id}")

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('telegram_mini_app.db')
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        cursor.execute("""
                       SELECT c.*,
                              u.username as owner_username
                       FROM channels c
                                LEFT JOIN users u ON c.owner_id = u.id
                       WHERE u.telegram_id = ?
                       ORDER BY c.created_at DESC
                       """, (telegram_user_id,))

        channels = cursor.fetchall()
        conn.close()

        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤ –≤ –ë–î: {len(channels)}")

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
        channels_list = []
        for channel in channels:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–∑ –ë–î
            subscriber_count = channel['subscriber_count']

            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            logger.info(f"üìà –ö–∞–Ω–∞–ª {channel['title']}: subscriber_count –≤ –ë–î = {subscriber_count}")

            channel_dict = {
                'id': channel['id'],
                'telegram_id': channel['telegram_id'],
                'title': channel['title'],
                'username': channel['username'],

                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
                'subscriber_count': subscriber_count or 0,  # ‚úÖ –ò–∑ –ë–î
                'description': channel['description'] or '',
                'category': channel['category'] or 'general',
                'language': channel['language'] or 'ru',
                'is_verified': bool(channel['is_verified']),
                'is_active': bool(channel['is_active']),
                'created_at': channel['created_at'],
                'updated_at': channel['updated_at'],
                'verification_code': channel['verification_code'],
                'status': channel['status'],
                'verified_at': channel['verified_at'],
                'owner_username': channel['owner_username'],

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
                'channel_name': channel['title'],
                'channel_username': channel['username'],

                # –ü–æ–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –ë–î - –¥–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                'is_public': True,
                'accepts_ads': True,
                'invite_link': f'https://t.me/{channel["username"].lstrip("@")}' if channel['username'] else None,
                'photo_url': None,
                'avg_engagement_rate': 0.0,
                'price_per_post': 0,

                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                'offers_count': get_channel_offers_count(channel['id']),
                'posts_count': get_channel_posts_count(channel['id'])
            }
            channels_list.append(channel_dict)

        logger.info(f"‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º {len(channels_list)} –∫–∞–Ω–∞–ª–æ–≤")

        return jsonify({
            'success': True,
            'channels': channels_list,
            'total': len(channels_list)
        })

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500


# –î–û–ë–ê–í–õ–Ø–ï–ú –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
def get_channel_offers_count(channel_id: int) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ñ—Ñ–µ—Ä–æ–≤ –¥–ª—è –∫–∞–Ω–∞–ª–∞"""
    try:
        conn = sqlite3.connect('telegram_mini_app.db')
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É responses
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='responses'")
        if cursor.fetchone():
            cursor.execute("""
                           SELECT COUNT(DISTINCT r.offer_id)
                           FROM responses r
                           WHERE r.channel_id = ?
                           """, (channel_id,))
            result = cursor.fetchone()
            count = result[0] if result else 0
        else:
            count = 0

        conn.close()
        return count

    except Exception as e:
        logger.error(f"Error getting offers count for channel {channel_id}: {e}")
        return 0


def get_channel_posts_count(channel_id: int) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å—Ç–æ–≤ –∫–∞–Ω–∞–ª–∞"""
    try:
        from datetime import datetime

        conn = sqlite3.connect('telegram_mini_app.db')
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É posts
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='posts'")
        if cursor.fetchone():
            cursor.execute("SELECT COUNT(*) FROM posts WHERE channel_id = ?", (channel_id,))
            result = cursor.fetchone()
            count = result[0] if result else 0
        else:
            # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞
            cursor.execute("SELECT created_at FROM channels WHERE id = ?", (channel_id,))
            result = cursor.fetchone()

            if result and result[0]:
                try:
                    created_at = datetime.fromisoformat(result[0].replace('Z', '+00:00'))
                    days_active = (datetime.now() - created_at).days
                    count = max(0, days_active // 7)  # –ü—Ä–∏–º–µ—Ä–Ω–æ 1 –ø–æ—Å—Ç –≤ –Ω–µ–¥–µ–ª—é
                except:
                    count = 0
            else:
                count = 0

        conn.close()
        return count

    except Exception as e:
        logger.error(f"Error getting posts count for channel {channel_id}: {e}")
        return 0


@channels_bp.route('/analyze', methods=['POST'])
def analyze_channel():
    """–ê–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞ –ø–æ username –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    try:
        logger.info("üîç –ê–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞")

        data = request.get_json()
        if not data:
            logger.error("‚ùå –ù–µ—Ç JSON –¥–∞–Ω–Ω—ã—Ö")
            return jsonify({'success': False, 'error': 'JSON –¥–∞–Ω–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'}), 400

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä–µ–¥–∞—á–∏ username
        username = data.get('username') or data.get('channel_username') or data.get('channel_url', '')
        if not username:
            logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω username –∫–∞–Ω–∞–ª–∞")
            return jsonify({'success': False, 'error': 'Username –∫–∞–Ω–∞–ª–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'}), 400

        # –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ URL
        cleaned_username = extract_username_from_url(username)
        logger.info(f"üì∫ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª: @{cleaned_username}")

        # –ü–æ–ª—É—á–∞–µ–º telegram_user_id –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        telegram_user_id = request.headers.get('X-Telegram-User-Id', '373086959')
        logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_user_id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ –∫–∞–Ω–∞–ª
        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute("""
                       SELECT c.id, c.title
                       FROM channels c
                                JOIN users u ON c.owner_id = u.id
                       WHERE (c.username = ? OR c.telegram_id = ?)
                         AND u.telegram_id = ?
                       """, (cleaned_username, cleaned_username, telegram_user_id))

        existing_channel = cursor.fetchone()
        conn.close()

        if existing_channel:
            logger.warning(f"‚ùå –ö–∞–Ω–∞–ª @{cleaned_username} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω")
            return jsonify({
                'success': False,
                'error': f'–ö–∞–Ω–∞–ª @{cleaned_username} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω'
            }), 409

        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram API
        real_data = {'success': False}  
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ username
        category = 'other'
        if any(word in cleaned_username.lower() for word in ['tech', 'it', 'dev', 'code']):
            category = 'technology'
        elif any(word in cleaned_username.lower() for word in ['news', '–Ω–æ–≤–æ—Å—Ç–∏']):
            category = 'news'
        elif any(word in cleaned_username.lower() for word in ['crypto', 'bitcoin', 'btc']):
            category = 'crypto'
        elif any(word in cleaned_username.lower() for word in ['game', '–∏–≥—Ä']):
            category = 'gaming'

        # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (JavaScript –¥–µ–ª–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã)
        logger.info(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è @{cleaned_username}")

        if real_data.get('success'):
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è @{cleaned_username}")

            channel_info = {
                'success': True,
                'data': {
                    'username': cleaned_username,
                    'title': real_data.get('title', f'–ö–∞–Ω–∞–ª @{cleaned_username}'),
                    'description': real_data.get('description') or f'Telegram –∫–∞–Ω–∞–ª @{cleaned_username}',
                    'subscriber': real_data.get('subscriber', 0),
                    'engagement_rate': round(random.uniform(1.0, 15.0), 1) if real_data.get('subscriber', 0) > 0 else 0,
                    'verified': False,  # –≠—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å–ª–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ API
                    'category': category,
                    'avatar_letter': cleaned_username[0].upper() if cleaned_username else 'C',
                    'channel_type': real_data.get('type', 'channel'),
                    'invite_link': real_data.get('invite_link') or f'https://t.me/{cleaned_username}',
                    'estimated_reach': {
                        'min_views': int(real_data.get('subscriber', 0) * 0.1),
                        'max_views': int(real_data.get('subscriber', 0) * 0.4),
                        'avg_views': int(real_data.get('subscriber', 0) * 0.25)
                    } if real_data.get('subscriber', 0) > 0 else None,
                    'data_source': 'telegram_api'
                },
                'user_permissions': {
                    'is_admin': True,
                    'can_post': True
                },
                'note': '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ Telegram API'
            }
        else:
            logger.info(f"‚ö†Ô∏è –î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –¥–ª—è @{cleaned_username}")
            return jsonify(channel_info)

    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–Ω–∞–ª–∞: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return jsonify({
            'success': False,
            'error': f'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'
        }), 500


@channels_bp.route('', methods=['POST'])
def add_channel():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞"""
    try:
        logger.info("‚ûï –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞")

        data = request.get_json()
        if not data:
            return jsonify({'success': False, 'error': 'JSON data required'}), 400

        # –ü–æ–ª—É—á–∞–µ–º telegram_user_id –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        telegram_user_id = request.headers.get('X-Telegram-User-Id', '373086959')
        logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_user_id}")

        username = data.get('username', '').strip()
        if not username:
            return jsonify({'success': False, 'error': 'Username –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'}), 400

        cleaned_username = extract_username_from_url(username)
        logger.info(f"üì∫ –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª: @{cleaned_username}")

        conn = get_db_connection()
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("SELECT id FROM users WHERE telegram_id = ?", (telegram_user_id,))
        user = cursor.fetchone()

        if not user:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            cursor.execute("""
                           INSERT INTO users (telegram_id, username, first_name, is_active, created_at, updated_at)
                           VALUES (?, ?, ?, ?, ?, ?)
                           """, (telegram_user_id, f'user_{telegram_user_id}', 'User', True,
                                 datetime.now().isoformat(), datetime.now().isoformat()))
            user_db_id = cursor.lastrowid
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {user_db_id}")
        else:
            user_db_id = user['id']
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {user_db_id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ –∫–∞–Ω–∞–ª
        is_reverify = data.get('action') == 'reverify'

        cursor.execute("""
                       SELECT c.id, c.title, c.verification_code, c.is_verified, c.status
                       FROM channels c
                                JOIN users u ON c.owner_id = u.id
                       WHERE (c.username = ? OR c.username = ? OR c.telegram_id = ?)
                         AND u.telegram_id = ?
                       """, (cleaned_username, f'@{cleaned_username}', cleaned_username, telegram_user_id))

        existing_channel = cursor.fetchone()

        # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —ç—Ç–æ –ù–ï –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è - –æ—à–∏–±–∫–∞
        if existing_channel and not is_reverify:
            logger.warning(f"‚ùå –ö–∞–Ω–∞–ª @{cleaned_username} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω (ID: {existing_channel['id']})")
            conn.close()
            return jsonify({
                'success': False,
                'error': f'–ö–∞–Ω–∞–ª @{cleaned_username} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω'
            }), 409

        # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–∞–Ω–∞–ª–∞
        if existing_channel and is_reverify:
            logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞ @{cleaned_username}")

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
            import secrets
            new_verification_code = f'VERIFY_{secrets.token_hex(4).upper()}'

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –∫–∞–Ω–∞–ª–µ
            cursor.execute("""
                           UPDATE channels
                           SET verification_code = ?,
                               status            = 'pending',
                               is_verified       = FALSE,
                               updated_at        = ?
                           WHERE id = ?
                           """, (new_verification_code, datetime.now().isoformat(), existing_channel['id']))

            conn.commit()
            conn.close()

            logger.info(f"‚úÖ –ù–æ–≤—ã–π –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {existing_channel['id']}: {new_verification_code}")

            return jsonify({
                'success': True,
                'message': '–ù–æ–≤—ã–π –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω',
                'verification_code': new_verification_code,
                'channel': {
                    'id': existing_channel['id'],
                    'username': cleaned_username,
                    'title': existing_channel['title'],
                    'verification_code': new_verification_code,
                    'status': 'pending'
                }
            })

        # –ü–∞—Ä—Å–∏–º —á–∏—Å–ª–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä "12.5K")
        if isinstance(subscriber_count, str):
            try:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—ã —Ç–∏–ø–∞ "12.5K", "1.2M"
                if subscriber_count.upper().endswith('K'):
                    subscriber_count = int(float(subscriber_count[:-1]) * 1000)
                elif subscriber_count.upper().endswith('M'):
                    subscriber_count = int(float(subscriber_count[:-1]) * 1000000)
                else:
                    subscriber_count = int(subscriber_count)
            except (ValueError, TypeError):
                subscriber_count = 0

        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ
        if not isinstance(subscriber_count, int):
            subscriber_count = 0

        logger.info(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞: {subscriber_count}")
        logger.info(f"üîç DEBUG: –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ = {data}")
        logger.info(f"üîç DEBUG: channel_data = {data.get('channel_data', '–ù–ï–¢')}")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        import secrets
        verification_code = f'VERIFY_{secrets.token_hex(4).upper()}'
        logger.info(f"üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {verification_code}")

        # ‚úÖ –°–û–•–†–ê–ù–Ø–ï–ú –ö–ê–ù–ê–õ –° –î–ê–ù–ù–´–ú–ò –û–¢ –§–†–û–ù–¢–ï–ù–î–ê
        subscriber_count = 0

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞—Ö
        possible_subscriber_fields = ['subscriber_count'
        ]

        for field in possible_subscriber_fields:
            value = data.get(field)
            if value and isinstance(value, (int, str)) and str(value).isdigit():
                subscriber_count = int(value)
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –≤ –ø–æ–ª–µ '{field}': {subscriber_count}")
                break

        logger.info(f"üìä –ò—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {subscriber_count}")

        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ telegram_id
        telegram_channel_id = data.get('telegram_id') or data.get('channel_id') or cleaned_username

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –≤ –ë–î
        cursor.execute("""
                       INSERT INTO channels (telegram_id, title, username, description, category,
                                             subscriber_count, language, is_verified, is_active,
                                             owner_id, created_at, updated_at, status, verification_code)
                       VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                       """, (
                           telegram_channel_id,  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û
                           data.get('title', f'–ö–∞–Ω–∞–ª @{cleaned_username}'),
                           cleaned_username,
                           data.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞'),
                           data.get('category', 'general'),
                           subscriber_count,  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                           'ru',
                           False,
                           True,
                           user_db_id,
                           datetime.now().isoformat(),
                           datetime.now().isoformat(),
                           'pending',
                           verification_code
                       ))

        channel_id = cursor.lastrowid
        conn.commit()
        conn.close()

        logger.info(f"‚úÖ –ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω —Å ID: {channel_id}, –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {subscriber_count}")

        return jsonify({
            'success': True,
            'message': f'–ö–∞–Ω–∞–ª @{cleaned_username} –¥–æ–±–∞–≤–ª–µ–Ω',
            'channel': {
                'id': channel_id,
                'username': cleaned_username,
                'verification_code': verification_code,
                'subscriber_count': subscriber_count  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            }
        }), 201

    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return jsonify({
            'success': False,
            'error': f'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'
        }), 500


@channels_bp.route('/<int:channel_id>', methods=['DELETE'])
def delete_channel(channel_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞"""
    try:
        logger.info(f"üóëÔ∏è –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ {channel_id}")

        # –ü–æ–ª—É—á–∞–µ–º telegram_user_id –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        telegram_user_id = request.headers.get('X-Telegram-User-Id')
        logger.info(f"üë§ Telegram User ID: {telegram_user_id}")

        if not telegram_user_id:
            logger.warning("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω Telegram User ID")
            return jsonify({
                'success': False,
                'error': '–ù–µ —É–∫–∞–∑–∞–Ω Telegram User ID'
            }), 400

        conn = get_db_connection()
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∫–∞–Ω–∞–ª {channel_id}")
        cursor.execute("""
            SELECT c.id, c.title, c.username 
            FROM channels c
            JOIN users u ON c.owner_id = u.id
            WHERE c.id = ? AND u.telegram_id = ?
        """, (channel_id, telegram_user_id))

        channel = cursor.fetchone()

        if not channel:
            logger.warning(f"‚ùå –ö–∞–Ω–∞–ª {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_user_id}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞–Ω–∞–ª –≤–æ–æ–±—â–µ
            cursor.execute("SELECT id, title FROM channels WHERE id = ?", (channel_id,))
            any_channel = cursor.fetchone()

            conn.close()

            if any_channel:
                return jsonify({
                    'success': False,
                    'error': '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞'
                }), 403
            else:
                return jsonify({
                    'success': False,
                    'error': '–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'
                }), 404

        channel_title = channel['title'] if channel['title'] else f'ID {channel_id}'
        logger.info(f"‚úÖ –ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω: {channel_title}")

        # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        logger.info(f"üîÑ –£–¥–∞–ª–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

        # 1. –£–¥–∞–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Ñ—Ñ–µ—Ä—ã (–µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        try:
            cursor.execute("""
                DELETE FROM offer_responses 
                WHERE offer_id IN (
                    SELECT id FROM offers WHERE channel_id = ?
                )
            """, (channel_id,))
            logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω—ã –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Ñ—Ñ–µ—Ä—ã: {cursor.rowcount}")
        except sqlite3.Error as e:
            logger.debug(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤: {e}")

        # 2. –£–¥–∞–ª—è–µ–º –æ—Ñ—Ñ–µ—Ä—ã (–µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        try:
            cursor.execute("DELETE FROM offers WHERE channel_id = ?", (channel_id,))
            logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω—ã –æ—Ñ—Ñ–µ—Ä—ã: {cursor.rowcount}")
        except sqlite3.Error as e:
            logger.debug(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–æ–≤: {e}")

        # 3. –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        try:
            cursor.execute("""
                DELETE FROM notifications 
                WHERE data LIKE '%"channel_id":' || ? || '%'
            """, (channel_id,))
            logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {cursor.rowcount}")
        except sqlite3.Error as e:
            logger.debug(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

        # 4. –£–¥–∞–ª—è–µ–º —Å–∞–º –∫–∞–Ω–∞–ª
        logger.info(f"üóëÔ∏è –£–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª {channel_id}")
        cursor.execute("DELETE FROM channels WHERE id = ?", (channel_id,))
        deleted_count = cursor.rowcount

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()
        conn.close()

        logger.info(f"üéØ –£–¥–∞–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫: {deleted_count}")

        if deleted_count > 0:
            logger.info(f"‚úÖ –ö–∞–Ω–∞–ª {channel_id} ({channel_title}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
            return jsonify({
                'success': True,
                'message': f'–ö–∞–Ω–∞–ª "{channel_title}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
            })
        else:
            logger.error(f"‚ùå –ö–∞–Ω–∞–ª {channel_id} –Ω–µ –±—ã–ª —É–¥–∞–ª–µ–Ω")
            return jsonify({
                'success': False,
                'error': '–ö–∞–Ω–∞–ª –Ω–µ –±—ã–ª —É–¥–∞–ª–µ–Ω'
            }), 500

    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return jsonify({
            'success': False,
            'error': f'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'
        }), 500


@channels_bp.route('/webhook', methods=['POST'])
def telegram_webhook():
    """Webhook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram"""
    try:
        data = request.get_json()
        if not data:
            return jsonify({'ok': True})

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if 'message' in data:
            message = data['message']

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
            if 'text' in message and message['text'] == '/start':
                from_user_id = str(message['from']['id'])

                try:
                    import requests
                    bot_token = os.environ.get('BOT_TOKEN', '6712109516:AAHL23ltolowG5kYTfkTKDadg2Io1Rd0WT8')
                    send_url = f"https://api.telegram.org/bot{bot_token}/sendMessage"

                    welcome_message = """üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>

                    –Ø –ø–æ–º–æ–≥—É –≤–∞–º –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–∏ Telegram –∫–∞–Ω–∞–ª—ã.

                    <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
                    1Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª –≤ Mini App
                    2Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    3Ô∏è‚É£ –û–ø—É–±–ª–∏–∫—É–π—Ç–µ –∫–æ–¥ –≤ –≤–∞—à–µ–º –∫–∞–Ω–∞–ª–µ
                    4Ô∏è‚É£ –ü–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º –º–Ω–µ

                    –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä—è–º–æ –∑–¥–µ—Å—å!"""

                    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
                    welcome_keyboard = {
                        "inline_keyboard": [
                            [
                                {
                                    "text": "üöÄ –û—Ç–∫—Ä—ã—Ç—å Mini App",
                                    "web_app": {
                                        "url": f"{os.environ.get('WEBAPP_URL', 'https://your-domain.com')}"
                                    }
                                }
                            ]
                        ]
                    }

                    requests.post(send_url, json={
                        'chat_id': from_user_id,
                        'text': welcome_message,
                        'parse_mode': 'HTML',
                        'reply_markup': welcome_keyboard
                    }, timeout=5)
                except:
                    pass

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            elif 'forward_from_chat' in message:
                forward_chat = message['forward_from_chat']

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∫–∞–Ω–∞–ª
                if forward_chat.get('type') == 'channel':
                    chat_id = str(forward_chat.get('id'))
                    chat_username = forward_chat.get('username', '').lower()
                    from_user_id = str(message['from']['id'])

                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    forward_text = message.get('text', '')

                    logger.info(f"üì© –ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ @{chat_username}: {forward_text[:50]}...")

                    conn = get_db_connection()
                    cursor = conn.cursor()

                    # –ò—â–µ–º –∫–∞–Ω–∞–ª —Å –∫–æ–¥–æ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
                    cursor.execute("""
                        SELECT c.id, c.title, c.verification_code, c.username
                        FROM channels c
                        JOIN users u ON c.owner_id = u.id
                        WHERE u.telegram_id = ?
                        AND c.is_verified = 0
                        AND c.verification_code IS NOT NULL
                    """, (from_user_id,))

                    channels = cursor.fetchall()

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    for channel in channels:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ —Ç–µ–∫—Å—Ç–µ
                        if channel['verification_code'] in forward_text:
                            # –ò —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ username –∫–∞–Ω–∞–ª–∞
                            if (channel['username'].lower() == chat_username or
                                    channel['username'].lower() == f'@{chat_username}' or
                                    channel['telegram_id'] == chat_id):

                                # –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª
                                cursor.execute("""
                                    UPDATE channels
                                    SET is_verified = 1,
                                        verified_at = ?,
                                        status = 'verified',
                                        telegram_id = ?
                                    WHERE id = ?
                                """, (datetime.now().isoformat(), chat_id, channel['id']))

                                conn.commit()
                                logger.info(f"‚úÖ –ö–∞–Ω–∞–ª '{channel['title']}' –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!")

                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ –í –ë–û–¢
                                try:
                                    import requests
                                    bot_token = os.environ.get('BOT_TOKEN', '6712109516:AAHL23ltolowG5kYTfkTKDadg2Io1Rd0WT8')
                                    send_url = f"https://api.telegram.org/bot{bot_token}/sendMessage"

                                    success_message = f"""‚úÖ <b>–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!</b>

                                    üì∫ <b>–ö–∞–Ω–∞–ª:</b> {channel['title']}
                                    üîó <b>Username:</b> @{channel['username']}
                                    üìÖ <b>–î–∞—Ç–∞:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}

                                    –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:
                                    - –ü–æ–ª—É—á–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª–µ–π
                                    - –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ü–µ–Ω—ã –∑–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ
                                    - –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–Ω–∞–ª–∞

                                    –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ <a href="https://t.me/miniappsmatchbot/start?startapp=channels">Mini App</a> –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–º."""

                                    # –ù–ê:
                                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                                    cursor.execute("""
                                                   SELECT first_name, last_name, username
                                                   FROM users
                                                   WHERE telegram_id = ?
                                                   """, (from_user_id,))
                                    user_data = cursor.fetchone()

                                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                                    if user_data:
                                        user_name_parts = []
                                        if user_data['first_name']:
                                            user_name_parts.append(user_data['first_name'])
                                        if user_data['last_name']:
                                            user_name_parts.append(user_data['last_name'])
                                        full_name = ' '.join(user_name_parts) if user_name_parts else user_data[
                                                                                                          'username'] or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
                                    else:
                                        full_name = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'

                                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
                                    try:
                                        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞
                                        created_at = datetime.fromisoformat(
                                            channel['created_at'].replace('Z', '+00:00'))
                                        formatted_date = created_at.strftime('%d.%m.%Y –≤ %H:%M')
                                    except:
                                        formatted_date = '–ù–µ–¥–∞–≤–Ω–æ'


                                    success_message = f"""‚úÖ <b>–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!</b>

                                    üì∫ <b>–ö–∞–Ω–∞–ª:</b> {channel['title']}
                                    üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {full_name}
                                    üìÖ <b>–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:</b> {formatted_date}

                                    üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b> –í–∞—à –∫–∞–Ω–∞–ª –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!

                                    –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:
                                    - –ü–æ–ª—É—á–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª–µ–π
                                    - –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ü–µ–Ω—ã –∑–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ
                                    - –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–Ω–∞–ª–∞
                                    - –£–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""

                                    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π Mini App
                                    keyboard = {
                                        "inline_keyboard": [
                                            [
                                                {
                                                    "text": "üöÄ –û—Ç–∫—Ä—ã—Ç—å Mini App",
                                                    "web_app": {
                                                        "url": f"{os.environ.get('WEBAPP_URL', 'https://your-domain.com')}/channels"
                                                    }
                                                }
                                            ]
                                        ]
                                    }

                                    requests.post(send_url, json={
                                        'chat_id': from_user_id,
                                        'text': success_message,
                                        'parse_mode': 'HTML',
                                        'reply_markup': keyboard
                                    }, timeout=5)
                                except Exception as e:
                                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

                                conn.close()
                                return jsonify({'ok': True})

                    # –ï—Å–ª–∏ –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
                    try:
                        import requests
                        bot_token = os.environ.get('BOT_TOKEN', '6712109516:AAHL23ltolowG5kYTfkTKDadg2Io1Rd0WT8')
                        send_url = f"https://api.telegram.org/bot{bot_token}/sendMessage"

                        requests.post(send_url, json={
                            'chat_id': from_user_id,
                            'text': '‚ùå –ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø–µ—Ä–µ—Å–ª–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞.',
                            'parse_mode': 'HTML'
                        }, timeout=5)
                    except:
                        pass

                    conn.close()

        return jsonify({'ok': True})

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ webhook: {e}")
        return jsonify({'ok': True})


@channels_bp.route('/test', methods=['GET'])
def test_channels_api():
    """–¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã API"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        if not os.path.exists(DATABASE_PATH):
            return jsonify({
                'success': False,
                'error': f'–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {DATABASE_PATH}'
            }), 500

        conn = get_db_connection()
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤
        cursor.execute("SELECT COUNT(*) as count FROM channels")
        channels_count = cursor.fetchone()['count']

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute("SELECT COUNT(*) as count FROM users")
        users_count = cursor.fetchone()['count']

        conn.close()

        return jsonify({
            'success': True,
            'message': 'Channels API —Ä–∞–±–æ—Ç–∞–µ—Ç!',
            'stats': {
                'channels': channels_count,
                'users': users_count
            }
        })

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@channels_bp.route('/<int:channel_id>/verify', methods=['PUT', 'POST'])
def verify_channel_endpoint(channel_id):
    """–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞"""
    try:
        logger.info(f"üîç –ó–∞–ø—Ä–æ—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞ {channel_id}")

        # –ü–æ–ª—É—á–∞–µ–º telegram_user_id –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        telegram_user_id = request.headers.get('X-Telegram-User-Id')
        if not telegram_user_id:
            return jsonify({'success': False, 'error': '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}), 401

        conn = get_db_connection()
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª
        cursor.execute("""
            SELECT c.*, u.telegram_id as owner_telegram_id
            FROM channels c
            JOIN users u ON c.owner_id = u.id
            WHERE c.id = ? AND u.telegram_id = ?
        """, (channel_id, telegram_user_id))

        channel = cursor.fetchone()

        if not channel:
            conn.close()
            return jsonify({'success': False, 'error': '–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404

        if channel['is_verified']:
            conn.close()
            return jsonify({
                'success': True,
                'message': '–ö–∞–Ω–∞–ª —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω',
                'channel': dict(channel)
            })

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–∏—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        channel_username = channel['username']
        verification_code = channel['verification_code']

        # –î–æ–±–∞–≤–ª—è–µ–º @ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if channel_username and not channel_username.startswith('@'):
            channel_username = '@' + channel_username

        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º {channel_username} —Å –∫–æ–¥–æ–º {verification_code}")

        # –í—ã–∑—ã–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        verification_result = verify_channel(channel_username, verification_code)

        if verification_result.get('success') and verification_result.get('found'):
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            cursor.execute("""
                UPDATE channels 
                SET is_verified = 1, 
                    verified_at = ?,
                    status = 'verified'
                WHERE id = ?
            """, (datetime.now().isoformat(), channel_id))

            conn.commit()
            conn.close()

            logger.info(f"‚úÖ –ö–∞–Ω–∞–ª {channel_id} –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!")

            return jsonify({
                'success': True,
                'message': '–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!',
                'channel': {
                    'id': channel_id,
                    'title': channel['title'],
                    'is_verified': True,
                    'verified_at': datetime.now().isoformat()
                }
            })
        else:
            conn.close()
            return jsonify({
                'success': False,
                'error': '–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞–Ω–∞–ª–µ',
                'verification_code': verification_code,
                'instructions': [
                    f'1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª @{channel["username"]}',
                    f'2. –û–ø—É–±–ª–∏–∫—É–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º: {verification_code}',
                    '3. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 1-2 –º–∏–Ω—É—Ç—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å" —Å–Ω–æ–≤–∞'
                ]
            }), 400

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500


@channels_bp.route('/debug/<int:channel_id>', methods=['GET'])
def debug_channel(channel_id):
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute("SELECT * FROM channels WHERE id = ?", (channel_id,))
        channel = cursor.fetchone()

        if not channel:
            return jsonify({'error': '–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404

        result = {
            'channel': dict(channel),
            'webhook_url': f"{os.environ.get('WEBAPP_URL', 'http://localhost:5000')}/api/channels/webhook",
            'bot_token_available': bool(os.environ.get('BOT_TOKEN')),
            'verification_service_loaded': 'verify_channel' in globals()
        }

        conn.close()
        return jsonify(result)

    except Exception as e:
        return jsonify({'error': str(e)}), 500


# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –≤ channels.py

@channels_bp.route('/<int:channel_id>/update-stats', methods=['PUT', 'POST'])
def update_channel_stats(channel_id):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–∞ –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞"""

    logger.info(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–∞ {channel_id}")

    data = request.get_json()
    if not data:
        return jsonify({'success': False, 'error': 'JSON –¥–∞–Ω–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'}), 400

    # –ü–æ–ª—É—á–∞–µ–º telegram_user_id –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    telegram_user_id = request.headers.get('X-Telegram-User-Id')
    if not telegram_user_id:
        return jsonify({'success': False, 'error': '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}), 401

    conn = get_db_connection()
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∫–∞–Ω–∞–ª
    cursor.execute("""
                    SELECT c.id, c.title, c.username, c.subscriber_count
                    FROM channels c
                            JOIN users u ON c.owner_id = u.id
                    WHERE c.id = ?
                        AND u.telegram_id = ?
                    """, (channel_id, telegram_user_id))

    channel = cursor.fetchone()
    if not channel:
        conn.close()
        return jsonify({'success': False, 'error': '–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
    logger.info(f"‚úÖ –ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω: {channel['title']} (ID: {channel_id})")


