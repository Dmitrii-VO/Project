"""
–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π API –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤ –±–µ–∑ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
"""
from flask import Blueprint, request, jsonify
import logging
import sqlite3
import os
import re
import random
from datetime import datetime
from app.services.telegram_verification import verify_channel

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ Blueprint
channels_bp = Blueprint('channels', __name__)

# –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DATABASE_PATH = 'telegram_mini_app.db'


def get_db_connection():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect(DATABASE_PATH)
    conn.row_factory = sqlite3.Row
    return conn


def get_real_telegram_data(username):
    """–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ Telegram API"""
    try:
        import requests

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—É—é)
        # –î–ª—è –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –±–æ—Ç –±—ã–ª –∞–¥–º–∏–Ω–æ–º –∫–∞–Ω–∞–ª–∞

        bot_token = "6712109516:AAHL23ltolowG5kYTfkTKDadg2Io1Rd0WT8"

        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
        url = f"https://api.telegram.org/bot{bot_token}/getChat"
        response = requests.get(url, params={'chat_id': f'@{username}'}, timeout=10)

        if response.status_code == 200:
            data = response.json()
            if data.get('ok'):
                chat_info = data.get('result', {})

                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                members_url = f"https://api.telegram.org/bot{bot_token}/getChatMemberCount"
                members_response = requests.get(members_url, params={'chat_id': f'@{username}'}, timeout=10)

                member_count = 0
                if members_response.status_code == 200:
                    members_data = members_response.json()
                    if members_data.get('ok'):
                        member_count = members_data.get('result', 0)

                return {
                    'success': True,
                    'title': chat_info.get('title', f'–ö–∞–Ω–∞–ª @{username}'),
                    'description': chat_info.get('description', ''),
                    'username': chat_info.get('username', username),
                    'subscribers': member_count,
                    'type': chat_info.get('type', 'channel'),
                    'invite_link': chat_info.get('invite_link'),
                    'photo': chat_info.get('photo')
                }

        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram API –¥–ª—è @{username}")
        return {'success': False, 'error': 'API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {e}")
        return {'success': False, 'error': str(e)}


def extract_username_from_url(url):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç username –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ URL Telegram"""
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
    url = url.strip()

    # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ —á–∏—Å—Ç—ã–π username
    if not url.startswith('http') and not url.startswith('@'):
        return url.lstrip('@')

    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è username
    patterns = [
        r'https?://t\.me/([a-zA-Z0-9_]+)',  # https://t.me/username
        r'https?://telegram\.me/([a-zA-Z0-9_]+)',  # https://telegram.me/username
        r'@([a-zA-Z0-9_]+)',  # @username
        r'^([a-zA-Z0-9_]+)$'  # –ø—Ä–æ—Å—Ç–æ username
    ]

    for pattern in patterns:
        match = re.search(pattern, url)
        if match:
            username = match.group(1)
            logger.info(f"üîç –ò–∑–≤–ª–µ—á–µ–Ω username: {username} –∏–∑ URL: {url}")
            return username

    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å username –∏–∑: {url}")
    return url.lstrip('@')


@channels_bp.route('/my', methods=['GET'])
def get_my_channels():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º telegram_user_id –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        telegram_user_id = request.headers.get('X-Telegram-User-Id', '373086959')
        logger.info(f"üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_user_id}")

        conn = get_db_connection()
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("""
                       SELECT c.id,
                              c.telegram_id,
                              c.title,
                              c.username,
                              c.subscriber_count,
                              c.description,
                              c.category,
                              c.language,
                              c.is_verified,
                              c.is_active,
                              c.owner_id,
                              c.created_at,
                              c.updated_at,
                              c.verification_code,
                              c.status,
                              c.verified_at,
                              u.username as owner_username
                       FROM channels c
                                JOIN users u ON c.owner_id = u.id
                       WHERE u.telegram_id = ?
                       ORDER BY c.created_at DESC
                       """, (telegram_user_id,))

        channels = cursor.fetchall()
        conn.close()

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –ü–†–ê–í–ò–õ–¨–ù–´–ú–ò –ø–æ–ª—è–º–∏
        channels_list = []
        for channel in channels:
            channel_dict = {
                'id': channel['id'],
                'telegram_id': channel['telegram_id'],
                'title': channel['title'],
                'username': channel['username'],
                'subscribers_count': channel['subscriber_count'] or 0,  # ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ
                'description': channel['description'] or '',
                'category': channel['category'] or 'general',
                'language': channel['language'] or 'ru',
                'is_verified': bool(channel['is_verified']),
                'is_active': bool(channel['is_active']),
                'created_at': channel['created_at'],
                'updated_at': channel['updated_at'],
                'verification_code': channel['verification_code'],
                'status': channel['status'],
                'verified_at': channel['verified_at'],
                'owner_username': channel['owner_username'],

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
                'channel_name': channel['title'],
                'channel_username': channel['username'],

                # –ü–æ–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –ë–î - –¥–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                'is_public': True,
                'accepts_ads': True,
                'invite_link': f'https://t.me/{channel["username"].lstrip("@")}' if channel['username'] else None,
                'photo_url': None,
                'avg_engagement_rate': 0.0,
                'price_per_post': 0
            }
            channels_list.append(channel_dict)

        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {len(channels_list)}")

        return jsonify({
            'success': True,
            'channels': channels_list,
            'total': len(channels_list)
        })

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500


@channels_bp.route('/analyze', methods=['POST'])
def analyze_channel():
    """–ê–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞ –ø–æ username –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    try:
        logger.info("üîç –ê–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞")

        data = request.get_json()
        if not data:
            logger.error("‚ùå –ù–µ—Ç JSON –¥–∞–Ω–Ω—ã—Ö")
            return jsonify({'success': False, 'error': 'JSON –¥–∞–Ω–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'}), 400

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä–µ–¥–∞—á–∏ username
        username = data.get('username') or data.get('channel_username') or data.get('channel_url', '')
        if not username:
            logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω username –∫–∞–Ω–∞–ª–∞")
            return jsonify({'success': False, 'error': 'Username –∫–∞–Ω–∞–ª–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'}), 400

        # –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ URL
        cleaned_username = extract_username_from_url(username)
        logger.info(f"üì∫ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª: @{cleaned_username}")

        # –ü–æ–ª—É—á–∞–µ–º telegram_user_id –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        telegram_user_id = request.headers.get('X-Telegram-User-Id', '373086959')
        logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_user_id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ –∫–∞–Ω–∞–ª
        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute("""
                       SELECT c.id, c.title
                       FROM channels c
                                JOIN users u ON c.owner_id = u.id
                       WHERE (c.username = ? OR c.telegram_id = ?)
                         AND u.telegram_id = ?
                       """, (cleaned_username, cleaned_username, telegram_user_id))

        existing_channel = cursor.fetchone()
        conn.close()

        if existing_channel:
            logger.warning(f"‚ùå –ö–∞–Ω–∞–ª @{cleaned_username} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω")
            return jsonify({
                'success': False,
                'error': f'–ö–∞–Ω–∞–ª @{cleaned_username} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω'
            }), 409

        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram API
        real_data = get_real_telegram_data(cleaned_username)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ username
        category = 'other'
        if any(word in cleaned_username.lower() for word in ['tech', 'it', 'dev', 'code']):
            category = 'technology'
        elif any(word in cleaned_username.lower() for word in ['news', '–Ω–æ–≤–æ—Å—Ç–∏']):
            category = 'news'
        elif any(word in cleaned_username.lower() for word in ['crypto', 'bitcoin', 'btc']):
            category = 'crypto'
        elif any(word in cleaned_username.lower() for word in ['game', '–∏–≥—Ä']):
            category = 'gaming'

        if real_data.get('success'):
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è @{cleaned_username}")

            channel_info = {
                'success': True,
                'data': {
                    'username': cleaned_username,
                    'title': real_data.get('title', f'–ö–∞–Ω–∞–ª @{cleaned_username}'),
                    'description': real_data.get('description') or f'Telegram –∫–∞–Ω–∞–ª @{cleaned_username}',
                    'subscribers': real_data.get('subscribers', 0),
                    'engagement_rate': round(random.uniform(1.0, 15.0), 1) if real_data.get('subscribers', 0) > 0 else 0,
                    'verified': False,  # –≠—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å–ª–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ API
                    'category': category,
                    'avatar_letter': cleaned_username[0].upper() if cleaned_username else 'C',
                    'channel_type': real_data.get('type', 'channel'),
                    'invite_link': real_data.get('invite_link') or f'https://t.me/{cleaned_username}',
                    'estimated_reach': {
                        'min_views': int(real_data.get('subscribers', 0) * 0.1),
                        'max_views': int(real_data.get('subscribers', 0) * 0.4),
                        'avg_views': int(real_data.get('subscribers', 0) * 0.25)
                    } if real_data.get('subscribers', 0) > 0 else None,
                    'data_source': 'telegram_api'
                },
                'user_permissions': {
                    'is_admin': True,
                    'can_post': True
                },
                'note': '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ Telegram API'
            }
        else:
            logger.info(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è @{cleaned_username}")

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ Telegram API

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            # –°–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (–æ—Ç 500 –¥–æ 50000)
            subscribers = random.randint(500, 50000)

            # –°–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏ (–æ—Ç 1% –¥–æ 15%)
            engagement = round(random.uniform(1.0, 15.0), 1)

            channel_info = {
                'success': True,
                'data': {
                    'username': cleaned_username,
                    'title': f'–ö–∞–Ω–∞–ª @{cleaned_username}',
                    'description': f'Telegram –∫–∞–Ω–∞–ª @{cleaned_username}. –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ–ª—É—á–µ–Ω—ã –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API.',
                    'subscribers': subscribers,
                    'engagement_rate': engagement,
                    'verified': random.choice([True, False]),  # –°–ª—É—á–∞–π–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ—Ç
                    'category': category,
                    'avatar_letter': cleaned_username[0].upper() if cleaned_username else 'C',
                    'channel_type': 'channel',
                    'invite_link': f'https://t.me/{cleaned_username}',
                    'estimated_reach': {
                        'min_views': int(subscribers * 0.1),
                        'max_views': int(subscribers * 0.4),
                        'avg_views': int(subscribers * 0.25)
                    },
                    'posting_frequency': f'{random.randint(1, 5)} –ø–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å',
                    'last_post': f'{random.randint(1, 24)} —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥',
                    'data_source': 'generated'
                },
                'user_permissions': {
                    'is_admin': True,
                    'can_post': True
                },
                'note': '–î–∞–Ω–Ω—ã–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API.'
            }

        logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞ @{cleaned_username} –∑–∞–≤–µ—Ä—à–µ–Ω")
        return jsonify(channel_info)

    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–Ω–∞–ª–∞: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return jsonify({
            'success': False,
            'error': f'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'
        }), 500


@channels_bp.route('', methods=['POST'])
def add_channel():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
    try:
        logger.info("‚ûï –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞")

        data = request.get_json()
        if not data:
            return jsonify({'success': False, 'error': 'JSON data required'}), 400

        # –ü–æ–ª—É—á–∞–µ–º telegram_user_id –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        telegram_user_id = request.headers.get('X-Telegram-User-Id', '373086959')
        logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_user_id}")

        username = data.get('username', '').strip()
        if not username:
            return jsonify({'success': False, 'error': 'Username –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'}), 400

        cleaned_username = extract_username_from_url(username)
        logger.info(f"üì∫ –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª: @{cleaned_username}")

        conn = get_db_connection()
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("SELECT id FROM users WHERE telegram_id = ?", (telegram_user_id,))
        user = cursor.fetchone()

        if not user:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            cursor.execute("""
                INSERT INTO users (telegram_id, username, first_name, is_active, created_at, updated_at)
                VALUES (?, ?, ?, ?, ?, ?)
            """, (telegram_user_id, f'user_{telegram_user_id}', 'User', True,
                  datetime.now().isoformat(), datetime.now().isoformat()))
            user_db_id = cursor.lastrowid
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {user_db_id}")
        else:
            user_db_id = user['id']
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {user_db_id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ –∫–∞–Ω–∞–ª
        cursor.execute("""
            SELECT c.id, c.title
            FROM channels c
            JOIN users u ON c.owner_id = u.id
            WHERE c.username = ?
            AND u.telegram_id = ?
        """, (f'@{cleaned_username}', telegram_user_id))

        existing_channel = cursor.fetchone()

        if existing_channel:
            conn.close()
            return jsonify({
                'success': False,
                'error': f'–ö–∞–Ω–∞–ª @{cleaned_username} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω'
            }), 409

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        import secrets
        verification_code = secrets.token_hex(8)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –≤ –ë–î
        cursor.execute("""
                       INSERT INTO channels (telegram_id, title, username, description, category,
                                             subscriber_count, language, is_verified, is_active,
                                             owner_id, created_at, updated_at, status)
                       VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                       """, (
                           cleaned_username,  # telegram_id (–∏—Å–ø–æ–ª—å–∑—É–µ–º username)
                           data.get('title', f'–ö–∞–Ω–∞–ª @{cleaned_username}'),  # title
                           cleaned_username,  # username
                           data.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞'),  # description
                           data.get('category', 'general'),  # category
                           data.get('subscribers_count', 0),  # subscriber_count
                           'ru',  # language
                           False,  # is_verified
                           True,  # is_active
                           user_db_id,  # owner_id
                           datetime.now().isoformat(),  # created_at
                           datetime.now().isoformat(),  # updated_at
                           'pending'  # status
                       ))

        channel_id = cursor.lastrowid
        conn.commit()
        conn.close()

        logger.info(f"‚úÖ –ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω —Å ID: {channel_id}")

        return jsonify({
            'success': True,
            'message': f'–ö–∞–Ω–∞–ª @{cleaned_username} –¥–æ–±–∞–≤–ª–µ–Ω',
            'channel': {
                'id': channel_id,
                'username': cleaned_username,
                'verification_code': verification_code
            }
        }), 201

    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return jsonify({
            'success': False,
            'error': f'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'
        }), 500


@channels_bp.route('/<int:channel_id>', methods=['DELETE'])
def delete_channel(channel_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞"""
    try:
        logger.info(f"üóëÔ∏è –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ {channel_id}")

        # –ü–æ–ª—É—á–∞–µ–º telegram_user_id –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        telegram_user_id = request.headers.get('X-Telegram-User-Id')
        logger.info(f"üë§ Telegram User ID: {telegram_user_id}")

        if not telegram_user_id:
            logger.warning("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω Telegram User ID")
            return jsonify({
                'success': False,
                'error': '–ù–µ —É–∫–∞–∑–∞–Ω Telegram User ID'
            }), 400

        conn = get_db_connection()
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∫–∞–Ω–∞–ª {channel_id}")
        cursor.execute("""
            SELECT c.id, c.title, c.username 
            FROM channels c
            JOIN users u ON c.owner_id = u.id
            WHERE c.id = ? AND u.telegram_id = ?
        """, (channel_id, telegram_user_id))

        channel = cursor.fetchone()

        if not channel:
            logger.warning(f"‚ùå –ö–∞–Ω–∞–ª {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_user_id}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞–Ω–∞–ª –≤–æ–æ–±—â–µ
            cursor.execute("SELECT id, title FROM channels WHERE id = ?", (channel_id,))
            any_channel = cursor.fetchone()

            conn.close()

            if any_channel:
                return jsonify({
                    'success': False,
                    'error': '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞'
                }), 403
            else:
                return jsonify({
                    'success': False,
                    'error': '–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'
                }), 404

        channel_title = channel['title'] if channel['title'] else f'ID {channel_id}'
        logger.info(f"‚úÖ –ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω: {channel_title}")

        # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        logger.info(f"üîÑ –£–¥–∞–ª–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

        # 1. –£–¥–∞–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Ñ—Ñ–µ—Ä—ã (–µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        try:
            cursor.execute("""
                DELETE FROM offer_responses 
                WHERE offer_id IN (
                    SELECT id FROM offers WHERE channel_id = ?
                )
            """, (channel_id,))
            logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω—ã –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Ñ—Ñ–µ—Ä—ã: {cursor.rowcount}")
        except sqlite3.Error as e:
            logger.debug(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤: {e}")

        # 2. –£–¥–∞–ª—è–µ–º –æ—Ñ—Ñ–µ—Ä—ã (–µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        try:
            cursor.execute("DELETE FROM offers WHERE channel_id = ?", (channel_id,))
            logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω—ã –æ—Ñ—Ñ–µ—Ä—ã: {cursor.rowcount}")
        except sqlite3.Error as e:
            logger.debug(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–æ–≤: {e}")

        # 3. –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        try:
            cursor.execute("""
                DELETE FROM notifications 
                WHERE data LIKE '%"channel_id":' || ? || '%'
            """, (channel_id,))
            logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {cursor.rowcount}")
        except sqlite3.Error as e:
            logger.debug(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

        # 4. –£–¥–∞–ª—è–µ–º —Å–∞–º –∫–∞–Ω–∞–ª
        logger.info(f"üóëÔ∏è –£–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª {channel_id}")
        cursor.execute("DELETE FROM channels WHERE id = ?", (channel_id,))
        deleted_count = cursor.rowcount

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()
        conn.close()

        logger.info(f"üéØ –£–¥–∞–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫: {deleted_count}")

        if deleted_count > 0:
            logger.info(f"‚úÖ –ö–∞–Ω–∞–ª {channel_id} ({channel_title}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
            return jsonify({
                'success': True,
                'message': f'–ö–∞–Ω–∞–ª "{channel_title}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
            })
        else:
            logger.error(f"‚ùå –ö–∞–Ω–∞–ª {channel_id} –Ω–µ –±—ã–ª —É–¥–∞–ª–µ–Ω")
            return jsonify({
                'success': False,
                'error': '–ö–∞–Ω–∞–ª –Ω–µ –±—ã–ª —É–¥–∞–ª–µ–Ω'
            }), 500

    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return jsonify({
            'success': False,
            'error': f'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'
        }), 500


@channels_bp.route('/webhook', methods=['POST'])
def telegram_webhook():
    """Webhook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram"""
    try:
        logger.info("üì® –ü–æ–ª—É—á–µ–Ω webhook –æ—Ç Telegram")

        data = request.get_json()
        if not data:
            logger.warning("‚ùå –ü—É—Å—Ç–æ–π webhook")
            return jsonify({'ok': True})

        logger.info(f"üì® Webhook –¥–∞–Ω–Ω—ã–µ: {data.get('update_id', 'N/A')}")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–∞—Ö –¥–ª—è –∞–≤—Ç–æ–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if 'channel_post' in data:
            message = data['channel_post']
            chat = message.get('chat', {})
            chat_id = str(chat.get('id'))
            text = message.get('text', '')

            logger.info(f"üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ {chat_id}: {text[:50]}...")

            # –ò—â–µ–º –∫–∞–Ω–∞–ª—ã —Å –∫–æ–¥–∞–º–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
            conn = get_db_connection()
            cursor = conn.cursor()

            cursor.execute("""
                SELECT id, username, verification_code, telegram_id
                FROM channels 
                WHERE status = 'pending_verification' 
                AND verification_code IS NOT NULL
            """)

            channels = cursor.fetchall()

            if channels:
                logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(channels)} –∫–∞–Ω–∞–ª–æ–≤ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ")

                for channel in channels:
                    verification_code = channel['verification_code']
                    if verification_code and verification_code in text:
                        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∫–∞–Ω–∞–ª
                        cursor.execute("""
                            UPDATE channels 
                            SET status = 'verified', verified_at = ?, is_verified = 1
                            WHERE id = ?
                        """, (datetime.now().isoformat(), channel['id']))

                        conn.commit()
                        logger.info(f"‚úÖ –ö–∞–Ω–∞–ª {channel['id']} –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!")
                        break

            conn.close()

        return jsonify({'ok': True})

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ webhook: {e}")
        return jsonify({'ok': True})


@channels_bp.route('/test', methods=['GET'])
def test_channels_api():
    """–¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã API"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        if not os.path.exists(DATABASE_PATH):
            return jsonify({
                'success': False,
                'error': f'–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {DATABASE_PATH}'
            }), 500

        conn = get_db_connection()
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤
        cursor.execute("SELECT COUNT(*) as count FROM channels")
        channels_count = cursor.fetchone()['count']

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute("SELECT COUNT(*) as count FROM users")
        users_count = cursor.fetchone()['count']

        conn.close()

        return jsonify({
            'success': True,
            'message': 'Channels API —Ä–∞–±–æ—Ç–∞–µ—Ç!',
            'stats': {
                'channels': channels_count,
                'users': users_count
            }
        })

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500
