# app/api/channel_analyzer.py - API –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ Telegram –∫–∞–Ω–∞–ª–æ–≤

import re
import json
import logging
import asyncio
from typing import Dict, Optional, Any
from datetime import datetime, timedelta
import random
import requests
from flask import Blueprint, request, jsonify, current_app
import os

logger = logging.getLogger(__name__)

# Blueprint –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤
analyzer_bp = Blueprint('channel_analyzer', __name__)

class TelegramChannelAnalyzer:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ Telegram –∫–∞–Ω–∞–ª–æ–≤ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    """
    
    def __init__(self, bot_token: Optional[str] = None):
        self.bot_token = bot_token
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'TelegramMiniApp/1.0'
        })
        
        # –ö—ç—à –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        self.cache = {}
        self.cache_ttl = 300  # 5 –º–∏–Ω—É—Ç
        
    def parse_channel_url(self, url: str) -> Optional[str]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å—Å—ã–ª–æ–∫ –Ω–∞ Telegram –∫–∞–Ω–∞–ª—ã
        """
        if not url:
            return None
            
        url = url.strip().lower()
        
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
        # https://t.me/channel_name
        # t.me/channel_name  
        # @channel_name
        # channel_name
        
        patterns = [
            r'^https?://t\.me/([^/?]+)',
            r'^t\.me/([^/?]+)',
            r'^@([^/?]+)',
            r'^([a-zA-Z0-9_]+)$'
        ]
        
        for pattern in patterns:
            match = re.match(pattern, url)
            if match:
                username = match.group(1)
                # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
                username = re.sub(r'[^a-zA-Z0-9_]', '', username)
                return username
                
        return None
    
    async def get_channel_info_via_api(self, username: str) -> Optional[Dict]:
        if not self.bot_token:
            logger.debug("Bot token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return None
            
        try:
            url = f"https://api.telegram.org/bot{self.bot_token}/getChat"
            params = {'chat_id': f"@{username}"}
            
            logger.info(f"ü§ñ Bot API –∑–∞–ø—Ä–æ—Å: {url}")
            logger.debug(f"üîó –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
            
            response = self.session.get(url, params=params, timeout=10)
            
            logger.info(f"üì° Bot API –æ—Ç–≤–µ—Ç: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                logger.debug(f"üìÑ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç Bot API: {data}")
                
                if data.get('ok'):
                    chat_info = data['result']
                    
                    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ß–∏—Ç–∞–µ–º member_count, –∞ –Ω–µ subscriber_count
                    member_count = chat_info.get('member_count', 0)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                    # –î–ª—è –∫–∞–Ω–∞–ª–æ–≤ Bot API –º–æ–∂–µ—Ç –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å member_count, –ø—Ä–æ–±—É–µ–º getChatMemberCount
                    if member_count == 0:
                        try:
                            count_url = f"https://api.telegram.org/bot{self.bot_token}/getChatMemberCount"
                            count_params = {'chat_id': f"@{username}"}
                            
                            logger.info(f"üî¢ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: getChatMemberCount")
                            count_response = self.session.get(count_url, params=count_params, timeout=10)
                            
                            if count_response.status_code == 200:
                                count_data = count_response.json()
                                if count_data.get('ok'):
                                    member_count = count_data.get('result', 0)
                                    logger.info(f"‚úÖ getChatMemberCount –≤–µ—Ä–Ω—É–ª: {member_count}")
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ getChatMemberCount: {e}")
                    
                    result = {
                        'title': chat_info.get('title', ''),
                        'username': chat_info.get('username', ''),
                        'description': chat_info.get('description', ''),
                        'member_count': member_count,  # ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ
                        'type': chat_info.get('type', ''),
                        'invite_link': chat_info.get('invite_link', ''),
                        'api_response': chat_info  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    }
                    
                    logger.info(f"‚úÖ Bot API —É—Å–ø–µ—à–Ω–æ:")
                    logger.info(f"   üì∫ –ö–∞–Ω–∞–ª: {result['title']}")
                    logger.info(f"   üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {member_count}")
                    logger.info(f"   üìù –û–ø–∏—Å–∞–Ω–∏–µ: {result['description'][:50]}...")
                    
                    return result
                else:
                    error_description = data.get('description', 'Unknown error')
                    logger.warning(f"‚ùå Bot API –æ—à–∏–±–∫–∞: {error_description}")
                    return None
            else:
                logger.warning(f"‚ùå HTTP –æ—à–∏–±–∫–∞ Bot API: {response.status_code}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ Bot API: {e}")
            return None
    def get_channel_info_via_scraping(self, username: str) -> Optional[Dict]:
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ URL —Ñ–æ—Ä–º–∞—Ç—ã
            urls_to_try = [
                f"https://t.me/s/{username}",      # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
                f"https://t.me/{username}",        # –ü—Ä—è–º–æ–π  
            ]
            
            # –ë–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36 Edg/120.0.0.0',
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
                'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
                'Accept-Encoding': 'gzip, deflate, br',
                'DNT': '1',
                'Connection': 'keep-alive',
                'Upgrade-Insecure-Requests': '1',
                'Sec-Fetch-Dest': 'document',
                'Sec-Fetch-Mode': 'navigate',
                'Sec-Fetch-Site': 'none',
                'Cache-Control': 'max-age=0'
            }
            
            for url in urls_to_try:
                logger.info(f"üîç –ü—Ä–æ–±—É–µ–º: {url}")
                
                try:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –∏ retry
                    import time
                    time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    
                    response = self.session.get(
                        url, 
                        headers=headers, 
                        timeout=15,
                        allow_redirects=True,
                        verify=True
                    )
                    
                    logger.info(f"üì° –°—Ç–∞—Ç—É—Å {url}: {response.status_code}")
                    
                    if response.status_code == 200:
                        content = response.text
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞–Ω–∞–ª–∞
                        if any(indicator in content.lower() for indicator in [
                            'tgme_page_title', 'og:title', 'subscribers', '–ø–æ–¥–ø–∏—Å—á–∏–∫'
                        ]):
                            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞–Ω–∞–ª–∞")
                            
                            result = {}
                            
                            # –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                            title_patterns = [
                                r'<title>([^<]+?)</title>',
                                r'property="og:title"\s+content="([^"]+)"',
                                r'class="tgme_page_title"[^>]*>([^<]+)</div>'
                            ]
                            
                            for pattern in title_patterns:
                                match = re.search(pattern, content, re.IGNORECASE)
                                if match:
                                    title = match.group(1).strip()
                                    if title and 'telegram' not in title.lower():
                                        result['title'] = title
                                        logger.info(f"‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}")
                                        break
                            
                            # –ò—â–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –û–ß–ï–ù–¨ –û–°–¢–û–†–û–ñ–ù–û
                            logger.info("üîç –ü–æ–∏—Å–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤...")
                            
                            # –ü—Ä–æ—Å—Ç—ã–µ –∏ —Ç–æ—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
                            subscriber_patterns = [
                                r'(\d+(?:\.\d+)?[Kk])\s*subscribers?',
                                r'(\d+(?:\.\d+)?[Mm])\s*subscribers?',
                                r'(\d+)\s*subscribers?',
                                r'(\d+(?:\.\d+)?[–ö–∫–ú–º])\s*–ø–æ–¥–ø–∏—Å—á–∏–∫',
                                r'(\d+)\s*–ø–æ–¥–ø–∏—Å—á–∏–∫'
                            ]
                            
                            found_count = 0
                            
                            for pattern in subscriber_patterns:
                                matches = re.finditer(pattern, content, re.IGNORECASE)
                                for match in matches:
                                    text = match.group(1)
                                    parsed = self.parse_subscriber_count(text)
                                    
                                    # –û—á–µ–Ω—å —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                                    if 100 <= parsed <= 500000000:  # –û—Ç 100 –¥–æ 5–ú
                                        if parsed > found_count:
                                            found_count = parsed
                                            result['subscriber_text'] = text
                                            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ: '{text}' = {parsed}")
                            
                            if found_count > 0:
                                result['raw_subscriber_count'] = found_count
                                result['subscriber_count'] = found_count
                            else:
                                logger.warning(f"‚ùå –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                            
                            result['username'] = username
                            result['scraped_at'] = datetime.now().isoformat()
                            result['source_url'] = url
                            
                            return result
                        else:
                            logger.warning(f"‚ö†Ô∏è –≠—Ç–æ –Ω–µ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞–Ω–∞–ª–∞")
                            
                    elif response.status_code == 404:
                        logger.warning(f"‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω (404)")
                        return None
                    else:
                        logger.warning(f"‚ö†Ô∏è HTTP {response.status_code}")
                        
                except requests.exceptions.ConnectionError as e:
                    logger.warning(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å {url}: {e}")
                    continue
                except requests.exceptions.Timeout as e:
                    logger.warning(f"‚ùå –¢–∞–π–º–∞—É—Ç {url}: {e}")
                    continue
                except Exception as e:
                    logger.warning(f"‚ùå –û—à–∏–±–∫–∞ {url}: {e}")
                    continue
            
            # –ï—Å–ª–∏ –≤—Å–µ URL –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
            logger.error(f"‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ @{username} –Ω–µ—É—Å–ø–µ—à–Ω—ã")
            return None
                    
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ @{username}: {e}")
            return None
    
    def parse_subscriber_count(self, text: str) -> int:
        if not text:
            return 0

        original = text
        text = text.strip().lower().replace(',', '').replace(' ', '')
        
        try:
            # K —Ñ–æ—Ä–º–∞—Ç (—Ç—ã—Å—è—á–∏)
            if text.endswith('k') or text.endswith('–∫'):
                num_part = text[:-1]
                try:
                    num = float(num_part)
                    result = int(num * 1000)
                    logger.debug(f"K-—Ñ–æ—Ä–º–∞—Ç: '{original}' = {result}")
                    return result
                except:
                    pass
            
            # M —Ñ–æ—Ä–º–∞—Ç (–º–∏–ª–ª–∏–æ–Ω—ã)
            if text.endswith('m') or text.endswith('–º'):
                num_part = text[:-1]
                try:
                    num = float(num_part)
                    result = int(num * 1000000)
                    logger.debug(f"M-—Ñ–æ—Ä–º–∞—Ç: '{original}' = {result}")
                    return result
                except:
                    pass
            
            # –û–±—ã—á–Ω–æ–µ —á–∏—Å–ª–æ - –±–µ—Ä–µ–º –ü–ï–†–í–û–ï –Ω–∞–π–¥–µ–Ω–Ω–æ–µ
            numbers = re.findall(r'\d+', text)
            if numbers:
                first_num = int(numbers[0])
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å
                if 1 <= first_num <= 50000000:
                    logger.debug(f"–ß–∏—Å–ª–æ: '{original}' = {first_num}")
                    return first_num
            
            return 0

        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ '{original}': {e}")
            return 0
    
    def generate_realistic_stats(self, username: str, base_subscriber: int = None) -> Dict:
        logger.info(f"üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è @{username}, –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏: {base_subscriber}")
        
        # –¢–û–õ–¨–ö–û —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if base_subscriber is not None and base_subscriber > 0:
            subscribers_count = base_subscriber
            data_source = 'real'
            logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –†–ï–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ: {subscribers_count} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
        else:
            subscribers_count = 0  # –ù–ï –ì–ï–ù–ï–†–ò–†–£–ï–ú - –ø—Ä–æ—Å—Ç–æ 0
            data_source = 'not_found'
            logger.warning(f"‚ùå –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ù–ï –ù–ê–ô–î–ï–ù–´ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 0")
        
        # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = {
            'username': username,
            'title': f"@{username}",
            'description': f"Telegram –∫–∞–Ω–∞–ª @{username}",
            'category': 'other',
            
            # –í–°–ï –ü–û–õ–Ø –° –†–ï–ê–õ–¨–ù–´–ú –ó–ù–ê–ß–ï–ù–ò–ï–ú –ò–õ–ò 0
            'subscribers': subscribers_count,
            'subscriber_count': subscribers_count,
            'raw_subscriber_count': subscribers_count,
            'member_count': subscribers_count,
            'subscribers_count': subscribers_count,
            
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            'engagement_rate': 0 if subscribers_count == 0 else 5.0,
            'avg_views': 0,
            
            # –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
            'avatar_letter': username[0].upper() if username else 'C',
            'verified': False,
            'data_source': data_source,
            'generated_at': datetime.now().isoformat(),
            'invite_link': f'https://t.me/{username}'
        }
        
        logger.info(f"üìä –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {subscribers_count} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (–∏—Å—Ç–æ—á–Ω–∏–∫: {data_source})")
        
        return stats
    
    def calculate_estimated_cpm(self, subscriber: int, engagement_rate: float) -> float:
        """
        –†–∞—Å—á–µ—Ç –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞ 1000 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
        """
        base_cpm = 50  # –ë–∞–∑–æ–≤–∞—è CPM –≤ —Ä—É–±–ª—è—Ö
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–∞–Ω–∞–ª–∞
        if subscriber > 100000:
            base_cpm *= 1.5
        elif subscriber > 50000:
            base_cpm *= 1.3
        elif subscriber < 5000:
            base_cpm *= 0.7
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏
        if engagement_rate > 10:
            base_cpm *= 1.4
        elif engagement_rate > 7:
            base_cpm *= 1.2
        elif engagement_rate < 3:
            base_cpm *= 0.8
        
        return round(base_cpm, 2)
    
    def estimate_audience_quality(self, subscriber: int, engagement_rate: float) -> str:
        """
        –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏
        """
        if engagement_rate > 12:
            return "–í—ã—Å–æ–∫–æ–µ"
        elif engagement_rate > 7:
            return "–•–æ—Ä–æ—à–µ–µ"
        elif engagement_rate > 4:
            return "–°—Ä–µ–¥–Ω–µ–µ"
        else:
            return "–ù–∏–∑–∫–æ–µ"
    
    async def analyze_channel(self, channel_url: str) -> Dict[str, Any]:
        try:
            # –ü–∞—Ä—Å–∏–º URL
            username = self.parse_channel_url(channel_url)
            if not username:
                return {'success': False, 'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª'}
            
            logger.info(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º: @{username}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cache_key = f"channel_{username}"
            if cache_key in self.cache:
                cached_data, timestamp = self.cache[cache_key]
                if datetime.now().timestamp() - timestamp < self.cache_ttl:
                    return cached_data
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            base_subscriber = None
            title = None
            description = None
            data_source = 'not_found'
            
            # –®–ê–ì 1: Bot API
            try:
                api_data = await self.get_channel_info_via_api(username)
                if api_data:
                    title = api_data.get('title', '').strip()
                    description = api_data.get('description', '').strip()
                    member_count = api_data.get('member_count', 0)
                    
                    if member_count is not None:
                        base_subscriber = member_count
                        data_source = 'bot_api'
                        logger.info(f"‚úÖ Bot API: {base_subscriber} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
            except Exception as e:
                logger.warning(f"Bot API –æ—à–∏–±–∫–∞: {e}")
            
            # –®–ê–ì 2: –í–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥ (–µ—Å–ª–∏ Bot API –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç)
            if not base_subscriber:
                try:
                    scraped_data = self.get_channel_info_via_scraping(username)
                    if scraped_data:
                        if not title:
                            title = scraped_data.get('title', '').strip()
                        if not description:
                            description = scraped_data.get('description', '').strip()
                        
                        if scraped_data.get('raw_subscriber_count', 0) > 0:
                            base_subscriber = scraped_data['raw_subscriber_count']
                            data_source = 'scraping'
                            logger.info(f"‚úÖ –°–∫—Ä–∞–ø–∏–Ω–≥: {base_subscriber} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
                except Exception as e:
                    logger.error(f"–°–∫—Ä–∞–ø–∏–Ω–≥ –æ—à–∏–±–∫–∞: {e}")
            
            # –®–ê–ì 3: –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            stats = self.generate_realistic_stats(username, base_subscriber)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if title:
                stats['title'] = title
            if description:
                stats['description'] = description
            
            stats['data_source'] = data_source
            
            result = {
                'success': True,
                'data': stats,
                'analyzed_at': datetime.now().isoformat()
            }
            
            # –ö—ç—à–∏—Ä—É–µ–º
            self.cache[cache_key] = (result, datetime.now().timestamp())
            
            logger.info(f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: @{username} = {stats.get('subscriber_count', 0)} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ ({data_source})")
            
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return {
                'success': False,
                'error': f'–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–Ω–∞–ª–∞: {str(e)}'
            }

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
analyzer = TelegramChannelAnalyzer(bot_token=os.environ.get('BOT_TOKEN'))
@analyzer_bp.route('/analyze', methods=['POST'])
def analyze_channel():
    """
    API endpoint –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–Ω–∞–ª–∞
    """
    try:
        data = request.get_json()
        
        if not data or 'channel_url' not in data:
            return jsonify({
                'success': False,
                'error': '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å channel_url'
            }), 400
        
        channel_url = data['channel_url'].strip()
        
        if not channel_url:
            return jsonify({
                'success': False,
                'error': '–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π'
            }), 400
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        try:
            result = loop.run_until_complete(analyzer.analyze_channel(channel_url))
        finally:
            loop.close()
        
        if result['success']:
            return jsonify(result)
        else:
            return jsonify(result), 400
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ API –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–Ω–∞–ª–∞: {e}")
        return jsonify({
            'success': False,
            'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        }), 500

@analyzer_bp.route('/validate', methods=['POST'])
def validate_channel_url():
    """
    –ë—ã—Å—Ç—Ä–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è URL –∫–∞–Ω–∞–ª–∞
    """
    try:
        data = request.get_json()
        channel_url = data.get('channel_url', '').strip()
        
        username = analyzer.parse_channel_url(channel_url)
        
        if username:
            return jsonify({
                'success': True,
                'username': username,
                'formatted_url': f"https://t.me/{username}"
            })
        else:
            return jsonify({
                'success': False,
                'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª'
            }), 400
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ URL: {e}")
        return jsonify({
            'success': False,
            'error': '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏'
        }), 500

@analyzer_bp.route('/cache/clear', methods=['POST'])
def clear_cache():
    """
    –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∞)
    """
    try:
        analyzer.cache.clear()
        return jsonify({
            'success': True,
            'message': '–ö—ç—à –æ—á–∏—â–µ–Ω'
        })
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {e}")
        return jsonify({
            'success': False,
            'error': '–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞'
        }), 500

@analyzer_bp.route('/stats', methods=['GET'])
def analyzer_stats():
    """
    –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
    """
    try:
        return jsonify({
            'success': True,
            'stats': {
                'cache_size': len(analyzer.cache),
                'cache_ttl_seconds': analyzer.cache_ttl,
                'bot_token_configured': analyzer.bot_token is not None
            }
        })
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return jsonify({
            'success': False,
            'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
        }), 500

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Å —Ç–æ–∫–µ–Ω–æ–º –±–æ—Ç–∞
def init_analyzer(bot_token: Optional[str] = None):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Å —Ç–æ–∫–µ–Ω–æ–º –±–æ—Ç–∞
    """
    global analyzer
    if bot_token:
        analyzer.bot_token = bot_token
        logger.info("–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å Bot Token")
    else:
        logger.info("–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ Bot Token (—Ç–æ–ª—å–∫–æ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ)")

# –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞ app/api/channel_analyzer.py

@analyzer_bp.route('/debug/bot-api', methods=['GET'])
def debug_bot_api():
    """
    –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê BOT API: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å—é —Ü–µ–ø–æ—á–∫—É —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–∫–µ–Ω–æ–º
    """
    import os
    import requests
    
    result = {
        'timestamp': datetime.now().isoformat(),
        'tests': {}
    }
    
    try:
        # –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É .env
        from dotenv import load_dotenv
        load_dotenv()
        result['tests']['env_loaded'] = True
        
        # –¢–ï–°–¢ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        bot_token_env = os.environ.get('BOT_TOKEN')
        result['tests']['token_in_env'] = {
            'exists': bot_token_env is not None,
            'length': len(bot_token_env) if bot_token_env else 0,
            'starts_with': bot_token_env[:10] + '...' if bot_token_env and len(bot_token_env) > 10 else 'N/A'
        }
        
        # –¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –≤ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–µ
        analyzer_token = analyzer.bot_token
        result['tests']['token_in_analyzer'] = {
            'exists': analyzer_token is not None,
            'length': len(analyzer_token) if analyzer_token else 0,
            'starts_with': analyzer_token[:10] + '...' if analyzer_token and len(analyzer_token) > 10 else 'N/A',
            'matches_env': analyzer_token == bot_token_env if analyzer_token and bot_token_env else False
        }
        
        # –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞
        if bot_token_env:
            # –§–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞: —á–∏—Å–ª–æ–±–æ—Ç–∞:–¥–ª–∏–Ω–Ω–∞—è_—Å—Ç—Ä–æ–∫–∞
            token_parts = bot_token_env.split(':')
            result['tests']['token_format'] = {
                'valid_format': len(token_parts) == 2,
                'bot_id_part': token_parts[0] if len(token_parts) > 0 else 'missing',
                'secret_part_length': len(token_parts[1]) if len(token_parts) > 1 else 0,
                'expected_format': 'bot_id:secret (like 1234567890:AABBCC...)'
            }
        else:
            result['tests']['token_format'] = {'error': 'No token to check'}
        
        # –¢–ï–°–¢ 5: –ü—Ä–æ–≤–µ—Ä—è–µ–º API Telegram –Ω–∞–ø—Ä—è–º—É—é
        if bot_token_env:
            try:
                api_url = f"https://api.telegram.org/bot{bot_token_env}/getMe"
                response = requests.get(api_url, timeout=10)
                
                result['tests']['telegram_api_test'] = {
                    'status_code': response.status_code,
                    'success': response.status_code == 200
                }
                
                if response.status_code == 200:
                    data = response.json()
                    result['tests']['telegram_api_test']['bot_info'] = {
                        'bot_username': data.get('result', {}).get('username', 'N/A'),
                        'bot_name': data.get('result', {}).get('first_name', 'N/A'),
                        'can_read_messages': data.get('result', {}).get('can_read_all_group_messages', False)
                    }
                else:
                    result['tests']['telegram_api_test']['error'] = response.text
                    
            except Exception as e:
                result['tests']['telegram_api_test'] = {
                    'error': str(e),
                    'success': False
                }
        else:
            result['tests']['telegram_api_test'] = {'error': 'No token available'}
        
        # –¢–ï–°–¢ 6: –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        if bot_token_env:
            try:
                # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å —Ç–æ–∫–µ–Ω–æ–º
                test_analyzer = TelegramChannelAnalyzer(bot_token=bot_token_env)
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º –∫–∞–Ω–∞–ª–µ
                import asyncio
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                
                api_data = loop.run_until_complete(test_analyzer.get_channel_info_via_api('durov'))
                loop.close()
                
                result['tests']['analyzer_method_test'] = {
                    'success': api_data is not None,
                    'data_received': api_data if api_data else 'No data'
                }
                
            except Exception as e:
                result['tests']['analyzer_method_test'] = {
                    'error': str(e),
                    'success': False
                }
        else:
            result['tests']['analyzer_method_test'] = {'error': 'No token available'}
        
        # –¢–ï–°–¢ 7: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        try:
            from app.config.telegram_config import AppConfig
            config_token = getattr(AppConfig, 'BOT_TOKEN', None)
            result['tests']['app_config'] = {
                'token_in_config': config_token is not None,
                'matches_env': config_token == bot_token_env if config_token and bot_token_env else False
            }
        except Exception as e:
            result['tests']['app_config'] = {'error': str(e)}
        
        # –ò–¢–û–ì–ò
        result['summary'] = {
            'token_loaded': result['tests']['token_in_env']['exists'],
            'token_valid_format': result['tests'].get('token_format', {}).get('valid_format', False),
            'api_accessible': result['tests'].get('telegram_api_test', {}).get('success', False),
            'analyzer_working': result['tests'].get('analyzer_method_test', {}).get('success', False),
            'overall_status': 'OK' if all([
                result['tests']['token_in_env']['exists'],
                result['tests'].get('telegram_api_test', {}).get('success', False)
            ]) else 'ISSUES_FOUND'
        }
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = []
        if not result['tests']['token_in_env']['exists']:
            recommendations.append('–î–æ–±–∞–≤—å—Ç–µ BOT_TOKEN –≤ .env —Ñ–∞–π–ª')
        elif not result['tests'].get('token_format', {}).get('valid_format', False):
            recommendations.append('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: 1234567890:AABBCC...)')
        elif not result['tests'].get('telegram_api_test', {}).get('success', False):
            recommendations.append('–¢–æ–∫–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ API Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
        elif not result['tests'].get('analyzer_method_test', {}).get('success', False):
            recommendations.append('–ü—Ä–æ–±–ª–µ–º–∞ –≤ –º–µ—Ç–æ–¥–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏')
        else:
            recommendations.append('Bot API –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!')
        
        result['recommendations'] = recommendations
        
        return jsonify(result)
        
    except Exception as e:
        return jsonify({
            'error': str(e),
            'timestamp': datetime.now().isoformat()
        }), 500

# –≠–∫—Å–ø–æ—Ä—Ç blueprint
__all__ = ['analyzer_bp', 'init_analyzer']