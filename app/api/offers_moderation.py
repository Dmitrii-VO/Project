"""
API endpoints for offer moderation and status management
"""
from flask import Blueprint, request, jsonify
from app.services.auth_service import AuthService
from app.config.telegram_config import AppConfig

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_USER_ID = 373086959

offers_moderation_bp = Blueprint('offers_moderation', __name__, url_prefix='/api/offers_moderation')

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
auth_service = AuthService()

def get_telegram_user_id():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ Telegram User ID"""
    return auth_service.get_current_user_id()

def is_admin():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        user_id = get_telegram_user_id()
        return str(user_id) == str(ADMIN_USER_ID)
    except:
        return False

def get_db_connection():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    import sqlite3
    
    print(f"üîç Connecting to database: {AppConfig.DATABASE_PATH}")
    
    conn = sqlite3.connect(AppConfig.DATABASE_PATH)
    conn.row_factory = sqlite3.Row  # –î–ª—è —É–¥–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–æ–ª–±—Ü–∞–º –ø–æ –∏–º–µ–Ω–∏
    return conn

def send_telegram_notification(user_id, message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram"""
    try:
        from app.telegram.telegram_notifications import send_notification
        send_notification(user_id, message)
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return False

@offers_moderation_bp.route('/offers', methods=['GET'])
def get_offers_for_moderation():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–æ–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    current_user = get_telegram_user_id()
    print(f"üîç Admin check for user: {current_user}")
    
    if not is_admin():
        print(f"‚ùå Access denied for user: {current_user}")
        return jsonify({'error': 'Access denied'}), 403
    
    print(f"‚úÖ Admin access confirmed for user: {current_user}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        status_filter = request.args.get('status')
        search_query = request.args.get('search')
        
        print(f"üìã Moderation request - status_filter: {status_filter}, search: {search_query}")
        
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
        query = """
        SELECT 
            o.id, o.title, o.description, 
            COALESCE(o.budget_total, o.price, 0) as budget_total, 
            COALESCE(o.category, 'general') as category,
            o.created_at, 
            COALESCE(o.submitted_at, o.created_at) as submitted_at,
            COALESCE(o.user_id, o.created_by, 0) as user_internal_id,
            COALESCE(o.status, 'draft') as status,
            COALESCE(o.rejection_reason, '') as rejection_reason,
            COALESCE(u.telegram_id, 0) as telegram_id,
            COALESCE(u.first_name, 'Unknown') as first_name,
            COALESCE(u.last_name, '') as last_name
        FROM offers o
        LEFT JOIN users u ON (o.created_by = u.id OR o.user_id = u.id)
        WHERE 1=1
        """
        params = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
        if status_filter and status_filter != 'all':
            query += " AND o.status = ?"
            params.append(status_filter)
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ñ—Ñ–µ—Ä—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            query += " AND o.status = ?"
            params.append('pending')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        if search_query:
            query += " AND (title LIKE ? OR description LIKE ?)"
            search_pattern = f"%{search_query}%"
            params.extend([search_pattern, search_pattern])
        
        query += " ORDER BY o.created_at DESC"
        
        print(f"üîç Executing query: {query}")
        print(f"üîç Query params: {params}")
        
        cursor.execute(query, params)
        offers = cursor.fetchall()
        
        print(f"üìä Found {len(offers)} offers for moderation")
        
        offers_list = []
        for i, offer in enumerate(offers):
            user_name = f"{offer[11]} {offer[12]}".strip() if offer[11] != 'Unknown' else f"User {offer[10]}"
            offer_data = {
                'id': offer[0],
                'title': offer[1],
                'description': offer[2],
                'budget_total': offer[3],
                'price': offer[3],  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                'category': offer[4],
                'created_at': offer[5],
                'submitted_at': offer[6],
                'user_id': offer[10],  # telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                'status': offer[8],
                'rejection_reason': offer[9],
                'user_name': user_name
            }
            offers_list.append(offer_data)
            print(f"üìã Offer {i+1}: ID={offer[0]}, Title='{offer[1]}', Status='{offer[8]}', User='{user_name}'")
        
        print(f"‚úÖ Returning {len(offers_list)} offers to frontend")
        
        conn.close()
        return jsonify({
            'success': True,
            'data': {
                'offers': offers_list
            },
            'count': len(offers_list)
        })
        
    except Exception as e:
        return jsonify({'success': False, 'error': f'Database error: {str(e)}'}), 500

@offers_moderation_bp.route('/<int:offer_id>/approve', methods=['POST'])
def approve_offer(offer_id):
    """–û–¥–æ–±—Ä–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    if not is_admin():
        return jsonify({'error': 'Access denied'}), 403
    
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ—Ñ—Ñ–µ—Ä –∏ –µ–≥–æ —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        cursor.execute("SELECT user_id, title, status FROM offers WHERE id = ?", (offer_id,))
        offer = cursor.fetchone()
        
        if not offer:
            conn.close()
            return jsonify({'error': 'Offer not found'}), 404
            
        user_id, title, current_status = offer
        
        if current_status != 'pending':
            conn.close()
            return jsonify({'error': f'Cannot approve offer with status: {current_status}'}), 400
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ 'active'
        cursor.execute("""
            UPDATE offers 
            SET status = 'active', approved_at = CURRENT_TIMESTAMP 
            WHERE id = ?
        """, (offer_id,))
        
        conn.commit()
        conn.close()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é –æ—Ñ—Ñ–µ—Ä–∞
        notification_message = f"‚úÖ –í–∞—à –æ—Ñ—Ñ–µ—Ä '{title}' –æ–¥–æ–±—Ä–µ–Ω –∏ —Ç–µ–ø–µ—Ä—å –∞–∫—Ç–∏–≤–µ–Ω!"
        send_telegram_notification(user_id, notification_message)
        
        return jsonify({
            'success': True,
            'message': 'Offer approved successfully',
            'offer_id': offer_id,
            'new_status': 'active'
        })
        
    except Exception as e:
        return jsonify({'error': f'Database error: {str(e)}'}), 500

@offers_moderation_bp.route('/<int:offer_id>/reject', methods=['POST'])
def reject_offer(offer_id):
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    if not is_admin():
        return jsonify({'error': 'Access denied'}), 403
    
    try:
        data = request.get_json() or {}
        rejection_reason = data.get('reason', '–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')
        
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ—Ñ—Ñ–µ—Ä –∏ –µ–≥–æ —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        cursor.execute("SELECT user_id, title, status FROM offers WHERE id = ?", (offer_id,))
        offer = cursor.fetchone()
        
        if not offer:
            conn.close()
            return jsonify({'error': 'Offer not found'}), 404
            
        user_id, title, current_status = offer
        
        if current_status != 'pending':
            conn.close()
            return jsonify({'error': f'Cannot reject offer with status: {current_status}'}), 400
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ 'rejected'
        cursor.execute("""
            UPDATE offers 
            SET status = 'rejected', 
                rejection_reason = ?,
                rejected_at = CURRENT_TIMESTAMP 
            WHERE id = ?
        """, (rejection_reason, offer_id))
        
        conn.commit()
        conn.close()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é –æ—Ñ—Ñ–µ—Ä–∞
        notification_message = f"‚ùå –í–∞—à –æ—Ñ—Ñ–µ—Ä '{title}' –æ—Ç–∫–ª–æ–Ω–µ–Ω.\n–ü—Ä–∏—á–∏–Ω–∞: {rejection_reason}\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ñ—Ñ–µ—Ä –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ."
        send_telegram_notification(user_id, notification_message)
        
        return jsonify({
            'success': True,
            'message': 'Offer rejected successfully',
            'offer_id': offer_id,
            'new_status': 'rejected',
            'reason': rejection_reason
        })
        
    except Exception as e:
        return jsonify({'error': f'Database error: {str(e)}'}), 500

@offers_moderation_bp.route('/<int:offer_id>/status', methods=['PUT'])
def update_offer_status(offer_id):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ñ—Ñ–µ—Ä–∞"""
    try:
        data = request.get_json() or {}
        new_status = data.get('status')
        
        if not new_status:
            return jsonify({'error': 'Status is required'}), 400
            
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
        valid_statuses = ['draft', 'pending', 'active', 'rejected']
        if new_status not in valid_statuses:
            return jsonify({'error': f'Invalid status. Valid statuses: {valid_statuses}'}), 400
        
        user_id = get_telegram_user_id()
        
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞
        cursor.execute("SELECT user_id, title, status FROM offers WHERE id = ?", (offer_id,))
        offer = cursor.fetchone()
        
        if not offer:
            conn.close()
            return jsonify({'error': 'Offer not found'}), 404
            
        offer_user_id, title, current_status = offer
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if str(offer_user_id) != str(user_id) and not is_admin():
            conn.close()
            return jsonify({'error': 'Access denied'}), 403
        
        # –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —Å—Ç–∞—Ç—É—Å–æ–≤
        if current_status == 'draft' and new_status == 'pending':
            # –°–æ–∑–¥–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
            cursor.execute("UPDATE offers SET status = 'pending', submitted_at = CURRENT_TIMESTAMP WHERE id = ?", (offer_id,))
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            send_telegram_notification(user_id, f"üì§ –í–∞—à –æ—Ñ—Ñ–µ—Ä '{title}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")
            send_telegram_notification(ADMIN_USER_ID, f"üì¨ –ù–æ–≤—ã–π –æ—Ñ—Ñ–µ—Ä –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: '{title}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
        elif current_status == 'rejected' and new_status == 'draft':
            # –í–æ–∑–≤—Ä–∞—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω–æ–≥–æ –æ—Ñ—Ñ–µ—Ä–∞ –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            cursor.execute("UPDATE offers SET status = 'draft', rejection_reason = NULL WHERE id = ?", (offer_id,))
            
        else:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä—É–≥–∏—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞
            if not is_admin():
                conn.close()
                return jsonify({'error': 'Invalid status transition'}), 400
            
            cursor.execute("UPDATE offers SET status = ? WHERE id = ?", (new_status, offer_id))
        
        conn.commit()
        conn.close()
        
        return jsonify({
            'success': True,
            'message': 'Status updated successfully',
            'offer_id': offer_id,
            'old_status': current_status,
            'new_status': new_status
        })
        
    except Exception as e:
        return jsonify({'error': f'Database error: {str(e)}'}), 500

@offers_moderation_bp.route('/complete/<int:offer_id>', methods=['POST'])
def complete_offer(offer_id):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –æ—Ñ—Ñ–µ—Ä–∞ - –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –∫–∞–Ω–∞–ª–æ–≤"""
    try:
        user_id = get_telegram_user_id()
        data = request.get_json() or {}
        selected_channels = data.get('channels', [])
        
        print(f"üöÄ Complete offer {offer_id} for user {user_id} with channels: {selected_channels}")
        
        if not selected_channels:
            return jsonify({'error': 'No channels selected'}), 400
        
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ—Ñ—Ñ–µ—Ä –≤–æ–æ–±—â–µ
        cursor.execute("SELECT id, title, status, created_by, user_id FROM offers WHERE id = ?", (offer_id,))
        offer_data = cursor.fetchone()
        
        if not offer_data:
            conn.close()
            print(f"‚ùå Offer {offer_id} not found")
            return jsonify({'error': 'Offer not found'}), 404
        
        print(f"üìã Offer data: {dict(offer_data)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ - –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É internal ID –∏ telegram ID
        offer_internal_id = offer_data['created_by'] or offer_data['user_id']
        
        if offer_internal_id:
            # –ü–æ–ª—É—á–∞–µ–º telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ internal ID
            cursor.execute("SELECT telegram_id FROM users WHERE id = ?", (offer_internal_id,))
            user_record = cursor.fetchone()
            
            if user_record:
                offer_telegram_id = user_record['telegram_id']
                print(f"üîç Offer creator telegram_id: {offer_telegram_id}, current user: {user_id}")
                
                if str(offer_telegram_id) != str(user_id):
                    conn.close()
                    print(f"‚ùå Access denied: offer telegram_id {offer_telegram_id} != user {user_id}")
                    return jsonify({'error': 'Access denied'}), 403
            else:
                conn.close()
                print(f"‚ùå User record not found for internal ID: {offer_internal_id}")
                return jsonify({'error': 'User not found'}), 404
        else:
            conn.close()
            print(f"‚ùå No creator ID found in offer data")
            return jsonify({'error': 'Invalid offer data'}), 400
            
        title, status = offer_data['title'], offer_data['status']
        
        if status != 'draft':
            conn.close()
            print(f"‚ùå Cannot complete offer with status: {status}")
            return jsonify({'error': f'Cannot complete offer with status: {status}'}), 400
        
        print(f"‚úÖ Offer validation passed, proceeding with completion...")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
        try:
            for i, channel_id in enumerate(selected_channels):
                print(f"üì§ Creating proposal {i+1}/{len(selected_channels)} for channel {channel_id}")
                cursor.execute("""
                    INSERT INTO offer_proposals (offer_id, channel_id, status, created_at)
                    VALUES (?, ?, 'sent', CURRENT_TIMESTAMP)
                """, (offer_id, channel_id))
            
            print(f"‚úÖ All {len(selected_channels)} proposals created successfully")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ñ—Ñ–µ—Ä–∞ –Ω–∞ 'pending'
            print(f"üìù Updating offer {offer_id} status to 'pending'...")
            cursor.execute("""
                UPDATE offers 
                SET status = 'pending', submitted_at = CURRENT_TIMESTAMP 
                WHERE id = ?
            """, (offer_id,))
            
            print(f"‚úÖ Offer status updated to 'pending'")
            
            conn.commit()
            print(f"‚úÖ Database changes committed successfully")
            
        except Exception as db_error:
            print(f"‚ùå Database operation failed: {db_error}")
            conn.rollback()
            conn.close()
            return jsonify({'error': f'Database operation failed: {str(db_error)}'}), 500
        
        conn.close()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        send_telegram_notification(user_id, f"üì§ –í–∞—à –æ—Ñ—Ñ–µ—Ä '{title}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é —Å {len(selected_channels)} –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏.")
        send_telegram_notification(ADMIN_USER_ID, f"üì¨ –ù–æ–≤—ã–π –æ—Ñ—Ñ–µ—Ä –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: '{title}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        return jsonify({
            'success': True,
            'message': 'Offer completed and sent for moderation',
            'offer_id': offer_id,
            'channels_count': len(selected_channels),
            'new_status': 'pending'
        })
        
    except Exception as e:
        print(f"üí• Unexpected error in complete_offer: {type(e).__name__}: {e}")
        import traceback
        traceback.print_exc()
        return jsonify({'error': f'Server error: {str(e)}'}), 500

@offers_moderation_bp.route('/<int:offer_id>/reopen', methods=['POST'])
def reopen_offer(offer_id):
    """–í–æ–∑–≤—Ä–∞—Ç –æ—Ñ—Ñ–µ—Ä–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é"""
    if not is_admin():
        return jsonify({'error': 'Access denied'}), 403
    
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ—Ñ—Ñ–µ—Ä
        cursor.execute("SELECT user_id, title, status FROM offers WHERE id = ?", (offer_id,))
        offer = cursor.fetchone()
        
        if not offer:
            conn.close()
            return jsonify({'error': 'Offer not found'}), 404
            
        user_id, title, current_status = offer
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ñ—Ñ–µ—Ä –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
        cursor.execute("""
            UPDATE offers 
            SET status = 'pending', 
                rejection_reason = NULL,
                submitted_at = CURRENT_TIMESTAMP 
            WHERE id = ?
        """, (offer_id,))
        
        conn.commit()
        conn.close()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        send_telegram_notification(user_id, f"üîÑ –í–∞—à –æ—Ñ—Ñ–µ—Ä '{title}' –≤–æ–∑–≤—Ä–∞—â–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")
        
        return jsonify({
            'success': True,
            'message': 'Offer reopened for moderation',
            'offer_id': offer_id,
            'new_status': 'pending'
        })
        
    except Exception as e:
        return jsonify({'error': f'Database error: {str(e)}'}), 500