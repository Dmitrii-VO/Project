"""
API endpoints for offer moderation and status management
"""
from flask import Blueprint, request, jsonify
from app.services.auth_service import AuthService
from app.config.telegram_config import AppConfig
from datetime import datetime

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_USER_ID = 373086959

offers_moderation_bp = Blueprint('offers_moderation', __name__, url_prefix='/api/offers_moderation')

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
auth_service = AuthService()

def get_telegram_user_id():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ Telegram User ID"""
    return auth_service.get_current_user_id()

def is_admin():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        user_id = get_telegram_user_id()
        return str(user_id) == str(ADMIN_USER_ID)
    except:
        return False

def get_db_connection():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    import sqlite3
    
    print(f"üîç Connecting to database: {AppConfig.DATABASE_PATH}")
    
    conn = sqlite3.connect(AppConfig.DATABASE_PATH)
    conn.row_factory = sqlite3.Row  # –î–ª—è —É–¥–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–æ–ª–±—Ü–∞–º –ø–æ –∏–º–µ–Ω–∏
    return conn

def send_telegram_notification(user_id, message, notification_type="general"):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram"""
    try:
        from app.telegram.telegram_notifications import TelegramNotificationService, NotificationData, NotificationType
        
        print(f"üîî –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {message}")
        
        service = TelegramNotificationService()
        
        # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        notification = NotificationData(
            user_id=0,  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            telegram_id=int(user_id),
            notification_type=NotificationType.PROPOSAL_ACCEPTED if "–æ–¥–æ–±—Ä–µ–Ω" in message.lower() else 
                            NotificationType.PROPOSAL_REJECTED if "–æ—Ç–∫–ª–æ–Ω–µ–Ω" in message.lower() else
                            NotificationType.NEW_PROPOSAL,
            title="–°–∏—Å—Ç–µ–º–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ñ—Ñ–µ—Ä–æ–≤",
            message=message,
            data={'user_id': user_id, 'type': notification_type},
            priority=2
        )
        
        result = service.send_notification(notification)
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏: {result}")
        return result
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return False

@offers_moderation_bp.route('/offers', methods=['GET'])
def get_offers_for_moderation():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–æ–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    current_user = get_telegram_user_id()
    print(f"üîç Admin check for user: {current_user}")
    
    if not is_admin():
        print(f"‚ùå Access denied for user: {current_user}")
        return jsonify({'error': 'Access denied'}), 403
    
    print(f"‚úÖ Admin access confirmed for user: {current_user}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        status_filter = request.args.get('status')
        search_query = request.args.get('search')
        
        print(f"üìã Moderation request - status_filter: {status_filter}, search: {search_query}")
        
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
        query = """
        SELECT 
            o.id, o.title, o.description, 
            COALESCE(o.budget_total, o.price, 0) as budget_total, 
            COALESCE(o.category, 'general') as category,
            o.created_at, 
            COALESCE(o.submitted_at, o.created_at) as submitted_at,
            COALESCE(o.user_id, o.created_by, 0) as user_internal_id,
            COALESCE(o.status, 'draft') as status,
            COALESCE(o.rejection_reason, '') as rejection_reason,
            COALESCE(u.telegram_id, 0) as telegram_id,
            COALESCE(u.first_name, 'Unknown') as first_name,
            COALESCE(u.last_name, '') as last_name
        FROM offers o
        LEFT JOIN users u ON (o.created_by = u.id OR o.user_id = u.id)
        WHERE 1=1
        """
        params = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
        if status_filter and status_filter != 'all':
            query += " AND o.status = ?"
            params.append(status_filter)
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ñ—Ñ–µ—Ä—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            query += " AND o.status = ?"
            params.append('pending')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        if search_query:
            query += " AND (title LIKE ? OR description LIKE ?)"
            search_pattern = f"%{search_query}%"
            params.extend([search_pattern, search_pattern])
        
        query += " ORDER BY o.created_at DESC"
        
        print(f"üîç Executing query: {query}")
        print(f"üîç Query params: {params}")
        
        cursor.execute(query, params)
        offers = cursor.fetchall()
        
        print(f"üìä Found {len(offers)} offers for moderation")
        
        offers_list = []
        for i, offer in enumerate(offers):
            user_name = f"{offer[11]} {offer[12]}".strip() if offer[11] != 'Unknown' else f"User {offer[10]}"
            offer_data = {
                'id': offer[0],
                'title': offer[1],
                'description': offer[2],
                'budget_total': offer[3],
                'price': offer[3],  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                'category': offer[4],
                'created_at': offer[5],
                'submitted_at': offer[6],
                'user_id': offer[10],  # telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                'status': offer[8],
                'rejection_reason': offer[9],
                'user_name': user_name
            }
            offers_list.append(offer_data)
            print(f"üìã Offer {i+1}: ID={offer[0]}, Title='{offer[1]}', Status='{offer[8]}', User='{user_name}'")
        
        print(f"‚úÖ Returning {len(offers_list)} offers to frontend")
        
        conn.close()
        return jsonify({
            'success': True,
            'data': {
                'offers': offers_list
            },
            'count': len(offers_list)
        })
        
    except Exception as e:
        return jsonify({'success': False, 'error': f'Database error: {str(e)}'}), 500


@offers_moderation_bp.route('/<int:offer_id>', methods=['GET'])
def get_offer_by_id(offer_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ—Ñ—Ñ–µ—Ä–∞ –ø–æ ID"""
    try:
        print(f"üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞ {offer_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        user_id = request.headers.get('X-Telegram-User-Id')
        if not user_id:
            return jsonify({'error': 'User ID –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω'}), 400
        
        print(f"üë§ User ID: {user_id}")
        
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ñ—Ñ–µ—Ä–µ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        cursor.execute("""
            SELECT o.id, o.title, o.description, o.budget_total, o.category, 
                   o.status, o.created_at, o.requirements, o.min_subscribers,
                   o.created_by, u.telegram_id as creator_telegram_id,
                   u.username as creator_username
            FROM offers o
            LEFT JOIN users u ON o.created_by = u.id
            WHERE o.id = ?
        """, (offer_id,))
        
        offer = cursor.fetchone()
        conn.close()
        
        if not offer:
            return jsonify({'error': '–û—Ñ—Ñ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤–∏–¥–µ—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –æ—Ñ—Ñ–µ—Ä—ã, –ª–∏–±–æ –∞–¥–º–∏–Ω –≤–∏–¥–∏—Ç –≤—Å–µ)
        is_admin_user = str(user_id) == str(ADMIN_USER_ID)
        is_owner = str(offer['creator_telegram_id']) == str(user_id)
        
        if not is_admin_user and not is_owner:
            return jsonify({'error': '–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–≥–æ –æ—Ñ—Ñ–µ—Ä–∞'}), 403
        
        offer_data = {
            'id': offer['id'],
            'title': offer['title'],
            'description': offer['description'],
            'budget_total': offer['budget_total'],
            'price': offer['budget_total'],  # alias for compatibility
            'category': offer['category'],
            'status': offer['status'],
            'created_at': offer['created_at'],
            'requirements': offer['requirements'],
            'min_subscribers': offer['min_subscribers'],
            'creator_id': offer['creator_telegram_id'],
            'creator_username': offer['creator_username']
        }
        
        print(f"üìã –û—Ñ—Ñ–µ—Ä –Ω–∞–π–¥–µ–Ω: {offer_data['title']} (—Å—Ç–∞—Ç—É—Å: {offer_data['status']})")
        
        return jsonify({
            'success': True,
            'data': offer_data
        })
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞: {e}")
        return jsonify({'error': f'Database error: {str(e)}'}), 500


@offers_moderation_bp.route('/<int:offer_id>/approve', methods=['POST'])
def approve_offer(offer_id):
    """–û–¥–æ–±—Ä–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    if not is_admin():
        return jsonify({'error': 'Access denied'}), 403
    
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ—Ñ—Ñ–µ—Ä –∏ –ø–æ–ª—É—á–∞–µ–º telegram_id —Å–æ–∑–¥–∞—Ç–µ–ª—è
        cursor.execute("""
            SELECT o.title, o.status, u.telegram_id, o.id
            FROM offers o
            LEFT JOIN users u ON o.created_by = u.id
            WHERE o.id = ?
        """, (offer_id,))
        offer = cursor.fetchone()
        
        if not offer:
            conn.close()
            return jsonify({'error': 'Offer not found'}), 404
            
        title, current_status, creator_telegram_id, _ = offer
        
        if current_status != 'pending':
            conn.close()
            return jsonify({'error': f'Cannot approve offer with status: {current_status}'}), 400
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ 'active'
        cursor.execute("""
            UPDATE offers 
            SET status = 'active', approved_at = CURRENT_TIMESTAMP 
            WHERE id = ?
        """, (offer_id,))
        
        conn.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é –æ—Ñ—Ñ–µ—Ä–∞
        notification_message = f"""‚úÖ <b>–û—Ñ—Ñ–µ—Ä –æ–¥–æ–±—Ä–µ–Ω!</b>

üéØ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}
üìä <b>–°—Ç–∞—Ç—É—Å:</b> –ê–∫—Ç–∏–≤–µ–Ω
‚è∞ <b>–í—Ä–µ–º—è –æ–¥–æ–±—Ä–µ–Ω–∏—è:</b> {datetime.now().strftime('%d.%m.%Y –≤ %H:%M')}

üöÄ <b>–ß—Ç–æ –¥–∞–ª—å—à–µ:</b>
‚Ä¢ –í–∞—à –æ—Ñ—Ñ–µ—Ä —Ç–µ–ø–µ—Ä—å –≤–∏–¥–µ–Ω –≤—Å–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞–º –∫–∞–Ω–∞–ª–æ–≤
‚Ä¢ –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ—Ç–∫–ª–∏–∫–∞—Ö
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏

üí° –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏!"""

        send_telegram_notification(creator_telegram_id, notification_message, "offer_approved")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–º –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ñ—Ñ–µ—Ä, –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –∏—Ö –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤
        cursor.execute("""
            SELECT DISTINCT u.telegram_id, c.title, c.username
            FROM offer_proposals op
            LEFT JOIN channels c ON op.channel_id = c.id
            LEFT JOIN users u ON c.owner_id = u.id
            WHERE op.offer_id = ? AND u.telegram_id IS NOT NULL
        """, (offer_id,))
        channels = cursor.fetchall()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞–º –∫–∞–Ω–∞–ª–æ–≤
        for channel in channels:
            channel_owner_id, channel_title, channel_username = channel
            
            channel_notification = f"""üì¢ <b>–ù–æ–≤—ã–π –æ—Ñ—Ñ–µ—Ä –æ–¥–æ–±—Ä–µ–Ω!</b>

üéØ <b>–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞:</b> {title}
üì∫ <b>–í–∞—à –∫–∞–Ω–∞–ª:</b> {channel_title} ({channel_username or '–±–µ–∑ username'})
‚è∞ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y –≤ %H:%M')}

üíº <b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b>
‚Ä¢ –û—Ñ—Ñ–µ—Ä —Ç–µ–ø–µ—Ä—å –∞–∫—Ç–∏–≤–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ—Ç–∫–ª–∏–∫–∞
‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –æ—Ñ—Ñ–µ—Ä–∞ –∏ —É—Å–ª–æ–≤–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞

üîî <b>–ù–µ —É–ø—É—Å—Ç–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å!</b>
üíª –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""

            send_telegram_notification(channel_owner_id, channel_notification, "offer_available_for_channel")
        
        conn.close()
        
        return jsonify({
            'success': True,
            'message': 'Offer approved successfully',
            'offer_id': offer_id,
            'new_status': 'active'
        })
        
    except Exception as e:
        return jsonify({'error': f'Database error: {str(e)}'}), 500

@offers_moderation_bp.route('/<int:offer_id>/reject', methods=['POST'])
def reject_offer(offer_id):
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    if not is_admin():
        return jsonify({'error': 'Access denied'}), 403
    
    try:
        data = request.get_json() or {}
        rejection_reason = data.get('reason', '–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')
        
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ—Ñ—Ñ–µ—Ä –∏ –ø–æ–ª—É—á–∞–µ–º telegram_id —Å–æ–∑–¥–∞—Ç–µ–ª—è
        cursor.execute("""
            SELECT o.title, o.status, u.telegram_id, o.id
            FROM offers o
            LEFT JOIN users u ON o.created_by = u.id
            WHERE o.id = ?
        """, (offer_id,))
        offer = cursor.fetchone()
        
        if not offer:
            conn.close()
            return jsonify({'error': 'Offer not found'}), 404
            
        title, current_status, creator_telegram_id, _ = offer
        
        if current_status != 'pending':
            conn.close()
            return jsonify({'error': f'Cannot reject offer with status: {current_status}'}), 400
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ 'rejected'
        cursor.execute("""
            UPDATE offers 
            SET status = 'rejected', 
                rejection_reason = ?,
                rejected_at = CURRENT_TIMESTAMP 
            WHERE id = ?
        """, (rejection_reason, offer_id))
        
        conn.commit()
        conn.close()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é –æ—Ñ—Ñ–µ—Ä–∞
        notification_message = f"""‚ùå <b>–û—Ñ—Ñ–µ—Ä –æ—Ç–∫–ª–æ–Ω–µ–Ω</b>

üéØ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}
üìä <b>–°—Ç–∞—Ç—É—Å:</b> –û—Ç–∫–ª–æ–Ω–µ–Ω
‚è∞ <b>–í—Ä–µ–º—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:</b> {datetime.now().strftime('%d.%m.%Y –≤ %H:%M')}

üìù <b>–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:</b>
{rejection_reason}

üîÑ <b>–ß—Ç–æ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å:</b>
‚Ä¢ –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ñ—Ñ–µ—Ä —Å —É—á–µ—Ç–æ–º –∑–∞–º–µ—á–∞–Ω–∏–π
‚Ä¢ –£—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—è –∏–ª–∏ –±—é–¥–∂–µ—Ç–∞
‚Ä¢ –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é

üí° –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!"""

        send_telegram_notification(creator_telegram_id, notification_message, "offer_rejected")
        
        return jsonify({
            'success': True,
            'message': 'Offer rejected successfully',
            'offer_id': offer_id,
            'new_status': 'rejected',
            'reason': rejection_reason
        })
        
    except Exception as e:
        return jsonify({'error': f'Database error: {str(e)}'}), 500

@offers_moderation_bp.route('/<int:offer_id>/status', methods=['PUT'])
def update_offer_status(offer_id):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ñ—Ñ–µ—Ä–∞"""
    try:
        data = request.get_json() or {}
        new_status = data.get('status')
        
        if not new_status:
            return jsonify({'error': 'Status is required'}), 400
            
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
        valid_statuses = ['draft', 'pending', 'active', 'rejected']
        if new_status not in valid_statuses:
            return jsonify({'error': f'Invalid status. Valid statuses: {valid_statuses}'}), 400
        
        user_id = get_telegram_user_id()
        
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞
        cursor.execute("SELECT user_id, title, status FROM offers WHERE id = ?", (offer_id,))
        offer = cursor.fetchone()
        
        if not offer:
            conn.close()
            return jsonify({'error': 'Offer not found'}), 404
            
        offer_user_id, title, current_status = offer
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if str(offer_user_id) != str(user_id) and not is_admin():
            conn.close()
            return jsonify({'error': 'Access denied'}), 403
        
        # –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —Å—Ç–∞—Ç—É—Å–æ–≤
        if current_status == 'draft' and new_status == 'pending':
            # –°–æ–∑–¥–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
            cursor.execute("UPDATE offers SET status = 'pending', submitted_at = CURRENT_TIMESTAMP WHERE id = ?", (offer_id,))
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            user_message = f"""üì§ <b>–û—Ñ—Ñ–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!</b>

üéØ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}
üìä <b>–°—Ç–∞—Ç—É—Å:</b> –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
‚è∞ <b>–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b> {datetime.now().strftime('%d.%m.%Y –≤ %H:%M')}

‚è≥ <b>–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å–µ–π—á–∞—Å:</b>
‚Ä¢ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –ø—Ä–æ–≤–µ—Ä—è—é—Ç –≤–∞—à –æ—Ñ—Ñ–µ—Ä
‚Ä¢ –û–±—ã—á–Ω–æ –º–æ–¥–µ—Ä–∞—Ü–∏—è –∑–∞–Ω–∏–º–∞–µ—Ç 1-24 —á–∞—Å–∞
‚Ä¢ –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ

üîî –°–ª–µ–¥–∏—Ç–µ –∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏!"""

            admin_message = f"""üì¨ <b>–ù–æ–≤—ã–π –æ—Ñ—Ñ–µ—Ä –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏</b>

üéØ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}
üë§ <b>–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {user_id}
‚è∞ <b>–í—Ä–µ–º—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è:</b> {datetime.now().strftime('%d.%m.%Y –≤ %H:%M')}

üîç <b>–¢—Ä–µ–±—É–µ—Ç—Å—è:</b> –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –ø—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ
üíª –û—Ç–∫—Ä–æ–π—Ç–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""

            send_telegram_notification(user_id, user_message, "offer_submitted")
            send_telegram_notification(ADMIN_USER_ID, admin_message, "admin_new_offer")
            
        elif current_status == 'rejected' and new_status == 'draft':
            # –í–æ–∑–≤—Ä–∞—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω–æ–≥–æ –æ—Ñ—Ñ–µ—Ä–∞ –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            cursor.execute("UPDATE offers SET status = 'draft', rejection_reason = NULL WHERE id = ?", (offer_id,))
            
        else:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä—É–≥–∏—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞
            if not is_admin():
                conn.close()
                return jsonify({'error': 'Invalid status transition'}), 400
            
            cursor.execute("UPDATE offers SET status = ? WHERE id = ?", (new_status, offer_id))
        
        conn.commit()
        conn.close()
        
        return jsonify({
            'success': True,
            'message': 'Status updated successfully',
            'offer_id': offer_id,
            'old_status': current_status,
            'new_status': new_status
        })
        
    except Exception as e:
        return jsonify({'error': f'Database error: {str(e)}'}), 500

@offers_moderation_bp.route('/complete/<int:offer_id>', methods=['POST'])
def complete_offer(offer_id):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –æ—Ñ—Ñ–µ—Ä–∞ - –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –∫–∞–Ω–∞–ª–æ–≤"""
    try:
        user_id = get_telegram_user_id()
        data = request.get_json() or {}
        selected_channels = data.get('channels', [])
        
        print(f"üöÄ Complete offer {offer_id} for user {user_id} with channels: {selected_channels}")
        
        if not selected_channels:
            return jsonify({'error': 'No channels selected'}), 400
        
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ—Ñ—Ñ–µ—Ä –≤–æ–æ–±—â–µ
        cursor.execute("SELECT id, title, status, created_by, user_id FROM offers WHERE id = ?", (offer_id,))
        offer_data = cursor.fetchone()
        
        if not offer_data:
            conn.close()
            print(f"‚ùå Offer {offer_id} not found")
            return jsonify({'error': 'Offer not found'}), 404
        
        print(f"üìã Offer data: {dict(offer_data)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ - –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É internal ID –∏ telegram ID
        offer_internal_id = offer_data['created_by'] or offer_data['user_id']
        
        if offer_internal_id:
            # –ü–æ–ª—É—á–∞–µ–º telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ internal ID
            cursor.execute("SELECT telegram_id FROM users WHERE id = ?", (offer_internal_id,))
            user_record = cursor.fetchone()
            
            if user_record:
                offer_telegram_id = user_record['telegram_id']
                print(f"üîç Offer creator telegram_id: {offer_telegram_id}, current user: {user_id}")
                
                if str(offer_telegram_id) != str(user_id):
                    conn.close()
                    print(f"‚ùå Access denied: offer telegram_id {offer_telegram_id} != user {user_id}")
                    return jsonify({'error': 'Access denied'}), 403
            else:
                conn.close()
                print(f"‚ùå User record not found for internal ID: {offer_internal_id}")
                return jsonify({'error': 'User not found'}), 404
        else:
            conn.close()
            print(f"‚ùå No creator ID found in offer data")
            return jsonify({'error': 'Invalid offer data'}), 400
            
        title, status = offer_data['title'], offer_data['status']
        
        if status != 'draft':
            conn.close()
            print(f"‚ùå Cannot complete offer with status: {status}")
            return jsonify({'error': f'Cannot complete offer with status: {status}'}), 400
        
        print(f"‚úÖ Offer validation passed, proceeding with completion...")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
        try:
            for i, channel_id in enumerate(selected_channels):
                print(f"üì§ Creating proposal {i+1}/{len(selected_channels)} for channel {channel_id}")
                cursor.execute("""
                    INSERT INTO offer_proposals (offer_id, channel_id, status, created_at)
                    VALUES (?, ?, 'sent', CURRENT_TIMESTAMP)
                """, (offer_id, channel_id))
            
            print(f"‚úÖ All {len(selected_channels)} proposals created successfully")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ñ—Ñ–µ—Ä–∞ –Ω–∞ 'pending'
            print(f"üìù Updating offer {offer_id} status to 'pending'...")
            cursor.execute("""
                UPDATE offers 
                SET status = 'pending', submitted_at = CURRENT_TIMESTAMP 
                WHERE id = ?
            """, (offer_id,))
            
            print(f"‚úÖ Offer status updated to 'pending'")
            
            conn.commit()
            print(f"‚úÖ Database changes committed successfully")
            
        except Exception as db_error:
            print(f"‚ùå Database operation failed: {db_error}")
            conn.rollback()
            conn.close()
            return jsonify({'error': f'Database operation failed: {str(db_error)}'}), 500
        
        conn.close()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        user_message = f"""üöÄ <b>–û—Ñ—Ñ–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!</b>

üéØ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}
üì∫ <b>–í—ã–±—Ä–∞–Ω–æ –∫–∞–Ω–∞–ª–æ–≤:</b> {len(selected_channels)}
üìä <b>–°—Ç–∞—Ç—É—Å:</b> –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
‚è∞ <b>–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b> {datetime.now().strftime('%d.%m.%Y –≤ %H:%M')}

‚úÖ <b>–ß—Ç–æ —Å–¥–µ–ª–∞–Ω–æ:</b>
‚Ä¢ –°–æ–∑–¥–∞–Ω—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è {len(selected_channels)} –∫–∞–Ω–∞–ª–æ–≤
‚Ä¢ –û—Ñ—Ñ–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º

‚è≥ <b>–û–∂–∏–¥–∞–π—Ç–µ:</b> –†–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤"""

        admin_message = f"""üì¨ <b>–ù–æ–≤—ã–π –æ—Ñ—Ñ–µ—Ä –≥–æ—Ç–æ–≤ –∫ –º–æ–¥–µ—Ä–∞—Ü–∏–∏</b>

üéØ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}
üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_id}
üì∫ <b>–ö–∞–Ω–∞–ª–æ–≤ –≤—ã–±—Ä–∞–Ω–æ:</b> {len(selected_channels)}
‚è∞ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y –≤ %H:%M')}

üîç <b>–î–µ–π—Å—Ç–≤–∏–µ:</b> –¢—Ä–µ–±—É–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ü–∏—è
üíª –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""

        send_telegram_notification(user_id, user_message, "offer_completed")
        send_telegram_notification(ADMIN_USER_ID, admin_message, "admin_new_complete_offer")
        
        return jsonify({
            'success': True,
            'message': 'Offer completed and sent for moderation',
            'offer_id': offer_id,
            'channels_count': len(selected_channels),
            'new_status': 'pending'
        })
        
    except Exception as e:
        print(f"üí• Unexpected error in complete_offer: {type(e).__name__}: {e}")
        import traceback
        traceback.print_exc()
        return jsonify({'error': f'Server error: {str(e)}'}), 500

@offers_moderation_bp.route('/<int:offer_id>/reopen', methods=['POST'])
def reopen_offer(offer_id):
    """–í–æ–∑–≤—Ä–∞—Ç –æ—Ñ—Ñ–µ—Ä–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é"""
    if not is_admin():
        return jsonify({'error': 'Access denied'}), 403
    
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ—Ñ—Ñ–µ—Ä
        cursor.execute("SELECT user_id, title, status FROM offers WHERE id = ?", (offer_id,))
        offer = cursor.fetchone()
        
        if not offer:
            conn.close()
            return jsonify({'error': 'Offer not found'}), 404
            
        user_id, title, current_status = offer
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ñ—Ñ–µ—Ä –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
        cursor.execute("""
            UPDATE offers 
            SET status = 'pending', 
                rejection_reason = NULL,
                submitted_at = CURRENT_TIMESTAMP 
            WHERE id = ?
        """, (offer_id,))
        
        conn.commit()
        conn.close()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        user_message = f"""üîÑ <b>–û—Ñ—Ñ–µ—Ä –≤–æ–∑–≤—Ä–∞—â–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é</b>

üéØ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}
üìä <b>–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:</b> –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
‚è∞ <b>–í—Ä–µ–º—è –≤–æ–∑–≤—Ä–∞—Ç–∞:</b> {datetime.now().strftime('%d.%m.%Y –≤ %H:%M')}

‚úÖ <b>–ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ:</b>
‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤–µ—Ä–Ω—É–ª –æ—Ñ—Ñ–µ—Ä –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –º–æ–¥–µ—Ä–∞—Ü–∏—é
‚Ä¢ –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω–∞
‚Ä¢ –û—Ñ—Ñ–µ—Ä –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω –∑–∞–Ω–æ–≤–æ

‚è≥ <b>–û–∂–∏–¥–∞–π—Ç–µ:</b> –ù–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤"""

        send_telegram_notification(user_id, user_message, "offer_reopened")
        
        return jsonify({
            'success': True,
            'message': 'Offer reopened for moderation',
            'offer_id': offer_id,
            'new_status': 'pending'
        })
        
    except Exception as e:
        return jsonify({'error': f'Database error: {str(e)}'}), 500

@offers_moderation_bp.route('/<int:offer_id>/delete', methods=['DELETE'])
def delete_offer_from_moderation(offer_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    if not is_admin():
        return jsonify({'error': 'Access denied'}), 403
    
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ñ—Ñ–µ—Ä–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        cursor.execute("""
            SELECT o.title, o.created_by, o.user_id, o.status,
                   u.telegram_id, u.first_name, u.last_name
            FROM offers o
            LEFT JOIN users u ON (o.created_by = u.id OR o.user_id = u.id)
            WHERE o.id = ?
        """, (offer_id,))
        offer_data = cursor.fetchone()
        
        if not offer_data:
            conn.close()
            return jsonify({'error': 'Offer not found'}), 404
        
        title = offer_data[0]
        user_telegram_id = offer_data[4]
        user_name = f"{offer_data[5] or ''} {offer_data[6] or ''}".strip() or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        
        # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        cursor.execute("DELETE FROM offer_proposals WHERE offer_id = ?", (offer_id,))
        
        # –£–¥–∞–ª—è–µ–º –æ—Ñ—Ñ–µ—Ä
        cursor.execute("DELETE FROM offers WHERE id = ?", (offer_id,))
        
        conn.commit()
        conn.close()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é –æ—Ñ—Ñ–µ—Ä–∞
        if user_telegram_id:
            user_message = f"""üóëÔ∏è <b>–û—Ñ—Ñ–µ—Ä —É–¥–∞–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b>

üéØ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}
üìä <b>–î–µ–π—Å—Ç–≤–∏–µ:</b> –£–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã
‚è∞ <b>–í—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è:</b> {datetime.now().strftime('%d.%m.%Y –≤ %H:%M')}

‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ –û—Ñ—Ñ–µ—Ä –±—ã–ª —É–¥–∞–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ –í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ç–∞–∫–∂–µ —É–¥–∞–ª–µ–Ω—ã
‚Ä¢ –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –æ—Ñ—Ñ–µ—Ä

üí° –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –ø—Ä–∏ –≤–æ–ø—Ä–æ—Å–∞—Ö"""

            send_telegram_notification(user_telegram_id, user_message, "offer_deleted")
        
        return jsonify({
            'success': True,
            'message': 'Offer deleted successfully',
            'offer_id': offer_id,
            'title': title
        })
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞: {e}")
        return jsonify({'error': f'Database error: {str(e)}'}), 500


@offers_moderation_bp.route('/<int:offer_id>/update', methods=['PUT'])
def update_offer(offer_id):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ñ—Ñ–µ—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        user_id = request.headers.get('X-Telegram-User-Id')
        if not user_id:
            return jsonify({'error': 'User ID –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω'}), 400
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        data = request.get_json()
        if not data:
            return jsonify({'error': '–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã'}), 400
        
        print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞ {offer_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
        print(f"üìã –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {data}")
        
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ñ—Ñ–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        cursor.execute("""
            SELECT o.id, o.title, o.status, o.created_by, u.telegram_id
            FROM offers o
            LEFT JOIN users u ON o.created_by = u.id
            WHERE o.id = ?
        """, (offer_id,))
        
        offer = cursor.fetchone()
        
        if not offer:
            conn.close()
            return jsonify({'error': '–û—Ñ—Ñ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if str(offer['telegram_id']) != str(user_id):
            conn.close()
            return jsonify({'error': '–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –æ—Ñ—Ñ–µ—Ä–∞'}), 403
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ñ—Ñ–µ—Ä –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        if offer['status'] not in ['draft', 'rejected']:
            conn.close()
            return jsonify({'error': f'–ù–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ñ—Ñ–µ—Ä —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {offer["status"]}'}), 400
        
        old_title = offer['title']
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è)
        update_fields = []
        update_values = []
        
        # –í—Å–µ–≥–¥–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å pending –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –æ—á–∏—â–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
        update_fields.append("status = 'pending'")
        update_fields.append("updated_at = CURRENT_TIMESTAMP")
        update_fields.append("rejection_reason = NULL")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
        if 'title' in data:
            update_fields.append("title = ?")
            update_values.append(data['title'])
            
        if 'description' in data:
            update_fields.append("description = ?")
            update_values.append(data['description'])
            
        if 'category' in data:
            update_fields.append("category = ?")
            update_values.append(data['category'])
            
        if 'budget_total' in data:
            update_fields.append("budget_total = ?")
            update_fields.append("price = ?")  # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º price —Å budget_total
            update_values.append(data['budget_total'])
            update_values.append(data['budget_total'])
            
        if 'requirements' in data:
            update_fields.append("requirements = ?")
            update_values.append(data['requirements'])
            
        if 'min_subscribers' in data:
            update_fields.append("min_subscribers = ?")
            update_values.append(data['min_subscribers'])
        
        # –î–æ–±–∞–≤–ª—è–µ–º offer_id –≤ –∫–æ–Ω–µ—Ü –¥–ª—è WHERE —É—Å–ª–æ–≤–∏—è
        update_values.append(offer_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        update_query = f"UPDATE offers SET {', '.join(update_fields)} WHERE id = ?"
        cursor.execute(update_query, update_values)
        
        conn.commit()
        conn.close()
        
        print(f"‚úÖ –û—Ñ—Ñ–µ—Ä {offer_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
        changes_list = []
        if 'budget_total' in data:
            changes_list.append(f"‚Ä¢ –ë—é–¥–∂–µ—Ç: {data['budget_total']} ‚ÇΩ")
        if 'description' in data:
            changes_list.append(f"‚Ä¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ: –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
        if 'title' in data:
            changes_list.append(f"‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {data['title']}")
        if 'category' in data:
            changes_list.append(f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}")
        
        changes_text = "\n".join(changes_list) if changes_list else "‚Ä¢ –û–±—â–∏–µ –ø—Ä–∞–≤–∫–∏"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        send_telegram_notification(
            user_id, 
            f"üîÑ –í–∞—à –æ—Ñ—Ñ–µ—Ä \"{data.get('title', old_title)}\" –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –º–æ–¥–µ—Ä–∞—Ü–∏—é.\n\n"
            f"üìã –í–Ω–µ—Å–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:\n"
            f"{changes_text}\n\n"
            f"‚è≥ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –≤–∞—à–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            "offer_updated"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–º –æ—Ñ—Ñ–µ—Ä–µ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏  
        send_telegram_notification(
            ADMIN_USER_ID,
            f"üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–∏–ª –æ—Ñ—Ñ–µ—Ä –∏ –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –º–æ–¥–µ—Ä–∞—Ü–∏—é:\n\n"
            f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {data.get('title', old_title)}\n"
            f"üí∞ –ë—é–¥–∂–µ—Ç: {data.get('budget_total', '–Ω–µ –∏–∑–º–µ–Ω–µ–Ω')} ‚ÇΩ\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
            f"üÜî –û—Ñ—Ñ–µ—Ä ID: {offer_id}\n\n"
            f"üìù –ò–∑–º–µ–Ω–µ–Ω–∏—è:\n{changes_text}\n\n"
            f"‚ö° –¢—Ä–µ–±—É–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏",
            "offer_updated_admin"
        )
        
        return jsonify({
            'success': True,
            'message': '–û—Ñ—Ñ–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é',
            'offer_id': offer_id,
            'title': data.get('title')
        })
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞: {e}")
        return jsonify({'error': f'Database error: {str(e)}'}), 500