#!/usr/bin/env python3
"""
API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏
Endpoints –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –∫–∞–Ω–∞–ª–æ–≤
"""

import sqlite3
import json
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
from flask import Blueprint, request, jsonify, current_app
from app.models.database import get_user_id_from_request, execute_db_query
from app.config.telegram_config import AppConfig
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ Blueprint
proposals_management_bp = Blueprint('proposals_management', __name__, url_prefix='/api/proposals')

# ================================================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ================================================================

def get_db_connection():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect(AppConfig.DATABASE_PATH)
        conn.row_factory = sqlite3.Row
        return conn
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return None

def validate_proposal_ownership(proposal_id: int, user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü—É –∫–∞–Ω–∞–ª–∞"""
    try:
        conn = get_db_connection()
        if not conn:
            return False
        
        cursor = conn.cursor()
        cursor.execute("""
            SELECT op.id 
            FROM offer_proposals op
            JOIN channels c ON op.channel_id = c.id
            WHERE op.id = ? AND c.owner_id = ?
        """, (proposal_id, user_id))
        
        result = cursor.fetchone()
        conn.close()
        
        return result is not None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–ª–∞–¥–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º: {e}")
        return False

def get_proposal_details(proposal_id: int) -> Optional[Dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    try:
        conn = get_db_connection()
        if not conn:
            return None
        
        cursor = conn.cursor()
        cursor.execute("""
            SELECT 
                op.id, op.offer_id, op.channel_id, op.status,
                op.created_at, op.responded_at, op.rejection_reason,
                op.expires_at, op.notified_at, op.reminder_sent_at,
                -- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ñ—Ñ–µ—Ä–µ
                o.budget_total as offer_budget, o.content as offer_content,
                o.requirements as placement_requirements, o.category as contact_info,
                o.duration_days as placement_duration, o.expected_placement_duration,
                o.category as offer_category, o.target_audience,
                -- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ
                c.title as channel_title, c.username as channel_username,
                c.subscriber_count, c.category as channel_category,
                -- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ –æ—Ñ—Ñ–µ—Ä–∞
                u.username as advertiser_username, u.first_name as advertiser_first_name,
                u.last_name as advertiser_last_name, u.telegram_id as advertiser_telegram_id
            FROM offer_proposals op
            JOIN offers o ON op.offer_id = o.id
            JOIN channels c ON op.channel_id = c.id
            JOIN users u ON o.created_by = u.id
            WHERE op.id = ?
        """, (proposal_id,))
        
        result = cursor.fetchone()
        conn.close()
        
        if result:
            return dict(result)
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}")
        return None

def get_user_channels(user_id: int) -> List[Dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        conn = get_db_connection()
        if not conn:
            return []
        
        cursor = conn.cursor()
        cursor.execute("""
            SELECT id, title, username, subscriber_count, category, is_verified
            FROM channels 
            WHERE owner_id = ? AND is_active = 1
            ORDER BY subscriber_count DESC
        """, (user_id,))
        
        results = cursor.fetchall()
        conn.close()
        
        return [dict(row) for row in results]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return []

def update_proposal_status(proposal_id: int, new_status: str, rejection_reason: str = None) -> bool:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    try:
        conn = get_db_connection()
        if not conn:
            return False
        
        cursor = conn.cursor()
        
        if rejection_reason:
            cursor.execute("""
                UPDATE offer_proposals 
                SET status = ?, responded_at = CURRENT_TIMESTAMP, rejection_reason = ?
                WHERE id = ?
            """, (new_status, rejection_reason, proposal_id))
        else:
            cursor.execute("""
                UPDATE offer_proposals 
                SET status = ?, responded_at = CURRENT_TIMESTAMP
                WHERE id = ?
            """, (new_status, proposal_id))
        
        conn.commit()
        conn.close()
        
        return cursor.rowcount > 0
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}")
        return False

def create_placement_record(proposal_id: int, expected_duration: int = 7) -> Optional[int]:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏"""
    try:
        conn = get_db_connection()
        if not conn:
            return None
        
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO offer_placements (
                proposal_id, expected_duration, status, created_at
            ) VALUES (?, ?, 'pending', CURRENT_TIMESTAMP)
        """, (proposal_id, expected_duration))
        
        placement_id = cursor.lastrowid
        conn.commit()
        conn.close()
        
        return placement_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏: {e}")
        return None

def send_notification_to_advertiser(proposal_id: int, action: str, data: any) -> bool:
    """
    –£–õ–£–ß–®–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—é
    
    Args:
        proposal_id: ID –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        action: accepted/rejected/placement_submitted
        data: dict –∏–ª–∏ str —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        proposal = get_proposal_details(proposal_id)
        if not proposal:
            logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {proposal_id} –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            return False
        
        notification_text = ""
        notification_title = ""
        
        if action == 'accepted':
            notification_title = "‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!"
            notification_text = f"üì¢ <b>–ö–∞–Ω–∞–ª:</b> {proposal.get('channel_title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª')}\n"
            notification_text += f"üí∞ <b>–û—Ñ—Ñ–µ—Ä:</b> {proposal.get('offer_title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ñ—Ñ–µ—Ä')}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞—Ç–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            if isinstance(data, dict) and data.get('scheduled_date'):
                try:
                    scheduled_date = datetime.fromisoformat(data['scheduled_date'].replace('Z', '+00:00'))
                    formatted_date = scheduled_date.strftime("%d.%m.%Y –≤ %H:%M")
                    notification_text += f"üìÖ <b>–ü–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ:</b> {formatted_date}\n"
                except:
                    notification_text += f"üìÖ <b>–ü–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ:</b> {data['scheduled_date']}\n"
            else:
                notification_text += f"üìÖ <b>–†–∞–∑–º–µ—â–µ–Ω–∏–µ:</b> –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤\n"
            
            if isinstance(data, dict) and data.get('message'):
                notification_text += f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {data['message']}\n"
            
            notification_text += f"\nüéØ –û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏!"
        
        elif action == 'rejected':
            notification_title = "‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ"
            notification_text = f"üì¢ <b>–ö–∞–Ω–∞–ª:</b> {proposal.get('channel_title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª')}\n"
            notification_text += f"üí∞ <b>–û—Ñ—Ñ–µ—Ä:</b> {proposal.get('offer_title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ñ—Ñ–µ—Ä')}\n"
            
            if isinstance(data, dict):
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–∏—á–∏–Ω—ã
                reason_category = data.get('reason_category', 'other')
                category_names = {
                    'price': 'üí∞ –¶–µ–Ω–∞',
                    'topic': 'üìã –¢–µ–º–∞—Ç–∏–∫–∞', 
                    'timing': '‚è∞ –°—Ä–æ–∫–∏',
                    'technical': '‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è',
                    'content': 'üìù –ö–æ–Ω—Ç–µ–Ω—Ç',
                    'other': 'üìå –î—Ä—É–≥–æ–µ'
                }
                notification_text += f"üîç <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {category_names.get(reason_category, '–î—Ä—É–≥–æ–µ')}\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –ø—Ä–∏—á–∏–Ω—É
                if data.get('reason'):
                    notification_text += f"üìù <b>–î–µ—Ç–∞–ª–∏:</b> {data['reason']}\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—É—é —Ü–µ–Ω—É
                if data.get('suggested_price'):
                    notification_text += f"üí° <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞:</b> {data['suggested_price']} —Ä—É–±.\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
                if data.get('custom_reason'):
                    notification_text += f"üìã <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b> {data['custom_reason']}\n"
            else:
                notification_text += f"üìù <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {data}\n"
            
            notification_text += f"\nüí° –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –æ—Ñ—Ñ–µ—Ä —Å —É—á–µ—Ç–æ–º –∑–∞–º–µ—á–∞–Ω–∏–π"
        
        elif action == 'placement_submitted':
            notification_title = "üì§ –ü–æ—Å—Ç —Ä–∞–∑–º–µ—â–µ–Ω!"
            notification_text = f"üì¢ <b>–ö–∞–Ω–∞–ª:</b> {proposal.get('channel_title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª')}\n"
            notification_text += f"üí∞ <b>–û—Ñ—Ñ–µ—Ä:</b> {proposal.get('offer_title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ñ—Ñ–µ—Ä')}\n"
            notification_text += f"üîó <b>–°—Å—ã–ª–∫–∞:</b> {data}\n"
            notification_text += f"\n‚è±Ô∏è –ù–∞—á–∞–ª—Å—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"
        
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {action}")
            return False
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = get_db_connection()
        if conn:
            try:
                cursor = conn.cursor()
                cursor.execute("""
                    INSERT INTO notification_logs (
                        user_id, telegram_id, notification_type, title, message, 
                        status, created_at, data
                    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                """, (
                    proposal.get('advertiser_user_id', 1),  # fallback
                    proposal.get('advertiser_telegram_id', 0),  # fallback
                    f'proposal_{action}',
                    notification_title,
                    notification_text,
                    'pending',
                    datetime.now().isoformat(),
                    json.dumps({
                        'proposal_id': proposal_id,
                        'action': action,
                        'data': data
                    })
                ))
                conn.commit()
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {proposal.get('advertiser_telegram_id', 'unknown')}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            finally:
                conn.close()
        
        # TODO: –ó–¥–µ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ Telegram Bot API
        # –ü–æ–∫–∞ —á—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        logger.info(f"üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—é (ID: {proposal.get('advertiser_telegram_id', 'unknown')})")
        logger.info(f"üìß –ó–∞–≥–æ–ª–æ–≤–æ–∫: {notification_title}")
        logger.info(f"üìß –¢–µ–∫—Å—Ç: {notification_text}")
        
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—é: {e}")
        return False

# ================================================================
# API ENDPOINTS
# ================================================================

@proposals_management_bp.route('/incoming', methods=['GET'])
def get_incoming_proposals():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞–Ω–∞–ª–∞
    
    GET /api/proposals/incoming
    
    Query Parameters:
    - status: —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É (sent, accepted, rejected, expired)
    - channel_id: —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–∞–Ω–∞–ª—É
    - limit: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 50)
    - offset: —Å–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0)
    """
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        user_id = get_user_id_from_request()
        if not user_id:
            return jsonify({
                'error': 'Unauthorized',
                'message': '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
            }), 401
        
        # 2. –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        status_filter = request.args.get('status')
        channel_id_filter = request.args.get('channel_id', type=int)
        limit = request.args.get('limit', 50, type=int)
        offset = request.args.get('offset', 0, type=int)
        
        # 3. –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        limit = min(limit, 100)
        
        # 4. –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_channels = get_user_channels(user_id)
        if not user_channels:
            return jsonify({
                'success': True,
                'total_proposals': 0,
                'proposals': [],
                'user_channels': []
            }), 200
        
        # 5. –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        conn = get_db_connection()
        if not conn:
            return jsonify({
                'error': 'Internal Server Error',
                'message': '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö'
            }), 500
        
        cursor = conn.cursor()
        
        # 6. –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        where_conditions = ["c.owner_id = ?"]
        params = [user_id]
        
        # 7. –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
   #    if status_filter:
   #         where_conditions.append("op.status = ?")
   #         params.append(status_filter)
        
        if channel_id_filter:
            where_conditions.append("op.channel_id = ?")
            params.append(channel_id_filter)
        
        # 8. –§–æ—Ä–º–∏—Ä—É–µ–º WHERE-—É—Å–ª–æ–≤–∏–µ
        where_clause = " AND ".join(where_conditions)
        
        # 9. –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        count_query = f"""
            SELECT COUNT(*) as total
            FROM offer_proposals op
            JOIN channels c ON op.channel_id = c.id
            JOIN offers o ON op.offer_id = o.id
            WHERE {where_clause}
        """
        
        cursor.execute(count_query, params)
        total_count = cursor.fetchone()['total']
        
        # 10. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        main_query = f"""
            SELECT 
                op.id as proposal_id, op.status as proposal_status,
                op.created_at as proposal_created_at, op.expires_at,
                o.id, o.title, o.description, 
                COALESCE(o.budget_total, o.price, 0) as price,
                o.currency, o.target_audience,
                o.min_subscribers, o.max_subscribers,
                u.username as creator_name, u.first_name,
                c.title as channel_title, c.username as channel_username,
                c.subscriber_count,
                (op.expires_at < CURRENT_TIMESTAMP) as is_expired
            FROM offer_proposals op
            JOIN offers o ON op.offer_id = o.id
            JOIN channels c ON op.channel_id = c.id
            JOIN users u ON o.created_by = u.id
            WHERE {where_clause}
            ORDER BY op.created_at DESC
            LIMIT ? OFFSET ?
        """
        
        cursor.execute(main_query, params + [limit, offset])
        proposals = cursor.fetchall()
        conn.close()
        
        # 11. –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        proposals_list = []
        for proposal in proposals:
            proposal_data = dict(proposal)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            proposal_data['is_expired'] = bool(proposal_data['is_expired'])
            proposal_data['can_respond'] = (
                proposal_data['proposal_status'] == 'sent' and 
                not proposal_data['is_expired']
            )
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥
            if (
                proposal_data['price'] is not None and 
                proposal_data['subscriber_count'] is not None
            ):
                estimated_payment = min(
                    proposal_data['price'],
                    proposal_data['subscriber_count'] * 0.01
                )
                proposal_data['estimated_payment'] = round(estimated_payment, 2)
            else:
                proposal_data['estimated_payment'] = 0

            
            proposals_list.append(proposal_data)


        # 12. –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = {
            'success': True,
            'total_proposals': total_count,
            'proposals': proposals_list,
            'user_channels': user_channels,
            'pagination': {
                'limit': limit,
                'offset': offset,
                'has_more': offset + limit < total_count
            },
            'filters': {
                'status': status_filter,
                'channel_id': channel_id_filter
            }
        }
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –≤—Ö–æ–¥—è—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {len(proposals_list)} –∏–∑ {total_count}")
        
        return jsonify(response), 200
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ö–æ–¥—è—â–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {e}")
        return jsonify({
            'error': 'Internal Server Error',
            'message': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        }), 500

@proposals_management_bp.route('/<int:proposal_id>/accept', methods=['POST'])
def accept_proposal(proposal_id: int):
    """
    –ü—Ä–∏–Ω—è—Ç–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—ã —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
    
    POST /api/proposals/{proposal_id}/accept
    
    Request Body:
    {
        "message": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
        "scheduled_date": "2025-07-15T14:30:00",  # –ù–û–í–û–ï –ü–û–õ–ï
        "timezone": "Europe/Moscow"  # –ù–û–í–û–ï –ü–û–õ–ï (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    }
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        user_id = get_user_id_from_request()
        if not user_id:
            return jsonify({
                'error': 'Unauthorized',
                'message': '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
            }), 401
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        if not validate_proposal_ownership(proposal_id, user_id):
            return jsonify({
                'error': 'Forbidden', 
                'message': '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'
            }), 403
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        data = request.get_json() or {}
        message = data.get('message', '')
        scheduled_date = data.get('scheduled_date')  # –ù–û–í–û–ï –ü–û–õ–ï
        timezone = data.get('timezone', 'Europe/Moscow')  # –ù–û–í–û–ï –ü–û–õ–ï
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        placement_datetime = None
        if scheduled_date:
            try:
                from datetime import datetime
                
                # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
                if isinstance(scheduled_date, str):
                    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç—ã
                    try:
                        placement_datetime = datetime.fromisoformat(scheduled_date.replace('Z', '+00:00'))
                    except:
                        placement_datetime = datetime.strptime(scheduled_date, '%Y-%m-%dT%H:%M:%S')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º
                if placement_datetime and placement_datetime <= datetime.now():
                    return jsonify({
                        'error': 'Bad Request',
                        'message': '–î–∞—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º'
                    }), 400
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ –±–æ–ª—å—à–µ 30 –¥–Ω–µ–π)
                max_future_date = datetime.now() + timedelta(days=30)
                if placement_datetime and placement_datetime > max_future_date:
                    return jsonify({
                        'error': 'Bad Request',
                        'message': '–î–∞—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ —á–µ–º —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π'
                    }), 400
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã: {e}")
                return jsonify({
                    'error': 'Bad Request',
                    'message': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: 2025-07-15T14:30:00'
                }), 400
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        proposal = get_proposal_details(proposal_id)
        if not proposal:
            return jsonify({
                'error': 'Not Found',
                'message': '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
            }), 404
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        if proposal['status'] != 'sent':
            return jsonify({
                'error': 'Bad Request',
                'message': f'–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ (—Å—Ç–∞—Ç—É—Å: {proposal["status"]})'
            }), 400
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞—Ç–æ–π
        full_message = message
        if placement_datetime:
            full_message += f"\nüìÖ –ü–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ: {placement_datetime.strftime('%d.%m.%Y –≤ %H:%M')}"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = get_db_connection()
        if not conn:
            return jsonify({
                'error': 'Internal Server Error',
                'message': '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö'
            }), 500
        
        try:
            cursor = conn.cursor()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º offer_proposals (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è)
            cursor.execute("""
                UPDATE offer_proposals 
                SET status = 'accepted',
                    responded_at = ?,
                    response_message = ?
                WHERE id = ?
            """, (
                datetime.now().isoformat(),
                full_message,
                proposal_id
            ))
            
            # –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º offer_channel_targets –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–∏—Å–ø–æ–ª—å–∑—É–µ–º proposed_date)
            cursor.execute("""
                UPDATE offer_channel_targets 
                SET status = 'accepted',
                    response_message = ?,
                    proposed_date = ?,
                    updated_at = ?
                WHERE offer_id = ? AND channel_id = ?
            """, (
                full_message,
                placement_datetime.date() if placement_datetime else None,
                datetime.now().isoformat(),
                proposal['offer_id'],
                proposal['channel_id']
            ))
            
            conn.commit()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º placement_id –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            placement_id = f"PLACEMENT_{proposal_id}_{int(datetime.now().timestamp())}"
            
        except Exception as e:
            conn.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            return jsonify({
                'error': 'Internal Server Error',
                'message': '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö'
            }), 500
        finally:
            conn.close()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—é
        notification_data = {
            'scheduled_date': placement_datetime.isoformat() if placement_datetime else None,
            'message': message,
            'timezone': timezone
        }
        send_notification_to_advertiser(proposal_id, 'accepted', notification_data)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = {
            'success': True,
            'proposal_id': proposal_id,
            'placement_id': placement_id,
            'offer_title': proposal.get('offer_title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ñ—Ñ–µ—Ä'),
            'channel_title': proposal.get('channel_title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª'),
            'scheduled_date': placement_datetime.isoformat() if placement_datetime else None,
            'message': '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ',
            'next_steps': []
        }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
        if placement_datetime:
            response['next_steps'] = [
                f'–†–∞–∑–º–µ—Å—Ç–∏—Ç–µ –ø–æ—Å—Ç {placement_datetime.strftime("%d.%m.%Y –≤ %H:%M")}',
                '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –ø–æ—Å—Ç',
                '–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ'
            ]
        else:
            response['next_steps'] = [
                '–†–∞–∑–º–µ—Å—Ç–∏—Ç–µ –ø–æ—Å—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤',
                '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –ø–æ—Å—Ç',
                '–û–∂–∏–¥–∞–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏'
            ]
        
        logger.info(f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {proposal_id} –ø—Ä–∏–Ω—è—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} –Ω–∞ {placement_datetime}")
        
        return jsonify(response), 200
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}")
        return jsonify({
            'error': 'Internal Server Error',
            'message': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        }), 500

@proposals_management_bp.route('/<int:proposal_id>/reject', methods=['POST'])
def reject_proposal(proposal_id: int):
    """
    –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –ø—Ä–∏—á–∏–Ω–∞–º–∏
    
    POST /api/proposals/{proposal_id}/reject
    
    Request Body:
    {
        "reason": "–¢–µ–∫—Å—Ç–æ–≤–∞—è –ø—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)",
        "reason_category": "price",  # –ù–û–í–û–ï –ü–û–õ–ï: price/topic/timing/other/technical
        "custom_reason": "–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ",  # –ù–û–í–û–ï –ü–û–õ–ï (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        "suggested_price": 1500.00  # –ù–û–í–û–ï –ü–û–õ–ï (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) - –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥—Ä—É–≥—É—é —Ü–µ–Ω—É
    }
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        user_id = get_user_id_from_request()
        if not user_id:
            return jsonify({
                'error': 'Unauthorized',
                'message': '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
            }), 401
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        if not validate_proposal_ownership(proposal_id, user_id):
            return jsonify({
                'error': 'Forbidden',
                'message': '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'
            }), 403
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        data = request.get_json() or {}
        reason = data.get('reason', '').strip()
        reason_category = data.get('reason_category', 'other')  # –ù–û–í–û–ï –ü–û–õ–ï
        custom_reason = data.get('custom_reason', '').strip()  # –ù–û–í–û–ï –ü–û–õ–ï
        suggested_price = data.get('suggested_price')  # –ù–û–í–û–ï –ü–û–õ–ï
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if not reason:
            return jsonify({
                'error': 'Bad Request',
                'message': '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è'
            }), 400
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏—á–∏–Ω—ã
        valid_categories = ['price', 'topic', 'timing', 'technical', 'content', 'other']
        if reason_category not in valid_categories:
            return jsonify({
                'error': 'Bad Request',
                'message': f'–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–∏—á–∏–Ω—ã. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {", ".join(valid_categories)}'
            }), 400
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–π —Ü–µ–Ω—ã
        if suggested_price is not None:
            try:
                suggested_price = float(suggested_price)
                if suggested_price <= 0:
                    return jsonify({
                        'error': 'Bad Request',
                        'message': '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0'
                    }), 400
            except (ValueError, TypeError):
                return jsonify({
                    'error': 'Bad Request',
                    'message': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–π —Ü–µ–Ω—ã'
                }), 400
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        proposal = get_proposal_details(proposal_id)
        if not proposal:
            return jsonify({
                'error': 'Not Found',
                'message': '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
            }), 404
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        if proposal['status'] != 'sent':
            return jsonify({
                'error': 'Bad Request',
                'message': f'–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ (—Å—Ç–∞—Ç—É—Å: {proposal["status"]})'
            }), 400
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏—á–∏–Ω–æ–π (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è –ë–î)
        category_names = {
            'price': 'üí∞ –¶–µ–Ω–∞',
            'topic': 'üìã –¢–µ–º–∞—Ç–∏–∫–∞', 
            'timing': '‚è∞ –°—Ä–æ–∫–∏',
            'technical': '‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è',
            'content': 'üìù –ö–æ–Ω—Ç–µ–Ω—Ç',
            'other': 'üìå –î—Ä—É–≥–æ–µ'
        }
        
        full_reason_message = f"{category_names.get(reason_category, '–î—Ä—É–≥–æ–µ')}: {reason}"
        
        if custom_reason:
            full_reason_message += f"\n\n–î–µ—Ç–∞–ª–∏: {custom_reason}"
        if suggested_price:
            full_reason_message += f"\n\n–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞: {suggested_price} —Ä—É–±."
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è)
        conn = get_db_connection()
        if not conn:
            return jsonify({
                'error': 'Internal Server Error',
                'message': '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö'
            }), 500
        
        try:
            cursor = conn.cursor()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º offer_proposals (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è)
            cursor.execute("""
                UPDATE offer_proposals 
                SET status = 'rejected',
                    responded_at = ?,
                    rejection_reason = ?,
                    response_message = ?
                WHERE id = ?
            """, (
                datetime.now().isoformat(),
                full_reason_message,  # –í rejection_reason
                reason,  # –ö—Ä–∞—Ç–∫–∞—è –ø—Ä–∏—á–∏–Ω–∞ –≤ response_message
                proposal_id
            ))
            
            # –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º offer_channel_targets –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            cursor.execute("""
                UPDATE offer_channel_targets 
                SET status = 'rejected',
                    response_message = ?,
                    updated_at = ?
                WHERE offer_id = ? AND channel_id = ?
            """, (
                full_reason_message,
                datetime.now().isoformat(),
                proposal['offer_id'],
                proposal['channel_id']
            ))
            
            conn.commit()
            
        except Exception as e:
            conn.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏: {e}")
            return jsonify({
                'error': 'Internal Server Error',
                'message': '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö'
            }), 500
        finally:
            conn.close()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—é
        notification_data = {
            'reason': reason,
            'reason_category': reason_category,
            'custom_reason': custom_reason,
            'suggested_price': suggested_price
        }
        send_notification_to_advertiser(proposal_id, 'rejected', notification_data)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = {
            'success': True,
            'proposal_id': proposal_id,
            'offer_title': proposal.get('offer_title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ñ—Ñ–µ—Ä'),
            'channel_title': proposal.get('channel_title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª'),
            'reason_category': reason_category,
            'message': '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ',
            'suggestions': []
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
        if reason_category == 'price':
            response['suggestions'] = [
                '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞',
                '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª—ã —Å –º–µ–Ω—å—à–µ–π –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π',
                '–ò–∑–º–µ–Ω–∏—Ç–µ —É—Å–ª–æ–≤–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞'
            ]
        elif reason_category == 'topic':
            response['suggestions'] = [
                '–£—Ç–æ—á–Ω–∏—Ç–µ —Ç–µ–º–∞—Ç–∏–∫—É –æ—Ñ—Ñ–µ—Ä–∞',
                '–ù–∞–π–¥–∏—Ç–µ –∫–∞–Ω–∞–ª—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Ç–µ–º–∞—Ç–∏–∫–∏',
                '–ê–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–¥ –∞—É–¥–∏—Ç–æ—Ä–∏—é –∫–∞–Ω–∞–ª–∞'
            ]
        elif reason_category == 'timing':
            response['suggestions'] = [
                '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –±–æ–ª–µ–µ –≥–∏–±–∫–∏–µ —Å—Ä–æ–∫–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è',
                '–£—Ç–æ—á–Ω–∏—Ç–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è',
                '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ'
            ]
        
        logger.info(f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {proposal_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}. –ü—Ä–∏—á–∏–Ω–∞: {reason_category}")
        
        return jsonify(response), 200
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}")
        return jsonify({
            'error': 'Internal Server Error',
            'message': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        }), 500

@proposals_management_bp.route('/<int:proposal_id>/submit-placement', methods=['POST'])
def submit_placement(proposal_id: int):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø–æ—Å—Ç–∞
    
    POST /api/proposals/{proposal_id}/submit-placement
    
    Request Body:
    {
        "post_url": "https://t.me/channel_username/123",
        "placement_notes": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
    }
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        user_id = get_user_id_from_request()
        if not user_id:
            return jsonify({
                'error': 'Unauthorized',
                'message': '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
            }), 401
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        if not validate_proposal_ownership(proposal_id, user_id):
            return jsonify({
                'error': 'Forbidden',
                'message': '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'
            }), 403
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        proposal = get_proposal_details(proposal_id)
        if not proposal:
            return jsonify({
                'error': 'Not Found',
                'message': '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
            }), 404
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        if proposal['status'] != 'accepted':
            return jsonify({
                'error': 'Bad Request',
                'message': f'–ù–µ–ª—å–∑—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {proposal["status"]}'
            }), 400
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        data = request.get_json()
        if not data:
            return jsonify({
                'error': 'Bad Request',
                'message': '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞'
            }), 400
        
        post_url = data.get('post_url', '').strip()
        placement_notes = data.get('placement_notes', '').strip()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è URL –ø–æ—Å—Ç–∞
        if not post_url:
            return jsonify({
                'error': 'Bad Request',
                'message': '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å URL –ø–æ—Å—Ç–∞'
            }), 400
        
        if not post_url.startswith('https://t.me/'):
            return jsonify({
                'error': 'Bad Request',
                'message': 'URL –ø–æ—Å—Ç–∞ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å https://t.me/'
            }), 400
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏
        conn = get_db_connection()
        if not conn:
            return jsonify({
                'error': 'Internal Server Error',
                'message': '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö'
            }), 500
        
        cursor = conn.cursor()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º ID —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            cursor.execute("""
                SELECT id FROM offer_placements 
                WHERE proposal_id = ? AND status = 'pending'
            """, (proposal_id,))
            
            placement = cursor.fetchone()
            if not placement:
                conn.close()
                return jsonify({
                    'error': 'Not Found',
                    'message': '–ó–∞–ø–∏—Å—å –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
                }), 404
            
            placement_id = placement['id']
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏
            cursor.execute("""
                UPDATE offer_placements 
                SET post_url = ?, placement_start = CURRENT_TIMESTAMP,
                    status = 'placed', updated_at = CURRENT_TIMESTAMP
                WHERE id = ?
            """, (post_url, placement_id))
            
            # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å –ø—Ä–æ–≤–µ—Ä–∫–∏
            cursor.execute("""
                INSERT INTO placement_checks (
                    placement_id, check_time, post_exists, 
                    views_count, check_status, response_data
                ) VALUES (?, CURRENT_TIMESTAMP, 1, 0, 'success', ?)
            """, (placement_id, json.dumps({
                'post_url': post_url,
                'placement_notes': placement_notes,
                'submitted_by': user_id,
                'submitted_at': datetime.now().isoformat()
            })))
            
            conn.commit()
            
        except Exception as e:
            conn.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {e}")
            return jsonify({
                'error': 'Internal Server Error',
                'message': '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è'
            }), 500
        
        finally:
            conn.close()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—é
        send_notification_to_advertiser(proposal_id, 'placement_submitted', post_url)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = {
            'success': True,
            'proposal_id': proposal_id,
            'placement_id': placement_id,
            'post_url': post_url,
            'offer_title': proposal['offer_title'],
            'channel_title': proposal['channel_title'],
            'message': '–†–∞–∑–º–µ—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ',
            'next_steps': [
                '–ü–æ—Å—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞',
                '–°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–æ—Å—Ç –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏',
                '–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏'
            ]
        }
        
        logger.info(f"–†–∞–∑–º–µ—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è {proposal_id}: {post_url}")
        
        return jsonify(response), 200
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {e}")
        return jsonify({
            'error': 'Internal Server Error',
            'message': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        }), 500

# ================================================================
# –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï ENDPOINTS
# ================================================================

@proposals_management_bp.route('/<int:proposal_id>/details', methods=['GET'])
def get_proposal_details_endpoint(proposal_id: int):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏
    
    GET /api/proposals/{proposal_id}/details
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        user_id = get_user_id_from_request()
        if not user_id:
            return jsonify({
                'error': 'Unauthorized',
                'message': '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
            }), 401
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        if not validate_proposal_ownership(proposal_id, user_id):
            return jsonify({
                'error': 'Forbidden',
                'message': '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'
            }), 403
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        proposal = get_proposal_details(proposal_id)
        if not proposal:
            return jsonify({
                'error': 'Not Found',
                'message': '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
            }), 404
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏
        conn = get_db_connection()
        if not conn:
            return jsonify({
                'error': 'Internal Server Error',
                'message': '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö'
            }), 500
        
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏
        cursor.execute("""
            SELECT 
                id, post_url, placement_start, placement_end,
                expected_duration, status, final_views_count,
                created_at, updated_at
            FROM offer_placements
            WHERE proposal_id = ?
        """, (proposal_id,))
        
        placement = cursor.fetchone()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–≤–µ—Ä–æ–∫
        if placement:
            cursor.execute("""
                SELECT 
                    check_time, post_exists, views_count, 
                    check_status, error_message
                FROM placement_checks
                WHERE placement_id = ?
                ORDER BY check_time DESC
                LIMIT 10
            """, (placement['id'],))
            
            checks = cursor.fetchall()
        else:
            checks = []
        
        conn.close()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = {
            'success': True,
            'proposal': dict(proposal),
            'placement': dict(placement) if placement else None,
            'recent_checks': [dict(check) for check in checks]
        }
        
        return jsonify(response), 200
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}")
        return jsonify({
            'error': 'Internal Server Error',
            'message': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        }), 500

# ================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–®–ò–ë–û–ö
# ================================================================

@proposals_management_bp.errorhandler(404)
def not_found(error):
    return jsonify({
        'error': 'Not Found',
        'message': '–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω'
    }), 404

@proposals_management_bp.errorhandler(500)
def internal_error(error):
    return jsonify({
        'error': 'Internal Server Error',
        'message': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    }), 500