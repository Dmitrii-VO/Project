#!/usr/bin/env python3
"""
API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏
Endpoints –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –∫–∞–Ω–∞–ª–æ–≤
"""

import sqlite3
import json
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
from flask import Blueprint, request, jsonify, current_app
from app.models.database import get_user_id_from_request, execute_db_query
from app.config.telegram_config import AppConfig
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ Blueprint
proposals_management_bp = Blueprint('proposals_management', __name__, url_prefix='/api/proposals')

# ================================================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ================================================================

def get_db_connection():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect(AppConfig.DATABASE_PATH)
        conn.row_factory = sqlite3.Row
        return conn
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return None

def validate_proposal_ownership(proposal_id: int, user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü—É –∫–∞–Ω–∞–ª–∞"""
    try:
        conn = get_db_connection()
        if not conn:
            return False
        
        cursor = conn.cursor()
        cursor.execute("""
            SELECT op.id 
            FROM offer_proposals op
            JOIN channels c ON op.channel_id = c.id
            WHERE op.id = ? AND c.owner_id = ?
        """, (proposal_id, user_id))
        
        result = cursor.fetchone()
        conn.close()
        
        return result is not None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–ª–∞–¥–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º: {e}")
        return False

def get_proposal_details(proposal_id: int) -> Optional[Dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    try:
        conn = get_db_connection()
        if not conn:
            return None
        
        cursor = conn.cursor()
        cursor.execute("""
            SELECT 
                op.id, op.offer_id, op.channel_id, op.status,
                op.created_at, op.responded_at, op.rejection_reason,
                op.expires_at, op.notified_at, op.reminder_sent_at,
                -- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ñ—Ñ–µ—Ä–µ
                o.title as offer_title, o.description as offer_description,
                o.budget as offer_budget, o.content as offer_content,
                o.placement_requirements, o.contact_info,
                o.placement_duration, o.expected_placement_duration,
                o.category as offer_category, o.target_audience,
                -- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ
                c.title as channel_title, c.username as channel_username,
                c.subscriber_count, c.category as channel_category,
                -- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ –æ—Ñ—Ñ–µ—Ä–∞
                u.username as advertiser_username, u.first_name as advertiser_first_name,
                u.last_name as advertiser_last_name, u.telegram_id as advertiser_telegram_id
            FROM offer_proposals op
            JOIN offers o ON op.offer_id = o.id
            JOIN channels c ON op.channel_id = c.id
            JOIN users u ON o.created_by = u.id
            WHERE op.id = ?
        """, (proposal_id,))
        
        result = cursor.fetchone()
        conn.close()
        
        if result:
            return dict(result)
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}")
        return None

def get_user_channels(user_id: int) -> List[Dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        conn = get_db_connection()
        if not conn:
            return []
        
        cursor = conn.cursor()
        cursor.execute("""
            SELECT id, title, username, subscriber_count, category, is_verified
            FROM channels 
            WHERE owner_id = ? AND is_active = 1
            ORDER BY subscriber_count DESC
        """, (user_id,))
        
        results = cursor.fetchall()
        conn.close()
        
        return [dict(row) for row in results]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return []

def update_proposal_status(proposal_id: int, new_status: str, rejection_reason: str = None) -> bool:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    try:
        conn = get_db_connection()
        if not conn:
            return False
        
        cursor = conn.cursor()
        
        if rejection_reason:
            cursor.execute("""
                UPDATE offer_proposals 
                SET status = ?, responded_at = CURRENT_TIMESTAMP, rejection_reason = ?
                WHERE id = ?
            """, (new_status, rejection_reason, proposal_id))
        else:
            cursor.execute("""
                UPDATE offer_proposals 
                SET status = ?, responded_at = CURRENT_TIMESTAMP
                WHERE id = ?
            """, (new_status, proposal_id))
        
        conn.commit()
        conn.close()
        
        return cursor.rowcount > 0
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}")
        return False

def create_placement_record(proposal_id: int, expected_duration: int = 7) -> Optional[int]:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏"""
    try:
        conn = get_db_connection()
        if not conn:
            return None
        
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO offer_placements (
                proposal_id, expected_duration, status, created_at
            ) VALUES (?, ?, 'pending', CURRENT_TIMESTAMP)
        """, (proposal_id, expected_duration))
        
        placement_id = cursor.lastrowid
        conn.commit()
        conn.close()
        
        return placement_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏: {e}")
        return None

def send_notification_to_advertiser(proposal_id: int, action: str, message: str = None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—é"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏
        proposal = get_proposal_details(proposal_id)
        if not proposal:
            return False
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if action == 'accepted':
            notification_text = f"‚úÖ –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!\n\n"
            notification_text += f"üì¢ –ö–∞–Ω–∞–ª: {proposal['channel_title']}\n"
            notification_text += f"üí∞ –û—Ñ—Ñ–µ—Ä: {proposal['offer_title']}\n"
            notification_text += f"üìÖ –û–∂–∏–¥–∞–π—Ç–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤"
        
        elif action == 'rejected':
            notification_text = f"‚ùå –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ\n\n"
            notification_text += f"üì¢ –ö–∞–Ω–∞–ª: {proposal['channel_title']}\n"
            notification_text += f"üí∞ –û—Ñ—Ñ–µ—Ä: {proposal['offer_title']}\n"
            if message:
                notification_text += f"üìù –ü—Ä–∏—á–∏–Ω–∞: {message}"
        
        elif action == 'placement_submitted':
            notification_text = f"üì§ –ü–æ—Å—Ç —Ä–∞–∑–º–µ—â–µ–Ω!\n\n"
            notification_text += f"üì¢ –ö–∞–Ω–∞–ª: {proposal['channel_title']}\n"
            notification_text += f"üí∞ –û—Ñ—Ñ–µ—Ä: {proposal['offer_title']}\n"
            notification_text += f"üîó –°—Å—ã–ª–∫–∞: {message}"
        
        else:
            return False
        
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram Bot
        # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—é (ID: {proposal['advertiser_telegram_id']}): {notification_text}")
        
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—é: {e}")
        return False

# ================================================================
# API ENDPOINTS
# ================================================================

@proposals_management_bp.route('/incoming', methods=['GET'])
def get_incoming_proposals():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞–Ω–∞–ª–∞
    
    GET /api/proposals/incoming
    
    Query Parameters:
    - status: —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É (sent, accepted, rejected, expired)
    - channel_id: —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–∞–Ω–∞–ª—É
    - limit: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 50)
    - offset: —Å–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0)
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        user_id = get_user_id_from_request()
        if not user_id:
            return jsonify({
                'error': 'Unauthorized',
                'message': '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
            }), 401
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        status_filter = request.args.get('status')
        channel_id_filter = request.args.get('channel_id', type=int)
        limit = request.args.get('limit', 50, type=int)
        offset = request.args.get('offset', 0, type=int)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç
        limit = min(limit, 100)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_channels = get_user_channels(user_id)
        if not user_channels:
            return jsonify({
                'success': True,
                'total_proposals': 0,
                'proposals': [],
                'user_channels': []
            }), 200
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        conn = get_db_connection()
        if not conn:
            return jsonify({
                'error': 'Internal Server Error',
                'message': '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö'
            }), 500
        
        cursor = conn.cursor()
        
        # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        where_conditions = ["c.owner_id = ?"]
        params = [user_id]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        if status_filter:
            where_conditions.append("op.status = ?")
            params.append(status_filter)
        
        if channel_id_filter:
            where_conditions.append("op.channel_id = ?")
            params.append(channel_id_filter)
        
        where_clause = " AND ".join(where_conditions)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        count_query = f"""
            SELECT COUNT(*) as total
            FROM offer_proposals op
            JOIN channels c ON op.channel_id = c.id
            JOIN offers o ON op.offer_id = o.id
            WHERE {where_clause}
        """
        
        cursor.execute(count_query, params)
        total_count = cursor.fetchone()['total']
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        main_query = f"""
            SELECT 
                op.id, op.offer_id, op.channel_id, op.status,
                op.created_at, op.responded_at, op.expires_at,
                op.rejection_reason, op.notified_at,
                -- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ñ—Ñ–µ—Ä–µ
                o.title as offer_title, o.description as offer_description,
                o.budget as offer_budget, o.content as offer_content,
                o.placement_requirements, o.contact_info,
                o.placement_duration, o.expected_placement_duration,
                o.category as offer_category, o.target_audience,
                -- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ
                c.title as channel_title, c.username as channel_username,
                c.subscriber_count, c.category as channel_category,
                -- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ –æ—Ñ—Ñ–µ—Ä–∞
                u.username as advertiser_username, u.first_name as advertiser_first_name,
                u.last_name as advertiser_last_name,
                -- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏
                opl.id as placement_id, opl.post_url, opl.status as placement_status,
                opl.placement_start, opl.placement_end, opl.final_views_count,
                -- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                CASE 
                    WHEN op.expires_at < datetime('now') THEN 1
                    ELSE 0
                END as is_expired,
                CASE 
                    WHEN op.expires_at > datetime('now') THEN 
                        CAST((julianday(op.expires_at) - julianday('now')) * 24 AS INTEGER)
                    ELSE 0
                END as hours_until_expiry
            FROM offer_proposals op
            JOIN channels c ON op.channel_id = c.id
            JOIN offers o ON op.offer_id = o.id
            JOIN users u ON o.created_by = u.id
            LEFT JOIN offer_placements opl ON op.id = opl.proposal_id
            WHERE {where_clause}
            ORDER BY 
                CASE op.status
                    WHEN 'sent' THEN 1
                    WHEN 'accepted' THEN 2
                    WHEN 'rejected' THEN 3
                    WHEN 'expired' THEN 4
                    ELSE 5
                END,
                op.created_at DESC
            LIMIT ? OFFSET ?
        """
        
        cursor.execute(main_query, params + [limit, offset])
        proposals = cursor.fetchall()
        conn.close()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        proposals_list = []
        for proposal in proposals:
            proposal_data = dict(proposal)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            proposal_data['is_expired'] = bool(proposal_data['is_expired'])
            proposal_data['can_respond'] = (
                proposal_data['status'] == 'sent' and 
                not proposal_data['is_expired']
            )
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥
            if proposal_data['offer_budget'] and proposal_data['subscriber_count']:
                estimated_payment = min(
                    proposal_data['offer_budget'],
                    proposal_data['subscriber_count'] * 0.01  # 1 –∫–æ–ø–µ–π–∫–∞ –∑–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
                )
                proposal_data['estimated_payment'] = round(estimated_payment, 2)
            else:
                proposal_data['estimated_payment'] = 0
            
            proposals_list.append(proposal_data)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = {
            'success': True,
            'total_proposals': total_count,
            'proposals': proposals_list,
            'user_channels': user_channels,
            'pagination': {
                'limit': limit,
                'offset': offset,
                'has_more': offset + limit < total_count
            },
            'filters': {
                'status': status_filter,
                'channel_id': channel_id_filter
            }
        }
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –≤—Ö–æ–¥—è—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {len(proposals_list)} –∏–∑ {total_count}")
        
        return jsonify(response), 200
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ö–æ–¥—è—â–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {e}")
        return jsonify({
            'error': 'Internal Server Error',
            'message': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        }), 500

@proposals_management_bp.route('/<int:proposal_id>/accept', methods=['POST'])
def accept_proposal(proposal_id: int):
    """
    –ü—Ä–∏–Ω—è—Ç–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    
    POST /api/proposals/{proposal_id}/accept
    
    Request Body:
    {
        "message": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
    }
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        user_id = get_user_id_from_request()
        if not user_id:
            return jsonify({
                'error': 'Unauthorized',
                'message': '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
            }), 401
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        if not validate_proposal_ownership(proposal_id, user_id):
            return jsonify({
                'error': 'Forbidden',
                'message': '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'
            }), 403
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        proposal = get_proposal_details(proposal_id)
        if not proposal:
            return jsonify({
                'error': 'Not Found',
                'message': '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
            }), 404
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        if proposal['status'] != 'sent':
            return jsonify({
                'error': 'Bad Request',
                'message': f'–ù–µ–ª—å–∑—è –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {proposal["status"]}'
            }), 400
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
        if proposal['expires_at'] and proposal['expires_at'] < datetime.now().isoformat():
            return jsonify({
                'error': 'Bad Request',
                'message': '–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏—Å—Ç–µ–∫'
            }), 400
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        data = request.get_json() or {}
        message = data.get('message', '')
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        if not update_proposal_status(proposal_id, 'accepted'):
            return jsonify({
                'error': 'Internal Server Error',
                'message': '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è'
            }), 500
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏
        placement_id = create_placement_record(
            proposal_id, 
            proposal['expected_placement_duration']
        )
        
        if not placement_id:
            # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            update_proposal_status(proposal_id, 'sent')
            return jsonify({
                'error': 'Internal Server Error',
                'message': '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏'
            }), 500
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—é
        send_notification_to_advertiser(proposal_id, 'accepted', message)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = {
            'success': True,
            'proposal_id': proposal_id,
            'placement_id': placement_id,
            'offer_title': proposal['offer_title'],
            'channel_title': proposal['channel_title'],
            'message': '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ',
            'next_steps': [
                '–†–∞–∑–º–µ—Å—Ç–∏—Ç–µ –ø–æ—Å—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤',
                '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API',
                '–û–∂–∏–¥–∞–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏'
            ]
        }
        
        logger.info(f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {proposal_id} –ø—Ä–∏–Ω—è—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
        
        return jsonify(response), 200
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}")
        return jsonify({
            'error': 'Internal Server Error',
            'message': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        }), 500

@proposals_management_bp.route('/<int:proposal_id>/reject', methods=['POST'])
def reject_proposal(proposal_id: int):
    """
    –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    
    POST /api/proposals/{proposal_id}/reject
    
    Request Body:
    {
        "reason": "–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
    }
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        user_id = get_user_id_from_request()
        if not user_id:
            return jsonify({
                'error': 'Unauthorized',
                'message': '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
            }), 401
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        if not validate_proposal_ownership(proposal_id, user_id):
            return jsonify({
                'error': 'Forbidden',
                'message': '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'
            }), 403
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        proposal = get_proposal_details(proposal_id)
        if not proposal:
            return jsonify({
                'error': 'Not Found',
                'message': '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
            }), 404
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        if proposal['status'] != 'sent':
            return jsonify({
                'error': 'Bad Request',
                'message': f'–ù–µ–ª—å–∑—è –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {proposal["status"]}'
            }), 400
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        data = request.get_json()
        if not data:
            return jsonify({
                'error': 'Bad Request',
                'message': '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞'
            }), 400
        
        reason = data.get('reason', '').strip()
        if not reason:
            return jsonify({
                'error': 'Bad Request',
                'message': '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è'
            }), 400
        
        if len(reason) > 500:
            return jsonify({
                'error': 'Bad Request',
                'message': '–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 500 —Å–∏–º–≤–æ–ª–æ–≤'
            }), 400
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        if not update_proposal_status(proposal_id, 'rejected', reason):
            return jsonify({
                'error': 'Internal Server Error',
                'message': '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è'
            }), 500
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—é
        send_notification_to_advertiser(proposal_id, 'rejected', reason)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = {
            'success': True,
            'proposal_id': proposal_id,
            'offer_title': proposal['offer_title'],
            'channel_title': proposal['channel_title'],
            'rejection_reason': reason,
            'message': '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ'
        }
        
        logger.info(f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {proposal_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}: {reason}")
        
        return jsonify(response), 200
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}")
        return jsonify({
            'error': 'Internal Server Error',
            'message': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        }), 500

@proposals_management_bp.route('/<int:proposal_id>/submit-placement', methods=['POST'])
def submit_placement(proposal_id: int):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø–æ—Å—Ç–∞
    
    POST /api/proposals/{proposal_id}/submit-placement
    
    Request Body:
    {
        "post_url": "https://t.me/channel_username/123",
        "placement_notes": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
    }
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        user_id = get_user_id_from_request()
        if not user_id:
            return jsonify({
                'error': 'Unauthorized',
                'message': '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
            }), 401
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        if not validate_proposal_ownership(proposal_id, user_id):
            return jsonify({
                'error': 'Forbidden',
                'message': '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'
            }), 403
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        proposal = get_proposal_details(proposal_id)
        if not proposal:
            return jsonify({
                'error': 'Not Found',
                'message': '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
            }), 404
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        if proposal['status'] != 'accepted':
            return jsonify({
                'error': 'Bad Request',
                'message': f'–ù–µ–ª—å–∑—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {proposal["status"]}'
            }), 400
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        data = request.get_json()
        if not data:
            return jsonify({
                'error': 'Bad Request',
                'message': '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞'
            }), 400
        
        post_url = data.get('post_url', '').strip()
        placement_notes = data.get('placement_notes', '').strip()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è URL –ø–æ—Å—Ç–∞
        if not post_url:
            return jsonify({
                'error': 'Bad Request',
                'message': '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å URL –ø–æ—Å—Ç–∞'
            }), 400
        
        if not post_url.startswith('https://t.me/'):
            return jsonify({
                'error': 'Bad Request',
                'message': 'URL –ø–æ—Å—Ç–∞ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å https://t.me/'
            }), 400
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏
        conn = get_db_connection()
        if not conn:
            return jsonify({
                'error': 'Internal Server Error',
                'message': '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö'
            }), 500
        
        cursor = conn.cursor()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º ID —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            cursor.execute("""
                SELECT id FROM offer_placements 
                WHERE proposal_id = ? AND status = 'pending'
            """, (proposal_id,))
            
            placement = cursor.fetchone()
            if not placement:
                conn.close()
                return jsonify({
                    'error': 'Not Found',
                    'message': '–ó–∞–ø–∏—Å—å –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
                }), 404
            
            placement_id = placement['id']
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏
            cursor.execute("""
                UPDATE offer_placements 
                SET post_url = ?, placement_start = CURRENT_TIMESTAMP,
                    status = 'placed', updated_at = CURRENT_TIMESTAMP
                WHERE id = ?
            """, (post_url, placement_id))
            
            # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å –ø—Ä–æ–≤–µ—Ä–∫–∏
            cursor.execute("""
                INSERT INTO placement_checks (
                    placement_id, check_time, post_exists, 
                    views_count, check_status, response_data
                ) VALUES (?, CURRENT_TIMESTAMP, 1, 0, 'success', ?)
            """, (placement_id, json.dumps({
                'post_url': post_url,
                'placement_notes': placement_notes,
                'submitted_by': user_id,
                'submitted_at': datetime.now().isoformat()
            })))
            
            conn.commit()
            
        except Exception as e:
            conn.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {e}")
            return jsonify({
                'error': 'Internal Server Error',
                'message': '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è'
            }), 500
        
        finally:
            conn.close()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—é
        send_notification_to_advertiser(proposal_id, 'placement_submitted', post_url)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = {
            'success': True,
            'proposal_id': proposal_id,
            'placement_id': placement_id,
            'post_url': post_url,
            'offer_title': proposal['offer_title'],
            'channel_title': proposal['channel_title'],
            'message': '–†–∞–∑–º–µ—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ',
            'next_steps': [
                '–ü–æ—Å—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞',
                '–°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–æ—Å—Ç –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏',
                '–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏'
            ]
        }
        
        logger.info(f"–†–∞–∑–º–µ—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è {proposal_id}: {post_url}")
        
        return jsonify(response), 200
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {e}")
        return jsonify({
            'error': 'Internal Server Error',
            'message': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        }), 500

# ================================================================
# –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï ENDPOINTS
# ================================================================

@proposals_management_bp.route('/<int:proposal_id>/details', methods=['GET'])
def get_proposal_details_endpoint(proposal_id: int):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏
    
    GET /api/proposals/{proposal_id}/details
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        user_id = get_user_id_from_request()
        if not user_id:
            return jsonify({
                'error': 'Unauthorized',
                'message': '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
            }), 401
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        if not validate_proposal_ownership(proposal_id, user_id):
            return jsonify({
                'error': 'Forbidden',
                'message': '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'
            }), 403
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        proposal = get_proposal_details(proposal_id)
        if not proposal:
            return jsonify({
                'error': 'Not Found',
                'message': '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
            }), 404
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏
        conn = get_db_connection()
        if not conn:
            return jsonify({
                'error': 'Internal Server Error',
                'message': '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö'
            }), 500
        
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏
        cursor.execute("""
            SELECT 
                id, post_url, placement_start, placement_end,
                expected_duration, status, final_views_count,
                created_at, updated_at
            FROM offer_placements
            WHERE proposal_id = ?
        """, (proposal_id,))
        
        placement = cursor.fetchone()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–≤–µ—Ä–æ–∫
        if placement:
            cursor.execute("""
                SELECT 
                    check_time, post_exists, views_count, 
                    check_status, error_message
                FROM placement_checks
                WHERE placement_id = ?
                ORDER BY check_time DESC
                LIMIT 10
            """, (placement['id'],))
            
            checks = cursor.fetchall()
        else:
            checks = []
        
        conn.close()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = {
            'success': True,
            'proposal': dict(proposal),
            'placement': dict(placement) if placement else None,
            'recent_checks': [dict(check) for check in checks]
        }
        
        return jsonify(response), 200
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}")
        return jsonify({
            'error': 'Internal Server Error',
            'message': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        }), 500

# ================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–®–ò–ë–û–ö
# ================================================================

@proposals_management_bp.errorhandler(404)
def not_found(error):
    return jsonify({
        'error': 'Not Found',
        'message': '–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω'
    }), 404

@proposals_management_bp.errorhandler(500)
def internal_error(error):
    return jsonify({
        'error': 'Internal Server Error',
        'message': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    }), 500