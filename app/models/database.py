# app/models/database.py
# –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–î + —Ä–∞–±–æ—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, –ª–µ–Ω–∏–≤—ã–π –∏–º–ø–æ—Ä—Ç auth_service

import sqlite3
import logging
import os
import datetime
from typing import Optional, Dict, Any, List, Union
from flask import request
from app.config.telegram_config import AppConfig

logger = logging.getLogger(__name__)


class DatabaseManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite"""

    def __init__(self, db_path: str = None):
        self.db_path = db_path or AppConfig.DATABASE_PATH

    def get_connection(self) -> sqlite3.Connection:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SQLite"""
        try:
            conn = sqlite3.connect(self.db_path)
            conn.row_factory = sqlite3.Row  # –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å–ª–æ–≤–∞—Ä–µ–π
            conn.execute('PRAGMA foreign_keys = ON')  # –í–∫–ª—é—á–∞–µ–º foreign keys
            return conn
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SQLite: {e}")

    def test_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.execute("SELECT 1")
            conn.close()
            return True
        except Exception as e:
            logger.error(f"Database connection test failed: {e}")
            return False

    def execute_query(self, query: str, params: tuple = (),
                      fetch_one: bool = False, fetch_all: bool = False) -> Union[Dict, List, int, None]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()

            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            if any(keyword in query.upper() for keyword in ['DROP', 'DELETE', 'TRUNCATE', 'ALTER']):
                logger.warning(f"Potentially dangerous query executed: {query[:100]}...")

            cursor.execute(query, params)

            result = None
            if fetch_one:
                row = cursor.fetchone()
                result = dict(row) if row else None
            elif fetch_all:
                rows = cursor.fetchall()
                result = [dict(row) for row in rows] if rows else []
            else:
                conn.commit()
                result = cursor.lastrowid

            conn.close()
            return result

        except sqlite3.Error as e:
            logger.error(f"Database error: {e}")
            logger.error(f"Query: {query}")
            if params:
                logger.error(f"Params: {params}")
            return None
        except Exception as e:
            logger.error(f"Unexpected error in execute_query: {e}")
            if 'conn' in locals():
                conn.close()
            raise  # –ü–æ–¥–Ω–∏–º–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ None

    def init_database(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            logger.info("üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

            if not os.path.exists(self.db_path):
                logger.error(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.db_path}")
                logger.info("–ó–∞–ø—É—Å—Ç–∏—Ç–µ sqlite_migration.py –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
                return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
            tables = self.execute_query("""
                                        SELECT name
                                        FROM sqlite_master
                                        WHERE type = 'table'
                                          AND name IN ('users', 'channels', 'offers', 'offer_responses')
                                        """, fetch_all=True)

            if not tables or len(tables) < 4:
                logger.error(f"‚ùå –ù–µ –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–π–¥–µ–Ω—ã. –ù–∞–π–¥–µ–Ω–æ: {len(tables) if tables else 0}")
                logger.info("–ó–∞–ø—É—Å—Ç–∏—Ç–µ sqlite_migration.py –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ö–µ–º—ã")
                return False

            logger.info("‚úÖ SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SQLite: {e}")
            return False


# ===== –í–ê–õ–ò–î–ê–¶–ò–Ø =====
class OfferValidator:
    @staticmethod
    def validate_offer_data(data: Dict[str, Any]) -> List[str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ñ—Ñ–µ—Ä–∞"""
        errors = []

        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if not data.get('title', '').strip():
            errors.append('–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ')

        description = data.get('description', '').strip()
        content = data.get('content', '').strip()
        if not description and not content:
            errors.append('–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ')

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã
        price = OfferValidator._get_offer_price(data)
        if price <= 0:
            errors.append('–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É –∑–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –∏–ª–∏ –æ–±—â–∏–π –±—é–¥–∂–µ—Ç')

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –ø–æ–ª–µ–π
        title = data.get('title', '').strip()
        if title and (len(title) < 5 or len(title) > 200):
            errors.append('–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 5 –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤')

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω—ã
        if price < 10 or price > 1000000:
            errors.append('–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 10 –¥–æ 1,000,000 —Ä—É–±–ª–µ–π')

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª—é—Ç—ã
        currency = data.get('currency', 'RUB').upper()
        if currency not in ['RUB', 'USD', 'EUR']:
            errors.append('–í–∞–ª—é—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–¥–Ω–æ–π –∏–∑: RUB, USD, EUR')

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category = data.get('category', 'general')
        allowed_categories = [
            'general', 'tech', 'finance', 'lifestyle', 'education',
            'entertainment', 'business', 'health', 'sports', 'travel', 'other'
        ]
        if category not in allowed_categories:
            errors.append(f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–¥–Ω–æ–π –∏–∑: {", ".join(allowed_categories)}')

        return errors

    @staticmethod
    def _get_offer_price(data: Dict[str, Any]) -> float:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –æ—Ñ—Ñ–µ—Ä–∞ —Å fallback –ª–æ–≥–∏–∫–æ–π"""
        price = data.get('price', 0)
        max_price = data.get('max_price', 0)
        budget_total = data.get('budget_total', 0)

        if price and float(price) > 0:
            return float(price)
        elif max_price and float(max_price) > 0:
            return float(max_price)
        elif budget_total and float(budget_total) > 0:
            return min(float(budget_total) * 0.1, 50000)

        return 0


# ===== –ú–ï–ù–ï–î–ñ–ï–† –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô =====
class UserManager:
    @staticmethod
    def ensure_user_exists(telegram_id: int, username: str = None, first_name: str = None) -> Optional[int]:
        """
        –û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –ø–æ Telegram ID
        –ü–ï–†–ï–ù–ï–°–ï–ù–û –∏–∑ auth_service.py
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = db_manager.execute_query(
                'SELECT id FROM users WHERE telegram_id = ?',
                (telegram_id,),
                fetch_one=True
            )

            if not user:
                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: —Å–æ–∑–¥–∞–µ–º –±–µ–∑ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª–µ–π user_type, status
                logger.info(f"Creating new user for Telegram ID: {telegram_id}")

                user_db_id = db_manager.execute_query('''
                    INSERT INTO users (telegram_id, username, first_name, is_admin, created_at, updated_at)
                    VALUES (?, ?, ?, ?, ?, ?)
                ''', (
                    telegram_id,
                    username or f'user_{telegram_id}',
                    first_name or 'Telegram User',
                    telegram_id == AppConfig.YOUR_TELEGRAM_ID,  # –ê–¥–º–∏–Ω –µ—Å–ª–∏ —ç—Ç–æ YOUR_TELEGRAM_ID
                    datetime.datetime.now().isoformat(),
                    datetime.datetime.now().isoformat()
                ))

                return user_db_id
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                if username or first_name:
                    db_manager.execute_query('''
                        UPDATE users
                        SET username = COALESCE(?, username),
                            first_name = COALESCE(?, first_name),
                            updated_at = ?
                        WHERE telegram_id = ?
                    ''', (username, first_name, datetime.datetime.now().isoformat(), telegram_id))

                return user['id']

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
            return None

    @staticmethod
    def get_user_by_telegram_id(telegram_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID"""
        try:
            return db_manager.execute_query(
                'SELECT * FROM users WHERE telegram_id = ?',
                (telegram_id,),
                fetch_one=True
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
            return None

    @staticmethod
    def create_user_from_legacy(user_id: int, username: str = None, first_name: str = None) -> int:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (legacy –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        user = db_manager.execute_query(
            'SELECT id FROM users WHERE telegram_id = ?',
            (user_id,),
            fetch_one=True
        )

        if not user:
            user_db_id = db_manager.execute_query('''
                INSERT INTO users (telegram_id, username, first_name, created_at, updated_at)
                VALUES (?, ?, ?, ?, ?)
            ''', (
                user_id,
                username or f'user_{user_id}',
                first_name or 'User',
                datetime.datetime.now().isoformat(),
                datetime.datetime.now().isoformat()
            ))
            logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
            return user_db_id

        return user['id']


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
db_manager = DatabaseManager()


# === –£–¢–ò–õ–ò–¢–´ ===
def get_user_id_from_request():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ user_db_id –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    
    –ò–°–ü–†–ê–í–õ–ï–ù–û: –ª–µ–Ω–∏–≤—ã–π –∏–º–ø–æ—Ä—Ç AuthService –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
    """
    try:
        # ‚úÖ –õ–ï–ù–ò–í–´–ô –ò–ú–ü–û–†–¢ - –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≠–ö–ó–ï–ú–ü–õ–Ø–† auth_service, –∞ –Ω–µ –∫–ª–∞—Å—Å
        from app.services.auth_service import auth_service
        
        # –ü–æ–ª—É—á–∞–µ–º telegram_id —á–µ—Ä–µ–∑ —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        telegram_id = auth_service.get_current_user_id()
        if not telegram_id:
            logger.warning("‚ö†Ô∏è Database: auth_service.get_current_user_id() –≤–µ—Ä–Ω—É–ª None")
            return None
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º telegram_id –≤ user_db_id
        conn = sqlite3.connect(AppConfig.DATABASE_PATH)
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
        cursor.execute("SELECT id FROM users WHERE telegram_id = ?", (telegram_id,))
        user = cursor.fetchone()
        conn.close()
        
        if user:
            user_db_id = user['id']
            logger.debug(f"üîç Database: telegram_id {telegram_id} ‚Üí user_db_id {user_db_id}")
            return user_db_id
        else:
            logger.warning(f"‚ö†Ô∏è Database: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram_id {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
            return None
        
    except Exception as e:
        logger.error(f"‚ùå Database: –û—à–∏–±–∫–∞ –≤ get_user_id_from_request(): {e}")
        import traceback
        logger.error(traceback.format_exc())
        return None


def execute_db_query(query: str, params: tuple = (), fetch_one: bool = False, fetch_all: bool = False):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î"""
    try:
        conn = sqlite3.connect(AppConfig.DATABASE_PATH)
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()

        cursor.execute(query, params)

        if fetch_one:
            result = cursor.fetchone()
            conn.close()
            return dict(result) if result else None
        elif fetch_all:
            result = cursor.fetchall()
            conn.close()
            return [dict(row) for row in result] if result else []
        else:
            conn.commit()
            lastrowid = cursor.lastrowid
            conn.close()
            return lastrowid

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
        if 'conn' in locals():
            conn.close()
        raise


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def safe_execute_query(query: str, params: tuple = (), fetch_one: bool = False, fetch_all: bool = False):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    return db_manager.execute_query(query, params, fetch_one, fetch_all)