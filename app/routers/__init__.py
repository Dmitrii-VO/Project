# app/routers/__init__.py
"""
–ú–æ–¥—É–ª—å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è Telegram Mini App

–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ URL –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏
"""

from flask import Flask, render_template
from .main_router import main_bp
from .api_router import api_bp
from .channel_router import channel_bp
from .offer_router import offer_bp
from .analytics_router import analytics_bp
from .payment_router import payment_bp

# –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —Å–ø–∏—Å–æ–∫ Blueprint'–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏
BLUEPRINTS = [
    (main_bp, '', 'main'),  # –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: /, /channels, /offers, /analytics, /payments
    (api_bp, '/api', 'api'),  # –û–±—â–∏–µ API endpoints
    (channel_bp, '/api/channels', 'channels_api'),  # API –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤
    (offer_bp, '/api/offers', 'offers_api'),  # API –¥–ª—è –æ—Ñ—Ñ–µ—Ä–æ–≤
    (analytics_bp, '/api/analytics', 'analytics_api'),  # API –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    (payment_bp, '/api/payments', 'payments_api'),  # API –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π
]


def register_blueprints(app: Flask) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ Blueprint'—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Flask

    Args:
        app: –≠–∫–∑–µ–º–ø–ª—è—Ä Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """

    for blueprint, url_prefix, name in BLUEPRINTS:
        try:
            app.register_blueprint(
                blueprint,
                url_prefix=url_prefix,
                name=name
            )
            prefix_display = url_prefix if url_prefix else "/"
            app.logger.info(f"‚úÖ Blueprint '{name}' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º '{prefix_display}'")
        except Exception as e:
            app.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Blueprint '{name}': {e}")
            # –ù–µ –ø–æ–¥–Ω–∏–º–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –¥—Ä—É–≥–∏—Ö Blueprint'–æ–≤
            continue


def init_routers(app: Flask) -> None:
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏

    Args:
        app: –≠–∫–∑–µ–º–ø–ª—è—Ä Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ Blueprint'—ã
    register_blueprints(app)

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
    setup_error_handlers(app)

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º middleware
    setup_middleware(app)

    app.logger.info("üöÄ –°–∏—Å—Ç–µ–º–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")


def setup_error_handlers(app: Flask) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫"""

    @app.errorhandler(404)
    def not_found(error):
        from flask import jsonify, request
        if request.path.startswith('/api/'):
            return jsonify({'error': 'API endpoint not found'}), 404
        try:
            return render_template('error.html', message='–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'), 404
        except:
            return '<h1>404 - –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</h1>', 404

    @app.errorhandler(500)
    def internal_error(error):
        from flask import jsonify, request
        app.logger.error(f"Internal error: {error}")
        if request.path.startswith('/api/'):
            return jsonify({'error': 'Internal server error'}), 500
        try:
            return render_template('error.html', message='–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'), 500
        except:
            return '<h1>500 - –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞</h1>', 500


def setup_middleware(app: Flask) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware"""

    try:
        from .middleware import (
            security_middleware,
            telegram_auth_middleware,
            performance_middleware
        )

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware
        app.before_request(security_middleware)
        app.before_request(telegram_auth_middleware)
        app.before_request(performance_middleware)

        app.logger.info("‚úÖ Middleware –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    except ImportError as e:
        app.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å middleware: {e}")


__all__ = [
    'register_blueprints',
    'init_routers',
    'main_bp',
    'api_bp',
    'channel_bp',
    'offer_bp',
    'analytics_bp',
    'payment_bp'
]