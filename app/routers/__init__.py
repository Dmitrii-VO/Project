# app/routers/__init__.py
"""
–ú–æ–¥—É–ª—å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è Telegram Mini App

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã –∏ Blueprint'—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
"""

from flask import Flask, render_template
from .main_router import main_bp
from .api_router import api_bp
from .channel_router import channel_bp
from .offer_router import offer_bp
from .analytics_router import analytics_bp
from .payment_router import payment_bp

# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö Blueprint'–æ–≤ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
BLUEPRINTS = [
    (main_bp, '/', 'main'),
    (api_bp, '/api', 'api'),
    (channel_bp, '/channels', 'channels'),
    (offer_bp, '/offers', 'offers'),
    (analytics_bp, '/analytics', 'analytics'),
    (payment_bp, '/payments', 'payments')
]


def register_blueprints(app: Flask) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ Blueprint'—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Flask

    Args:
        app: –≠–∫–∑–µ–º–ø–ª—è—Ä Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """

    for blueprint, url_prefix, name in BLUEPRINTS:
        try:
            app.register_blueprint(
                blueprint,
                url_prefix=url_prefix,
                name=name
            )
            app.logger.info(f"‚úÖ Blueprint '{name}' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º '{url_prefix}'")
        except Exception as e:
            app.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Blueprint '{name}': {e}")
            raise


def init_routers(app: Flask) -> None:
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏

    Args:
        app: –≠–∫–∑–µ–º–ø–ª—è—Ä Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ Blueprint'—ã
    register_blueprints(app)

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
    setup_error_handlers(app)

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º middleware
    setup_middleware(app)

    app.logger.info("üöÄ –°–∏—Å—Ç–µ–º–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")


def setup_error_handlers(app: Flask) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫"""

    @app.errorhandler(404)
    def not_found(error):
        from flask import jsonify, request
        if request.path.startswith('/api/'):
            return jsonify({'error': 'API endpoint not found'}), 404
        return render_template('errors/404.html'), 404

    @app.errorhandler(500)
    def internal_error(error):
        from flask import jsonify, request
        app.logger.error(f"Internal error: {error}")
        if request.path.startswith('/api/'):
            return jsonify({'error': 'Internal server error'}), 500
        return render_template('errors/500.html'), 500


def setup_middleware(app: Flask) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware"""

    from .middleware import (
        security_middleware,
        telegram_auth_middleware,
        performance_middleware
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware
    app.before_request(security_middleware)
    app.before_request(telegram_auth_middleware)
    app.before_request(performance_middleware)


__all__ = [
    'register_blueprints',
    'init_routers',
    'main_bp',
    'api_bp',
    'channel_bp',
    'offer_bp',
    'analytics_bp',
    'payment_bp'
]