# sqlite_migration.py - –û—á–∏—â–µ–Ω–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –±–µ–∑ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
import os
import sys
import sqlite3
from datetime import datetime
from urllib.parse import urlparse

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    pass

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
OLD_DATABASE_URL = os.environ.get('DATABASE_URL', 'postgresql://postgres:1994@localhost:5432/telegram_mini_app')
NEW_SQLITE_PATH = 'telegram_mini_app.db'
YOUR_TELEGRAM_ID = int(os.environ.get('YOUR_TELEGRAM_ID', 373086959))


def get_postgres_connection():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        import psycopg2
        from psycopg2.extras import RealDictCursor

        url = urlparse(OLD_DATABASE_URL)
        conn = psycopg2.connect(
            host=url.hostname or 'localhost',
            port=url.port or 5432,
            database=url.path[1:] if url.path else 'postgres',
            user=url.username or 'postgres',
            password=url.password or 'password',
            cursor_factory=RealDictCursor
        )
        return conn
    except ImportError:
        print("‚ö†Ô∏è psycopg2 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
        return None
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
        return None


def create_sqlite_database():
    """–°–æ–∑–¥–∞–Ω–∏–µ SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–ª–Ω–æ–π —Å—Ö–µ–º–æ–π"""
    print("üóÑÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –±–∞–∑—É –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if os.path.exists(NEW_SQLITE_PATH):
        os.remove(NEW_SQLITE_PATH)
        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {NEW_SQLITE_PATH}")

    conn = sqlite3.connect(NEW_SQLITE_PATH)
    cursor = conn.cursor()

    # –í–∫–ª—é—á–∞–µ–º foreign keys
    cursor.execute('PRAGMA foreign_keys = ON')

    print("üìã –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü...")

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
        CREATE TABLE users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            telegram_id INTEGER UNIQUE NOT NULL,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            is_admin BOOLEAN DEFAULT 0,
            is_active BOOLEAN DEFAULT 1,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∫–∞–Ω–∞–ª–æ–≤
    cursor.execute('''
        CREATE TABLE channels (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            telegram_channel_id TEXT UNIQUE NOT NULL,
            title TEXT NOT NULL,
            username TEXT,
            subscribers_count INTEGER DEFAULT 0,
            description TEXT,
            category TEXT DEFAULT 'general',
            is_verified BOOLEAN DEFAULT 0,
            is_active BOOLEAN DEFAULT 1,
            is_public BOOLEAN DEFAULT 1,
            accepts_ads BOOLEAN DEFAULT 1,
            invite_link TEXT,
            photo_url TEXT,
            avg_engagement_rate REAL DEFAULT 0.0,
            price_per_post INTEGER DEFAULT 0,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            owner_id INTEGER NOT NULL,
            FOREIGN KEY (owner_id) REFERENCES users(id) ON DELETE CASCADE
        )
    ''')

    # –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã –æ—Ñ—Ñ–µ—Ä–æ–≤ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    cursor.execute('''
        CREATE TABLE offers (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT NOT NULL,
            description TEXT NOT NULL,
            content TEXT NOT NULL,
            price DECIMAL(12, 2) NOT NULL,
            currency TEXT DEFAULT 'RUB',
            deadline DATE,
            target_audience TEXT,
            requirements TEXT,
            status TEXT DEFAULT 'active',
            offer_type TEXT DEFAULT 'main',
            parent_offer_id INTEGER,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            channel_id INTEGER,
            created_by INTEGER NOT NULL,
            FOREIGN KEY (channel_id) REFERENCES channels(id) ON DELETE CASCADE,
            FOREIGN KEY (created_by) REFERENCES users(id) ON DELETE SET NULL,
            FOREIGN KEY (parent_offer_id) REFERENCES offers(id) ON DELETE CASCADE,
            CHECK (status IN ('active', 'paused', 'completed', 'cancelled', 'pending')),
            CHECK (price > 0)
        )
    ''')

    print("üÜï –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ—Ñ—Ñ–µ—Ä–æ–≤...")

    # –ù–û–í–ê–Ø: –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –æ—Ñ—Ñ–µ—Ä–æ–≤
    cursor.execute('''
        CREATE TABLE offers_extended (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT NOT NULL,
            description TEXT NOT NULL,
            content TEXT NOT NULL,
            price DECIMAL(12, 2) NOT NULL,
            currency TEXT DEFAULT 'RUB',
            deadline DATE,
            target_audience TEXT,
            requirements TEXT,
            status TEXT DEFAULT 'active',
            offer_type TEXT DEFAULT 'post',
            budget_total DECIMAL(12, 2),
            budget_spent DECIMAL(12, 2) DEFAULT 0,
            max_channels INTEGER,
            completion_rate REAL DEFAULT 0.0,
            total_invitations INTEGER DEFAULT 0,
            accepted_count INTEGER DEFAULT 0,
            rejected_count INTEGER DEFAULT 0,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            created_by INTEGER NOT NULL,
            FOREIGN KEY (created_by) REFERENCES users(id) ON DELETE SET NULL,
            CHECK (status IN ('active', 'paused', 'completed', 'cancelled', 'draft')),
            CHECK (price > 0)
        )
    ''')

    # –ù–û–í–ê–Ø: –¢–∞–±–ª–∏—Ü–∞ —Å–≤—è–∑–µ–π –æ—Ñ—Ñ–µ—Ä–æ–≤ –∏ –∫–∞–Ω–∞–ª–æ–≤
    cursor.execute('''
        CREATE TABLE offer_channel_targets (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            offer_id INTEGER NOT NULL,
            channel_id INTEGER NOT NULL,
            status TEXT DEFAULT 'pending',
            price_negotiated DECIMAL(12, 2),
            response_message TEXT,
            proposed_date DATE,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (offer_id) REFERENCES offers_extended(id) ON DELETE CASCADE,
            FOREIGN KEY (channel_id) REFERENCES channels(id) ON DELETE CASCADE,
            UNIQUE(offer_id, channel_id),
            CHECK (status IN ('pending', 'accepted', 'rejected', 'completed', 'cancelled'))
        )
    ''')

    # –ù–û–í–ê–Ø: –¢–∞–±–ª–∏—Ü–∞ —Å–≤—è–∑–∏ –≥–ª–∞–≤–Ω—ã—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤ —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏
    cursor.execute('''
        CREATE TABLE channel_offers (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            main_offer_id INTEGER NOT NULL,
            channel_id INTEGER NOT NULL,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (main_offer_id) REFERENCES offers(id) ON DELETE CASCADE,
            FOREIGN KEY (channel_id) REFERENCES channels(id) ON DELETE CASCADE
        )
    ''')

    # –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ—Ñ—Ñ–µ—Ä—ã (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    cursor.execute('''
        CREATE TABLE offer_responses (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            status TEXT NOT NULL,
            proposed_date DATE,
            rejection_reason TEXT,
            response_message TEXT,
            counter_price DECIMAL(12, 2),
            payment_status TEXT DEFAULT 'pending',
            payment_id TEXT,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            offer_id INTEGER NOT NULL,
            user_id INTEGER NOT NULL,
            FOREIGN KEY (offer_id) REFERENCES offers(id) ON DELETE CASCADE,
            FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
            UNIQUE(offer_id, user_id),
            CHECK (status IN ('pending', 'accepted', 'rejected', 'completed', 'cancelled')),
            CHECK (payment_status IN ('pending', 'processing', 'paid', 'failed', 'refunded'))
        )
    ''')

    print("üîî –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")

    # –ù–û–í–ê–Ø: –¢–∞–±–ª–∏—Ü–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    cursor.execute('''
        CREATE TABLE notifications (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            type TEXT NOT NULL,
            title TEXT NOT NULL,
            message TEXT NOT NULL,
            data TEXT,
            priority INTEGER DEFAULT 0,
            is_read BOOLEAN DEFAULT 0,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
            CHECK (type IN ('offer_received', 'payment_received', 'channel_verified', 'deadline_reminder', 'system'))
        )
    ''')

    print("üìÑ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —à–∞–±–ª–æ–Ω–æ–≤...")

    # –ù–û–í–ê–Ø: –¢–∞–±–ª–∏—Ü–∞ —à–∞–±–ª–æ–Ω–æ–≤ –æ—Ñ—Ñ–µ—Ä–æ–≤
    cursor.execute('''
        CREATE TABLE offer_templates (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            category TEXT DEFAULT 'general',
            title_template TEXT NOT NULL,
            description_template TEXT NOT NULL,
            content_template TEXT NOT NULL,
            default_price DECIMAL(12, 2),
            default_currency TEXT DEFAULT 'RUB',
            is_public BOOLEAN DEFAULT 0,
            usage_count INTEGER DEFAULT 0,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            created_by INTEGER NOT NULL,
            FOREIGN KEY (created_by) REFERENCES users(id) ON DELETE SET NULL
        )
    ''')

    print("‚ö° –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    indexes = [
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
        'CREATE INDEX idx_users_telegram_id ON users(telegram_id)',
        'CREATE INDEX idx_channels_owner_id ON channels(owner_id)',
        'CREATE INDEX idx_channels_username ON channels(username)',
        'CREATE INDEX idx_channels_active ON channels(is_active)',
        'CREATE INDEX idx_channels_accepts_ads ON channels(accepts_ads)',

        # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ—Ñ—Ñ–µ—Ä–æ–≤
        'CREATE INDEX idx_offers_channel_id ON offers(channel_id)',
        'CREATE INDEX idx_offers_status ON offers(status)',
        'CREATE INDEX idx_offers_created_by ON offers(created_by)',
        'CREATE INDEX idx_offers_extended_created_by ON offers_extended(created_by)',
        'CREATE INDEX idx_offers_extended_status ON offers_extended(status)',
        'CREATE INDEX idx_offers_extended_created_at ON offers_extended(created_at)',

        # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ü–µ–ª–µ–π –æ—Ñ—Ñ–µ—Ä–æ–≤
        'CREATE INDEX idx_offer_targets_offer_id ON offer_channel_targets(offer_id)',
        'CREATE INDEX idx_offer_targets_channel_id ON offer_channel_targets(channel_id)',
        'CREATE INDEX idx_offer_targets_status ON offer_channel_targets(status)',

        # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
        'CREATE INDEX idx_offer_responses_offer_id ON offer_responses(offer_id)',
        'CREATE INDEX idx_offer_responses_user_id ON offer_responses(user_id)',
        'CREATE INDEX idx_offer_responses_status ON offer_responses(status)',

        # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        'CREATE INDEX idx_notifications_user_id ON notifications(user_id)',
        'CREATE INDEX idx_notifications_is_read ON notifications(is_read)',
        'CREATE INDEX idx_notifications_type ON notifications(type)',
        'CREATE INDEX idx_notifications_created_at ON notifications(created_at)',

        # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤
        'CREATE INDEX idx_offer_templates_created_by ON offer_templates(created_by)',
        'CREATE INDEX idx_offer_templates_is_public ON offer_templates(is_public)',
        'CREATE INDEX idx_offer_templates_category ON offer_templates(category)'
    ]

    for index_sql in indexes:
        cursor.execute(index_sql)

    print("üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SQLite –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")

    # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è SQLite
    optimization_queries = [
        'PRAGMA journal_mode = WAL',  # –í–∫–ª—é—á–∞–µ–º WAL —Ä–µ–∂–∏–º –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        'PRAGMA synchronous = NORMAL',  # –ë–∞–ª–∞–Ω—Å –º–µ–∂–¥—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é –∏ —Å–∫–æ—Ä–æ—Å—Ç—å—é
        'PRAGMA cache_size = 10000',  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–µ—à
        'PRAGMA temp_store = memory',  # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç–∏
        'PRAGMA mmap_size = 268435456'  # 256MB memory-mapped I/O
    ]

    for query in optimization_queries:
        cursor.execute(query)

    conn.commit()
    print("‚úÖ SQLite —Å—Ö–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å –ø–æ–ª–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π")
    return conn


def create_main_user_only(sqlite_conn):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    cursor = sqlite_conn.cursor()

    try:
        print("üë§ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")

        # –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
        cursor.execute('''
            INSERT OR IGNORE INTO users (telegram_id, username, first_name, is_admin) 
            VALUES (?, ?, ?, ?)
        ''', (YOUR_TELEGRAM_ID, 'main_user', 'Main User', True))

        sqlite_conn.commit()
        print(f"‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω (Telegram ID: {YOUR_TELEGRAM_ID})")

    except Exception as e:
        print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        sqlite_conn.rollback()


def export_data_from_postgres():
    """–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ PostgreSQL (–∏—Å–∫–ª—é—á–∞—è —Ç–µ—Å—Ç–æ–≤—ã–µ)"""
    pg_conn = get_postgres_connection()
    if not pg_conn:
        print("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ PostgreSQL")
        return None

    print("üì§ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ PostgreSQL...")

    exported_data = {
        'users': [],
        'channels': [],
        'offers': [],
        'offer_responses': []
    }

    try:
        cursor = pg_conn.cursor()

        # –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∏—Å–∫–ª—é—á–∞—è —Ç–µ—Å—Ç–æ–≤—ã—Ö)
        cursor.execute('''
            SELECT * FROM users 
            WHERE username NOT LIKE '%test%' 
            AND username NOT LIKE '%demo%'
            ORDER BY id
        ''')
        users = cursor.fetchall()
        for user in users:
            exported_data['users'].append(dict(user))

        # –≠–∫—Å–ø–æ—Ä—Ç –∫–∞–Ω–∞–ª–æ–≤ (–∏—Å–∫–ª—é—á–∞—è —Ç–µ—Å—Ç–æ–≤—ã–µ –∏ –¥–µ–º–æ)
        cursor.execute('''
            SELECT * FROM channels 
            WHERE title NOT LIKE '%—Ç–µ—Å—Ç%' 
            AND title NOT LIKE '%test%' 
            AND title NOT LIKE '%–¥–µ–º–æ%'
            AND title NOT LIKE '%demo%'
            AND title NOT LIKE '%üß™%'
            AND username NOT LIKE 'test_%'
            AND username NOT LIKE 'demo_%'
            ORDER BY id
        ''')
        channels = cursor.fetchall()
        for channel in channels:
            exported_data['channels'].append(dict(channel))

        # –≠–∫—Å–ø–æ—Ä—Ç –æ—Ñ—Ñ–µ—Ä–æ–≤ (–∏—Å–∫–ª—é—á–∞—è —Ç–µ—Å—Ç–æ–≤—ã–µ)
        cursor.execute('''
            SELECT * FROM offers 
            WHERE title NOT LIKE '%—Ç–µ—Å—Ç%' 
            AND title NOT LIKE '%test%'
            AND title NOT LIKE '%–¥–µ–º–æ%'
            AND title NOT LIKE '%demo%'
            ORDER BY id
        ''')
        offers = cursor.fetchall()
        for offer in offers:
            exported_data['offers'].append(dict(offer))

        # –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–≤–µ—Ç–æ–≤
        cursor.execute('SELECT * FROM offer_responses ORDER BY id')
        responses = cursor.fetchall()
        for response in responses:
            exported_data['offer_responses'].append(dict(response))

        pg_conn.close()

        print(f"   üìä –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
        print(f"      üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(exported_data['users'])}")
        print(f"      üì∫ –ö–∞–Ω–∞–ª–æ–≤: {len(exported_data['channels'])}")
        print(f"      üíº –û—Ñ—Ñ–µ—Ä–æ–≤: {len(exported_data['offers'])}")
        print(f"      üìù –û—Ç–≤–µ—Ç–æ–≤: {len(exported_data['offer_responses'])}")

        return exported_data

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        pg_conn.close()
        return None


def import_data_to_sqlite(sqlite_conn, data):
    """–ò–º–ø–æ—Ä—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ SQLite"""
    if not data:
        create_main_user_only(sqlite_conn)
        return

    print("üì• –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ SQLite...")
    cursor = sqlite_conn.cursor()

    try:
        # –ò–º–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for user in data['users']:
            cursor.execute('''
                INSERT OR IGNORE INTO users (
                    telegram_id, username, first_name, last_name, 
                    is_admin, is_active, created_at, updated_at
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                user['telegram_id'], user['username'], user['first_name'], user['last_name'],
                user['is_admin'], user['is_active'], user['created_at'], user['updated_at']
            ))

        # –ò–º–ø–æ—Ä—Ç –∫–∞–Ω–∞–ª–æ–≤
        for channel in data['channels']:
            cursor.execute('''
                INSERT OR IGNORE INTO channels (
                    telegram_channel_id, title, username, subscribers_count, description,
                    category, is_verified, is_active, is_public, invite_link, photo_url,
                    created_at, updated_at, owner_id
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                channel['telegram_channel_id'], channel['title'], channel['username'],
                channel['subscribers_count'], channel['description'], channel.get('category', 'general'),
                channel['is_verified'], channel['is_active'], channel['is_public'],
                channel['invite_link'], channel['photo_url'], channel['created_at'],
                channel['updated_at'], channel['owner_id']
            ))

        # –ò–º–ø–æ—Ä—Ç –æ—Ñ—Ñ–µ—Ä–æ–≤
        for offer in data['offers']:
            cursor.execute('''
                INSERT OR IGNORE INTO offers (
                    title, description, content, price, currency, deadline,
                    target_audience, requirements, status, created_at, updated_at,
                    channel_id, created_by
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                offer['title'], offer['description'], offer['content'], offer['price'],
                offer['currency'], offer['deadline'], offer['target_audience'],
                offer['requirements'], offer['status'], offer['created_at'],
                offer['updated_at'], offer['channel_id'], offer['created_by']
            ))

        # –ò–º–ø–æ—Ä—Ç –æ—Ç–≤–µ—Ç–æ–≤
        for response in data['offer_responses']:
            cursor.execute('''
                INSERT OR IGNORE INTO offer_responses (
                    status, proposed_date, rejection_reason, payment_status, payment_id,
                    created_at, updated_at, offer_id, user_id
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                response['status'], response['proposed_date'], response['rejection_reason'],
                response['payment_status'], response['payment_id'], response['created_at'],
                response['updated_at'], response['offer_id'], response['user_id']
            ))

        sqlite_conn.commit()
        print("‚úÖ –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")

        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –æ–Ω –Ω–µ –±—ã–ª –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
        create_main_user_only(sqlite_conn)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        sqlite_conn.rollback()


def update_env_file():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ .env —Ñ–∞–π–ª–∞ –¥–ª—è SQLite"""
    print("üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ .env —Ñ–∞–π–ª–∞...")

    # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π .env
    env_content = ""
    if os.path.exists('.env'):
        with open('.env', 'r', encoding='utf-8') as f:
            env_content = f.read()

    # –ó–∞–º–µ–Ω—è–µ–º DATABASE_URL
    new_database_url = f'sqlite:///{NEW_SQLITE_PATH}'

    if 'DATABASE_URL=' in env_content:
        # –ó–∞–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–æ–∫—É
        lines = env_content.split('\n')
        for i, line in enumerate(lines):
            if line.startswith('DATABASE_URL='):
                lines[i] = f'DATABASE_URL={new_database_url}'
                break
        env_content = '\n'.join(lines)
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        env_content += f'\nDATABASE_URL={new_database_url}\n'

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π .env
    with open('.env', 'w', encoding='utf-8') as f:
        f.write(env_content)

    print(f"‚úÖ DATABASE_URL –æ–±–Ω–æ–≤–ª–µ–Ω: {new_database_url}")


def verify_database():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

    try:
        conn = sqlite3.connect(NEW_SQLITE_PATH)
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
        cursor.execute("""
            SELECT name FROM sqlite_master 
            WHERE type='table' AND name NOT LIKE 'sqlite_%'
            ORDER BY name
        """)
        tables = cursor.fetchall()

        expected_tables = [
            'channels', 'channel_offers', 'notifications', 'offers',
            'offers_extended', 'offer_channel_targets', 'offer_responses',
            'offer_templates', 'users'
        ]

        found_tables = [table[0] for table in tables]

        print(f"   üìã –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(found_tables)}")
        for table in found_tables:
            print(f"      ‚úÖ {table}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        missing_tables = set(expected_tables) - set(found_tables)
        if missing_tables:
            print(f"   ‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã: {list(missing_tables)}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        for table in found_tables:
            cursor.execute(f"SELECT COUNT(*) FROM {table}")
            count = cursor.fetchone()[0]
            print(f"      üìä {table}: {count} –∑–∞–ø–∏—Å–µ–π")

        conn.close()
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏"""
    print("üîÑ –ú–ò–ì–†–ê–¶–ò–Ø –ë–ï–ó –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•")
    print("=" * 60)

    # 1. –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ PostgreSQL
    exported_data = export_data_from_postgres()

    # 2. –°–æ–∑–¥–∞–µ–º SQLite –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–ª–Ω–æ–π —Å—Ö–µ–º–æ–π
    sqlite_conn = create_sqlite_database()

    # 3. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    import_data_to_sqlite(sqlite_conn, exported_data)

    # 4. –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    sqlite_conn.close()

    # 5. –û–±–Ω–æ–≤–ª—è–µ–º .env —Ñ–∞–π–ª
    update_env_file()

    # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    verify_database()

    print("\n" + "=" * 60)
    print("üéâ –ú–ò–ì–†–ê–¶–ò–Ø –ë–ï–ó –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–• –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("=" * 60)
    print("üìã –°–û–ó–î–ê–ù–û:")
    print("‚úÖ –ß–∏—Å—Ç–∞—è —Å—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite")
    print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ—Ñ—Ñ–µ—Ä–æ–≤")
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    print("‚úÖ –®–∞–±–ª–æ–Ω—ã –æ—Ñ—Ñ–µ—Ä–æ–≤")
    print("‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã")
    print("‚úÖ –¢–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–±–µ–∑ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö)")
    print("\nüìã –ß–¢–û –î–ê–õ–¨–®–ï:")
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: python working_app.py")
    print("2. –î–æ–±–∞–≤—å—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
    print("3. –°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
    print(f"\nüóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {NEW_SQLITE_PATH}")
    print(f"üìù .env –æ–±–Ω–æ–≤–ª–µ–Ω: DATABASE_URL=sqlite:///{NEW_SQLITE_PATH}")
    print("=" * 60)


if __name__ == '__main__':
    main()