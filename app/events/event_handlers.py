#!/usr/bin/env python3
"""
Event Handlers –¥–ª—è Telegram Mini App
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
"""

import logging
from typing import Dict, Any
from datetime import datetime, timedelta

from .event_bus import event_handler, global_event_handler
from .event_types import (
    EventType, BaseEvent, UserEvent, ChannelEvent, OfferEvent, 
    ResponseEvent, PlacementEvent, PaymentEvent, NotificationEvent,
    SecurityEvent, AnalyticsEvent
)

logger = logging.getLogger(__name__)

# =================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===================

@event_handler(EventType.USER_REGISTERED, priority=10)
def handle_user_registered(event: UserEvent):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        from app.telegram.telegram_notifications import TelegramNotificationService
        from app.events.event_bus import event_bus
        from app.events.event_types import create_event
        
        notification_service = TelegramNotificationService()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_message = f"""
üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Telegram Mini App!

–ü—Ä–∏–≤–µ—Ç, {event.data.get('first_name', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}!

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ üì¢ –î–æ–±–∞–≤–ª—è—Ç—å —Å–≤–æ–∏ –∫–∞–Ω–∞–ª—ã –¥–ª—è –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏
‚Ä¢ üéØ –°–æ–∑–¥–∞–≤–∞—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏
‚Ä¢ üí∞ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ —Ä–µ–∫–ª–∞–º—ã
‚Ä¢ üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –¥–æ—Ö–æ–¥—ã

–ù–∞—á–Ω–∏—Ç–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –∫–∞–Ω–∞–ª—ã".
        """
        
        notification_service.send_notification(
            user_id=event.telegram_id,
            message=welcome_message,
            notification_type='welcome'
        )
        
        # –ù–∞—á–∏—Å–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å
        welcome_bonus = 50.0
        bonus_event = create_event(
            EventType.USER_BALANCE_CHANGED,
            user_id=event.user_id,
            telegram_id=event.telegram_id,
            data={
                'old_balance': 0.0,
                'new_balance': welcome_bonus,
                'change_amount': welcome_bonus,
                'change_type': 'welcome_bonus',
                'description': '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é'
            }
        )
        event_bus.publish(bonus_event)
        
        logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.telegram_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

@event_handler(EventType.USER_BALANCE_CHANGED, priority=8)
def handle_balance_changed(event: UserEvent):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        from app.models.database import execute_db_query
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        execute_db_query(
            "UPDATE users SET balance = ?, updated_at = ? WHERE telegram_id = ?",
            (event.data['new_balance'], datetime.now(), event.telegram_id)
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
        change_amount = abs(event.data.get('change_amount', 0))
        if change_amount >= 100:  # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –æ—Ç 100 —Ä—É–±
            from app.telegram.telegram_notifications import TelegramNotificationService
            
            notification_service = TelegramNotificationService()
            change_type = event.data.get('change_type', 'unknown')
            
            if change_amount > 0:
                emoji = "üí∞"
                action = "–ø–æ–ø–æ–ª–Ω–µ–Ω"
            else:
                emoji = "üí∏"
                action = "—Å–ø–∏—Å–∞–Ω"
            
            message = f"""
{emoji} <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>

–í–∞—à –±–∞–ª–∞–Ω—Å {action} –Ω–∞ {change_amount:.2f} —Ä—É–±.
–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {event.data['new_balance']:.2f} —Ä—É–±.

–ü—Ä–∏—á–∏–Ω–∞: {event.data.get('description', change_type)}
            """
            
            notification_service.send_notification(
                user_id=event.telegram_id,
                message=message,
                notification_type='balance_change'
            )
        
        logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.telegram_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")

# =================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ê–ù–ê–õ–û–í ===================

@event_handler(EventType.CHANNEL_VERIFIED, priority=9)
def handle_channel_verified(event: ChannelEvent):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞"""
    try:
        from app.telegram.telegram_notifications import TelegramNotificationService
        
        notification_service = TelegramNotificationService()
        
        message = f"""
‚úÖ <b>–ö–∞–Ω–∞–ª –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!</b>

üì¢ <b>–ö–∞–Ω–∞–ª:</b> {event.channel_title}
üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b> –í–∞—à –∫–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–µ–ª –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é.

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ —Ä–µ–∫–ª–∞–º—ã
‚Ä¢ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ü–µ–Ω—ã –∑–∞ –ø–æ—Å—Ç—ã
‚Ä¢ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Ä–∞–∑–º–µ—â–µ–Ω–∏—è—Ö

–°–ª–µ–¥–∏—Ç–µ –∑–∞ –≤—Ö–æ–¥—è—â–∏–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è".
        """
        
        notification_service.send_notification(
            user_id=event.user_id,
            message=message,
            notification_type='channel_verified'
        )
        
        logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞ {event.channel_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞: {e}")

# =================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–§–§–ï–†–û–í ===================

@event_handler(EventType.OFFER_CREATED, priority=9)
def handle_offer_created(event: OfferEvent):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ—Ñ—Ñ–µ—Ä–∞"""
    try:
        from app.models.database import execute_db_query
        from app.events.event_bus import event_bus
        from app.events.event_types import create_event
        
        # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–∞—Ç—á–∏–Ω–≥–∞
        matching_channels = execute_db_query("""
            SELECT c.id, c.title, c.owner_id, u.telegram_id
            FROM channels c
            JOIN users u ON c.owner_id = u.id
            WHERE c.is_verified = 1 
            AND c.is_active = 1
            AND c.category = ?
            AND c.price_per_post <= ?
            ORDER BY c.subscriber_count DESC
            LIMIT 10
        """, (
            event.data.get('category', 'other'),
            event.budget or 10000
        ))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞–º –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
        for channel in matching_channels:
            try:
                from app.telegram.telegram_notifications import TelegramNotificationService
                notification_service = TelegramNotificationService()
                
                message = f"""
üéØ <b>–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Ä–µ–∫–ª–∞–º–µ!</b>

üìã <b>–û—Ñ—Ñ–µ—Ä:</b> {event.offer_title}
üí∞ <b>–ë—é–¥–∂–µ—Ç:</b> {event.budget:.2f} —Ä—É–±.
üì¢ <b>–í–∞—à –∫–∞–Ω–∞–ª:</b> {channel['title']}

–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —ç—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –æ—Ç–∫–ª–∏–∫.
                """
                
                notification_service.send_notification(
                    user_id=channel['telegram_id'],
                    message=message,
                    notification_type='new_offer_match'
                )
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞–Ω–∞–ª–∞ {channel['id']}: {e}")
        
        logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞ {event.offer_id}, –Ω–∞–π–¥–µ–Ω–æ {len(matching_channels)} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞–Ω–∞–ª–æ–≤")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞: {e}")

# =================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–¢–ö–õ–ò–ö–û–í ===================

@event_handler(EventType.RESPONSE_CREATED, priority=9)
def handle_response_created(event: ResponseEvent):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –æ—Ñ—Ñ–µ—Ä"""
    try:
        from app.models.database import execute_db_query
        from app.telegram.telegram_notifications import TelegramNotificationService
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ñ—Ñ–µ—Ä–∞ –∏ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è
        offer_data = execute_db_query("""
            SELECT o.title, o.created_by, u.telegram_id, u.first_name
            FROM offers o
            JOIN users u ON o.created_by = u.id
            WHERE o.id = ?
        """, (event.offer_id,), fetch_one=True)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞
        channel_data = execute_db_query("""
            SELECT c.title, c.username
            FROM channels c
            WHERE c.id = ?
        """, (event.channel_id,), fetch_one=True)
        
        if offer_data and channel_data:
            notification_service = TelegramNotificationService()
            
            message = f"""
üì® <b>–ù–æ–≤—ã–π –æ—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞—à –æ—Ñ—Ñ–µ—Ä!</b>

üìã <b>–û—Ñ—Ñ–µ—Ä:</b> {offer_data['title']}
üì¢ <b>–ö–∞–Ω–∞–ª:</b> {channel_data['title']}
üí∞ <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞:</b> {event.proposed_price:.2f} —Ä—É–±.

üìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>
{event.data.get('response_message', '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤')}

–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.
            """
            
            notification_service.send_notification(
                user_id=offer_data['telegram_id'],
                message=message,
                notification_type='new_response'
            )
        
        logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω –æ—Ç–∫–ª–∏–∫ {event.response_id} –Ω–∞ –æ—Ñ—Ñ–µ—Ä {event.offer_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∫–ª–∏–∫–∞: {e}")

@event_handler(EventType.RESPONSE_ACCEPTED, priority=9)
def handle_response_accepted(event: ResponseEvent):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –æ—Ç–∫–ª–∏–∫–∞"""
    try:
        from app.models.database import execute_db_query
        from app.telegram.telegram_notifications import TelegramNotificationService
        from app.events.event_bus import event_bus
        from app.events.event_types import create_event
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        response_data = execute_db_query("""
            SELECT r.*, o.title as offer_title, c.title as channel_title,
                   ch_owner.telegram_id as channel_owner_telegram_id,
                   advertiser.telegram_id as advertiser_telegram_id
            FROM offer_responses r
            JOIN offers o ON r.offer_id = o.id
            JOIN channels c ON r.channel_id = c.id
            JOIN users ch_owner ON c.owner_id = ch_owner.id
            JOIN users advertiser ON o.created_by = advertiser.id
            WHERE r.id = ?
        """, (event.response_id,), fetch_one=True)
        
        if response_data:
            notification_service = TelegramNotificationService()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞–Ω–∞–ª–∞
            channel_message = f"""
üéâ <b>–í–∞—à –æ—Ç–∫–ª–∏–∫ –ø—Ä–∏–Ω—è—Ç!</b>

üìã <b>–û—Ñ—Ñ–µ—Ä:</b> {response_data['offer_title']}
üì¢ <b>–ö–∞–Ω–∞–ª:</b> {response_data['channel_title']}
üí∞ <b>–°—É–º–º–∞:</b> {event.proposed_price:.2f} —Ä—É–±.

–¢–µ–ø–µ—Ä—å –≤–∞–º –Ω—É–∂–Ω–æ:
1. –†–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ
2. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /post_published <—Å—Å—ã–ª–∫–∞_–Ω–∞_–ø–æ—Å—Ç>

–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã.
            """
            
            notification_service.send_notification(
                user_id=response_data['channel_owner_telegram_id'],
                message=channel_message,
                notification_type='response_accepted'
            )
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            placement_event = create_event(
                EventType.PLACEMENT_CREATED,
                user_id=event.user_id,
                data={
                    'response_id': event.response_id,
                    'offer_id': event.offer_id,
                    'channel_id': event.channel_id,
                    'amount': event.proposed_price
                }
            )
            event_bus.publish(placement_event)
        
        logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø—Ä–∏–Ω—è—Ç–∏–µ –æ—Ç–∫–ª–∏–∫–∞ {event.response_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–Ω—è—Ç–∏—è –æ—Ç–∫–ª–∏–∫–∞: {e}")

# =================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –†–ê–ó–ú–ï–©–ï–ù–ò–ô ===================

@event_handler(EventType.PLACEMENT_POST_PUBLISHED, priority=9)
def handle_post_published(event: PlacementEvent):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
    try:
        from app.models.database import execute_db_query
        from app.events.event_bus import event_bus
        from app.events.event_types import create_event
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ —ç—Å–∫—Ä–æ—É
        placement_data = execute_db_query("""
            SELECT p.*, r.proposed_price, r.offer_id, 
                   c.owner_id, o.created_by as advertiser_id
            FROM offer_placements p
            JOIN offer_responses r ON p.response_id = r.id
            JOIN channels c ON r.channel_id = c.id
            JOIN offers o ON r.offer_id = o.id
            WHERE p.id = ?
        """, (event.placement_id,), fetch_one=True)
        
        if placement_data:
            # –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ —ç—Å–∫—Ä–æ—É
            escrow_event = create_event(
                EventType.PAYMENT_CREATED,
                user_id=placement_data['advertiser_id'],
                data={
                    'placement_id': event.placement_id,
                    'amount': placement_data['proposed_price'],
                    'payment_type': 'escrow',
                    'recipient_id': placement_data['owner_id'],
                    'description': f'–≠—Å–∫—Ä–æ—É –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ'
                }
            )
            event_bus.publish(escrow_event)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            # (–∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Telegram Analytics API)
        
        logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è {event.placement_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {e}")

# =================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–õ–ê–¢–ï–ñ–ï–ô ===================

@event_handler(EventType.ESCROW_RELEASED, priority=9)
def handle_escrow_released(event: PaymentEvent):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –∏–∑ —ç—Å–∫—Ä–æ—É"""
    try:
        from app.telegram.telegram_notifications import TelegramNotificationService
        from app.models.database import execute_db_query
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–µ
        payment_data = execute_db_query("""
            SELECT p.*, u.telegram_id, u.first_name
            FROM payments p
            JOIN users u ON p.user_id = u.id
            WHERE p.id = ?
        """, (event.payment_id,), fetch_one=True)
        
        if payment_data:
            notification_service = TelegramNotificationService()
            
            message = f"""
üí∞ <b>–í—ã–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞!</b>

–°—É–º–º–∞: {event.amount:.2f} —Ä—É–±.
–°—Ç–∞—Ç—É—Å: –ó–∞–≤–µ—Ä—à–µ–Ω–æ ‚úÖ

–°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.
–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É —Å –Ω–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π!
            """
            
            notification_service.send_notification(
                user_id=payment_data['telegram_id'],
                message=message,
                notification_type='payment_received'
            )
        
        logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —ç—Å–∫—Ä–æ—É {event.payment_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —ç—Å–∫—Ä–æ—É: {e}")

# =================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ===================

@event_handler(EventType.SECURITY_SUSPICIOUS_ACTIVITY, priority=10)
def handle_suspicious_activity(event: SecurityEvent):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    try:
        from app.telegram.telegram_notifications import TelegramNotificationService
        from app.config.telegram_config import AppConfig
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        if event.risk_level in ['high', 'critical']:
            notification_service = TelegramNotificationService()
            
            admin_message = f"""
üö® <b>–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!</b>

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {event.user_id}
–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {event.risk_level}
–î–µ–π—Å—Ç–≤–∏–µ: {event.action}
IP: {event.ip_address}
–í—Ä–µ–º—è: {event.timestamp.strftime('%Y-%m-%d %H:%M:%S')}

–î–µ—Ç–∞–ª–∏: {event.data}
            """
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
            notification_service.send_notification(
                user_id=AppConfig.YOUR_TELEGRAM_ID,
                message=admin_message,
                notification_type='security_alert'
            )
        
        logger.warning(f"‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {event.action} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")

# =================== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===================

@global_event_handler(priority=1)
def global_analytics_handler(event: BaseEvent):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    try:
        # –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π
        from app.performance.monitoring import PerformanceMonitor
        
        monitor = PerformanceMonitor()
        monitor.record_event_metric(
            event_type=event.event_type.value,
            user_id=event.user_id,
            timestamp=event.timestamp
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {e}")

@global_event_handler(priority=0)
def global_debug_handler(event: BaseEvent):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (—Ç–æ–ª—å–∫–æ –≤ DEBUG —Ä–µ–∂–∏–º–µ)"""
    try:
        from app.config.telegram_config import AppConfig
        
        if AppConfig.DEBUG:
            logger.debug(f"üîç EVENT DEBUG: {event.event_type.value} | User: {event.user_id} | Data: {event.data}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º –æ—Ç–ª–∞–¥–æ—á–Ω–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {e}")