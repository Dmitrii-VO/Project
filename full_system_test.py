#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã: –æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞ –¥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
End-to-End —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
"""

import sys
import os
import json
import time
from datetime import datetime, timedelta

sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app.models.database import execute_db_query
from app.telegram.telegram_bot_commands import TelegramBotExtension

class FullSystemTester:
    def __init__(self):
        self.test_data = {}
        self.bot_extension = TelegramBotExtension()
        print("üß™ –ü–û–õ–ù–´–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –†–ê–ó–ú–ï–©–ï–ù–ò–Ø –†–ï–ö–õ–ê–ú–´")
        print("=" * 60)
        
    def step_1_create_advertiser(self):
        """–®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è"""
        print("\nüìù –®–ê–ì 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è")
        print("-" * 30)
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è
            advertiser_data = {
                'telegram_id': 999888777,
                'username': 'test_advertiser',
                'first_name': 'Test Advertiser',
                'last_name': 'User'
            }
            
            advertiser_id = execute_db_query("""
                INSERT OR REPLACE INTO users 
                (telegram_id, username, first_name, last_name, created_at, updated_at)
                VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
            """, (
                advertiser_data['telegram_id'],
                advertiser_data['username'], 
                advertiser_data['first_name'],
                advertiser_data['last_name']
            ))
            
            self.test_data['advertiser_id'] = advertiser_id
            self.test_data['advertiser_telegram_id'] = advertiser_data['telegram_id']
            
            print(f"‚úÖ –†–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ID={advertiser_id}, TG_ID={advertiser_data['telegram_id']}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è: {e}")
            return False
    
    def step_2_create_channel_owner(self):
        """–®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞–Ω–∞–ª–∞"""
        print("\nüì∫ –®–ê–ì 2: –°–æ–∑–¥–∞–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞–Ω–∞–ª–∞")
        print("-" * 30)
        
        try:
            # –°–æ–∑–¥–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞–Ω–∞–ª–∞
            owner_data = {
                'telegram_id': 888777666,
                'username': 'test_channel_owner',
                'first_name': 'Channel Owner',
                'last_name': 'Test'
            }
            
            owner_id = execute_db_query("""
                INSERT OR REPLACE INTO users 
                (telegram_id, username, first_name, last_name, created_at, updated_at)
                VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
            """, (
                owner_data['telegram_id'],
                owner_data['username'],
                owner_data['first_name'], 
                owner_data['last_name']
            ))
            
            self.test_data['owner_id'] = owner_id
            self.test_data['owner_telegram_id'] = owner_data['telegram_id']
            
            print(f"‚úÖ –í–ª–∞–¥–µ–ª–µ—Ü –∫–∞–Ω–∞–ª–∞ —Å–æ–∑–¥–∞–Ω: ID={owner_id}, TG_ID={owner_data['telegram_id']}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞–Ω–∞–ª–∞: {e}")
            return False
    
    def step_3_create_channel(self):
        """–®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞"""
        print("\nüì¢ –®–ê–ì 3: –°–æ–∑–¥–∞–Ω–∏–µ –∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞")
        print("-" * 30)
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª
            channel_data = {
                'title': '–¢–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª –¥–ª—è —Ä–µ–∫–ª–∞–º—ã',
                'username': 'test_ad_channel_demo',
                'description': '–ö–∞–Ω–∞–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã',
                'subscriber_count': 5000,
                'category': 'technology',
                'owner_id': self.test_data['owner_id']
            }
            
            channel_id = execute_db_query("""
                INSERT INTO channels 
                (title, username, description, subscriber_count, category, owner_id, 
                 is_verified, is_active, created_at, updated_at)
                VALUES (?, ?, ?, ?, ?, ?, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
            """, (
                channel_data['title'],
                channel_data['username'],
                channel_data['description'],
                channel_data['subscriber_count'],
                channel_data['category'],
                channel_data['owner_id']
            ))
            
            self.test_data['channel_id'] = channel_id
            self.test_data['channel_username'] = channel_data['username']
            
            print(f"‚úÖ –ö–∞–Ω–∞–ª —Å–æ–∑–¥–∞–Ω: ID={channel_id}, @{channel_data['username']}")
            print(f"   üìä –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {channel_data['subscriber_count']}")
            print(f"   ‚úÖ –°—Ç–∞—Ç—É—Å: –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∏ –∞–∫—Ç–∏–≤–µ–Ω")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {e}")
            return False
    
    def step_4_create_offer(self):
        """–®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞"""
        print("\nüéØ –®–ê–ì 4: –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞")
        print("-" * 30)
        
        try:
            offer_data = {
                'title': '–†–µ–∫–ª–∞–º–∞ –Ω–æ–≤–æ–≥–æ IT –ø—Ä–æ–¥—É–∫—Ç–∞',
                'description': '–ò—â–µ–º –∫–∞–Ω–∞–ª—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ IT —Ä–µ—à–µ–Ω–∏—è',
                'content': '–¢–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø–æ—Å–ª–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è',
                'budget_total': 10000,
                'price': 2000,
                'category': 'technology',
                'target_audience': 'IT —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã, —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏',
                'created_by': self.test_data['advertiser_id'],
                'status': 'active'
            }
            
            offer_id = execute_db_query("""
                INSERT INTO offers 
                (title, description, content, budget_total, price, category, 
                 target_audience, created_by, status, created_at, updated_at)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
            """, (
                offer_data['title'],
                offer_data['description'],
                offer_data['content'],
                offer_data['budget_total'],
                offer_data['price'],
                offer_data['category'],
                offer_data['target_audience'],
                offer_data['created_by'],
                offer_data['status']
            ))
            
            self.test_data['offer_id'] = offer_id
            
            print(f"‚úÖ –û—Ñ—Ñ–µ—Ä —Å–æ–∑–¥–∞–Ω: ID={offer_id}")
            print(f"   üìã –ù–∞–∑–≤–∞–Ω–∏–µ: {offer_data['title']}")
            print(f"   üí∞ –ë—é–¥–∂–µ—Ç: {offer_data['budget_total']} —Ä—É–±.")
            print(f"   üí≥ –¶–µ–Ω–∞ –∑–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ: {offer_data['price']} —Ä—É–±.")
            print(f"   üéØ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {offer_data['category']}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞: {e}")
            return False
    
    def step_5_create_response(self):
        """–®–∞–≥ 5: –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –æ—Ñ—Ñ–µ—Ä"""
        print("\nüì§ –®–ê–ì 5: –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∫–ª–∏–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞–Ω–∞–ª–∞")
        print("-" * 30)
        
        try:
            response_data = {
                'offer_id': self.test_data['offer_id'],
                'channel_id': self.test_data['channel_id'],
                'user_id': self.test_data['owner_id'],
                'message': '–ì–æ—Ç–æ–≤ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ä–µ–∫–ª–∞–º—É –≤ –º–æ–µ–º –∫–∞–Ω–∞–ª–µ. –£—Å–ª–æ–≤–∏—è —É—Å—Ç—Ä–∞–∏–≤–∞—é—Ç.',
                'channel_username': self.test_data['channel_username'],
                'channel_title': '–¢–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª –¥–ª—è —Ä–µ–∫–ª–∞–º—ã',
                'channel_subscribers': 5000,
                'status': 'pending'
            }
            
            response_id = execute_db_query("""
                INSERT INTO offer_responses 
                (offer_id, channel_id, user_id, message, channel_username, channel_title, 
                 channel_subscribers, status, created_at)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP)
            """, (
                response_data['offer_id'],
                response_data['channel_id'],
                response_data['user_id'],
                response_data['message'],
                response_data['channel_username'],
                response_data['channel_title'],
                response_data['channel_subscribers'],
                response_data['status']
            ))
            
            self.test_data['response_id'] = response_id
            
            print(f"‚úÖ –û—Ç–∫–ª–∏–∫ —Å–æ–∑–¥–∞–Ω: ID={response_id}")
            print(f"   üì∫ –ö–∞–Ω–∞–ª: @{self.test_data['channel_username']}")
            print(f"   üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {response_data['channel_subscribers']}")
            print(f"   üìã –°—Ç–∞—Ç—É—Å: {response_data['status']}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∫–ª–∏–∫–∞: {e}")
            return False
    
    def step_6_accept_response(self):
        """–®–∞–≥ 6: –ü—Ä–∏–Ω—è—Ç–∏–µ –æ—Ç–∫–ª–∏–∫–∞ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª–µ–º"""
        print("\n‚úÖ –®–ê–ì 6: –ü—Ä–∏–Ω—è—Ç–∏–µ –æ—Ç–∫–ª–∏–∫–∞ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª–µ–º")
        print("-" * 30)
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ accepted
            execute_db_query("""
                UPDATE offer_responses 
                SET status = 'accepted', updated_at = CURRENT_TIMESTAMP
                WHERE id = ?
            """, (self.test_data['response_id'],))
            
            print(f"‚úÖ –û—Ç–∫–ª–∏–∫ –ø—Ä–∏–Ω—è—Ç: ID={self.test_data['response_id']}")
            print(f"   üìù –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: accepted")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –æ—Ç–∫–ª–∏–∫–∞: {e}")
            return False
    
    def step_7_create_placement(self):
        """–®–∞–≥ 7: –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        print("\nüìç –®–ê–ì 7: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
        print("-" * 30)
        
        try:
            placement_data = {
                'response_id': self.test_data['response_id'],
                'proposal_id': self.test_data['response_id'],  # –í —Ç–µ–∫—É—â–µ–π —Å–∏—Å—Ç–µ–º–µ –æ–Ω–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç
                'status': 'pending_placement'
            }
            
            placement_id = execute_db_query("""
                INSERT INTO offer_placements 
                (response_id, proposal_id, status, created_at, updated_at)
                VALUES (?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
            """, (
                placement_data['response_id'],
                placement_data['proposal_id'],
                placement_data['status']
            ))
            
            self.test_data['placement_id'] = placement_id
            
            print(f"‚úÖ –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: ID={placement_id}")
            print(f"   üìù –°—Ç–∞—Ç—É—Å: {placement_data['status']}")
            print(f"   üîó Response ID: {placement_data['response_id']}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {e}")
            return False
    
    def step_8_test_bot_commands(self):
        """–®–∞–≥ 8: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
        print("\nü§ñ –®–ê–ì 8: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ Telegram –±–æ—Ç–∞")
        print("-" * 30)
        
        try:
            owner_telegram_id = self.test_data['owner_telegram_id']
            
            # –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /my_channels
            print("üì¢ –¢–µ—Å—Ç–∏—Ä—É–µ–º /my_channels...")
            channels_result = self.bot_extension.handle_my_channels(owner_telegram_id)
            if "–í–∞—à–∏ –∫–∞–Ω–∞–ª—ã" in channels_result['text']:
                print("   ‚úÖ /my_channels —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                print("   ‚ùå /my_channels: –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∫–∞–Ω–∞–ª–æ–≤")
            
            # –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /my_proposals  
            print("üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º /my_proposals...")
            proposals_result = self.bot_extension.handle_my_proposals(owner_telegram_id)
            if "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è" in proposals_result['text'].lower():
                print("   ‚úÖ /my_proposals —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                print("   ‚ùå /my_proposals: –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
            
            # –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /post_published (–¥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è)
            print("üì§ –¢–µ—Å—Ç–∏—Ä—É–µ–º /post_published (–¥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è)...")
            post_result = self.bot_extension.handle_post_published(owner_telegram_id)
            if "–†–∞–∑–º–µ—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ" in post_result['text']:
                print("   ‚úÖ /post_published: –Ω–∞–π–¥–µ–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!")
                self.test_data['post_confirmed'] = True
            else:
                print("   ‚ÑπÔ∏è /post_published: –Ω–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏–π –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–æ–∂–∏–¥–∞–µ–º–æ)")
                self.test_data['post_confirmed'] = False
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞: {e}")
            return False
    
    def step_9_confirm_placement(self):
        """–®–∞–≥ 9: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        print("\nüì§ –®–ê–ì 9: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–∞–Ω–∞–ª–∞")
        print("-" * 30)
        
        try:
            owner_telegram_id = self.test_data['owner_telegram_id']
            test_post_url = f"https://t.me/{self.test_data['channel_username']}/123"
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /post_published —Å —Å—Å—ã–ª–∫–æ–π
            print(f"üîó –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π: {test_post_url}")
            
            result = self.bot_extension.handle_post_published_with_link(
                owner_telegram_id, [test_post_url]
            )
            
            if "–†–∞–∑–º–µ—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ" in result['text']:
                print("   ‚úÖ –†–∞–∑–º–µ—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!")
                print("   üì§ –†–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω")
                print("   üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ë–î
                updated_placement = execute_db_query("""
                    SELECT status, post_url, placement_start 
                    FROM offer_placements 
                    WHERE id = ?
                """, (self.test_data['placement_id'],), fetch_one=True)
                
                if updated_placement:
                    print(f"   üìù –°—Ç–∞—Ç—É—Å –≤ –ë–î: {updated_placement['status']}")
                    print(f"   üîó URL –ø–æ—Å—Ç–∞: {updated_placement['post_url']}")
                    print(f"   ‚è∞ –í—Ä–µ–º—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {updated_placement['placement_start']}")
                
                return True
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {result['text'][:100]}...")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {e}")
            return False
    
    def step_10_verify_final_state(self):
        """–®–∞–≥ 10: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        print("\nüîç –®–ê–ì 10: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã")
        print("-" * 30)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –≤ –ë–î
            placement_status = execute_db_query("""
                SELECT p.status, p.post_url, p.placement_start,
                       r.status as response_status, o.status as offer_status
                FROM offer_placements p
                JOIN offer_responses r ON p.response_id = r.id  
                JOIN offers o ON r.offer_id = o.id
                WHERE p.id = ?
            """, (self.test_data['placement_id'],), fetch_one=True)
            
            if placement_status:
                print("üìä –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
                print(f"   üéØ –û—Ñ—Ñ–µ—Ä: {placement_status['offer_status']}")
                print(f"   üì§ –û—Ç–∫–ª–∏–∫: {placement_status['response_status']}")
                print(f"   üìç –†–∞–∑–º–µ—â–µ–Ω–∏–µ: {placement_status['status']}")
                print(f"   üîó URL –ø–æ—Å—Ç–∞: {placement_status['post_url'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}")
                print(f"   ‚è∞ –í—Ä–µ–º—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {placement_status['placement_start'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ
                if (placement_status['offer_status'] in ['active', 'started', 'in_progress'] and
                    placement_status['response_status'] == 'accepted' and 
                    placement_status['status'] == 'active'):
                    print("\nüéâ –£–°–ü–ï–•! –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
                    return True
                else:
                    print("\n‚ö†Ô∏è –ï—Å—Ç—å –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤ —Å—Ç–∞—Ç—É—Å–∞—Ö")
                    return False
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            return False
    
    def cleanup_test_data(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        print("\nüßπ –û–ß–ò–°–¢–ö–ê: –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        print("-" * 30)
        
        try:
            # –£–¥–∞–ª—è–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—É—á–∏—Ç—ã–≤–∞—è foreign keys)
            if 'placement_id' in self.test_data:
                execute_db_query("DELETE FROM offer_placements WHERE id = ?", 
                                (self.test_data['placement_id'],))
                print("   ‚úÖ –†–∞–∑–º–µ—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")
            
            if 'response_id' in self.test_data:
                execute_db_query("DELETE FROM offer_responses WHERE id = ?", 
                                (self.test_data['response_id'],))
                print("   ‚úÖ –û—Ç–∫–ª–∏–∫ —É–¥–∞–ª–µ–Ω")
            
            if 'offer_id' in self.test_data:
                execute_db_query("DELETE FROM offers WHERE id = ?", 
                                (self.test_data['offer_id'],))
                print("   ‚úÖ –û—Ñ—Ñ–µ—Ä —É–¥–∞–ª–µ–Ω")
            
            if 'channel_id' in self.test_data:
                execute_db_query("DELETE FROM channels WHERE id = ?", 
                                (self.test_data['channel_id'],))
                print("   ‚úÖ –ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω")
            
            if 'advertiser_id' in self.test_data:
                execute_db_query("DELETE FROM users WHERE id = ?", 
                                (self.test_data['advertiser_id'],))
                print("   ‚úÖ –†–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω")
            
            if 'owner_id' in self.test_data:
                execute_db_query("DELETE FROM users WHERE id = ?", 
                                (self.test_data['owner_id'],))
                print("   ‚úÖ –í–ª–∞–¥–µ–ª–µ—Ü –∫–∞–Ω–∞–ª–∞ —É–¥–∞–ª–µ–Ω")
            
            print("üßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
    
    def run_full_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        start_time = datetime.now()
        success_steps = 0
        total_steps = 10
        
        steps = [
            self.step_1_create_advertiser,
            self.step_2_create_channel_owner, 
            self.step_3_create_channel,
            self.step_4_create_offer,
            self.step_5_create_response,
            self.step_6_accept_response,
            self.step_7_create_placement,
            self.step_8_test_bot_commands,
            self.step_9_confirm_placement,
            self.step_10_verify_final_state
        ]
        
        for step in steps:
            if step():
                success_steps += 1
            else:
                print(f"\n‚ùå –¢–ï–°–¢ –û–°–¢–ê–ù–û–í–õ–ï–ù –ù–ê –®–ê–ì–ï: {step.__name__}")
                break
            
            time.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —à–∞–≥–∞–º–∏
        
        end_time = datetime.now()
        duration = end_time - start_time
        
        print("\n" + "=" * 60)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 60)
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration.total_seconds():.2f} —Å–µ–∫—É–Ω–¥")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —à–∞–≥–æ–≤: {success_steps}/{total_steps}")
        print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(success_steps/total_steps)*100:.1f}%")
        
        if success_steps == total_steps:
            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            print("üöÄ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        else:
            print(f"\n‚ö†Ô∏è  –¢–µ—Å—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é")
            print(f"üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —à–∞–≥–µ {success_steps + 1}")
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—á–∏—Å—Ç–∫—É  
        print("\nüßπ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        print("üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        print("üîç –°–æ–∑–¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã:")
        for key, value in self.test_data.items():
            print(f"   {key}: {value}")
        print("\n‚ö†Ô∏è  –î–ª—è –æ—á–∏—Å—Ç–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ cleanup_test_data() –≤—Ä—É—á–Ω—É—é")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = FullSystemTester()
    tester.run_full_test()

if __name__ == "__main__":
    main()