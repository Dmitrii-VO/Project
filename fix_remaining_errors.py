#!/usr/bin/env python3
"""
fix_remaining_errors.py - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –æ—à–∏–±–æ–∫
1. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è schedule –≤ requirements.txt
2. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π config_available
"""

import os
import shutil
from datetime import datetime

def create_backup(file_path):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_path = f"{file_path}.backup_{timestamp}"
    shutil.copy2(file_path, backup_path)
    print(f"üì¶ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
    return backup_path

def fix_requirements():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è schedule –≤ requirements.txt"""
    print("üìù –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ requirements.txt...")
    
    file_path = "requirements.txt"
    if not os.path.exists(file_path):
        print(f"‚ùå {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    create_backup(file_path)
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ schedule
        if 'schedule==' not in content and 'schedule' not in content:
            print("‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥—É–ª—å schedule...")
            content += "\n# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã–ø–ª–∞—Ç\nschedule==1.2.0\n"
            
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            
            print("‚úÖ –ú–æ–¥—É–ª—å schedule –¥–æ–±–∞–≤–ª–µ–Ω –≤ requirements.txt")
            return True
        else:
            print("‚ÑπÔ∏è –ú–æ–¥—É–ª—å schedule —É–∂–µ –µ—Å—Ç—å –≤ requirements.txt")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def fix_config_available():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π config_available –≤ working_app.py"""
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ config_available...")
    
    file_path = "working_app.py"
    if not os.path.exists(file_path):
        print(f"‚ùå {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    create_backup(file_path)
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ò—â–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å config_available
        if "name 'config_available' is not defined" in content or 'config_available' in content:
            print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º config_available...")
            
            # –ò—â–µ–º –±–ª–æ–∫ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
            patterns_to_fix = [
                # –°–ª—É—á–∞–π 1: –∏–º–ø–æ—Ä—Ç –±–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
                (
                    r'try:\s*\n\s*from app\.config\.settings import Config\s*\n',
                    '''try:
    from app.config.settings import Config
    config_available = True
'''
                ),
                # –°–ª—É—á–∞–π 2: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ config_available –±–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
                (
                    r'if config_available and Config\.BOT_TOKEN:',
                    '''# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
try:
    config_available = True if 'Config' in locals() or 'Config' in globals() else False
except:
    config_available = False

if config_available and hasattr(Config, 'BOT_TOKEN') and Config.BOT_TOKEN:'''
                )
            ]
            
            for pattern, replacement in patterns_to_fix:
                import re
                new_content = re.sub(pattern, replacement, content, flags=re.MULTILINE)
                if new_content != content:
                    content = new_content
                    print(f"‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
                    break
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ - –¥–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–æ –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            if 'config_available = ' not in content:
                # –ò—â–µ–º –º–µ—Å—Ç–æ –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞ Config
                config_import_pos = content.find('from app.config.settings import Config')
                if config_import_pos != -1:
                    # –ù–∞–π–¥–µ–º –∫–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏
                    end_line = content.find('\n', config_import_pos)
                    if end_line != -1:
                        # –í—Å—Ç–∞–≤–ª—è–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
                        insert_text = '\n    config_available = True'
                        content = content[:end_line] + insert_text + content[end_line:]
                        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ config_available")
            
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ - –¥–æ–±–∞–≤–ª—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
            safe_check = '''
# –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
try:
    config_available = 'Config' in locals() or 'Config' in globals()
    if config_available:
        config_available = hasattr(Config, 'BOT_TOKEN')
except:
    config_available = False
'''
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º config_available
            if 'config_available and Config.BOT_TOKEN' in content:
                pos = content.find('config_available and Config.BOT_TOKEN')
                content = content[:pos] + safe_check + '\n' + content[pos:]
                print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ config_available")
            
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def install_schedule():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥—É–ª—è schedule"""
    print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥—É–ª—è schedule...")
    
    try:
        import subprocess
        result = subprocess.run(['pip', 'install', 'schedule==1.2.0'], 
                              capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ –ú–æ–¥—É–ª—å schedule —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–°–¢–ê–í–®–ò–•–°–Ø –û–®–ò–ë–û–ö")
    print("=" * 50)
    
    success_count = 0
    
    # 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º requirements.txt
    print("\n1Ô∏è‚É£ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ requirements.txt")
    if fix_requirements():
        success_count += 1
        print("‚úÖ requirements.txt –∏—Å–ø—Ä–∞–≤–ª–µ–Ω")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å requirements.txt")
    
    # 2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º schedule
    print("\n2Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥—É–ª—è schedule")
    if install_schedule():
        success_count += 1
        print("‚úÖ –ú–æ–¥—É–ª—å schedule —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å schedule")
        print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—Ä—É—á–Ω—É—é: pip install schedule==1.2.0")
    
    # 3. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º config_available
    print("\n3Ô∏è‚É£ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ config_available")
    if fix_config_available():
        success_count += 1
        print("‚úÖ config_available –∏—Å–ø—Ä–∞–≤–ª–µ–Ω")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å config_available")
    
    print("\n" + "=" * 50)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢: {success_count}/3 –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø—Ä–∏–º–µ–Ω–µ–Ω–æ")
    print("=" * 50)
    
    if success_count >= 2:
        print("üéâ –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        print("\nüöÄ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:")
        print("   python working_app.py")
        print("\nüí° –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –æ—à–∏–±–∫–∏:")
        print("   - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Ä–º–∏–Ω–∞–ª")
        print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        return True
    else:
        print("‚ö†Ô∏è –ù–µ –≤—Å–µ –æ—à–∏–±–∫–∏ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å")
        print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä—É—á–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        return False

if __name__ == '__main__':
    success = main()
    print("\n" + "="*50)
    if success:
        print("‚ú® –ì–æ—Ç–æ–≤–æ! –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.")
    else:
        print("üí≠ –ù—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
