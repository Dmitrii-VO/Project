# Docker Compose для Staging окружения
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: telegram_postgres_staging
    environment:
      POSTGRES_DB: telegram_mini_app_staging
      POSTGRES_USER: telegram_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_staging_data:/var/lib/postgresql/data
      - ./database/migrations:/docker-entrypoint-initdb.d
    networks:
      - telegram_network
    restart: unless-stopped

  # Redis
  redis:
    image: redis:7-alpine
    container_name: telegram_redis_staging
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_staging_data:/data
    networks:
      - telegram_network
    restart: unless-stopped

  # Main Application
  main_app:
    image: ${IMAGE_TAG:-ghcr.io/your-username/telegram-mini-app:develop}
    container_name: telegram_main_app_staging
    environment:
      - FLASK_ENV=staging
      - DATABASE_URL=postgresql://telegram_user:${POSTGRES_PASSWORD}@postgres:5432/telegram_mini_app_staging
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - BOT_TOKEN=${BOT_TOKEN}
      - SECRET_KEY=${SECRET_KEY}
      - WEBAPP_URL=${WEBAPP_URL:-https://staging.telegram-mini-app.com}
    depends_on:
      - postgres
      - redis
    networks:
      - telegram_network
    restart: unless-stopped
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Nginx
  nginx:
    image: nginx:alpine
    container_name: telegram_nginx_staging
    volumes:
      - ./nginx/nginx.staging.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
    ports:
      - "80:80"
    depends_on:
      - main_app
    networks:
      - telegram_network
    restart: unless-stopped

networks:
  telegram_network:
    driver: bridge

volumes:
  postgres_staging_data:
  redis_staging_data: