#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã offers - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–æ–ª–µ–π
"""

import sqlite3
import os
from datetime import datetime

DATABASE_PATH = 'telegram_mini_app.db'

def get_current_table_structure():
    """–ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã offers"""
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    
    try:
        cursor.execute("PRAGMA table_info(offers)")
        columns = cursor.fetchall()
        print("üîç –¢–ï–ö–£–©–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –¢–ê–ë–õ–ò–¶–´ 'offers':")
        print("-" * 60)
        for col in columns:
            print(f"  {col[1]} ({col[2]}) - NOT NULL: {bool(col[3])}, DEFAULT: {col[4]}")
        print("-" * 60)
        return [col[1] for col in columns]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω –ø–æ–ª–µ–π
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")
        return []
    finally:
        conn.close()

def add_missing_columns():
    """–î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É offers"""
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    
    # –°–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å
    new_columns = [
        ("category", "TEXT DEFAULT 'general'"),
        ("metadata", "TEXT DEFAULT '{}'"),
        ("budget_total", "DECIMAL(12, 2) DEFAULT 0"),
        ("expires_at", "DATETIME"),
        ("duration_days", "INTEGER DEFAULT 30"),
        ("min_subscribers", "INTEGER DEFAULT 1"),
        ("max_subscribers", "INTEGER DEFAULT 100000000")
    ]
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è
        existing_columns = get_current_table_structure()
        
        print("\nüîß –î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–ï–î–û–°–¢–ê–Æ–©–ò–• –ü–û–õ–ï–ô:")
        print("-" * 60)
        
        for column_name, column_definition in new_columns:
            if column_name not in existing_columns:
                try:
                    sql = f"ALTER TABLE offers ADD COLUMN {column_name} {column_definition}"
                    print(f"  ‚ûï –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ: {column_name}")
                    cursor.execute(sql)
                    print(f"     ‚úÖ {sql}")
                except Exception as e:
                    print(f"     ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è {column_name}: {e}")
            else:
                print(f"  ‚è≠Ô∏è –ü–æ–ª–µ {column_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        conn.commit()
        print("\n‚úÖ –í—Å–µ –ø–æ–ª—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π: {e}")
        conn.rollback()
    finally:
        conn.close()

def verify_table_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã"""
    print("\nüîç –ò–¢–û–ì–û–í–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –¢–ê–ë–õ–ò–¶–´ 'offers':")
    print("=" * 70)
    
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    
    try:
        cursor.execute("PRAGMA table_info(offers)")
        columns = cursor.fetchall()
        
        print(f"{'#':<3} {'–ü–æ–ª–µ':<20} {'–¢–∏–ø':<20} {'NOT NULL':<10} {'DEFAULT':<15}")
        print("-" * 70)
        
        for i, col in enumerate(columns):
            not_null = "YES" if col[3] else "NO"
            default = str(col[4]) if col[4] is not None else ""
            print(f"{i:<3} {col[1]:<20} {col[2]:<20} {not_null:<10} {default:<15}")
        
        print("-" * 70)
        print(f"–í—Å–µ–≥–æ –ø–æ–ª–µ–π: {len(columns)}")
        
        return len(columns)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")
        return 0
    finally:
        conn.close()

def test_insert_offer():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞ —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏"""
    print("\nüß™ –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø –û–§–§–ï–†–ê:")
    print("-" * 40)
    
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("SELECT id FROM users LIMIT 1")
        user_result = cursor.fetchone()
        
        if not user_result:
            print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
        
        user_id = user_result[0]
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ñ—Ñ–µ—Ä–∞
        test_offer = {
            'title': '–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ñ—Ñ–µ—Ä',
            'description': '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ñ—Ñ–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã',
            'content': '–ü–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ñ—Ñ–µ—Ä–∞ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º',
            'price': 1000.00,
            'currency': 'RUB',
            'category': 'test',
            'target_audience': '–¢–µ—Å—Ç–æ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è',
            'requirements': '–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—é',
            'deadline': '2025-07-25',
            'status': 'active',
            'created_by': user_id,
            'metadata': '{"test": true}',
            'duration_days': 30,
            'min_subscribers': 100,
            'max_subscribers': 10000
        }
        
        # SQL –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
        sql = '''
        INSERT INTO offers (
            title, description, content, price, currency, category,
            target_audience, requirements, deadline, status, created_by,
            metadata, duration_days, min_subscribers, max_subscribers
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        '''
        
        values = (
            test_offer['title'], test_offer['description'], test_offer['content'],
            test_offer['price'], test_offer['currency'], test_offer['category'],
            test_offer['target_audience'], test_offer['requirements'],
            test_offer['deadline'], test_offer['status'], test_offer['created_by'],
            test_offer['metadata'], test_offer['duration_days'],
            test_offer['min_subscribers'], test_offer['max_subscribers']
        )
        
        cursor.execute(sql, values)
        offer_id = cursor.lastrowid
        conn.commit()
        
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ñ—Ñ–µ—Ä —Å–æ–∑–¥–∞–Ω —Å ID: {offer_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –æ—Ñ—Ñ–µ—Ä
        cursor.execute("SELECT * FROM offers WHERE id = ?", (offer_id,))
        created_offer = cursor.fetchone()
        
        if created_offer:
            print("üìã –î–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –æ—Ñ—Ñ–µ—Ä–∞:")
            cursor.execute("PRAGMA table_info(offers)")
            columns = [col[1] for col in cursor.fetchall()]
            
            for i, value in enumerate(created_offer):
                if i < len(columns):
                    print(f"   {columns[i]}: {value}")
            
            return True
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –æ—Ñ—Ñ–µ—Ä")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        conn.rollback()
        return False
    finally:
        conn.close()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –¢–ê–ë–õ–ò–¶–´ OFFERS")
    print("=" * 50)
    print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {DATABASE_PATH}")
    
    if not os.path.exists(DATABASE_PATH):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {DATABASE_PATH}")
        return
    
    # –®–∞–≥ 1: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    current_columns = get_current_table_structure()
    
    if not current_columns:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã")
        return
    
    # –®–∞–≥ 2: –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
    add_missing_columns()
    
    # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    final_count = verify_table_structure()
    
    # –®–∞–≥ 4: –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞
    if final_count > len(current_columns):
        print(f"\n‚úÖ –£–°–ü–ï–®–ù–û! –î–æ–±–∞–≤–ª–µ–Ω–æ {final_count - len(current_columns)} –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º
        if test_insert_offer():
            print("\nüéâ –í–°–ï –ì–û–¢–û–í–û! –¢–∞–±–ª–∏—Ü–∞ offers –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞")
        else:
            print("\n‚ö†Ô∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞, –Ω–æ —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª")
    else:
        print("\n‚ö†Ô∏è –ù–æ–≤—ã–µ –ø–æ–ª—è –Ω–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã")

if __name__ == '__main__':
    main()