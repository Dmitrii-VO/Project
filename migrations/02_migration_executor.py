#!/usr/bin/env python3
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–∞–∑–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã –∏–ª–∏ —Ç–æ–ª—å–∫–æ –º–∏–≥—Ä–∞—Ü–∏—é
"""

import os
import sqlite3
import sys
import shutil
from datetime import datetime
from typing import Dict, List, Optional, Tuple
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s | %(levelname)-8s | %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__)

class UniversalDatabaseSetup:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î"""
    
    def __init__(self, db_path: str = 'telegram_mini_app.db'):
        self.db_path = db_path
        self.backup_path = f"{db_path}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        self.setup_version = "1.0_universal_setup"
        
        # –°–ø–∏—Å–æ–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
        self.core_tables = ['users', 'channels', 'offers', 'payments', 'channel_offers']
        
        # –°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ—Ñ—Ñ–µ—Ä–æ–≤
        self.new_tables = ['offer_proposals', 'offer_placements', 'placement_checks', 'offer_statistics']
        
    def create_backup(self) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if os.path.exists(self.db_path):
                shutil.copy2(self.db_path, self.backup_path)
                logger.info(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {self.backup_path}")
                return True
            else:
                logger.info(f"üìÑ –§–∞–π–ª –ë–î –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π: {self.db_path}")
                return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
            return False
    
    def analyze_database_state(self) -> Dict[str, any]:
        """–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if not os.path.exists(self.db_path):
                return {
                    'database_exists': False,
                    'core_tables_exist': False,
                    'new_tables_exist': False,
                    'missing_core_tables': self.core_tables,
                    'missing_new_tables': self.new_tables,
                    'action_needed': 'full_setup'
                }
            
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
            existing_tables = [row[0] for row in cursor.fetchall()]
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã –µ—Å—Ç—å/–Ω–µ—Ç
            missing_core_tables = [table for table in self.core_tables if table not in existing_tables]
            missing_new_tables = [table for table in self.new_tables if table not in existing_tables]
            existing_core_tables = [table for table in self.core_tables if table in existing_tables]
            existing_new_tables = [table for table in self.new_tables if table in existing_tables]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü
            tables_need_migration = []
            if 'offers' in existing_tables:
                cursor.execute("PRAGMA table_info(offers)")
                offers_columns = [col[1] for col in cursor.fetchall()]
                new_offers_fields = ['status', 'is_marked', 'selected_channels_count', 'expected_placement_duration']
                if not all(field in offers_columns for field in new_offers_fields):
                    tables_need_migration.append('offers')
            
            if 'channels' in existing_tables:
                cursor.execute("PRAGMA table_info(channels)")
                channels_columns = [col[1] for col in cursor.fetchall()]
                new_channels_fields = ['last_parsed_at', 'parsing_enabled', 'telegram_channel_link']
                if not all(field in channels_columns for field in new_channels_fields):
                    tables_need_migration.append('channels')
            
            conn.close()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
            if missing_core_tables:
                action_needed = 'create_core_tables_and_migrate'
            elif missing_new_tables or tables_need_migration:
                action_needed = 'migrate_only'
            else:
                action_needed = 'no_action'
            
            result = {
                'database_exists': True,
                'core_tables_exist': len(missing_core_tables) == 0,
                'new_tables_exist': len(missing_new_tables) == 0,
                'existing_tables': existing_tables,
                'missing_core_tables': missing_core_tables,
                'missing_new_tables': missing_new_tables,
                'existing_core_tables': existing_core_tables,
                'existing_new_tables': existing_new_tables,
                'tables_need_migration': tables_need_migration,
                'action_needed': action_needed
            }
            
            logger.info(f"üìä –ê–Ω–∞–ª–∏–∑ –ë–î: {len(existing_tables)} —Ç–∞–±–ª–∏—Ü –Ω–∞–π–¥–µ–Ω–æ")
            logger.info(f"üìä –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã: {len(existing_core_tables)}/{len(self.core_tables)}")
            logger.info(f"üìä –ù–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã: {len(existing_new_tables)}/{len(self.new_tables)}")
            logger.info(f"üéØ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action_needed}")
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ë–î: {e}")
            return {'error': str(e)}
    
    def get_core_tables_sql(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü"""
        return """
        -- ================================================================
        -- –°–û–ó–î–ê–ù–ò–ï –û–°–ù–û–í–ù–´–• –¢–ê–ë–õ–ò–¶
        -- ================================================================
        
        -- –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            telegram_id INTEGER UNIQUE NOT NULL,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            is_admin BOOLEAN DEFAULT 0,
            is_active BOOLEAN DEFAULT 1,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
        );
        
        -- –¢–∞–±–ª–∏—Ü–∞ –∫–∞–Ω–∞–ª–æ–≤
        CREATE TABLE IF NOT EXISTS channels (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            telegram_id INTEGER,
            title TEXT NOT NULL,
            username TEXT,
            description TEXT,
            subscriber_count INTEGER DEFAULT 0,
            category TEXT DEFAULT 'other',
            language TEXT DEFAULT 'ru',
            is_verified BOOLEAN DEFAULT 0,
            is_active BOOLEAN DEFAULT 1,
            owner_id INTEGER NOT NULL,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            verification_code TEXT,
            status TEXT DEFAULT 'pending',
            verified_at DATETIME,
            FOREIGN KEY (owner_id) REFERENCES users(id)
        );
        
        -- –¢–∞–±–ª–∏—Ü–∞ –æ—Ñ—Ñ–µ—Ä–æ–≤
        CREATE TABLE IF NOT EXISTS offers (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            main_offer_id INTEGER,
            title TEXT NOT NULL,
            description TEXT,
            content TEXT,
            budget DECIMAL(12, 2),
            target_audience TEXT,
            placement_requirements TEXT,
            contact_info TEXT,
            created_by INTEGER NOT NULL,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            expires_at DATETIME,
            is_active BOOLEAN DEFAULT 1,
            category TEXT,
            subcategory TEXT,
            is_premium BOOLEAN DEFAULT 0,
            priority_score INTEGER DEFAULT 0,
            tags TEXT,
            media_files TEXT,
            placement_duration INTEGER,
            min_subscriber_count INTEGER,
            max_budget_per_post DECIMAL(12, 2),
            FOREIGN KEY (created_by) REFERENCES users(id)
        );
        
        -- –¢–∞–±–ª–∏—Ü–∞ –ø–ª–∞—Ç–µ–∂–µ–π
        CREATE TABLE IF NOT EXISTS payments (
            id TEXT PRIMARY KEY,
            placement_id TEXT NOT NULL,
            amount DECIMAL(12, 2) NOT NULL,
            status TEXT DEFAULT 'pending',
            publisher_id INTEGER NOT NULL,
            advertiser_id INTEGER NOT NULL,
            payment_method TEXT DEFAULT 'internal',
            transaction_id TEXT DEFAULT '',
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            processed_at DATETIME,
            completed_at DATETIME,
            FOREIGN KEY (publisher_id) REFERENCES users(id),
            FOREIGN KEY (advertiser_id) REFERENCES users(id)
        );
        
        -- –¢–∞–±–ª–∏—Ü–∞ —Å–≤—è–∑–∏ –∫–∞–Ω–∞–ª–æ–≤ –∏ –æ—Ñ—Ñ–µ—Ä–æ–≤
        CREATE TABLE IF NOT EXISTS channel_offers (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            main_offer_id INTEGER NOT NULL,
            channel_id INTEGER NOT NULL,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (main_offer_id) REFERENCES offers(id),
            FOREIGN KEY (channel_id) REFERENCES channels(id)
        );
        
        -- ================================================================
        -- –°–û–ó–î–ê–ù–ò–ï –û–°–ù–û–í–ù–´–• –ò–ù–î–ï–ö–°–û–í
        -- ================================================================
        
        -- –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è users
        CREATE INDEX IF NOT EXISTS idx_users_telegram_id ON users(telegram_id);
        CREATE INDEX IF NOT EXISTS idx_users_username ON users(username);
        CREATE INDEX IF NOT EXISTS idx_users_is_active ON users(is_active);
        
        -- –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è channels
        CREATE INDEX IF NOT EXISTS idx_channels_owner_id ON channels(owner_id);
        CREATE INDEX IF NOT EXISTS idx_channels_telegram_id ON channels(telegram_id);
        CREATE INDEX IF NOT EXISTS idx_channels_username ON channels(username);
        CREATE INDEX IF NOT EXISTS idx_channels_is_verified ON channels(is_verified);
        CREATE INDEX IF NOT EXISTS idx_channels_is_active ON channels(is_active);
        CREATE INDEX IF NOT EXISTS idx_channels_category ON channels(category);
        CREATE INDEX IF NOT EXISTS idx_channels_status ON channels(status);
        
        -- –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è offers
        CREATE INDEX IF NOT EXISTS idx_offers_created_by ON offers(created_by);
        CREATE INDEX IF NOT EXISTS idx_offers_is_active ON offers(is_active);
        CREATE INDEX IF NOT EXISTS idx_offers_category ON offers(category);
        CREATE INDEX IF NOT EXISTS idx_offers_created_at ON offers(created_at);
        CREATE INDEX IF NOT EXISTS idx_offers_expires_at ON offers(expires_at);
        
        -- –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è payments
        CREATE INDEX IF NOT EXISTS idx_payments_placement_id ON payments(placement_id);
        CREATE INDEX IF NOT EXISTS idx_payments_publisher_id ON payments(publisher_id);
        CREATE INDEX IF NOT EXISTS idx_payments_advertiser_id ON payments(advertiser_id);
        CREATE INDEX IF NOT EXISTS idx_payments_status ON payments(status);
        
        -- –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è channel_offers
        CREATE INDEX IF NOT EXISTS idx_channel_offers_main_offer_id ON channel_offers(main_offer_id);
        CREATE INDEX IF NOT EXISTS idx_channel_offers_channel_id ON channel_offers(channel_id);
        """
    
    def get_migration_sql(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ SQL –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ (–Ω–æ–≤—ã–µ –ø–æ–ª—è –∏ —Ç–∞–±–ª–∏—Ü—ã)"""
        return """
        -- ================================================================
        -- –ú–ò–ì–†–ê–¶–ò–Ø: –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ñ—Ñ–µ—Ä–æ–≤
        -- ================================================================
        
        -- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π –≤ offers
        ALTER TABLE offers ADD COLUMN status TEXT DEFAULT 'draft';
        ALTER TABLE offers ADD COLUMN is_marked BOOLEAN DEFAULT 0;
        ALTER TABLE offers ADD COLUMN selected_channels_count INTEGER DEFAULT 0;
        ALTER TABLE offers ADD COLUMN expected_placement_duration INTEGER DEFAULT 7;
        
        -- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π –≤ channels
        ALTER TABLE channels ADD COLUMN last_parsed_at DATETIME DEFAULT NULL;
        ALTER TABLE channels ADD COLUMN parsing_enabled BOOLEAN DEFAULT 1;
        ALTER TABLE channels ADD COLUMN telegram_channel_link TEXT DEFAULT NULL;
        
        -- –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤–ª–∞–¥–µ–ª—å—Ü–∞–º –∫–∞–Ω–∞–ª–æ–≤
        CREATE TABLE IF NOT EXISTS offer_proposals (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            offer_id INTEGER NOT NULL,
            channel_id INTEGER NOT NULL,
            status TEXT DEFAULT 'sent',
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            responded_at DATETIME DEFAULT NULL,
            rejection_reason TEXT DEFAULT NULL,
            expires_at DATETIME DEFAULT NULL,
            notified_at DATETIME DEFAULT NULL,
            reminder_sent_at DATETIME DEFAULT NULL,
            FOREIGN KEY (offer_id) REFERENCES offers(id) ON DELETE CASCADE,
            FOREIGN KEY (channel_id) REFERENCES channels(id) ON DELETE CASCADE,
            UNIQUE(offer_id, channel_id)
        );
        
        -- –¢–∞–±–ª–∏—Ü–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–π –ø–æ—Å—Ç–æ–≤
        CREATE TABLE IF NOT EXISTS offer_placements (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            proposal_id INTEGER NOT NULL,
            post_url TEXT DEFAULT NULL,
            placement_start DATETIME DEFAULT NULL,
            placement_end DATETIME DEFAULT NULL,
            expected_duration INTEGER DEFAULT 7,
            status TEXT DEFAULT 'pending',
            final_views_count INTEGER DEFAULT 0,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (proposal_id) REFERENCES offer_proposals(id) ON DELETE CASCADE
        );
        
        -- –¢–∞–±–ª–∏—Ü–∞ –ª–æ–≥–æ–≤ –ø—Ä–æ–≤–µ—Ä–æ–∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        CREATE TABLE IF NOT EXISTS placement_checks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            placement_id INTEGER NOT NULL,
            check_time DATETIME DEFAULT CURRENT_TIMESTAMP,
            post_exists BOOLEAN DEFAULT 0,
            views_count INTEGER DEFAULT 0,
            check_status TEXT DEFAULT 'success',
            error_message TEXT DEFAULT NULL,
            response_data TEXT DEFAULT NULL,
            FOREIGN KEY (placement_id) REFERENCES offer_placements(id) ON DELETE CASCADE
        );
        
        -- –¢–∞–±–ª–∏—Ü–∞ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –æ—Ñ—Ñ–µ—Ä–∞–º
        CREATE TABLE IF NOT EXISTS offer_statistics (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            offer_id INTEGER NOT NULL,
            total_proposals INTEGER DEFAULT 0,
            accepted_count INTEGER DEFAULT 0,
            rejected_count INTEGER DEFAULT 0,
            expired_count INTEGER DEFAULT 0,
            cancelled_count INTEGER DEFAULT 0,
            completed_count INTEGER DEFAULT 0,
            failed_count INTEGER DEFAULT 0,
            total_views INTEGER DEFAULT 0,
            total_spent DECIMAL(12, 2) DEFAULT 0.00,
            last_updated DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (offer_id) REFERENCES offers(id) ON DELETE CASCADE,
            UNIQUE(offer_id)
        );
        
        -- –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è offer_proposals
        CREATE INDEX IF NOT EXISTS idx_offer_proposals_offer_id ON offer_proposals(offer_id);
        CREATE INDEX IF NOT EXISTS idx_offer_proposals_channel_id ON offer_proposals(channel_id);
        CREATE INDEX IF NOT EXISTS idx_offer_proposals_status ON offer_proposals(status);
        CREATE INDEX IF NOT EXISTS idx_offer_proposals_created_at ON offer_proposals(created_at);
        CREATE INDEX IF NOT EXISTS idx_offer_proposals_expires_at ON offer_proposals(expires_at);
        
        -- –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è offer_placements
        CREATE INDEX IF NOT EXISTS idx_offer_placements_proposal_id ON offer_placements(proposal_id);
        CREATE INDEX IF NOT EXISTS idx_offer_placements_status ON offer_placements(status);
        CREATE INDEX IF NOT EXISTS idx_offer_placements_placement_start ON offer_placements(placement_start);
        CREATE INDEX IF NOT EXISTS idx_offer_placements_placement_end ON offer_placements(placement_end);
        
        -- –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è placement_checks
        CREATE INDEX IF NOT EXISTS idx_placement_checks_placement_id ON placement_checks(placement_id);
        CREATE INDEX IF NOT EXISTS idx_placement_checks_check_time ON placement_checks(check_time);
        CREATE INDEX IF NOT EXISTS idx_placement_checks_post_exists ON placement_checks(post_exists);
        
        -- –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
        CREATE INDEX IF NOT EXISTS idx_offers_status ON offers(status);
        CREATE INDEX IF NOT EXISTS idx_channels_parsing_enabled ON channels(parsing_enabled);
        CREATE INDEX IF NOT EXISTS idx_channels_last_parsed_at ON channels(last_parsed_at);
        
        -- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
        UPDATE offers 
        SET status = 'draft', is_marked = 0, selected_channels_count = 0,
            expected_placement_duration = 7
        WHERE status IS NULL OR status = '';
        
        UPDATE channels 
        SET parsing_enabled = 1,
            telegram_channel_link = CASE 
                WHEN username IS NOT NULL THEN 'https://t.me/' || username
                ELSE NULL 
            END
        WHERE parsing_enabled IS NULL;
        """
    
    def execute_sql_safely(self, sql: str, description: str) -> bool:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –í–∫–ª—é—á–∞–µ–º WAL —Ä–µ–∂–∏–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            cursor.execute("PRAGMA journal_mode=WAL")
            cursor.execute("PRAGMA foreign_keys=ON")
            
            # –†–∞–∑–¥–µ–ª—è–µ–º SQL –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º
            commands = [cmd.strip() for cmd in sql.split(';') if cmd.strip()]
            
            for i, command in enumerate(commands):
                try:
                    cursor.execute(command)
                except sqlite3.OperationalError as e:
                    if "duplicate column name" in str(e).lower():
                        logger.info(f"‚ö†Ô∏è –ü–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º): {str(e)}")
                        continue
                    elif "already exists" in str(e).lower():
                        logger.info(f"‚ö†Ô∏è –û–±—ä–µ–∫—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º): {str(e)}")
                        continue
                    else:
                        raise e
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ {i+1}: {command[:50]}...")
                    raise e
            
            conn.commit()
            conn.close()
            
            logger.info(f"‚úÖ {description} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {description}: {e}")
            return False
    
    def verify_setup(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
            for table in self.core_tables:
                cursor.execute(f"SELECT name FROM sqlite_master WHERE type='table' AND name='{table}'")
                if not cursor.fetchone():
                    logger.error(f"‚ùå –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ {table} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    return False
                logger.info(f"‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ {table} –Ω–∞–π–¥–µ–Ω–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã
            for table in self.new_tables:
                cursor.execute(f"SELECT name FROM sqlite_master WHERE type='table' AND name='{table}'")
                if not cursor.fetchone():
                    logger.error(f"‚ùå –ù–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ {table} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    return False
                logger.info(f"‚úÖ –ù–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ {table} –Ω–∞–π–¥–µ–Ω–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –≤ offers
            cursor.execute("PRAGMA table_info(offers)")
            offers_columns = [col[1] for col in cursor.fetchall()]
            new_offers_fields = ['status', 'is_marked', 'selected_channels_count', 'expected_placement_duration']
            
            for field in new_offers_fields:
                if field not in offers_columns:
                    logger.error(f"‚ùå –ü–æ–ª–µ {field} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü–µ offers")
                    return False
                logger.info(f"‚úÖ –ü–æ–ª–µ {field} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—É offers")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –≤ channels
            cursor.execute("PRAGMA table_info(channels)")
            channels_columns = [col[1] for col in cursor.fetchall()]
            new_channels_fields = ['last_parsed_at', 'parsing_enabled', 'telegram_channel_link']
            
            for field in new_channels_fields:
                if field not in channels_columns:
                    logger.error(f"‚ùå –ü–æ–ª–µ {field} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü–µ channels")
                    return False
                logger.info(f"‚úÖ –ü–æ–ª–µ {field} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—É channels")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
            cursor.execute("SELECT name FROM sqlite_master WHERE type='index' AND name LIKE 'idx_%'")
            indexes = [row[0] for row in cursor.fetchall()]
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –∏–Ω–¥–µ–∫—Å–æ–≤: {len(indexes)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã
            cursor.execute("SELECT name FROM sqlite_master WHERE type='trigger'")
            triggers = [row[0] for row in cursor.fetchall()]
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤: {len(triggers)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
            cursor.execute("SELECT name FROM sqlite_master WHERE type='view'")
            views = [row[0] for row in cursor.fetchall()]
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π: {len(views)}")
            
            conn.close()
            
            logger.info("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ë–î –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
            return False
    
    def rollback_changes(self) -> bool:
        """–û—Ç–∫–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        try:
            if os.path.exists(self.backup_path):
                shutil.copy2(self.backup_path, self.db_path)
                logger.info(f"‚úÖ –û—Ç–∫–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑: {self.backup_path}")
                return True
            else:
                logger.error("‚ùå –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û—Ç–∫–∞—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
                return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞: {e}")
            return False
    
    def save_setup_info(self) -> Dict:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É migrations –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS migrations (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    version TEXT NOT NULL,
                    executed_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                    description TEXT
                )
            """)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
            cursor.execute("""
                INSERT INTO migrations (version, description) 
                VALUES (?, ?)
            """, (self.setup_version, "Universal database setup with offer system"))
            
            conn.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏
            cursor.execute("SELECT * FROM migrations ORDER BY executed_at DESC")
            migrations = cursor.fetchall()
            
            conn.close()
            
            return {
                'current_version': self.setup_version,
                'migrations': migrations
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ: {e}")
            return {'error': str(e)}

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    if len(sys.argv) > 1:
        db_path = sys.argv[1]
    else:
        db_path = 'telegram_mini_app.db'
    
    setup = UniversalDatabaseSetup(db_path)
    
    # –®–∞–≥ 1: –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î
    print("\nüîç –®–∞–≥ 1: –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    state = setup.analyze_database_state()
    
    if 'error' in state:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {state['error']}")
        sys.exit(1)
    
    print(f"üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î: {state['action_needed']}")
    
    # –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    print("\nüíæ –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
    if not setup.create_backup():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é")
        sys.exit(1)
    
    # –®–∞–≥ 3: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    print(f"\nüîÑ –®–∞–≥ 3: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π ({state['action_needed']})...")
    
    success = True
    
    if state['action_needed'] in ['full_setup', 'create_core_tables_and_migrate']:
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        if not setup.execute_sql_safely(setup.get_core_tables_sql(), "—Å–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü"):
            success = False
    
    if success and state['action_needed'] in ['full_setup', 'create_core_tables_and_migrate', 'migrate_only']:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
        if not setup.execute_sql_safely(setup.get_migration_sql(), "–º–∏–≥—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –æ—Ñ—Ñ–µ—Ä–æ–≤"):
            success = False
    
    if not success:
        print("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –≤—ã–ø–æ–ª–Ω—è–µ–º –æ—Ç–∫–∞—Ç...")
        setup.rollback_changes()
        sys.exit(1)
    
    # –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\n‚úÖ –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
    if not setup.verify_setup():
        print("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")
        setup.rollback_changes()
        sys.exit(1)
    
    # –®–∞–≥ 5: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
    print("\nüìù –®–∞–≥ 5: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ...")
    setup_info = setup.save_setup_info()
    
    print("\n" + "=" * 60)
    print("üéâ –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
    print("=" * 60)
    print(f"üìä –í–µ—Ä—Å–∏—è: {setup_info.get('current_version', 'Unknown')}")
    print(f"üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {setup.backup_path}")
    print(f"üóÑÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {setup.db_path}")
    print(f"üéØ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {state['action_needed']}")
    
    print("\nüìã –°–æ–∑–¥–∞–Ω–æ:")
    print(f"‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü: {len(setup.core_tables)}")
    print(f"‚Ä¢ –ù–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü: {len(setup.new_tables)}")
    print("‚Ä¢ –ò–Ω–¥–µ–∫—Å—ã, —Ç—Ä–∏–≥–≥–µ—Ä—ã –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è")
    
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    print("2. –ï—Å–ª–∏ –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - —É–¥–∞–ª–∏—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é")
    print("3. –ú–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")

if __name__ == "__main__":
    main()