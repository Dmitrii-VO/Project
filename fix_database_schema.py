#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
–î–æ–±–∞–≤–ª—è–µ—Ç –≤—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—ã
"""

import os
import sys
import sqlite3
import logging
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app.models.database import execute_db_query, db_manager

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
MISSING_COLUMNS = [
    # –¢–∞–±–ª–∏—Ü–∞ offers - –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
    ("offers", "ad_text", "TEXT DEFAULT ''"),
    ("offers", "media_urls", "TEXT DEFAULT '[]'"),
    ("offers", "content_type", "TEXT DEFAULT 'text'"),
    ("offers", "offer_type", "TEXT DEFAULT 'single_post'"),
    ("offers", "budget", "DECIMAL(10,2) DEFAULT 0"),
    ("offers", "max_price_per_post", "DECIMAL(10,2) DEFAULT 0"),
    ("offers", "subcategory", "TEXT DEFAULT ''"),
    ("offers", "target_audience", "TEXT DEFAULT '{}'"),
    ("offers", "targeting_criteria", "TEXT DEFAULT '{}'"),
    ("offers", "posting_requirements", "TEXT DEFAULT '{}'"),
    ("offers", "advertiser_id", "INTEGER"),
    ("offers", "analytics_goals", "TEXT DEFAULT '{}'"),
    
    # –¢–∞–±–ª–∏—Ü–∞ users - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    ("users", "is_verified", "BOOLEAN DEFAULT 0"),
    ("users", "verification_status", "TEXT DEFAULT 'pending'"),
    ("users", "role", "TEXT DEFAULT 'user'"),
    ("users", "last_login", "TIMESTAMP"),
    ("users", "preferences", "TEXT DEFAULT '{}'"),
    ("users", "notification_settings", "TEXT DEFAULT '{}'"),
    
    # –¢–∞–±–ª–∏—Ü–∞ channels - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ–ª—è
    ("channels", "verification_code", "TEXT"),
    ("channels", "verification_status", "TEXT DEFAULT 'pending'"),
    ("channels", "verified_at", "TIMESTAMP"),
    ("channels", "auto_stats_enabled", "BOOLEAN DEFAULT 1"),
    ("channels", "last_stats_update", "TIMESTAMP"),
    ("channels", "channel_stats", "TEXT DEFAULT '{}'"),
    ("channels", "channel_category", "TEXT DEFAULT 'general'"),
    ("channels", "target_audience", "TEXT DEFAULT '{}'"),
    ("channels", "pricing_info", "TEXT DEFAULT '{}'"),
    
    # –¢–∞–±–ª–∏—Ü–∞ offer_placements - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    ("offer_placements", "views_count", "INTEGER DEFAULT 0"),
    ("offer_placements", "clicks_count", "INTEGER DEFAULT 0"),
    ("offer_placements", "conversion_count", "INTEGER DEFAULT 0"),
    ("offer_placements", "revenue_generated", "DECIMAL(10,2) DEFAULT 0"),
    ("offer_placements", "cpm", "DECIMAL(10,2) DEFAULT 0"),
    ("offer_placements", "ctr", "DECIMAL(5,2) DEFAULT 0"),
    ("offer_placements", "engagement_rate", "DECIMAL(5,2) DEFAULT 0"),
    ("offer_placements", "completion_rate", "DECIMAL(5,2) DEFAULT 0"),
    ("offer_placements", "performance_metrics", "TEXT DEFAULT '{}'"),
    ("offer_placements", "monitoring_status", "TEXT DEFAULT 'active'"),
    ("offer_placements", "last_monitored", "TIMESTAMP"),
    ("offer_placements", "payment_status", "TEXT DEFAULT 'pending'"),
    ("offer_placements", "payment_amount", "DECIMAL(10,2) DEFAULT 0"),
    ("offer_placements", "commission_rate", "DECIMAL(5,2) DEFAULT 0"),
]

def check_column_exists(table_name, column_name):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
    try:
        result = execute_db_query(f"PRAGMA table_info({table_name})")
        if result:
            existing_columns = [row['name'] for row in result]
            return column_name in existing_columns
        return False
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–æ–Ω–∫–∏ {table_name}.{column_name}: {e}")
        return False

def add_missing_column(table_name, column_name, column_definition):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é –∫–æ–ª–æ–Ω–∫—É –≤ —Ç–∞–±–ª–∏—Ü—É"""
    try:
        sql = f"ALTER TABLE {table_name} ADD COLUMN {column_name} {column_definition}"
        logger.info(f"  –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É: {table_name}.{column_name}")
        execute_db_query(sql)
        return True
    except Exception as e:
        logger.error(f"  ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è {table_name}.{column_name}: {e}")
        return False

def create_migration_history_table():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π"""
    try:
        sql = """
        CREATE TABLE IF NOT EXISTS migration_history (
            version VARCHAR(50) PRIMARY KEY,
            applied_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            description TEXT,
            status TEXT DEFAULT 'completed'
        )
        """
        execute_db_query(sql)
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ migration_history —Å–æ–∑–¥–∞–Ω–∞")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è migration_history: {e}")
        return False

def record_migration(version, description):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏"""
    try:
        sql = """
        INSERT OR REPLACE INTO migration_history (version, description, applied_at)
        VALUES (?, ?, ?)
        """
        execute_db_query(sql, (version, description, datetime.now()))
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

def verify_database_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
    required_tables = ['users', 'channels', 'offers', 'offer_placements']
    
    for table in required_tables:
        try:
            result = execute_db_query(f"SELECT COUNT(*) as count FROM {table}")
            if result:
                count = result[0]['count']
                logger.info(f"  ‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table}: {count} –∑–∞–ø–∏—Å–µ–π")
            else:
                logger.warning(f"  ‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ {table} –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        except Exception as e:
            logger.error(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã {table}: {e}")

def fix_database_schema():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î
    verify_database_structure()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –º–∏–≥—Ä–∞—Ü–∏–π
    create_migration_history_table()
    
    # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç—á–µ—Ç–∞
    total_columns = len(MISSING_COLUMNS)
    added_columns = 0
    skipped_columns = 0
    failed_columns = 0
    
    logger.info(f"üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º {total_columns} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫...")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é –∫–æ–ª–æ–Ω–∫—É
    for table_name, column_name, column_definition in MISSING_COLUMNS:
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º {table_name}.{column_name}...")
        
        if check_column_exists(table_name, column_name):
            logger.info(f"  ‚úÖ –ö–æ–ª–æ–Ω–∫–∞ {column_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            skipped_columns += 1
        else:
            logger.info(f"  ‚ûï –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é –∫–æ–ª–æ–Ω–∫—É {column_name}")
            if add_missing_column(table_name, column_name, column_definition):
                added_columns += 1
            else:
                failed_columns += 1
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∏–≥—Ä–∞—Ü–∏–∏
    migration_version = f"schema_fix_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    migration_description = f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã –ë–î: –¥–æ–±–∞–≤–ª–µ–Ω–æ {added_columns} –∫–æ–ª–æ–Ω–æ–∫"
    record_migration(migration_version, migration_description)
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    logger.info("\n" + "="*60)
    logger.info("üìä –û–¢–ß–ï–¢ –û–ë –ò–°–ü–†–ê–í–õ–ï–ù–ò–ò –°–•–ï–ú–´ –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    logger.info("="*60)
    logger.info(f"‚úÖ –ö–æ–ª–æ–Ω–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {added_columns}")
    logger.info(f"‚è≠Ô∏è –ö–æ–ª–æ–Ω–æ–∫ –ø—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç): {skipped_columns}")
    logger.info(f"‚ùå –û—à–∏–±–æ–∫ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {failed_columns}")
    logger.info(f"üìà –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_columns}")
    
    if failed_columns == 0:
        logger.info("üéâ –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–ò–ú–ï–ù–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–ø–µ—Ä—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≤–º–µ—Å—Ç–∏–º–∞")
        return True
    else:
        logger.warning(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å {failed_columns} –∫–æ–ª–æ–Ω–∫–∞–º–∏")
        return False

def test_fixed_schema():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Å—Ö–µ–º—É"""
    logger.info("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å—Ö–µ–º—ã...")
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ offers
    try:
        result = execute_db_query("SELECT ad_text, media_urls, content_type FROM offers LIMIT 1")
        logger.info("‚úÖ –¢–µ—Å—Ç offers.ad_text - —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"‚ùå –¢–µ—Å—Ç offers.ad_text - –æ—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ–ª—è users
    try:
        result = execute_db_query("SELECT is_verified, role, balance FROM users LIMIT 1")
        logger.info("‚úÖ –¢–µ—Å—Ç users —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ–ª—è - —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"‚ùå –¢–µ—Å—Ç users —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ–ª—è - –æ—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è –∫–∞–Ω–∞–ª–æ–≤
    try:
        result = execute_db_query("SELECT verification_status, channel_stats FROM channels LIMIT 1")
        logger.info("‚úÖ –¢–µ—Å—Ç channels —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ–ª—è - —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"‚ùå –¢–µ—Å—Ç channels —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ–ª—è - –æ—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–∑–º–µ—â–µ–Ω–∏–π
    try:
        result = execute_db_query("SELECT views_count, clicks_count, revenue_generated FROM offer_placements LIMIT 1")
        logger.info("‚úÖ –¢–µ—Å—Ç offer_placements —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"‚ùå –¢–µ—Å—Ç offer_placements —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –æ—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    logger.info("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–•–ï–ú–´ –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    logger.info("="*50)
    
    try:
        success = fix_database_schema()
        
        if success:
            test_fixed_schema()
            logger.info("\nüèÅ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        else:
            logger.error("\n‚ùå –í –ø—Ä–æ—Ü–µ—Å—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ö–µ–º—ã –≤–æ–∑–Ω–∏–∫–ª–∏ –æ—à–∏–±–∫–∏")
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)