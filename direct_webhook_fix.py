#!/usr/bin/env python3
"""
–ü—Ä—è–º–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ webhook –∫–æ–¥–∞
–ó–∞–º–µ–Ω—è–µ—Ç –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏–π –∫–æ–¥ –Ω–∞ —Ä–∞–±–æ—á–∏–π
"""

import os
import time


def create_working_webhook():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π webhook –∫–æ–¥"""

    # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π webhook –∫–æ–¥ –±–µ–∑ –æ—à–∏–±–æ–∫ –∏–º–ø–æ—Ä—Ç–∞
    webhook_code = '''

@channels_bp.route('/webhook', methods=['POST'])
def telegram_webhook():
    """Webhook –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤"""
    try:
        from datetime import datetime
        import logging

        logger = logging.getLogger(__name__)
        data = request.get_json()

        if not data:
            return jsonify({'ok': True})

        logger.info(f"üì® Webhook –ø–æ–ª—É—á–µ–Ω: {data.get('update_id', 'N/A')}")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–∞—Ö
        if 'channel_post' in data:
            message = data['channel_post']
            chat = message.get('chat', {})
            chat_id = str(chat.get('id'))
            text = message.get('text', '')

            logger.info(f"üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ {chat_id}: {text[:50]}...")

            # –ò—â–µ–º –∫–∞–Ω–∞–ª—ã —Å –∫–æ–¥–∞–º–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
            channels = db_manager.execute_query("""
                SELECT id, username, verification_code, telegram_id
                FROM channels 
                WHERE status = 'pending_verification' 
                AND verification_code IS NOT NULL
            """, fetch_all=True)

            if channels:
                logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(channels)} –∫–∞–Ω–∞–ª–æ–≤ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ")

                verification_found = False

                for channel in channels:
                    verification_code = channel['verification_code']
                    if verification_code and verification_code in text:
                        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∫–∞–Ω–∞–ª
                        db_manager.execute_query("""
                            UPDATE channels 
                            SET status = 'verified', verified_at = ?, is_verified = 1
                            WHERE id = ?
                        """, (datetime.now().isoformat(), channel['id']))

                        logger.info(f"‚úÖ –ö–∞–Ω–∞–ª {channel['username']} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω —Å –∫–æ–¥–æ–º {verification_code}!")
                        verification_found = True

                if verification_found:
                    logger.info("üéâ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                else:
                    logger.info("‚ÑπÔ∏è –ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
            else:
                logger.info("‚ÑπÔ∏è –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –æ–∂–∏–¥–∞—é—â–∏—Ö –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏")

        return jsonify({'ok': True})

    except Exception as e:
        logger = logging.getLogger(__name__)
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ webhook: {e}")
        import traceback
        traceback.print_exc()
        return jsonify({'ok': True})
'''

    return webhook_code


def fix_channels_api():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç app/api/channels.py"""

    channels_api_path = 'app/api/channels.py'

    if not os.path.exists(channels_api_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {channels_api_path}")
        return False

    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    with open(channels_api_path, 'r', encoding='utf-8') as f:
        content = f.read()

    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_path = f"{channels_api_path}.backup_{int(time.time())}"
    with open(backup_path, 'w', encoding='utf-8') as f:
        f.write(content)

    # –£–¥–∞–ª—è–µ–º –≤–µ—Å—å —Å—Ç–∞—Ä—ã–π webhook –∫–æ–¥
    lines = content.split('\n')
    new_lines = []
    skip_webhook = False

    for line in lines:
        if '@channels_bp.route(\'/webhook\'' in line:
            skip_webhook = True
            continue

        if skip_webhook:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–æ –∫–æ–Ω—Ü–∞ —Ñ—É–Ω–∫—Ü–∏–∏
            if line.strip() and not line.startswith(' ') and not line.startswith('\t') and 'def ' in line:
                skip_webhook = False
                new_lines.append(line)
            elif 'return jsonify({\'ok\': True})' in line:
                skip_webhook = False
                continue
        else:
            new_lines.append(line)

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–∞–±–æ—á–∏–π webhook
    new_content = '\n'.join(new_lines) + create_working_webhook()

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open(channels_api_path, 'w', encoding='utf-8') as f:
        f.write(new_content)

    print(f"‚úÖ –§–∞–π–ª –∏—Å–ø—Ä–∞–≤–ª–µ–Ω: {channels_api_path}")
    print(f"üìÑ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")

    return True


def test_webhook():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç webhook"""
    import requests
    import time

    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...")
    time.sleep(3)

    try:
        url = "https://lesson-bed-cent-concentration.trycloudflare.com/api/channels/webhook"

        test_data = {
            "update_id": 999999999,
            "channel_post": {
                "message_id": 1,
                "chat": {
                    "id": "-1001000000001",
                    "type": "channel",
                    "title": "Test Channel"
                },
                "date": 1640995200,
                "text": "#addtest123 - –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"
            }
        }

        response = requests.post(url, json=test_data, timeout=10)
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")

        if response.status_code == 200:
            result = response.json()
            print(f"–û—Ç–≤–µ—Ç: {result}")
            if result.get('ok'):
                print("‚úÖ Webhook —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                return True

        print("‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç")
        return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


def main():
    import time

    print("=" * 50)
    print("üõ†Ô∏è –ü–†–Ø–ú–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï WEBHOOK")
    print("=" * 50)

    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    if fix_channels_api():
        print("‚úÖ –§–∞–π–ª –∏—Å–ø—Ä–∞–≤–ª–µ–Ω")
        print("\n‚ö†Ô∏è –ü–ï–†–ï–ó–ê–ü–£–°–¢–ò–¢–ï –°–ï–†–í–ï–†!")
        print("1. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä (Ctrl+C)")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python working_app.py")
        print("3. –ó–∞—Ç–µ–º –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞")

        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Ç–µ—Å—Ç–∏—Ä—É–µ–º
        test_choice = input("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å webhook —Å–µ–π—á–∞—Å? (y/n): ")
        if test_choice.lower() == 'y':
            test_webhook()
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª")


if __name__ == '__main__':
    main()