#!/usr/bin/env python3
"""
run_all_tests.py - –ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ Telegram Mini App
–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–∏–¥–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—ç—Ç–∞–ø–Ω–æ
"""

import os
import sys
import json
import time
import subprocess
import argparse
from datetime import datetime
from typing import Dict, List, Any
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('master_test.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class MasterTester:
    """–ì–ª–∞–≤–Ω—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self):
        self.start_time = time.time()
        self.test_results = {}
        self.overall_success = True
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.config = {
            'base_url': 'http://localhost:5000',
            'bot_token': '6712109516:AAHL23ltolowG5kYTfkTKDadg2Io1Rd0WT8',
            'db_path': 'telegram_mini_app.db'
        }
        
    def print_header(self, title: str, char: str = "="):
        """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        print(f"\n{char * 60}")
        print(f"{title.center(60)}")
        print(f"{char * 60}")
    
    def run_script(self, script_name: str, description: str, timeout: int = 300) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print(f"\nüîÑ {description}")
        print(f"   –°–∫—Ä–∏–ø—Ç: {script_name}")
        
        if not os.path.exists(script_name):
            result = {
                'success': False,
                'error': f'–°–∫—Ä–∏–ø—Ç {script_name} –Ω–µ –Ω–∞–π–¥–µ–Ω',
                'duration': 0
            }
            print(f"‚ùå –°–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {script_name}")
            return result
        
        start_time = time.time()
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
            process = subprocess.run(
                [sys.executable, script_name],
                capture_output=True,
                text=True,
                timeout=timeout
            )
            
            duration = time.time() - start_time
            
            result = {
                'success': process.returncode == 0,
                'return_code': process.returncode,
                'duration': duration,
                'stdout': process.stdout,
                'stderr': process.stderr
            }
            
            if result['success']:
                print(f"‚úÖ {description} - –£–°–ü–ï–®–ù–û ({duration:.1f}—Å)")
            else:
                print(f"‚ùå {description} - –û–®–ò–ë–ö–ê ({duration:.1f}—Å)")
                if process.stderr:
                    print(f"   –û—à–∏–±–∫–∞: {process.stderr[:200]}...")
                self.overall_success = False
            
            return result
            
        except subprocess.TimeoutExpired:
            duration = time.time() - start_time
            result = {
                'success': False,
                'error': f'Timeout after {timeout}s',
                'duration': duration
            }
            print(f"‚è∞ {description} - –¢–ê–ô–ú–ê–£–¢ ({timeout}—Å)")
            self.overall_success = False
            return result
            
        except Exception as e:
            duration = time.time() - start_time
            result = {
                'success': False,
                'error': str(e),
                'duration': duration
            }
            print(f"üí• {description} - –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {str(e)}")
            self.overall_success = False
            return result
    
    def check_prerequisites(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π"""
        self.print_header("–ü–†–û–í–ï–†–ö–ê –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–• –£–°–õ–û–í–ò–ô")
        
        checks = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python –≤–µ—Ä—Å–∏—é
        python_version = sys.version_info
        python_ok = python_version >= (3, 8)
        checks.append(('Python –≤–µ—Ä—Å–∏—è', python_ok, f'{python_version.major}.{python_version.minor}'))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
        required_files = [
            'working_app.py',
            'requirements.txt', 
            'telegram_mini_app.db'
        ]
        
        for file_path in required_files:
            exists = os.path.exists(file_path)
            checks.append((f'–§–∞–π–ª {file_path}', exists, '–Ω–∞–π–¥–µ–Ω' if exists else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        required_dirs = [
            'app',
            'app/static',
            'app/templates'
        ]
        
        for dir_path in required_dirs:
            exists = os.path.isdir(dir_path)
            checks.append((f'–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {dir_path}', exists, '–Ω–∞–π–¥–µ–Ω–∞' if exists else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        try:
            import flask
            import requests
            checks.append(('Flask', True, flask.__version__))
            checks.append(('Requests', True, requests.__version__))
        except ImportError as e:
            checks.append(('–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏', False, str(e)))
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–æ–∫
        all_ok = True
        for check_name, success, details in checks:
            status = "‚úÖ" if success else "‚ùå"
            print(f"{status} {check_name}: {details}")
            if not success:
                all_ok = False
        
        if not all_ok:
            print("\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏!")
            print("   –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Ç–µ—Å—Ç–æ–≤")
            return False
        
        print("\n‚úÖ –í—Å–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
        return True
    
    def run_quick_test(self) -> bool:
        """–ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
        self.print_header("–ë–´–°–¢–†–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï")
        
        result = self.run_script('quick_test.py', '–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π', timeout=120)
        self.test_results['quick_test'] = result
        
        return result['success']
    
    def run_comprehensive_test(self) -> bool:
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        self.print_header("–ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï")
        
        result = self.run_script('test_application.py', '–ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤', timeout=600)
        self.test_results['comprehensive_test'] = result
        
        return result['success']
    
    def run_real_data_test(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        self.print_header("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –° –†–ï–ê–õ–¨–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò")
        
        result = self.run_script('test_real_data.py', '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π', timeout=300)
        self.test_results['real_data_test'] = result
        
        return result['success']
    
    def run_performance_monitoring(self, duration_minutes: int = 5) -> bool:
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        self.print_header("–ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        monitor_script = f"""
import sys
sys.path.append('.')
from monitor_performance import main
if __name__ == "__main__":
    sys.argv = ['monitor_performance.py', '{duration_minutes}', '15']
    sys.exit(main())
"""
        
        with open('temp_monitor.py', 'w') as f:
            f.write(monitor_script)
        
        try:
            result = self.run_script('temp_monitor.py', f'–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ({duration_minutes} –º–∏–Ω)', 
                                   timeout=duration_minutes * 60 + 60)
            self.test_results['performance_monitoring'] = result
            
            return result['success']
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists('temp_monitor.py'):
                os.remove('temp_monitor.py')
    
    def generate_master_report(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        total_duration = time.time() - self.start_time
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_tests = len(self.test_results)
        successful_tests = sum(1 for result in self.test_results.values() if result.get('success', False))
        
        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö
        issues = []
        recommendations = []
        
        for test_name, result in self.test_results.items():
            if not result.get('success', False):
                issues.append({
                    'test': test_name,
                    'error': result.get('error', 'Unknown error'),
                    'stderr': result.get('stderr', '')[:500] if result.get('stderr') else None
                })
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if 'quick_test' in self.test_results and not self.test_results['quick_test']['success']:
            recommendations.append("–ò—Å–ø—Ä–∞–≤—å—Ç–µ –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ —Å–ª–æ–∂–Ω—ã–º —Ç–µ—Å—Ç–∞–º")
        
        if any('database' in str(issue).lower() for issue in issues):
            recommendations.append("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        
        if any('api' in str(issue).lower() or 'http' in str(issue).lower() for issue in issues):
            recommendations.append("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –∏ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã")
        
        if any('telegram' in str(issue).lower() or 'bot' in str(issue).lower() for issue in issues):
            recommendations.append("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏ –¥–æ—Å—Ç—É–ø –∫ Telegram API")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if successful_tests == total_tests:
            overall_status = "excellent"
            status_message = "–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!"
        elif successful_tests >= total_tests * 0.8:
            overall_status = "good"
            status_message = "–ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ, –µ—Å—Ç—å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã"
        elif successful_tests >= total_tests * 0.5:
            overall_status = "warning"
            status_message = "–ü–æ–ª–æ–≤–∏–Ω–∞ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞, —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ"
        else:
            overall_status = "critical"
            status_message = "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ"
        
        report = {
            'timestamp': datetime.now().isoformat(),
            'summary': {
                'overall_status': overall_status,
                'status_message': status_message,
                'total_duration_minutes': total_duration / 60,
                'total_tests': total_tests,
                'successful_tests': successful_tests,
                'failed_tests': total_tests - successful_tests,
                'success_rate': (successful_tests / total_tests * 100) if total_tests > 0 else 0
            },
            'test_results': self.test_results,
            'issues_found': issues,
            'recommendations': recommendations,
            'config_used': self.config
        }
        
        return report
    
    def run_all_tests(self, quick_only: bool = False, skip_monitoring: bool = False) -> bool:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        self.print_header("üß™ MASTER TESTING SUITE - TELEGRAM MINI APP", "=")
        
        print(f"‚è∞ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"üéØ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
        print(f"   ‚Ä¢ URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {self.config['base_url']}")
        print(f"   ‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {self.config['db_path']}")
        print(f"   ‚Ä¢ –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º: {'–î–∞' if quick_only else '–ù–µ—Ç'}")
        print(f"   ‚Ä¢ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {'–î–∞' if skip_monitoring else '–ù–µ—Ç'}")
        
        # –≠—Ç–∞–ø 1: –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        if not self.check_prerequisites():
            print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏")
            return False
        
        # –≠—Ç–∞–ø 2: –ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        quick_success = self.run_quick_test()
        
        if quick_only:
            print("\nüìã –ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        else:
            # –≠—Ç–∞–ø 3: –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã—Å—Ç—Ä–æ–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ)
            if quick_success:
                comprehensive_success = self.run_comprehensive_test()
                
                # –≠—Ç–∞–ø 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                real_data_success = self.run_real_data_test()
                
                # –≠—Ç–∞–ø 5: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                if not skip_monitoring:
                    performance_success = self.run_performance_monitoring(duration_minutes=3)
            else:
                print("\n‚ö†Ô∏è –ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã")
                print("   –ò—Å–ø—Ä–∞–≤—å—Ç–µ –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        self.print_header("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        
        report = self.generate_master_report()
        
        # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
        summary = report['summary']
        print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {summary['total_duration_minutes']:.1f} –º–∏–Ω—É—Ç")
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {summary['successful_tests']}/{summary['total_tests']} —Ç–µ—Å—Ç–æ–≤ ({summary['success_rate']:.1f}%)")
        print(f"üéØ –°—Ç–∞—Ç—É—Å: {summary['status_message']}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–±–ª–µ–º—ã
        if report['issues_found']:
            print(f"\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã ({len(report['issues_found'])}):")
            for i, issue in enumerate(report['issues_found'][:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"   {i}. {issue['test']}: {issue['error']}")
            
            if len(report['issues_found']) > 5:
                print(f"   ... –∏ –µ—â–µ {len(report['issues_found']) - 5} –ø—Ä–æ–±–ª–µ–º")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if report['recommendations']:
            print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            for i, rec in enumerate(report['recommendations'], 1):
                print(f"   {i}. {rec}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
        with open('master_test_report.json', 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        
        print(f"\nüìÑ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: master_test_report.json")
        print(f"üìã –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: master_test.log")
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if summary['overall_status'] == 'excellent':
            print("\nüéâ –ü–†–ï–í–û–°–•–û–î–ù–û! –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")
            print("   Telegram Mini App –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É")
        elif summary['overall_status'] == 'good':
            print("\n‚úÖ –•–û–†–û–®–û! –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç")
            print("   –ï—Å—Ç—å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        elif summary['overall_status'] == 'warning':
            print("\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
            print("   –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞")
        else:
            print("\nüö® –ö–†–ò–¢–ò–ß–ù–û! –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
            print("   –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –≥–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        
        return self.overall_success

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤"""
    parser = argparse.ArgumentParser(description='Master Testing Suite –¥–ª—è Telegram Mini App')
    parser.add_argument('--quick', action='store_true', help='–¢–æ–ª—å–∫–æ –±—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ')
    parser.add_argument('--skip-monitoring', action='store_true', help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏')
    parser.add_argument('--config', help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ JSON')
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–µ–º –º–∞—Å—Ç–µ—Ä-—Ç–µ—Å—Ç–µ—Ä
    tester = MasterTester()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
    if args.config and os.path.exists(args.config):
        try:
            with open(args.config, 'r') as f:
                config = json.load(f)
                tester.config.update(config)
            print(f"üìù –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {args.config}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        success = tester.run_all_tests(
            quick_only=args.quick,
            skip_monitoring=args.skip_monitoring
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
        return 0 if success else 1
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 130
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∞—Å—Ç–µ—Ä-—Ç–µ—Å—Ç–µ—Ä–∞")
        return 1

if __name__ == "__main__":
    sys.exit(main())