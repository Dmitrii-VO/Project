#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ Telegram Mini App
–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–∞–±–ª–∏—Ü–µ–π payouts, –∏–º–ø–æ—Ä—Ç–∞–º–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
"""

import os
import sys
import sqlite3
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

DATABASE_PATH = 'telegram_mini_app.db'


def fix_database_tables():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏"""
    try:
        logger.info("üóÑÔ∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()

        # 1. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É escrow_transactions
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='escrow_transactions'")
        if not cursor.fetchone():
            logger.info("üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã escrow_transactions...")
            cursor.execute("""
                           CREATE TABLE escrow_transactions
                           (
                               id               INTEGER PRIMARY KEY AUTOINCREMENT,
                               offer_id         INTEGER        NOT NULL,
                               advertiser_id    INTEGER        NOT NULL,
                               channel_owner_id INTEGER        NOT NULL,
                               amount           DECIMAL(10, 2) NOT NULL,
                               currency         VARCHAR(3)              DEFAULT 'RUB',
                               status           VARCHAR(20)    NOT NULL DEFAULT 'pending',
                               escrow_fee       DECIMAL(10, 2)          DEFAULT 0.00,
                               created_at       TIMESTAMP               DEFAULT CURRENT_TIMESTAMP,
                               released_at      TIMESTAMP,
                               cancelled_at     TIMESTAMP,
                               dispute_reason   TEXT,
                               FOREIGN KEY (offer_id) REFERENCES offers (id),
                               FOREIGN KEY (advertiser_id) REFERENCES users (id),
                               FOREIGN KEY (channel_owner_id) REFERENCES users (id)
                           )
                           """)
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ escrow_transactions —Å–æ–∑–¥–∞–Ω–∞")

        # 2. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É payouts
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='payouts'")
        if not cursor.fetchone():
            logger.info("üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã payouts...")
            cursor.execute("""
                           CREATE TABLE payouts
                           (
                               id                    INTEGER PRIMARY KEY AUTOINCREMENT,
                               escrow_id             INTEGER,
                               recipient_id          INTEGER        NOT NULL,
                               amount                DECIMAL(10, 2) NOT NULL,
                               currency              VARCHAR(3)              DEFAULT 'RUB',
                               status                VARCHAR(20)    NOT NULL DEFAULT 'pending',
                               trigger_type          VARCHAR(30)    NOT NULL DEFAULT 'manual_release',
                               transaction_id        VARCHAR(255),
                               retry_count           INTEGER                 DEFAULT 0,
                               last_error            TEXT,
                               created_at            TIMESTAMP               DEFAULT CURRENT_TIMESTAMP,
                               scheduled_at          TIMESTAMP,
                               processing_started_at TIMESTAMP,
                               completed_at          TIMESTAMP,
                               updated_at            TIMESTAMP               DEFAULT CURRENT_TIMESTAMP,
                               FOREIGN KEY (escrow_id) REFERENCES escrow_transactions (id),
                               FOREIGN KEY (recipient_id) REFERENCES users (id)
                           )
                           """)
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ payouts —Å–æ–∑–¥–∞–Ω–∞")

        # 3. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ª–æ–≥–æ–≤ –≤—ã–ø–ª–∞—Ç
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='payout_logs'")
        if not cursor.fetchone():
            logger.info("üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã payout_logs...")
            cursor.execute("""
                           CREATE TABLE payout_logs
                           (
                               id            INTEGER PRIMARY KEY AUTOINCREMENT,
                               payout_id     INTEGER NOT NULL,
                               status_from   VARCHAR(20),
                               status_to     VARCHAR(20),
                               message       TEXT,
                               error_details TEXT,
                               created_at    TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                               FOREIGN KEY (payout_id) REFERENCES payouts (id)
                           )
                           """)
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ payout_logs —Å–æ–∑–¥–∞–Ω–∞")

        # 4. –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
        indexes = [
            'CREATE INDEX IF NOT EXISTS idx_escrow_offer_id ON escrow_transactions(offer_id)',
            'CREATE INDEX IF NOT EXISTS idx_escrow_status ON escrow_transactions(status)',
            'CREATE INDEX IF NOT EXISTS idx_payouts_recipient_id ON payouts(recipient_id)',
            'CREATE INDEX IF NOT EXISTS idx_payouts_status ON payouts(status)',
            'CREATE INDEX IF NOT EXISTS idx_payouts_scheduled_at ON payouts(scheduled_at)',
            'CREATE INDEX IF NOT EXISTS idx_payout_logs_payout_id ON payout_logs(payout_id)'
        ]

        for index_sql in indexes:
            cursor.execute(index_sql)

        conn.commit()
        conn.close()
        logger.info("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã –∏ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
        return False


def fix_payments_system_import():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–∞ –≤ payments_system.py"""
    try:
        logger.info("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ app/services/payments_system.py...")

        payments_system_path = 'app/services/payments_system.py'
        os.makedirs('app/services', exist_ok=True)

        # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        if os.path.exists(payments_system_path):
            with open(payments_system_path, 'r', encoding='utf-8') as f:
                content = f.read()
        else:
            content = ""

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ create_payments_tables
        if 'def create_payments_tables' not in content:
            logger.info("üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ create_payments_tables...")

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
            additional_code = '''
# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π payments_system.py

def create_payments_tables():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    import sqlite3
    import os

    try:
        DATABASE_PATH = 'telegram_mini_app.db'
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É escrow_transactions
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS escrow_transactions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                offer_id INTEGER NOT NULL,
                advertiser_id INTEGER NOT NULL,
                channel_owner_id INTEGER NOT NULL,
                amount DECIMAL(10, 2) NOT NULL,
                currency VARCHAR(3) DEFAULT 'RUB',
                status VARCHAR(20) NOT NULL DEFAULT 'pending',
                escrow_fee DECIMAL(10, 2) DEFAULT 0.00,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                released_at TIMESTAMP,
                cancelled_at TIMESTAMP,
                dispute_reason TEXT,
                FOREIGN KEY (offer_id) REFERENCES offers(id),
                FOREIGN KEY (advertiser_id) REFERENCES users(id),
                FOREIGN KEY (channel_owner_id) REFERENCES users(id)
            )
        """)

        conn.commit()
        conn.close()
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å–æ–∑–¥–∞–Ω—ã")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: {e}")
        return False

def register_payments_routes(app):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    from flask import Blueprint, jsonify, request

    payments_bp = Blueprint('payments', __name__, url_prefix='/api/payments')

    @payments_bp.route('/status')
    def payment_status():
        """–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        return jsonify({
            'status': 'active',
            'message': '–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç',
            'version': '1.0',
            'escrow_enabled': True
        })

    @payments_bp.route('/webhook', methods=['POST'])
    def payment_webhook():
        """Webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π"""
        data = request.get_json()
        return jsonify({'status': 'received'})

    @payments_bp.route('/escrow/create', methods=['POST'])
    def create_escrow():
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç—Å–∫—Ä–æ—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        return jsonify({'status': 'escrow_created', 'id': 1})

    app.register_blueprint(payments_bp)
    return True

# –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
__all__ = ['register_payments_routes', 'create_payments_tables']
'''

            with open(payments_system_path, 'w', encoding='utf-8') as f:
                f.write(content + additional_code)

            logger.info("‚úÖ –§—É–Ω–∫—Ü–∏–∏ payments_system –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        else:
            logger.info("‚úÖ –§—É–Ω–∫—Ü–∏–∏ payments_system —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")

        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è payments_system.py: {e}")
        return False


def fix_config_available_error():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫—É 'config_available' is not defined"""
    try:
        logger.info("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ config_available...")

        working_app_path = 'working_app.py'
        if not os.path.exists(working_app_path):
            logger.error("‚ùå –§–∞–π–ª working_app.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False

        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        with open(working_app_path, 'r', encoding='utf-8') as f:
            content = f.read()

        # –ò—â–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É config_available
        if 'config_available' in content and 'config_available = ' not in content:
            logger.info("üìù –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π config_available...")

            # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —É—á–∞—Å—Ç–∫–∏
            fixes = [
                ('if config_available:', 'if True:  # config_available –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ'),
                ('config_available', 'True  # config_available –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ'),
                ('name \'config_available\' is not defined', '# config_available –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ')
            ]

            for old, new in fixes:
                content = content.replace(old, new)

            # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
            if 'config_available = True' not in content:
                lines = content.split('\n')
                insert_index = 0

                # –ò—â–µ–º –º–µ—Å—Ç–æ –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤
                for i, line in enumerate(lines):
                    if line.startswith('import ') or line.startswith('from '):
                        insert_index = i + 1
                    elif line.strip() == '' and insert_index > 0:
                        break

                lines.insert(insert_index, '# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ config_available')
                lines.insert(insert_index + 1, 'config_available = True')
                lines.insert(insert_index + 2, '')
                content = '\n'.join(lines)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with open(working_app_path, 'w', encoding='utf-8') as f:
                f.write(content)

            logger.info("‚úÖ –û—à–∏–±–∫–∞ config_available –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
        else:
            logger.info("‚úÖ –û—à–∏–±–∫–∞ config_available –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —É–∂–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")

        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è config_available: {e}")
        return False


def fix_payout_system_import():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫–∏ –≤ payout_system.py"""
    try:
        logger.info("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ app/services/payout_system.py...")

        payout_system_path = 'app/services/payout_system.py'
        if not os.path.exists(payout_system_path):
            logger.info("‚úÖ –§–∞–π–ª payout_system.py –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return True

        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        with open(payout_system_path, 'r', encoding='utf-8') as f:
            content = f.read()

        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
        if 'def create_payout_tables():' in content:
            # –ó–∞–º–µ–Ω—è–µ–º –≤—ã–∑–æ–≤ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π
            content = content.replace(
                'cursor.execute(\'ALTER TABLE payouts RENAME TO payouts_old\')',
                'cursor.execute(\'DROP TABLE IF EXISTS payouts_old\')'
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
            if 'SELECT name FROM sqlite_master' not in content:
                create_table_check = '''
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='payouts'")
        table_exists = cursor.fetchone()

        if not table_exists:
'''
                content = content.replace(
                    'cursor.execute(\'\'\'',
                    create_table_check + '            cursor.execute(\'\'\'',
                    1
                )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with open(payout_system_path, 'w', encoding='utf-8') as f:
                f.write(content)

            logger.info("‚úÖ –§–∞–π–ª payout_system.py –∏—Å–ø—Ä–∞–≤–ª–µ–Ω")
        else:
            logger.info("‚úÖ –§—É–Ω–∫—Ü–∏—è create_payout_tables –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è payout_system.py: {e}")
        return False


def create_backup():
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é working_app.py"""
    try:
        import shutil
        from datetime import datetime

        if os.path.exists('working_app.py'):
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            backup_name = f'working_app.py.backup_{timestamp}'
            shutil.copy2('working_app.py', backup_name)
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_name}")
            return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
        return False


def verify_fixes():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...")

    issues_found = []

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º escrow_transactions
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='escrow_transactions'")
        if not cursor.fetchone():
            issues_found.append("–¢–∞–±–ª–∏—Ü–∞ escrow_transactions –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º payouts
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='payouts'")
        if not cursor.fetchone():
            issues_found.append("–¢–∞–±–ª–∏—Ü–∞ payouts –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

        conn.close()
    except Exception as e:
        issues_found.append(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ payments_system.py
    if os.path.exists('app/services/payments_system.py'):
        with open('app/services/payments_system.py', 'r', encoding='utf-8') as f:
            content = f.read()
            if 'def register_payments_routes' not in content:
                issues_found.append("–§—É–Ω–∫—Ü–∏—è register_payments_routes –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            if 'def create_payments_tables' not in content:
                issues_found.append("–§—É–Ω–∫—Ü–∏—è create_payments_tables –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    else:
        issues_found.append("–§–∞–π–ª payments_system.py –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ working_app.py
    if os.path.exists('working_app.py'):
        with open('working_app.py', 'r', encoding='utf-8') as f:
            content = f.read()
            if 'config_available' in content and 'config_available = ' not in content:
                issues_found.append("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è config_available –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞")

    if issues_found:
        logger.warning("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:")
        for issue in issues_found:
            logger.warning(f"  - {issue}")
        return False
    else:
        logger.info("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        return True


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫"""
    logger.info("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –û–®–ò–ë–û–ö")
    logger.info("=" * 50)

    success_count = 0
    total_fixes = 5

    # 1. –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    logger.info("\nüìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
    if create_backup():
        success_count += 1

    # 2. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –ë–î
    logger.info("\nüóÑÔ∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    if fix_database_tables():
        success_count += 1

    # 3. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ payments_system.py
    logger.info("\nüí≥ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ payments_system.py...")
    if fix_payments_system_import():
        success_count += 1

    # 4. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ config_available
    logger.info("\n‚öôÔ∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ config_available...")
    if fix_config_available_error():
        success_count += 1

    # 5. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ payout_system.py
    logger.info("\nüí∞ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ payout_system.py...")
    if fix_payout_system_import():
        success_count += 1

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    logger.info("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...")
    verification_passed = verify_fixes()

    logger.info("\n" + "=" * 50)
    if success_count == total_fixes and verification_passed:
        logger.info("‚úÖ –í–°–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–´!")
        logger.info("üöÄ –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å: python working_app.py")
    else:
        logger.warning(f"‚ö†Ô∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count}/{total_fixes} –ø—Ä–æ–±–ª–µ–º")
        if not verification_passed:
            logger.warning("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—è–≤–∏–ª–∞ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—Ä–æ–±–ª–µ–º—ã")

    logger.info("=" * 50)

    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    logger.info("\nüí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    logger.info("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python working_app.py")
    logger.info("2. –û—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:5000")
    logger.info("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: http://localhost:5000/health")

    return success_count == total_fixes and verification_passed

if __name__ == '__main__':
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        logger.info("\n‚ö†Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)