#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤
"""

import requests
import json
import time
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
BASE_URL = "https://lesson-bed-cent-concentration.trycloudflare.com"  # –í–∞—à URL –∏–∑ .env
BOT_TOKEN = "6712109516:AAHL23ltolowG5kYTfkTKDadg2Io1Rd0WT8"

def test_webhook_setup():
    """–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook"""
    print("üß™ –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π webhook
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/getWebhookInfo"
    
    try:
        response = requests.get(url)
        data = response.json()
        
        if data.get('ok'):
            webhook_info = data.get('result', {})
            current_url = webhook_info.get('url', '')
            
            print(f"‚úÖ –¢–µ–∫—É—â–∏–π webhook URL: {current_url}")
            print(f"‚úÖ Pending updates: {webhook_info.get('pending_update_count', 0)}")
            print(f"‚úÖ Last error: {webhook_info.get('last_error_message', '–ù–µ—Ç –æ—à–∏–±–æ–∫')}")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –Ω–∞ –Ω–∞—à endpoint
            webhook_url = f"{BASE_URL}/api/channels/webhook"
            set_webhook_url = f"https://api.telegram.org/bot{BOT_TOKEN}/setWebhook"
            
            set_response = requests.post(set_webhook_url, json={
                'url': webhook_url,
                'allowed_updates': ['channel_post', 'message']
            })
            
            if set_response.status_code == 200:
                result = set_response.json()
                if result.get('ok'):
                    print(f"‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: {webhook_url}")
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {result.get('description')}")
            else:
                print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {set_response.status_code}")
                
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {data.get('description')}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    
    return False

def test_channel_creation():
    """–¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    print("\nüß™ –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞
    channel_data = {
        "channel_id": "@testchannel123",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª –¥–ª—è —Ç–µ—Å—Ç–∞
        "channel_name": "–¢–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª",
        "category": "technology",
        "price_per_post": 100.0
    }
    
    headers = {
        "Content-Type": "application/json",
        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å Telegram auth headers
    }
    
    try:
        url = f"{BASE_URL}/api/channels/"
        response = requests.post(url, json=channel_data, headers=headers)
        
        print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 201:
            data = response.json()
            if data.get('success'):
                channel = data.get('channel', {})
                verification_code = channel.get('verification_code')
                
                print(f"‚úÖ –ö–∞–Ω–∞–ª —Å–æ–∑–¥–∞–Ω —Å ID: {channel.get('id')}")
                print(f"‚úÖ –ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {verification_code}")
                print(f"‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {channel.get('verification_instructions')}")
                
                return verification_code
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {data.get('message')}")
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            try:
                error_data = response.json()
                print(f"‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {error_data}")
            except:
                print(f"‚ùå –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {response.text}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    
    return None

def test_webhook_endpoint():
    """–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã webhook endpoint"""
    print("\nüß™ –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook endpoint")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º webhook –æ—Ç Telegram
    test_webhook_data = {
        "update_id": 123456789,
        "channel_post": {
            "message_id": 1,
            "chat": {
                "id": "@testchannel123",
                "type": "channel",
                "title": "–¢–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª"
            },
            "date": int(time.time()),
            "text": "#add123abc - –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞"
        }
    }
    
    try:
        url = f"{BASE_URL}/api/channels/webhook"
        response = requests.post(url, json=test_webhook_data)
        
        print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            if data.get('ok'):
                print("‚úÖ Webhook endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                return True
            else:
                print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {data}")
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            try:
                error_data = response.json()
                print(f"‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {error_data}")
            except:
                print(f"‚ùå –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {response.text}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    
    return False

def test_code_generation():
    """–¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–æ–≤ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    print("\nüß™ –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–æ–≤")
    
    import string
    import random
    
    def generate_verification_code():
        """–¢–µ—Å—Ç–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞"""
        chars = string.ascii_lowercase + string.digits
        random_part = ''.join(random.choices(chars, k=6))
        return f"#add{random_part}"
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–¥–æ–≤
    codes = [generate_verification_code() for _ in range(5)]
    
    print("‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–¥—ã:")
    for i, code in enumerate(codes, 1):
        print(f"  {i}. {code}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
    if len(set(codes)) == len(codes):
        print("‚úÖ –í—Å–µ –∫–æ–¥—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã")
        return True
    else:
        print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∫–æ–¥—ã")
        return False

def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("=" * 60)
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –ú–û–î–ï–†–ê–¶–ò–ò –ö–ê–ù–ê–õ–û–í")
    print("=" * 60)
    print(f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üåê URL: {BASE_URL}")
    print("=" * 60)
    
    tests = [
        ("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook", test_webhook_setup),
        ("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–æ–≤", test_code_generation),
        ("Webhook endpoint", test_webhook_endpoint),
        # ("–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞", test_channel_creation),  # –û—Ç–∫–ª—é—á–µ–Ω –±–µ–∑ auth
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
    
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    passed = 0
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{status:15} | {test_name}")
        if result:
            passed += 1
    
    print("=" * 60)
    print(f"üìà –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{len(results)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == len(results):
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è.")

if __name__ == "__main__":
    main()
