#!/usr/bin/env python3
# delete_contract.py - –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞

import sqlite3
import os
from datetime import datetime

# –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_PATH = 'telegram_mini_app.db'

def delete_problematic_contract():
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Å ID 'null'"""
    
    if not os.path.exists(DB_PATH):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {DB_PATH}")
        return False
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        print("üîç –ü–æ–∏—Å–∫ –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞...")
        
        # –ò—â–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Å ID NULL
        cursor.execute("SELECT * FROM contracts WHERE id IS NULL")
        problematic_contract = cursor.fetchone()
        
        if problematic_contract:
            print("üéØ –ù–ê–ô–î–ï–ù –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Å NULL ID:")
            print(f"   ID: {problematic_contract[0]} (NULL)")
            print(f"   Response ID: {problematic_contract[1]}")
            print(f"   Offer ID: {problematic_contract[2]}")
            print(f"   Status: {problematic_contract[5]}")
            print(f"   –°–æ–∑–¥–∞–Ω: {problematic_contract[7]}")
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
            confirm = input("\n‚ùì –£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Å NULL ID? (y/N): ").lower().strip()
            
            if confirm in ['y', 'yes', '–¥–∞']:
                # –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç
                cursor.execute("DELETE FROM contracts WHERE id IS NULL")
                deleted_contracts = cursor.rowcount
                print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤: {deleted_contracts}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≤ payments
                cursor.execute("SELECT COUNT(*) FROM payments WHERE contract_id IS NULL")
                payments_count = cursor.fetchone()[0]
                
                if payments_count > 0:
                    print(f"‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ {payments_count} —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ payments")
                    delete_payments = input("‚ùì –£–¥–∞–ª–∏—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏? (y/N): ").lower().strip()
                    
                    if delete_payments in ['y', 'yes', '–¥–∞']:
                        cursor.execute("DELETE FROM payments WHERE contract_id IS NULL")
                        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {payments_count} —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≤ monitoring_tasks
                cursor.execute("SELECT COUNT(*) FROM monitoring_tasks WHERE contract_id IS NULL")
                monitoring_count = cursor.fetchone()[0]
                
                if monitoring_count > 0:
                    print(f"‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ {monitoring_count} —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
                    delete_monitoring = input("‚ùì –£–¥–∞–ª–∏—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞? (y/N): ").lower().strip()
                    
                    if delete_monitoring in ['y', 'yes', '–¥–∞']:
                        cursor.execute("DELETE FROM monitoring_tasks WHERE contract_id IS NULL")
                        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {monitoring_count} –∑–∞–¥–∞—á –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                conn.commit()
                
                print("\nüéâ –ü–†–û–ë–õ–ï–ú–ù–´–ô –ö–û–ù–¢–†–ê–ö–¢ –£–°–ü–ï–®–ù–û –£–î–ê–õ–ï–ù!")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
                cursor.execute("SELECT COUNT(*) FROM contracts")
                total_contracts = cursor.fetchone()[0]
                print(f"üìä –û—Å—Ç–∞–ª–æ—Å—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –≤ –±–∞–∑–µ: {total_contracts}")
                
            else:
                print("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                return False
                
        else:
            print("‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç —Å NULL ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
            cursor.execute("SELECT id, status, created_at FROM contracts ORDER BY created_at DESC LIMIT 10")
            contracts = cursor.fetchall()
            
            if contracts:
                print("\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤:")
                for contract in contracts:
                    print(f"   ID: {contract[0]}, Status: {contract[1]}, Created: {contract[2]}")
            else:
                print("üìã –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def show_contracts_stats():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        print("\nüìä === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–û–ù–¢–†–ê–ö–¢–û–í ===")
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        cursor.execute("SELECT COUNT(*) FROM contracts")
        total = cursor.fetchone()[0]
        print(f"–í—Å–µ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤: {total}")
        
        # –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º
        cursor.execute("""
            SELECT status, COUNT(*) 
            FROM contracts 
            GROUP BY status 
            ORDER BY COUNT(*) DESC
        """)
        statuses = cursor.fetchall()
        
        print("–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:")
        for status, count in statuses:
            print(f"  {status}: {count}")
        
        # –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
        cursor.execute("SELECT COUNT(*) FROM contracts WHERE id IS NULL OR id = '' OR id = 'null'")
        problematic = cursor.fetchone()[0]
        
        if problematic > 0:
            print(f"‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ (NULL ID): {problematic}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
            cursor.execute("SELECT id, status, created_at FROM contracts WHERE id IS NULL OR id = '' OR id = 'null'")
            problematic_contracts = cursor.fetchall()
            
            for contract in problematic_contracts:
                print(f"     ID: {contract[0]}, Status: {contract[1]}, Created: {contract[2]}")
        else:
            print("‚úÖ –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

if __name__ == "__main__":
    print("üóëÔ∏è  === –£–î–ê–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–ù–û–ì–û –ö–û–ù–¢–†–ê–ö–¢–ê ===")
    print(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {DB_PATH}")
    print()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ —É–¥–∞–ª–µ–Ω–∏—è
    show_contracts_stats()
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç
    success = delete_problematic_contract()
    
    if success:
        print()
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        show_contracts_stats()
    
    print("\n‚úÖ –ì–æ—Ç–æ–≤–æ!")