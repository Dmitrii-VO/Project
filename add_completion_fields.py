#!/usr/bin/env python3
"""
–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏–π
"""

import sqlite3
import sys
import os

sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app.models.database import execute_db_query

def add_completion_fields():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏–π"""
    print("üîÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏–π...")
    
    try:
        # 1. –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –≤ offer_placements
        print("üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã offer_placements...")
        
        completion_fields = [
            "ALTER TABLE offer_placements ADD COLUMN final_stats TEXT",
            "ALTER TABLE offer_placements ADD COLUMN final_payout REAL DEFAULT 0"
        ]
        
        for field_sql in completion_fields:
            try:
                execute_db_query(field_sql)
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ: {field_sql.split('ADD COLUMN')[1].split()[0]}")
            except Exception as e:
                if "duplicate column name" in str(e).lower():
                    print(f"‚ö†Ô∏è –ü–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {field_sql.split('ADD COLUMN')[1].split()[0]}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è: {e}")
        
        # 2. –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –≤ channels
        print("üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã channels...")
        
        channel_completion_fields = [
            "ALTER TABLE channels ADD COLUMN completed_placements INTEGER DEFAULT 0",
            "ALTER TABLE channels ADD COLUMN total_earned REAL DEFAULT 0"
        ]
        
        for field_sql in channel_completion_fields:
            try:
                execute_db_query(field_sql)
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ: {field_sql.split('ADD COLUMN')[1].split()[0]}")
            except Exception as e:
                if "duplicate column name" in str(e).lower():
                    print(f"‚ö†Ô∏è –ü–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {field_sql.split('ADD COLUMN')[1].split()[0]}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è: {e}")
        
        # 3. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É placement_reports
        print("üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã placement_reports...")
        
        execute_db_query("""
            CREATE TABLE IF NOT EXISTS placement_reports (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                placement_id INTEGER NOT NULL,
                report_data TEXT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (placement_id) REFERENCES offer_placements(id)
            )
        """)
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ placement_reports —Å–æ–∑–¥–∞–Ω–∞")
        
        # 4. –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
        print("üìù –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...")
        
        indexes = [
            "CREATE INDEX IF NOT EXISTS idx_placement_reports_placement_id ON placement_reports(placement_id)",
            "CREATE INDEX IF NOT EXISTS idx_placement_reports_created_at ON placement_reports(created_at)"
        ]
        
        for index_sql in indexes:
            try:
                execute_db_query(index_sql)
                index_name = index_sql.split("INDEX IF NOT EXISTS")[1].split()[0]
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω –∏–Ω–¥–µ–∫—Å: {index_name}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞: {e}")
        
        print("üéâ –í—Å–µ –ø–æ–ª—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü
        print("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü:")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º offer_placements
        placement_columns = execute_db_query("PRAGMA table_info(offer_placements)", fetch_all=True)
        print(f"‚úÖ offer_placements: {len(placement_columns)} –∫–æ–ª–æ–Ω–æ–∫")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º channels
        channel_columns = execute_db_query("PRAGMA table_info(channels)", fetch_all=True)
        print(f"‚úÖ channels: {len(channel_columns)} –∫–æ–ª–æ–Ω–æ–∫")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º placement_reports
        reports_columns = execute_db_query("PRAGMA table_info(placement_reports)", fetch_all=True)
        print(f"‚úÖ placement_reports: {len(reports_columns)} –∫–æ–ª–æ–Ω–æ–∫")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False


if __name__ == "__main__":
    success = add_completion_fields()
    if success:
        print("\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏!")
        sys.exit(1)