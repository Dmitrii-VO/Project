#!/usr/bin/env python3
"""
simple_init_db.py - –ü—Ä–æ—Å—Ç–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
–°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—É—é —Å—Ö–µ–º—É –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
"""

import os
import sys
import sqlite3
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    print("‚ö†Ô∏è python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è load_dotenv
    load_dotenv = lambda: None

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DATABASE_PATH = 'telegram_mini_app.db'
YOUR_TELEGRAM_ID = int(os.environ.get('YOUR_TELEGRAM_ID', 373086959))

def create_basic_database():
    """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ö–µ–º–æ–π"""
    print("üóÑÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –±–∞–∑—É –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if os.path.exists(DATABASE_PATH):
        backup_name = f"{DATABASE_PATH}.backup.{int(datetime.now().timestamp())}"
        os.rename(DATABASE_PATH, backup_name)
        print(f"üì¶ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø: {backup_name}")
    
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    
    # –í–∫–ª—é—á–∞–µ–º foreign keys
    cursor.execute('PRAGMA foreign_keys = ON')
    
    print("üìã –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü...")
    
    # 1. –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
        CREATE TABLE users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            telegram_id INTEGER UNIQUE NOT NULL,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            is_active BOOLEAN DEFAULT 1,
            role TEXT DEFAULT 'user',
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ users —Å–æ–∑–¥–∞–Ω–∞")
    
    # 2. –¢–∞–±–ª–∏—Ü–∞ –∫–∞–Ω–∞–ª–æ–≤
    cursor.execute('''
        CREATE TABLE channels (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            telegram_id INTEGER,
            title TEXT NOT NULL,
            username TEXT,
            description TEXT,
            subscriber_count INTEGER DEFAULT 0,
            category TEXT,
            language TEXT DEFAULT 'ru',
            is_verified BOOLEAN DEFAULT 0,
            is_active BOOLEAN DEFAULT 1,
            owner_id INTEGER NOT NULL,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (owner_id) REFERENCES users(id) ON DELETE CASCADE
        )
    ''')
    print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ channels —Å–æ–∑–¥–∞–Ω–∞")
    
    # 3. –¢–∞–±–ª–∏—Ü–∞ –æ—Ñ—Ñ–µ—Ä–æ–≤
    cursor.execute('''
        CREATE TABLE offers (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT NOT NULL,
            description TEXT NOT NULL,
            content TEXT,
            price DECIMAL(10, 2) NOT NULL,
            currency TEXT DEFAULT 'RUB',
            deadline DATE,
            target_audience TEXT,
            requirements TEXT,
            status TEXT DEFAULT 'active',
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            channel_id INTEGER,
            created_by INTEGER NOT NULL,
            FOREIGN KEY (channel_id) REFERENCES channels(id) ON DELETE SET NULL,
            FOREIGN KEY (created_by) REFERENCES users(id) ON DELETE CASCADE,
            CHECK (status IN ('active', 'paused', 'completed', 'cancelled'))
        )
    ''')
    print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ offers —Å–æ–∑–¥–∞–Ω–∞")
    
    # 4. –¢–∞–±–ª–∏—Ü–∞ –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–∞ –æ—Ñ—Ñ–µ—Ä—ã
    cursor.execute('''
        CREATE TABLE offer_responses (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            status TEXT NOT NULL DEFAULT 'pending',
            proposed_date DATE,
            rejection_reason TEXT,
            response_message TEXT,
            counter_price DECIMAL(12, 2),
            payment_status TEXT DEFAULT 'pending',
            payment_id TEXT,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            offer_id INTEGER NOT NULL,
            user_id INTEGER NOT NULL,
            FOREIGN KEY (offer_id) REFERENCES offers(id) ON DELETE CASCADE,
            FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
            UNIQUE(offer_id, user_id),
            CHECK (status IN ('pending', 'accepted', 'rejected', 'completed', 'cancelled')),
            CHECK (payment_status IN ('pending', 'processing', 'paid', 'failed', 'refunded'))
        )
    ''')
    print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ offer_responses —Å–æ–∑–¥–∞–Ω–∞")
    
    # 5. –¢–∞–±–ª–∏—Ü–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    cursor.execute('''
        CREATE TABLE notifications (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            type TEXT NOT NULL,
            title TEXT NOT NULL,
            message TEXT NOT NULL,
            data TEXT,
            priority INTEGER DEFAULT 0,
            is_read BOOLEAN DEFAULT 0,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
        )
    ''')
    print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ notifications —Å–æ–∑–¥–∞–Ω–∞")
    
    print("üìä –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    
    # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    indexes = [
        "CREATE INDEX idx_users_telegram_id ON users(telegram_id)",
        "CREATE INDEX idx_channels_owner_id ON channels(owner_id)",
        "CREATE INDEX idx_channels_telegram_id ON channels(telegram_id)",
        "CREATE INDEX idx_offers_created_by ON offers(created_by)",
        "CREATE INDEX idx_offers_channel_id ON offers(channel_id)",
        "CREATE INDEX idx_offers_status ON offers(status)",
        "CREATE INDEX idx_offer_responses_offer_id ON offer_responses(offer_id)",
        "CREATE INDEX idx_offer_responses_user_id ON offer_responses(user_id)",
        "CREATE INDEX idx_notifications_user_id ON notifications(user_id)",
        "CREATE INDEX idx_notifications_is_read ON notifications(is_read)"
    ]
    
    for index_sql in indexes:
        cursor.execute(index_sql)
    
    print("‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print("üë§ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    cursor.execute('''
        INSERT OR IGNORE INTO users (telegram_id, username, first_name, role, created_at)
        VALUES (?, 'main_user', 'Main User', 'admin', ?)
    ''', (YOUR_TELEGRAM_ID, datetime.now()))
    
    if cursor.rowcount > 0:
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {YOUR_TELEGRAM_ID}")
    else:
        print(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {YOUR_TELEGRAM_ID} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    conn.commit()
    conn.close()
    
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
    return True

def verify_database():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("""
            SELECT name FROM sqlite_master 
            WHERE type='table' AND name NOT LIKE 'sqlite_%'
            ORDER BY name
        """)
        tables = cursor.fetchall()
        
        expected_tables = ['users', 'channels', 'offers', 'offer_responses', 'notifications']
        found_tables = [table[0] for table in tables]
        
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(found_tables)}")
        for table in found_tables:
            print(f"   ‚úÖ {table}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        missing_tables = set(expected_tables) - set(found_tables)
        if missing_tables:
            print(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã: {list(missing_tables)}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        for table in found_tables:
            cursor.execute(f"SELECT COUNT(*) FROM {table}")
            count = cursor.fetchone()[0]
            print(f"   üìä {table}: {count} –∑–∞–ø–∏—Å–µ–π")
        
        conn.close()
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def update_env_file():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ .env —Ñ–∞–π–ª–∞"""
    print("üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞...")
    
    database_url = f'sqlite:///{DATABASE_PATH}'
    
    # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π .env
    env_content = ""
    if os.path.exists('.env'):
        with open('.env', 'r', encoding='utf-8') as f:
            env_content = f.read()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º DATABASE_URL
    if 'DATABASE_URL=' in env_content:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–æ–∫—É
        lines = env_content.split('\n')
        for i, line in enumerate(lines):
            if line.startswith('DATABASE_URL='):
                if database_url not in line:
                    lines[i] = f'DATABASE_URL={database_url}'
                    print(f"‚úÖ DATABASE_URL –æ–±–Ω–æ–≤–ª–µ–Ω: {database_url}")
                else:
                    print(f"‚ÑπÔ∏è DATABASE_URL —É–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π: {database_url}")
                break
        env_content = '\n'.join(lines)
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        env_content += f'\nDATABASE_URL={database_url}\n'
        print(f"‚úÖ DATABASE_URL –¥–æ–±–∞–≤–ª–µ–Ω: {database_url}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º .env
    with open('.env', 'w', encoding='utf-8') as f:
        f.write(env_content)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    print("üöÄ –ü–†–û–°–¢–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    try:
        # 1. –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if create_basic_database():
            print("\n‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        else:
            print("\n‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            return False
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if verify_database():
            print("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
        else:
            print("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ")
            return False
        
        # 3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ .env —Ñ–∞–π–ª–∞
        update_env_file()
        
        print("\n" + "=" * 50)
        print("üéâ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print("=" * 50)
        print(f"üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {DATABASE_PATH}")
        print(f"üë§ –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {YOUR_TELEGRAM_ID}")
        print("\nüìã –ß–¢–û –î–ê–õ–¨–®–ï:")
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: python working_app.py")
        print("2. –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä: http://localhost:5000")
        print("3. –î–æ–±–∞–≤—å—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
        print("4. –°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
        print("=" * 50)
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        print("\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
        print("1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        print("2. –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ SQLite —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return False

if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1)
