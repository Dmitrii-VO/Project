# working_app.py - –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
import os
import sys
import json
import logging
import sqlite3
import re
import html
import time
from collections import defaultdict
from typing import Optional, Tuple, Dict, Any, List
from datetime import datetime, timedelta
from flask import Flask, render_template_string, request, jsonify, session, redirect
from functools import wraps

from app import initialize_systems
from flask import render_template
from app.api.channel_recommendations import *
from app.templates.pages import *


try:
    from enhanced_api_routes import add_enhanced_routes

    enhanced_routes_available = True
    print("‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
except ImportError as e:
    print(f"‚ö†Ô∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
    enhanced_routes_available = False


    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    def add_enhanced_routes(app=None):
        print("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤")
        return False


# –ò–º–ø–æ—Ä—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –≤—ã–ø–ª–∞—Ç
TELEGRAM_PAYMENT_TOKEN = os.environ.get('TELEGRAM_PAYMENT_TOKEN')
WEBHOOK_SECRET = os.environ.get('WEBHOOK_SECRET', 'your-webhook-secret-here')

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
app_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'app')
if app_path not in sys.path:
    sys.path.insert(0, app_path)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Logger –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é

try:
    from dotenv import load_dotenv

    load_dotenv()
except ImportError:
    print("‚ö†Ô∏è python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: pip install python-dotenv")

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
try:
    from real_telegram_integration import create_telegram_service, run_async_in_sync

    TELEGRAM_INTEGRATION = True
    logger.info("‚úÖ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
except ImportError as e:
    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª–∏ Telegram: {e}")
    print("Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã")
    TELEGRAM_INTEGRATION = False
    create_telegram_service = None
    run_async_in_sync = None

# === –ò–ú–ü–û–†–¢ –°–ò–°–¢–ï–ú–´ –û–§–§–ï–†–û–í ===
try:
    from add_offer import (
        add_offer,
        get_user_offers,
        get_offer_by_id,
        update_offer_status,
        validate_offer_data,
        ensure_user_exists
    )

    OFFERS_SYSTEM_ENABLED = True
    logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Ñ—Ñ–µ—Ä–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
except ImportError as e:
    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –æ—Ñ—Ñ–µ—Ä–æ–≤: {e}")
    OFFERS_SYSTEM_ENABLED = False

# === –ò–ú–ü–û–†–¢ –°–ò–°–¢–ï–ú–´ –û–¢–ö–õ–ò–ö–û–í ===
try:
    from offer_responses import (
        get_suitable_offers_for_channel,
        create_offer_response,
        get_channel_responses,
        get_offer_responses,
        update_response_status,
        get_response_statistics,
        calculate_suitability_score
    )

    RESPONSES_SYSTEM_ENABLED = True
    logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Ç–∫–ª–∏–∫–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
except ImportError as e:
    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –æ—Ç–∫–ª–∏–∫–æ–≤: {e}")
    RESPONSES_SYSTEM_ENABLED = False

# === –ò–ú–ü–û–†–¢ –ü–õ–ê–¢–ï–ñ–ù–û–ô –°–ò–°–¢–ï–ú–´ ===
try:
    from app.services.payments_system import (
        register_payments_routes,
        create_payments_tables,
        PaymentManager,
        EscrowManager, MAX_RETRY_ATTEMPTS
    )
    from app.services.telegram_webhooks import register_webhook_routes
    PAYMENTS_SYSTEM_ENABLED = True
    logger.info("‚úÖ –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
except ImportError as e:
    logger.error(f"‚ùå –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
    PAYMENTS_SYSTEM_ENABLED = False
# === –ò–ú–ü–û–†–¢ –ü–†–û–î–í–ò–ù–£–¢–û–ì–û –ê–õ–ì–û–†–ò–¢–ú–ê ===
try:
    from app.services.advanced_matching_algorithm import (
        get_advanced_suitable_offers_for_channel,
        analyze_offer_channel_compatibility,
        AdvancedMatchingEngine
    )
    ADVANCED_MATCHING_ENABLED = True
    logger.info("‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω")
except ImportError as e:
    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º: {e}")
    ADVANCED_MATCHING_ENABLED = False

# === –ò–ú–ü–û–†–¢ –†–ê–°–®–ò–†–ï–ù–ù–û–ô –ê–ù–ê–õ–ò–¢–ò–ö–ò ===
try:
    from app.services.analytics_api import add_analytics_routes, AnalyticsEngine
    from app.services.placement_tracking import PlacementTracker, add_tracking_routes
    from app.services.ai_recommendations import AIRecommendationEngine, add_ai_recommendation_routes

    ANALYTICS_SYSTEM_ENABLED = True
    PLACEMENT_TRACKING_ENABLED = True
    AI_RECOMMENDATIONS_ENABLED = True

    logger.info("‚úÖ –ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
    logger.info("  üìä –ë–∞–∑–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞: –ê–∫—Ç–∏–≤–Ω–∞")
    logger.info("  üìà –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–π: –ê–∫—Ç–∏–≤–Ω–æ")
    logger.info("  ü§ñ AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: –ê–∫—Ç–∏–≤–Ω—ã")

except ImportError as e:
    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É: {e}")
    ANALYTICS_SYSTEM_ENABLED = False
    PLACEMENT_TRACKING_ENABLED = False
    AI_RECOMMENDATIONS_ENABLED = False

try:
    from app.services.payout_system import (
        register_payout_routes,
        create_payout_tables,
        PayoutManager,
        AutoPayoutScheduler,
        TelegramPayoutHandler
    )
    PAYOUT_SYSTEM_ENABLED = True
    logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã–ø–ª–∞—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
except ImportError as e:
    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –≤—ã–ø–ª–∞—Ç: {e}")
    PAYOUT_SYSTEM_ENABLED = False


def check_services_availability():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    services_status = {
        'payments': PAYMENTS_SYSTEM_ENABLED,
        'analytics': ANALYTICS_SYSTEM_ENABLED,
        'placement_tracking': PLACEMENT_TRACKING_ENABLED,
        'ai_recommendations': AI_RECOMMENDATIONS_ENABLED,
        'payouts': PAYOUT_SYSTEM_ENABLED,
        'advanced_matching': ADVANCED_MATCHING_ENABLED,
        'notifications': NOTIFICATIONS_ENABLED
    }

    logger.info("üîç –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:")
    for service, status in services_status.items():
        icon = "‚úÖ" if status else "‚ùå"
        logger.info(f"  {icon} {service}: {'–ê–∫—Ç–∏–≤–µ–Ω' if status else '–û—Ç–∫–ª—é—á–µ–Ω'}")

    return services_status
# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –≤—ã–ø–ª–∞—Ç
payout_manager = None

# –°–æ–∑–¥–∞–Ω–∏–µ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__,
            template_folder='app/templates',
            static_folder='app/static',
            channels_foleder='app/pages/channels')

app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'dev-secret-key-change-in-production')


# === –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –î–õ–Ø –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ===
# Rate limiting storage
request_counts = defaultdict(list)
REQUEST_LIMIT = 100  # –∑–∞–ø—Ä–æ—Å–æ–≤
TIME_WINDOW = 3600  # –∑–∞ —á–∞—Å

# –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ IP
suspicious_ips = set()
blocked_ips = set()


# === –§–£–ù–ö–¶–ò–ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ===

def get_client_ip():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ IP –∫–ª–∏–µ–Ω—Ç–∞"""
    forwarded_for = request.headers.get('X-Forwarded-For')
    if forwarded_for:
        return forwarded_for.split(',')[0].strip()

    real_ip = request.headers.get('X-Real-IP')
    if real_ip:
        return real_ip

    return request.environ.get('REMOTE_ADDR', '127.0.0.1')


def rate_limit_check(identifier: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting"""
    now = time.time()
    request_counts[identifier] = [
        req_time for req_time in request_counts[identifier]
        if now - req_time < TIME_WINDOW
    ]

    if len(request_counts[identifier]) >= REQUEST_LIMIT:
        return False

    request_counts[identifier].append(now)
    return True


def is_suspicious_request(request_data: dict) -> bool:
    """–î–µ—Ç–µ–∫—Ü–∏—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    user_agent = request_data.get('user_agent', '').lower()

    suspicious_agents = [
        'sqlmap', 'nikto', 'nmap', 'masscan', 'nessus',
        'burp', 'zap', 'w3af', 'havij', 'python-requests/2.0'
    ]

    for agent in suspicious_agents:
        if agent in user_agent:
            return True

    if not user_agent or len(user_agent) < 10:
        return True

    return False


def log_security_event(event_type: str, details: dict):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    security_logger = logging.getLogger('security')
    security_logger.warning(f"SECURITY_EVENT: {event_type}", extra={
        'details': details,
        'timestamp': datetime.now().isoformat()
    })


def validate_telegram_username(username: str) -> Tuple[bool, str]:
    """–°—Ç—Ä–æ–≥–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è Telegram username —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç SQL injection"""
    if not username:
        return False, "Username –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"

    cleaned = username.strip().lstrip('@')

    # SQL injection –∑–∞—â–∏—Ç–∞
    sql_patterns = [
        r"['\";]", r"--", r"/\*", r"\*/", r"\bDROP\b", r"\bDELETE\b",
        r"\bUPDATE\b", r"\bINSERT\b", r"\bSELECT\b", r"\bUNION\b",
        r"\bOR\b.*=.*=", r"1\s*=\s*1", r"1\s*=\s*'1'"
    ]

    for pattern in sql_patterns:
        if re.search(pattern, cleaned, re.IGNORECASE):
            return False, "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ username"

    if len(cleaned) < 5 or len(cleaned) > 32:
        return False, "Username –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 5 –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤"

    if not re.match(r'^[a-zA-Z][a-zA-Z0-9_]*$', cleaned):
        return False, "Username –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è"

    return True, cleaned


def sanitize_input(input_str: str, max_length: int = 100) -> Optional[str]:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞"""
    if not input_str:
        return None

    cleaned = re.sub(r'[<>"\';\\]', '', input_str.strip())

    if len(cleaned) > max_length:
        cleaned = cleaned[:max_length]

    cleaned = html.escape(cleaned)
    return cleaned if cleaned else None


def require_telegram_auth(f):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram"""

    @wraps(f)
    def decorated_function(*args, **kwargs):
        telegram_user_id = get_current_user_id()

        if not telegram_user_id:
            logger.warning(f"Unauthorized access attempt to {request.endpoint} from IP: {get_client_ip()}")
            logger.warning(f"Request headers: {dict(request.headers)}")

            return jsonify({
                'success': False,
                'error': '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram',
                'code': 'AUTH_REQUIRED',
                'debug_info': {
                    'endpoint': request.endpoint,
                    'method': request.method,
                    'has_headers': bool(request.headers.get('X-Telegram-User-Id')),
                    'has_json': request.is_json,
                    'content_type': request.headers.get('Content-Type')
                }
            }), 401

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        user = safe_execute_query(
            'SELECT id FROM users WHERE telegram_id = ?',
            (telegram_user_id,),
            fetch_one=True
        )

        if not user:
            logger.warning(f"User {telegram_user_id} not found in database")
            return jsonify({
                'success': False,
                'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ',
                'code': 'USER_NOT_FOUND'
            }), 401

        logger.info(f"Authenticated user {telegram_user_id} accessing {request.endpoint}")
        return f(*args, **kwargs)

    return decorated_function


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
security_logger = logging.getLogger('security')
try:
    security_handler = logging.FileHandler('security.log')
    security_handler.setFormatter(logging.Formatter(
        '%(asctime)s - SECURITY - %(levelname)s - %(message)s'
    ))
    security_logger.addHandler(security_handler)
    security_logger.setLevel(logging.WARNING)
except Exception as e:
    print(f"Warning: Could not setup security logging: {e}")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL = os.environ.get('DATABASE_URL', 'sqlite:///telegram_mini_app.db')
DATABASE_PATH = DATABASE_URL.replace('sqlite:///', '')
YOUR_TELEGRAM_ID = int(os.environ.get('YOUR_TELEGRAM_ID', 373086959))
BOT_TOKEN = os.environ.get('BOT_TOKEN')

# –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ Telegram –±–æ—Ç–∞.")
    sys.exit(1)

if not TELEGRAM_INTEGRATION:
    logger.error("‚ùå Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞! –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏.")
    sys.exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram —Å–µ—Ä–≤–∏—Å–∞
telegram_service = create_telegram_service(BOT_TOKEN)
if not telegram_service:
    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Telegram —Å–µ—Ä–≤–∏—Å!")
    sys.exit(1)

try:
    from app.services.notifications_system import notifications_bp, NotificationManager, AutoNotifications

    app.register_blueprint(notifications_bp)
    logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
    NOTIFICATIONS_ENABLED = True
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
    NOTIFICATIONS_ENABLED = False


# === –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–• ===
def get_db_connection():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SQLite"""
    try:
        conn = sqlite3.connect(DATABASE_PATH)
        conn.row_factory = sqlite3.Row  # –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å–ª–æ–≤–∞—Ä–µ–π
        conn.execute('PRAGMA foreign_keys = ON')  # –í–∫–ª—é—á–∞–µ–º foreign keys
        return conn
    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SQLite: {e}")


def safe_execute_query(query, params=None, fetch_one=False, fetch_all=False):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        # –í–ê–ñ–ù–û: –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        if params is None:
            params = ()

        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        if any(keyword in query.upper() for keyword in ['DROP', 'DELETE', 'TRUNCATE', 'ALTER']):
            logger.warning(f"Potentially dangerous query executed: {query[:100]}...")

        cursor.execute(query, params)

        result = None
        if fetch_one:
            row = cursor.fetchone()
            result = dict(row) if row else None
        elif fetch_all:
            rows = cursor.fetchall()
            result = [dict(row) for row in rows] if rows else []

        if not (fetch_one or fetch_all):
            conn.commit()

        conn.close()
        return result

    except sqlite3.Error as e:
        logger.error(f"Database error: {e}")
        logger.error(f"Query: {query}")
        if params:
            logger.error(f"Params: {params}")
        return None
    except Exception as e:
        logger.error(f"Unexpected error in safe_execute_query: {e}")
        return None


def validate_offer_data_secure(data):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ñ—Ñ–µ—Ä–∞"""
    errors = []

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ title —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç XSS
    title = sanitize_input(data.get('title', ''), 200)
    if not title or len(title) < 10:
        errors.append('–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 10 –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ description
    description = sanitize_input(data.get('description', ''), 500)
    if not description or len(description) < 20:
        errors.append('–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 20 –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ content
    content = sanitize_input(data.get('content', ''), 2000)
    if not content or len(content) < 50:
        errors.append('–ö–æ–Ω—Ç–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 50 –¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ price —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç injection
    try:
        price = float(data.get('price', 0))
        if price <= 0 or price > 1000000:
            errors.append('–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 1,000,000')
    except (ValueError, TypeError):
        errors.append('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ currency
    currency = data.get('currency', '').upper()
    allowed_currencies = ['RUB', 'USD', 'EUR']
    if currency not in allowed_currencies:
        errors.append('–í–∞–ª—é—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å RUB, USD –∏–ª–∏ EUR')

    return errors


def init_database():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        logger.info("üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if not os.path.exists(DATABASE_PATH):
            logger.error(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {DATABASE_PATH}")
            logger.info("–ó–∞–ø—É—Å—Ç–∏—Ç–µ sqlite_migration.py –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        tables = safe_execute_query("""
            SELECT name FROM sqlite_master 
            WHERE type='table' AND name IN ('users', 'channels', 'offers', 'offer_responses')
        """, fetch_all=True)

        if not tables or len(tables) < 4:
            logger.error(f"‚ùå –ù–µ –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–π–¥–µ–Ω—ã. –ù–∞–π–¥–µ–Ω–æ: {len(tables) if tables else 0}")
            logger.info("–ó–∞–ø—É—Å—Ç–∏—Ç–µ sqlite_migration.py –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ö–µ–º—ã")
            return False
        if PAYMENTS_SYSTEM_ENABLED:
            create_payments_tables()
            if create_payout_tables():
                logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–∏—Å—Ç–µ–º—ã –≤—ã–ø–ª–∞—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            else:
                logger.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü —Å–∏—Å—Ç–µ–º—ã –≤—ã–ø–ª–∞—Ç")
                return False
        logger.info("‚úÖ SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
        return True




    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SQLite: {e}")
        return False


def initialize_analytics_system():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    try:
        if not ANALYTICS_SYSTEM_ENABLED:
            logger.warning("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return False

        logger.info("üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...")

        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        add_analytics_routes(app, DATABASE_PATH)

        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–≤–∏–∂–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        analytics_engine = AnalyticsEngine(DATABASE_PATH)

        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
        return False


def initialize_full_analytics_system():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
    try:
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...")

        systems_status = {
            'basic_analytics': False,
            'placement_tracking': False,
            'ai_recommendations': False
        }

        initialization_log = []

        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        if ANALYTICS_SYSTEM_ENABLED:
            try:
                add_analytics_routes(app, DATABASE_PATH)
                analytics_engine = AnalyticsEngine(DATABASE_PATH)

                # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                test_metrics = analytics_engine._get_demo_metrics()
                if test_metrics:
                    systems_status['basic_analytics'] = True
                    initialization_log.append("‚úÖ –ë–∞–∑–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞: –ú–∞—Ä—à—Ä—É—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã, –¥–≤–∏–∂–æ–∫ —Å–æ–∑–¥–∞–Ω")
                else:
                    initialization_log.append("‚ö†Ô∏è –ë–∞–∑–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞: –ú–∞—Ä—à—Ä—É—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã, –Ω–æ —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª")

            except Exception as e:
                initialization_log.append(f"‚ùå –ë–∞–∑–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞: –û—à–∏–±–∫–∞ - {e}")
                logger.error(f"Basic analytics initialization error: {e}")
        else:
            initialization_log.append("‚ùå –ë–∞–∑–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞: –ú–æ–¥—É–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")

        # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏–π
        if PLACEMENT_TRACKING_ENABLED:
            try:
                add_tracking_routes(app, DATABASE_PATH)
                placement_tracker = PlacementTracker(DATABASE_PATH)

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
                if placement_tracker.ensure_tracking_tables():
                    systems_status['placement_tracking'] = True
                    initialization_log.append("‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–π: –ú–∞—Ä—à—Ä—É—Ç—ã –∏ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")
                else:
                    initialization_log.append("‚ö†Ô∏è –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–π: –ü—Ä–æ–±–ª–µ–º—ã —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏ –ë–î")

            except Exception as e:
                initialization_log.append(f"‚ùå –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–π: –û—à–∏–±–∫–∞ - {e}")
                logger.error(f"Placement tracking initialization error: {e}")
        else:
            initialization_log.append("‚ùå –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–π: –ú–æ–¥—É–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")

        # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        if AI_RECOMMENDATIONS_ENABLED:
            try:
                add_ai_recommendation_routes(app, DATABASE_PATH)
                ai_engine = AIRecommendationEngine(DATABASE_PATH)

                # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ–º–æ-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
                demo_recommendations = ai_engine._get_fallback_recommendations()
                if demo_recommendations:
                    systems_status['ai_recommendations'] = True
                    initialization_log.append("‚úÖ AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: –ú–∞—Ä—à—Ä—É—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã, –¥–≤–∏–∂–æ–∫ –≥–æ—Ç–æ–≤")
                else:
                    initialization_log.append("‚ö†Ô∏è AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: –î–≤–∏–∂–æ–∫ —Å–æ–∑–¥–∞–Ω, –Ω–æ —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª")

            except Exception as e:
                initialization_log.append(f"‚ùå AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: –û—à–∏–±–∫–∞ - {e}")
                logger.error(f"AI recommendations initialization error: {e}")
        else:
            initialization_log.append("‚ùå AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: –ú–æ–¥—É–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –ª–æ–≥
        app.analytics_status = systems_status
        app.analytics_initialization_log = initialization_log

        # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥
        for log_entry in initialization_log:
            logger.info(f"  {log_entry}")

        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        active_systems = sum(systems_status.values())
        total_systems = len(systems_status)

        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {active_systems}/{total_systems} —Å–∏—Å—Ç–µ–º –∞–∫—Ç–∏–≤–Ω–æ")

        if active_systems == total_systems:
            logger.info("üéâ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!")
        elif active_systems >= 1:
            logger.info("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —á–∞—Å—Ç–∏—á–Ω–æ –≥–æ—Ç–æ–≤–∞, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        else:
            logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–∏ –æ–¥–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")

        return active_systems > 0

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
        app.analytics_status = {'error': str(e)}
        return False


# === UTILITY –§–£–ù–ö–¶–ò–ò ===
def get_current_user_id():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ Telegram User ID"""
    # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    user_id_header = request.headers.get('X-Telegram-User-Id')
    if user_id_header:
        try:
            return int(user_id_header)
        except (ValueError, TypeError):
            pass

    # –ò–∑ POST –¥–∞–Ω–Ω—ã—Ö
    if request.method == 'POST' and request.is_json:
        try:
            data = request.get_json()
            if data and 'telegram_user_id' in data:
                return int(data['telegram_user_id'])
        except:
            pass

    # –ò–∑ GET –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    user_id_param = request.args.get('telegram_user_id')
    if user_id_param:
        try:
            return int(user_id_param)
        except (ValueError, TypeError):
            pass

    # Fallback –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    return YOUR_TELEGRAM_ID

def validate_telegram_data(init_data_raw):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram WebApp"""
    try:
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–ª–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å HMAC)
        if not init_data_raw or 'user=' not in init_data_raw:
            return None

        # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ initData
        import urllib.parse

        for param in init_data_raw.split('&'):
            if param.startswith('user='):
                user_data = urllib.parse.unquote(param[5:])
                try:
                    import json
                    user_info = json.loads(user_data)
                    if 'id' in user_info:
                        return int(user_info['id'])
                except:
                    pass
        return None

    except Exception as e:
        logger.error(f"Error validating Telegram data: {e}")
        return None


@app.route('/api/auth/telegram', methods=['POST'])
def telegram_auth():
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Telegram WebApp"""
    try:
        data = request.get_json()
        if not data:
            return jsonify({'success': False, 'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}), 400

        # –ü–æ–ª—É—á–∞–µ–º Telegram User ID
        telegram_user_id = None

        # –°–ø–æ—Å–æ–± 1: –ü—Ä—è–º–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ user_id
        if 'telegram_user_id' in data:
            try:
                telegram_user_id = int(data['telegram_user_id'])
            except (ValueError, TypeError):
                pass

        # –°–ø–æ—Å–æ–± 2: –ò–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        if not telegram_user_id:
            header_user_id = request.headers.get('X-Telegram-User-Id')
            if header_user_id:
                try:
                    telegram_user_id = int(header_user_id)
                except (ValueError, TypeError):
                    pass

        # –°–ø–æ—Å–æ–± 3: –ò–∑ initData
        if not telegram_user_id and 'initData' in data:
            telegram_user_id = validate_telegram_data(data['initData'])

        # –°–ø–æ—Å–æ–± 4: –ò–∑ user –æ–±—ä–µ–∫—Ç–∞
        if not telegram_user_id and 'user' in data:
            user_data = data['user']
            if isinstance(user_data, dict) and 'id' in user_data:
                try:
                    telegram_user_id = int(user_data['id'])
                except (ValueError, TypeError):
                    pass

        if not telegram_user_id:
            logger.error(f"Failed to get telegram_user_id from auth request")
            logger.error(f"Data: {data}")
            logger.error(f"Headers: {dict(request.headers)}")

            return jsonify({
                'success': False,
                'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Telegram User ID',
                'debug_info': {
                    'has_telegram_user_id': 'telegram_user_id' in data,
                    'has_header': bool(request.headers.get('X-Telegram-User-Id')),
                    'has_initData': 'initData' in data,
                    'has_user': 'user' in data
                }
            }), 400

        # –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
        username = data.get('username') or f'user_{telegram_user_id}'
        first_name = data.get('first_name') or 'User'

        user_db_id = ensure_user_exists(telegram_user_id, username, first_name)

        if not user_db_id:
            return jsonify({
                'success': False,
                'error': '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
            }), 500

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏–∏
        session['telegram_user_id'] = telegram_user_id

        logger.info(f"Telegram user {telegram_user_id} authenticated successfully")

        return jsonify({
            'success': True,
            'telegram_user_id': telegram_user_id,
            'user_db_id': user_db_id,
            'username': username,
            'message': '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞'
        })

    except Exception as e:
        logger.error(f"Telegram auth error: {e}")
        return jsonify({
            'success': False,
            'error': '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
        }), 500

def log_user_access(telegram_user_id, endpoint, success=True, error=None):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    log_entry = {
        'timestamp': datetime.now().isoformat(),
        'telegram_user_id': telegram_user_id,
        'endpoint': endpoint,
        'success': success,
        'error': error,
        'ip': get_client_ip(),
        'user_agent': request.headers.get('User-Agent', '')
    }

    if success:
        logger.info(f"User access: {telegram_user_id} -> {endpoint}")
    else:
        logger.warning(f"Failed user access: {telegram_user_id} -> {endpoint}, Error: {error}")
def ensure_user_exists(telegram_user_id, username=None, first_name=None):
    """–û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –ø–æ Telegram ID"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = safe_execute_query(
            'SELECT id FROM users WHERE telegram_id = ?',
            (telegram_user_id,),
            fetch_one=True
        )

        if not user:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            logger.info(f"Creating new user for Telegram ID: {telegram_user_id}")

            safe_execute_query('''
                INSERT INTO users (telegram_id, username, first_name, is_admin, created_at) 
                VALUES (?, ?, ?, ?, ?)
            ''', (
                telegram_user_id,
                username or f'user_{telegram_user_id}',
                first_name or 'Telegram User',
                telegram_user_id == YOUR_TELEGRAM_ID,  # –î–µ–ª–∞–µ–º –∞–¥–º–∏–Ω–æ–º –µ—Å–ª–∏ —ç—Ç–æ –≤–∞—à ID
                datetime.now().isoformat()
            ))

            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = safe_execute_query(
                'SELECT id FROM users WHERE telegram_id = ?',
                (telegram_user_id,),
                fetch_one=True
            )
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            if username or first_name:
                safe_execute_query('''
                    UPDATE users 
                    SET username = COALESCE(?, username), 
                        first_name = COALESCE(?, first_name),
                        updated_at = ?
                    WHERE telegram_id = ?
                ''', (username, first_name, datetime.now().isoformat(), telegram_user_id))

        return user['id'] if user else None

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_user_id}: {e}")
        return None


# === –û–°–ù–û–í–ù–´–ï –ú–ê–†–®–†–£–¢–´ ===
@app.before_request
def security_middleware():
    """Middleware –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ü–ï–†–ï–î –∫–∞–∂–¥—ã–º –∑–∞–ø—Ä–æ—Å–æ–º"""

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ
    client_ip = get_client_ip()
    user_agent = request.headers.get('User-Agent', '')

    # 1. –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö IP
    if client_ip in blocked_ips:
        log_security_event('BLOCKED_IP_ACCESS', {
            'ip': client_ip,
            'path': request.path,
            'method': request.method
        })
        return jsonify({'error': 'Access denied'}), 403

    # 2. Rate limiting
    if not rate_limit_check(f"global_{client_ip}"):
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
        suspicious_ips.add(client_ip)

        log_security_event('RATE_LIMIT_EXCEEDED', {
            'ip': client_ip,
            'path': request.path,
            'user_agent': user_agent
        })

        return jsonify({'error': 'Too many requests'}), 429

    # 3. –î–µ—Ç–µ–∫—Ü–∏—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    request_data = {
        'user_agent': user_agent,
        'ip': client_ip,
        'path': request.path,
        'method': request.method
    }

    if is_suspicious_request(request_data):
        suspicious_ips.add(client_ip)
        log_security_event('SUSPICIOUS_REQUEST', request_data)

    # 4. –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞
    if request.content_length and request.content_length > 10 * 1024 * 1024:  # 10MB
        log_security_event('LARGE_REQUEST', {
            'ip': client_ip,
            'size': request.content_length,
            'path': request.path
        })
        return jsonify({'error': 'Request too large'}), 413

    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ Content-Type –¥–ª—è POST –∑–∞–ø—Ä–æ—Å–æ–≤
    if request.method == 'POST' and request.path.startswith('/api/'):
        content_type = request.headers.get('Content-Type', '')
        if not content_type.startswith('application/json'):
            return jsonify({'error': 'Invalid Content-Type'}), 400
    # 6 –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ API –∫–∞–Ω–∞–ª–æ–≤
    if request.path.startswith('/api/channels'):
        telegram_user_id = get_current_user_id()
        logger.info(f"API Channels access: {request.method} {request.path} by user {telegram_user_id}")

        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        headers_info = {
            'X-Telegram-User-Id': request.headers.get('X-Telegram-User-Id'),
            'Content-Type': request.headers.get('Content-Type'),
            'User-Agent': request.headers.get('User-Agent')
        }
        logger.debug(f"Request headers: {headers_info}")
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        headers_info = {
            'X-Telegram-User-Id': request.headers.get('X-Telegram-User-Id'),
            'Content-Type': request.headers.get('Content-Type'),
            'User-Agent': request.headers.get('User-Agent')
        }
        logger.debug(f"Request headers: {headers_info}")

def telegram_auth_middleware():
    """Middleware –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∫ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º –∫–∞–Ω–∞–ª–æ–≤
    if not request.path.startswith('/api/channels'):
        return

    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º GET –∑–∞–ø—Ä–æ—Å—ã –∫ –æ–±—â–∏–º —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º
    if request.method == 'GET' and request.path in ['/api/channels', '/api/channels/']:
        return

    try:
        telegram_user_id = get_current_user_id()

        if telegram_user_id:
            # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î
            user_db_id = ensure_user_exists(telegram_user_id)

            if not user_db_id:
                logger.warning(f"Failed to ensure user exists for Telegram ID: {telegram_user_id}")
            else:
                logger.debug(f"Telegram user {telegram_user_id} authenticated for {request.path}")

    except Exception as e:
        logger.error(f"Telegram auth middleware error: {e}")

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –Ω–æ–≤—ã–º –¥–∏–∑–∞–π–Ω–æ–º"""
    return render_template('index.html')

@app.route('/index')
def index_alt():
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    return redirect('/')

@app.route('/channels')
def channels_redirect():
    """–†–µ–¥–∏—Ä–µ–∫—Ç —Å /channels –Ω–∞ /channels-enhanced –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    return redirect('/channels-enhanced')


@app.route('/debug/templates')
def debug_templates():
    """–û—Ç–ª–∞–¥–æ—á–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤"""
    import os

    templates_dir = os.path.join(app.root_path, 'templates')
    static_dir = os.path.join(app.root_path, 'static')

    debug_info = {
        'templates_dir_exists': os.path.exists(templates_dir),
        'static_dir_exists': os.path.exists(static_dir),
        'templates_dir_path': templates_dir,
        'static_dir_path': static_dir,
        'templates_files': [],
        'static_files': []
    }

    if os.path.exists(templates_dir):
        debug_info['templates_files'] = os.listdir(templates_dir)

    if os.path.exists(static_dir):
        for root, dirs, files in os.walk(static_dir):
            for file in files:
                rel_path = os.path.relpath(os.path.join(root, file), static_dir)
                debug_info['static_files'].append(rel_path)

    return jsonify(debug_info)

@app.route('/channels-enhanced')
def channels_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏"""
    return render_template('channels.html')


@app.route('/analytics')
def analytics_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        telegram_user_id = get_current_user_id()

        if not telegram_user_id:
            # –ï—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–º–æ-–≤–µ—Ä—Å–∏—é
            logger.info("–ü–æ–∫–∞–∑ –¥–µ–º–æ-–≤–µ—Ä—Å–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return render_template('analytics.html', demo_mode=True)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        user = safe_execute_query(
            'SELECT id, username FROM users WHERE telegram_id = ?',
            (telegram_user_id,),
            fetch_one=True
        )

        if not user:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
            return render_template('analytics.html', demo_mode=True)

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ —à–∞–±–ª–æ–Ω
        user_stats = {}
        if ANALYTICS_SYSTEM_ENABLED:
            try:
                analytics_engine = AnalyticsEngine(DATABASE_PATH)
                user_stats = analytics_engine.get_user_metrics(telegram_user_id, '30d')
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
                user_stats = {}

        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_user_id}")

        return render_template('analytics.html',
                               demo_mode=False,
                               user_stats=user_stats,
                               telegram_user_id=telegram_user_id,
                               analytics_enabled=ANALYTICS_SYSTEM_ENABLED)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
        return render_template('analytics.html', demo_mode=True, error=str(e))


@app.route('/advanced-offers/<int:channel_id>')
def advanced_offers_page(channel_id):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ñ—Ñ–µ—Ä–æ–≤ —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞
        telegram_user_id = get_current_user_id()
        if not telegram_user_id:
            return redirect('/')

        channel = safe_execute_query('''
                                     SELECT c.*, u.telegram_id as owner_telegram_id
                                     FROM channels c
                                              JOIN users u ON c.owner_id = u.id
                                     WHERE c.id = ?
                                       AND u.telegram_id = ?
                                     ''', (channel_id, telegram_user_id), fetch_one=True)

        if not channel:
            return render_template('error.html', message='–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω')

        return render_template('advanced_offers.html',
                               channel=channel,
                               channel_id=channel_id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤: {e}")
        return render_template('error.html', message='–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏')


@app.route('/analytics-demo')
def analytics_demo_page():
    """–î–µ–º–æ-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    return render_template('analytics_demo.html')


@app.route('/api/analytics/test-all-systems')
@require_telegram_auth
def api_test_all_systems():
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    try:
        telegram_user_id = get_current_user_id()

        test_results = {
            'timestamp': datetime.now().isoformat(),
            'user_id': telegram_user_id,
            'systems': {
                'basic_analytics': False,
                'placement_tracking': False,
                'ai_recommendations': False,
                'database': False
            },
            'details': {},
            'errors': [],
            'performance': {}
        }

        # 1. –¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        try:
            start_time = datetime.now()
            conn = get_db_connection()
            if conn:
                cursor = conn.cursor()
                cursor.execute('SELECT COUNT(*) FROM users')
                user_count = cursor.fetchone()[0]
                conn.close()

                test_results['systems']['database'] = True
                test_results['details']['database'] = {
                    'connection': 'success',
                    'user_count': user_count,
                    'response_time_ms': (datetime.now() - start_time).total_seconds() * 1000
                }

        except Exception as e:
            test_results['errors'].append(f'Database test failed: {str(e)}')

        # 2. –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        if ANALYTICS_SYSTEM_ENABLED:
            try:
                start_time = datetime.now()
                analytics_engine = AnalyticsEngine(DATABASE_PATH)
                metrics = analytics_engine.get_user_metrics(telegram_user_id, '7d')

                test_results['systems']['basic_analytics'] = True
                test_results['details']['basic_analytics'] = {
                    'metrics_generated': bool(metrics),
                    'revenue': metrics.get('total_revenue', 0),
                    'response_time_ms': (datetime.now() - start_time).total_seconds() * 1000
                }

            except Exception as e:
                test_results['errors'].append(f'Basic analytics test failed: {str(e)}')

        # 3. –¢–µ—Å—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏–π
        if PLACEMENT_TRACKING_ENABLED:
            try:
                start_time = datetime.now()
                placement_tracker = PlacementTracker(DATABASE_PATH)
                summary = placement_tracker.get_performance_summary(telegram_user_id, 7)

                test_results['systems']['placement_tracking'] = True
                test_results['details']['placement_tracking'] = {
                    'summary_generated': bool(summary),
                    'placements_count': summary.get('total_placements', 0),
                    'response_time_ms': (datetime.now() - start_time).total_seconds() * 1000
                }

            except Exception as e:
                test_results['errors'].append(f'Placement tracking test failed: {str(e)}')

        # 4. –¢–µ—Å—Ç AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        if AI_RECOMMENDATIONS_ENABLED:
            try:
                start_time = datetime.now()
                ai_engine = AIRecommendationEngine(DATABASE_PATH)
                recommendations = ai_engine.generate_recommendations(telegram_user_id, 7)

                test_results['systems']['ai_recommendations'] = True
                test_results['details']['ai_recommendations'] = {
                    'recommendations_count': len(recommendations),
                    'has_high_priority': any(r.priority == 'high' for r in recommendations),
                    'response_time_ms': (datetime.now() - start_time).total_seconds() * 1000
                }

            except Exception as e:
                test_results['errors'].append(f'AI recommendations test failed: {str(e)}')

        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        working_systems = sum(test_results['systems'].values())
        total_systems = len(test_results['systems'])

        test_results['summary'] = {
            'working_systems': working_systems,
            'total_systems': total_systems,
            'success_rate': round((working_systems / total_systems) * 100, 1),
            'has_errors': len(test_results['errors']) > 0,
            'overall_status': 'healthy' if working_systems >= 3 else 'partial' if working_systems >= 1 else 'failed'
        }

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
        recommendations = []
        if not test_results['systems']['database']:
            recommendations.append('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite')
        if not test_results['systems']['basic_analytics']:
            recommendations.append('–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ analytics_api.py —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')
        if not test_results['systems']['placement_tracking']:
            recommendations.append('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –º–æ–¥—É–ª—å placement_tracking.py')
        if not test_results['systems']['ai_recommendations']:
            recommendations.append('–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ ai_recommendations.py –∑–∞–≥—Ä—É–∂–µ–Ω')

        test_results['recommendations'] = recommendations

        return jsonify({
            'success': True,
            'test_results': test_results
        })

    except Exception as e:
        logger.error(f"System test error: {e}")
        return jsonify({
            'success': False,
            'error': str(e),
            'test_results': {
                'summary': {'overall_status': 'failed', 'error': str(e)}
            }
        }), 500
# === API ENDPOINTS ===

@app.route('/api/stats')
def api_stats():
    """–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_count = safe_execute_query('SELECT COUNT(*) as count FROM users', fetch_one=True)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
        channels_count = safe_execute_query('SELECT COUNT(*) as count FROM channels', fetch_one=True)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ñ—Ñ–µ—Ä–æ–≤ (–µ—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –≤–∫–ª—é—á–µ–Ω–∞)
        if OFFERS_SYSTEM_ENABLED:
            offers_count = safe_execute_query('SELECT COUNT(*) as count FROM offers', fetch_one=True)
        else:
            offers_count = {'count': 0}

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∫–ª–∏–∫–æ–≤ (–µ—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –≤–∫–ª—é—á–µ–Ω–∞)
        if RESPONSES_SYSTEM_ENABLED:
            responses_count = safe_execute_query('SELECT COUNT(*) as count FROM offer_responses', fetch_one=True)
        else:
            responses_count = {'count': 0}

        return jsonify({
            'success': True,
            'users': users_count['count'] if users_count else 0,
            'channels': channels_count['count'] if channels_count else 0,
            'offers': offers_count['count'] if offers_count else 0,
            'responses': responses_count['count'] if responses_count else 0,
            'features': {
                'telegram_integration': TELEGRAM_INTEGRATION,
                'offers_system': OFFERS_SYSTEM_ENABLED,
                'responses_system': RESPONSES_SYSTEM_ENABLED,
                'database': 'SQLite',
                'bot_configured': bool(BOT_TOKEN)
            }
        })



    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return jsonify({
            'success': False,
            'error': str(e),
            'users': 0,
            'channels': 0,
            'offers': 0,
            'responses': 0
        }), 500


@app.route('/api/auth/check', methods=['GET'])
def check_auth():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    try:
        telegram_user_id = get_current_user_id()

        if not telegram_user_id:
            return jsonify({
                'success': False,
                'authenticated': False,
                'error': '–ù–µ—Ç Telegram User ID'
            }), 401

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        user = safe_execute_query(
            'SELECT id, username, first_name FROM users WHERE telegram_id = ?',
            (telegram_user_id,),
            fetch_one=True
        )

        if not user:
            return jsonify({
                'success': False,
                'authenticated': False,
                'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î'
            }), 401

        return jsonify({
            'success': True,
            'authenticated': True,
            'telegram_user_id': telegram_user_id,
            'user_info': {
                'id': user['id'],
                'username': user['username'],
                'first_name': user['first_name']
            }
        })

    except Exception as e:
        logger.error(f"Auth check error: {e}")
        return jsonify({
            'success': False,
            'authenticated': False,
            'error': '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
        }), 500


@app.route('/api/analytics/status')
def api_analytics_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    try:
        telegram_user_id = get_current_user_id()

        status = {
            'analytics_enabled': ANALYTICS_SYSTEM_ENABLED,
            'database_connected': os.path.exists(DATABASE_PATH),
            'user_authenticated': bool(telegram_user_id),
            'telegram_user_id': telegram_user_id
        }

        if ANALYTICS_SYSTEM_ENABLED and telegram_user_id:
            try:
                analytics_engine = AnalyticsEngine(DATABASE_PATH)
                # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
                test_metrics = analytics_engine.get_user_metrics(telegram_user_id, '7d')
                status['metrics_available'] = True
                status['sample_revenue'] = test_metrics.get('total_revenue', 0)
            except Exception as e:
                status['metrics_available'] = False
                status['metrics_error'] = str(e)

        return jsonify({
            'success': True,
            'status': status,
            'timestamp': datetime.now().isoformat()
        })

    except Exception as e:
        logger.error(f"Analytics status check error: {e}")
        return jsonify({
            'success': False,
            'error': str(e),
            'status': {
                'analytics_enabled': ANALYTICS_SYSTEM_ENABLED,
                'database_connected': False,
                'user_authenticated': False
            }
        }), 500


# === API –ú–ê–†–®–†–£–¢–´ –î–õ–Ø –û–§–§–ï–†–û–í ===
if OFFERS_SYSTEM_ENABLED:

    @app.route('/api/offers', methods=['POST'])
    def api_create_offer():
        """API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ—Ñ—Ñ–µ—Ä–∞"""
        try:
            data = request.get_json()
            if not data:
                return jsonify({'success': False, 'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}), 400

            # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏–ª–∏ –¥–∞–Ω–Ω—ã—Ö
            user_id = data.get('user_id') or request.headers.get('X-Telegram-User-Id')
            if not user_id:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à ID –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                user_id = YOUR_TELEGRAM_ID

            try:
                user_id = int(user_id)
            except (ValueError, TypeError):
                return jsonify({'success': False, 'error': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π User ID'}), 400

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            if 'username' not in data:
                data['username'] = f'user_{user_id}'
            if 'first_name' not in data:
                data['first_name'] = 'User'

            # –°–æ–∑–¥–∞–µ–º –æ—Ñ—Ñ–µ—Ä
            result = add_offer(user_id, data)

            if result['success']:
                logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –æ—Ñ—Ñ–µ—Ä {result.get('offer_id')} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
                return jsonify(result), 201
            else:
                return jsonify(result), 400

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ API —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞: {e}")
            return jsonify({'success': False, 'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}), 500


    @app.route('/api/offers/<int:user_id>', methods=['GET'])
    def api_get_user_offers(user_id):
        """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            status = request.args.get('status')
            offers = get_user_offers(user_id, status)
            return jsonify({'success': True, 'offers': offers, 'count': len(offers)})
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–æ–≤: {e}")
            return jsonify({'success': False, 'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–æ–≤'}), 500


    @app.route('/api/offers/my', methods=['GET'])
    def api_get_my_offers():
        """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–∏—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤"""
        try:
            telegram_user_id = get_current_user_id()
            status = request.args.get('status')
            offers = get_user_offers(telegram_user_id, status)
            return jsonify({'success': True, 'offers': offers, 'count': len(offers)})
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–∏—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤: {e}")
            return jsonify({'success': False, 'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–æ–≤'}), 500


    @app.route('/api/offers/detail/<int:offer_id>', methods=['GET'])
    def api_get_offer_detail(offer_id):
        """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ñ—Ñ–µ—Ä–µ"""
        try:
            include_responses = request.args.get('include_responses', 'false').lower() == 'true'
            offer = get_offer_by_id(offer_id, include_responses)

            if offer:
                return jsonify({'success': True, 'offer': offer})
            else:
                return jsonify({'success': False, 'error': '–û—Ñ—Ñ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞ {offer_id}: {e}")
            return jsonify({'success': False, 'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞'}), 500


    @app.route('/api/offers/<int:offer_id>/status', methods=['PUT'])
    def api_update_offer_status(offer_id):
        """API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—Ñ—Ñ–µ—Ä–∞"""
        try:
            data = request.get_json()
            if not data or 'status' not in data:
                return jsonify({'success': False, 'error': '–°—Ç–∞—Ç—É—Å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'}), 400

            user_id = data.get('user_id') or request.headers.get('X-Telegram-User-Id') or get_current_user_id()
            if user_id:
                user_id = int(user_id)

            success = update_offer_status(offer_id, data['status'], user_id)

            if success:
                return jsonify({'success': True, 'message': '–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω'})
            else:
                return jsonify({'success': False, 'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å'}), 400

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—Ñ—Ñ–µ—Ä–∞: {e}")
            return jsonify({'success': False, 'error': '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞'}), 500


    @app.route('/api/offers/stats', methods=['GET'])
    def api_offers_stats():
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ñ—Ñ–µ—Ä–æ–≤"""
        try:
            telegram_user_id = get_current_user_id()

            # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
            user = safe_execute_query(
                'SELECT id FROM users WHERE telegram_id = ?',
                (telegram_user_id,),
                fetch_one=True
            )

            if not user:
                return jsonify({'success': False, 'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'})

            user_db_id = user['id']

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ñ—Ñ–µ—Ä–æ–≤
            total_offers = safe_execute_query('''
                SELECT COUNT(*) as count FROM offers WHERE created_by = ?
            ''', (user_db_id,), fetch_one=True)

            active_offers = safe_execute_query('''
                SELECT COUNT(*) as count FROM offers 
                WHERE created_by = ? AND status = 'active'
            ''', (user_db_id,), fetch_one=True)

            total_spent = safe_execute_query('''
                SELECT COALESCE(SUM(price), 0) as total FROM offers
                WHERE created_by = ? AND status IN ('completed', 'active')
            ''', (user_db_id,), fetch_one=True)

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–∞ –º–æ–∏ –æ—Ñ—Ñ–µ—Ä—ã
            if RESPONSES_SYSTEM_ENABLED:
                total_responses = safe_execute_query('''
                    SELECT COUNT(*) as count
                    FROM offer_responses or_resp
                    JOIN offers o ON or_resp.offer_id = o.id
                    WHERE o.created_by = ?
                ''', (user_db_id,), fetch_one=True)

                accepted_responses = safe_execute_query('''
                    SELECT COUNT(*) as count
                    FROM offer_responses or_resp
                    JOIN offers o ON or_resp.offer_id = o.id
                    WHERE o.created_by = ? AND or_resp.status = 'accepted'
                ''', (user_db_id,), fetch_one=True)
            else:
                total_responses = {'count': 0}
                accepted_responses = {'count': 0}

            return jsonify({
                'success': True,
                'stats': {
                    'total_offers': total_offers['count'] if total_offers else 0,
                    'active_offers': active_offers['count'] if active_offers else 0,
                    'total_spent': float(total_spent['total']) if total_spent else 0,
                    'total_responses': total_responses['count'] if total_responses else 0,
                    'accepted_responses': accepted_responses['count'] if accepted_responses else 0
                }
            })

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ñ—Ñ–µ—Ä–æ–≤: {e}")
            return jsonify({'success': False, 'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'}), 500


    @app.route('/create-offer')
    def create_offer_page():
        """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞"""
        return render_template('create_offer.html')

# === API –ú–ê–†–®–†–£–¢–´ –î–õ–Ø –û–¢–ö–õ–ò–ö–û–í ===
if RESPONSES_SYSTEM_ENABLED:

    @app.route('/api/offers/suitable/<int:channel_id>', methods=['GET'])
    def api_get_suitable_offers(channel_id):
        """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤ –¥–ª—è –∫–∞–Ω–∞–ª–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            telegram_user_id = get_current_user_id()

            channel_owner = safe_execute_query('''
                SELECT c.id
                FROM channels c
                JOIN users u ON c.owner_id = u.id
                WHERE c.id = ? AND u.telegram_id = ?
            ''', (channel_id, telegram_user_id), fetch_one=True)

            if not channel_owner:
                return jsonify({
                    'success': False,
                    'error': '–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞'
                }), 403

            limit = int(request.args.get('limit', 20))
            offers = get_suitable_offers_for_channel(channel_id, limit)

            return jsonify({
                'success': True,
                'offers': offers,
                'count': len(offers)
            })

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤: {e}")
            return jsonify({
                'success': False,
                'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–æ–≤'
            }), 500


    @app.route('/api/responses', methods=['POST'])
    def api_create_response():
        """API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –æ—Ñ—Ñ–µ—Ä"""
        try:
            data = request.get_json()
            if not data:
                return jsonify({'success': False, 'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}), 400

            channel_id = data.get('channel_id')
            offer_id = data.get('offer_id')

            if not channel_id or not offer_id:
                return jsonify({'success': False, 'error': 'channel_id –∏ offer_id –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'}), 400

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            telegram_user_id = get_current_user_id()

            channel_owner = safe_execute_query('''
                SELECT c.id
                FROM channels c
                JOIN users u ON c.owner_id = u.id
                WHERE c.id = ? AND u.telegram_id = ?
            ''', (channel_id, telegram_user_id), fetch_one=True)

            if not channel_owner:
                return jsonify({
                    'success': False,
                    'error': '–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞'
                }), 403

            result = create_offer_response(channel_id, offer_id, data)

            if result['success']:
                logger.info(f"–°–æ–∑–¥–∞–Ω –æ—Ç–∫–ª–∏–∫ –Ω–∞ –æ—Ñ—Ñ–µ—Ä {offer_id} –æ—Ç –∫–∞–Ω–∞–ª–∞ {channel_id}")
                return jsonify(result), 201
            else:
                return jsonify(result), 400

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ API —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∫–ª–∏–∫–∞: {e}")
            return jsonify({'success': False, 'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}), 500


    @app.route('/api/responses/channel/<int:channel_id>', methods=['GET'])
    def api_get_channel_responses(channel_id):
        """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∫–ª–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            telegram_user_id = get_current_user_id()

            channel_owner = safe_execute_query('''
                SELECT c.id
                FROM channels c
                JOIN users u ON c.owner_id = u.id
                WHERE c.id = ? AND u.telegram_id = ?
            ''', (channel_id, telegram_user_id), fetch_one=True)

            if not channel_owner:
                return jsonify({
                    'success': False,
                    'error': '–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞'
                }), 403

            status = request.args.get('status')
            responses = get_channel_responses(channel_id, status)
            return jsonify({'success': True, 'responses': responses, 'count': len(responses)})
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∫–ª–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞: {e}")
            return jsonify({'success': False, 'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∫–ª–∏–∫–æ–≤'}), 500


    @app.route('/channel-offers/<int:channel_id>')
    def channel_offers_page(channel_id):
        """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤ –¥–ª—è –∫–∞–Ω–∞–ª–∞"""
        try:
            # –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞
            telegram_user_id = get_current_user_id()

            channel = safe_execute_query('''
                SELECT c.*, u.telegram_id as owner_telegram_id
                FROM channels c
                JOIN users u ON c.owner_id = u.id
                WHERE c.id = ? AND u.telegram_id = ?
            ''', (channel_id, telegram_user_id), fetch_one=True)

            if not channel:
                return jsonify({'error': '–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞'}), 404

            return render_template_string('''
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ü–æ–¥—Ö–æ–¥—è—â–∏–µ –æ—Ñ—Ñ–µ—Ä—ã - {{ channel.title }}</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; background: #f5f5f5; }
        .container { max-width: 1200px; margin: 0 auto; padding: 20px; }
        .header { background: white; padding: 20px; border-radius: 8px; margin-bottom: 20px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); }
        .card { background: white; border-radius: 8px; padding: 20px; margin-bottom: 20px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); }
        .btn { background: #2196F3; color: white; border: none; padding: 12px 20px; border-radius: 6px; cursor: pointer; text-decoration: none; display: inline-block; }
        .btn:hover { background: #1976D2; }
        .btn-success { background: #4CAF50; }
        .btn-success:hover { background: #45a049; }
        .btn-danger { background: #f44336; }
        .btn-danger:hover { background: #da190b; }
        .offer-card { border: 1px solid #eee; border-radius: 8px; padding: 20px; margin-bottom: 16px; position: relative; }
        .offer-header { display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 12px; }
        .offer-title { font-weight: bold; font-size: 18px; margin-bottom: 8px; }
        .offer-price { font-size: 24px; font-weight: bold; color: #2196F3; }
        .offer-meta { color: #666; font-size: 14px; margin-bottom: 12px; }
        .offer-content { margin: 12px 0; line-height: 1.5; }
        .tabs { display: flex; gap: 10px; margin-bottom: 20px; }
        .tab { padding: 10px 20px; background: #eee; border-radius: 6px 6px 0 0; cursor: pointer; }
        .tab.active { background: white; border-bottom: 2px solid #2196F3; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üéØ –ü–æ–¥—Ö–æ–¥—è—â–∏–µ –æ—Ñ—Ñ–µ—Ä—ã –¥–ª—è {{ channel.title }}</h1>
            <p>–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤ –≤–∞—à–µ–º –∫–∞–Ω–∞–ª–µ</p>
            <div style="margin-top: 10px;">
                <strong>–ö–∞–Ω–∞–ª:</strong> @{{ channel.username }} | 
                <strong>–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:</strong> {{ channel.subscriber_count or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' }}
            </div>
        </div>

        <div class="tabs">
            <div class="tab active" onclick="showTab('offers')">–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ñ—Ñ–µ—Ä—ã</div>
            <div class="tab" onclick="showTab('my-responses')">–ú–æ–∏ –æ—Ç–∫–ª–∏–∫–∏</div>
        </div>

        <div id="offers-tab">
            <div id="offersContainer">
                <div style="text-align: center; padding: 40px; color: #666;">
                    <div style="font-size: 24px; margin-bottom: 10px;">üîç</div>
                    <div>–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤...</div>
                </div>
            </div>
        </div>

        <div id="my-responses-tab" style="display: none;">
            <div id="responsesContainer">
                <div style="text-align: center; padding: 40px; color: #666;">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
            </div>
        </div>
    </div>

    <script>
        const channelId = {{ channel.id }};

        function showTab(tabName) {
            document.querySelectorAll('[id$="-tab"]').forEach(tab => {
                tab.style.display = 'none';
            });

            document.querySelectorAll('.tab').forEach(btn => {
                btn.classList.remove('active');
            });

            document.getElementById(tabName + '-tab').style.display = 'block';
            event.target.classList.add('active');

            if (tabName === 'offers') {
                loadSuitableOffers();
            } else if (tabName === 'my-responses') {
                loadMyResponses();
            }
        }

        async function loadSuitableOffers() {
            try {
                const response = await fetch(`/api/offers/suitable/${channelId}`);
                const result = await response.json();

                const container = document.getElementById('offersContainer');

                if (result.success && result.offers.length > 0) {
                    container.innerHTML = result.offers.map(offer => `
                        <div class="offer-card">
                            <div class="offer-header">
                                <div>
                                    <div class="offer-title">${offer.title}</div>
                                    <div class="offer-meta">
                                        ${offer.category} ‚Ä¢ ${formatDate(offer.created_at)}
                                    </div>
                                </div>
                                <div class="offer-price">${offer.price} ${offer.currency}</div>
                            </div>

                            <div class="offer-content">
                                ${offer.content}
                            </div>

                            <div style="margin-top: 16px;">
                                <button class="btn btn-success" onclick="respondToOffer(${offer.id}, 'interested')">
                                    ‚≠ê –ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω
                                </button>
                                <button class="btn btn-success" onclick="respondToOffer(${offer.id}, 'accepted')" style="margin-left: 8px;">
                                    ‚úÖ –ü—Ä–∏–Ω—è—Ç—å
                                </button>
                            </div>
                        </div>
                    `).join('');
                } else {
                    container.innerHTML = `
                        <div style="text-align: center; padding: 40px; color: #666;">
                            <div style="font-size: 48px; margin-bottom: 16px;">üìã</div>
                            <h3>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤</h3>
                            <p>–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.</p>
                        </div>
                    `;
                }
            } catch (error) {
                console.error('Load offers error:', error);
                document.getElementById('offersContainer').innerHTML = `
                    <div class="card" style="text-align: center; color: #f44336;">
                        <h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
                        <p>${error.message}</p>
                    </div>
                `;
            }
        }

        async function respondToOffer(offerId, status) {
            const message = prompt('–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è:');
            if (!message) return;

            try {
                const response = await fetch('/api/responses', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        channel_id: channelId,
                        offer_id: offerId,
                        status: status,
                        message: message
                    })
                });

                const result = await response.json();

                if (result.success) {
                    alert('–û—Ç–∫–ª–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!');
                    loadSuitableOffers();
                } else {
                    alert('–û—à–∏–±–∫–∞: ' + (result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
                }
            } catch (error) {
                alert('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∫–ª–∏–∫–∞: ' + error.message);
            }
        }

        async function loadMyResponses() {
            try {
                const response = await fetch(`/api/responses/channel/${channelId}`);
                const result = await response.json();

                const container = document.getElementById('responsesContainer');

                if (result.success && result.responses.length > 0) {
                    container.innerHTML = result.responses.map(response => `
                        <div class="card">
                            <div style="display: flex; justify-content: space-between; margin-bottom: 8px;">
                                <strong>${response.offer_title}</strong>
                                <span>${response.status}</span>
                            </div>
                            <div>${response.message}</div>
                            <div style="color: #666; font-size: 12px; margin-top: 8px;">
                                ${formatDate(response.created_at)}
                            </div>
                        </div>
                    `).join('');
                } else {
                    container.innerHTML = `
                        <div style="text-align: center; padding: 40px; color: #666;">
                            <h3>–ù–µ—Ç –æ—Ç–∫–ª–∏–∫–æ–≤</h3>
                            <p>–í–∞—à–∏ –æ—Ç–∫–ª–∏–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å</p>
                        </div>
                    `;
                }
            } catch (error) {
                document.getElementById('responsesContainer').innerHTML = `
                    <div style="text-align: center; color: #f44336;">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}</div>
                `;
            }
        }

        function formatDate(dateStr) {
            return new Date(dateStr).toLocaleDateString('ru-RU');
        }

        document.addEventListener('DOMContentLoaded', () => {
            loadSuitableOffers();
        });
    </script>
</body>
</html>
            ''', channel=channel)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ñ—Ñ–µ—Ä–æ–≤ –∫–∞–Ω–∞–ª–∞: {e}")
            return jsonify({'error': str(e)}), 500

if RESPONSES_SYSTEM_ENABLED and PLACEMENT_TRACKING_ENABLED:

    @app.route('/api/responses/create-with-tracking', methods=['POST'])
    @require_telegram_auth
    def api_create_response_with_tracking():
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∫–ª–∏–∫–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–æ–∑–¥–∞–Ω–∏–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        try:
            data = request.get_json()
            if not data:
                return jsonify({'success': False, 'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}), 400

            # –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—ã–π –æ—Ç–∫–ª–∏–∫
            result = create_offer_response(
                data.get('channel_id'),
                data.get('offer_id'),
                data
            )

            if result['success'] and result.get('response_id'):
                # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                try:
                    placement_tracker = PlacementTracker(DATABASE_PATH)

                    # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
                    scheduled_at = datetime.now() + timedelta(hours=24)
                    expires_at = scheduled_at + timedelta(days=7)

                    placement_id = placement_tracker.create_placement(
                        offer_id=data.get('offer_id'),
                        channel_id=data.get('channel_id'),
                        response_id=result['response_id'],
                        scheduled_at=scheduled_at,
                        expires_at=expires_at
                    )

                    if placement_id:
                        result['placement_id'] = placement_id
                        result['tracking_enabled'] = True
                        result['tracking_url'] = f"/track/{placement_id}/view"

                        logger.info(f"–°–æ–∑–¥–∞–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ {placement_id} –¥–ª—è –æ—Ç–∫–ª–∏–∫–∞ {result['response_id']}")

                except Exception as tracking_error:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {tracking_error}")
                    result['tracking_enabled'] = False
                    result['tracking_error'] = str(tracking_error)

            return jsonify(result)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∫–ª–∏–∫–∞ —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º: {e}")
            return jsonify({
                'success': False,
                'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
            }), 500

# === API –ö–ê–ù–ê–õ–û–í –° –£–°–ò–õ–ï–ù–ù–û–ô –§–ò–õ–¨–¢–†–ê–¶–ò–ï–ô ===

@app.route('/api/channels/search', methods=['POST'])
@require_telegram_auth
def search_channel():
    """–ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ Telegram API"""
    try:
        data = request.get_json()
        if not data or 'username' not in data:
            return jsonify({'success': False, 'error': 'Username –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'}), 400

        username = data['username'].strip().lstrip('@')
        user_id = get_current_user_id()

        # –ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ Telegram API
        search_result = run_async_in_sync(telegram_service.search_channel(username, user_id))
        return jsonify(search_result)

    except Exception as e:
        logger.error(f"Search channel error: {e}")
        return jsonify({
            'success': False,
            'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        }), 500


@app.route('/api/channels', methods=['POST'])
@require_telegram_auth
def add_channel_with_telegram_id():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ Telegram User ID"""
    try:
        data = request.get_json()
        if not data:
            return jsonify({'success': False, 'error': 'JSON data required'}), 400

        username = data.get('username', '').strip()
        telegram_user_id = get_current_user_id()

        logger.info(f"Adding channel @{username} for Telegram user {telegram_user_id}")

        if not username:
            return jsonify({'success': False, 'error': 'Username –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'}), 400

        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
        user_db_id = ensure_user_exists(
            telegram_user_id,
            f'user_{telegram_user_id}',
            f'Telegram User {telegram_user_id}'
        )

        if not user_db_id:
            return jsonify({'success': False, 'error': '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}), 500

        # –û—á–∏—â–∞–µ–º username
        cleaned_username = username.lstrip('@')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ –∫–∞–Ω–∞–ª –≠–¢–ò–ú Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        existing_channel = safe_execute_query("""
            SELECT c.id, c.title 
            FROM channels c 
            JOIN users u ON c.owner_id = u.id 
            WHERE c.username = ? AND u.telegram_id = ?
        """, (cleaned_username, telegram_user_id), fetch_one=True)

        if existing_channel:
            return jsonify({
                'success': False,
                'error': f'–ö–∞–Ω–∞–ª @{cleaned_username} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤–∞–º–∏'
            })

        # –ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ Telegram API
        logger.info(f"Searching channel @{cleaned_username} via Telegram API")
        search_result = run_async_in_sync(telegram_service.search_channel(cleaned_username, telegram_user_id))

        if not search_result.get('success'):
            return jsonify({
                'success': False,
                'error': search_result.get('error', '–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω')
            })

        channel_data = search_result.get('channel')
        user_permissions = search_result.get('user_permissions', {})

        if not channel_data:
            return jsonify({
                'success': False,
                'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞'
            })

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not user_permissions.get('is_admin', False):
            return jsonify({
                'success': False,
                'error': '–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞ –¥–ª—è –µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è'
            })

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–Ω–∞–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        logger.info(f"Saving channel @{cleaned_username} to database")

        try:
            current_time = datetime.now().isoformat()

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ subscribers_count
            connection = get_db_connection()
            cursor = connection.cursor()

            cursor.execute("""
                INSERT INTO channels (
                    telegram_channel_id, 
                    username, 
                    title, 
                    description, 
                    subscribers_count, 
                    is_verified, 
                    is_active, 
                    owner_id, 
                    created_at,
                    updated_at
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                channel_data.get('id'),
                cleaned_username,
                channel_data.get('title', ''),
                channel_data.get('description', ''),
                channel_data.get('subscribers_count', 0),  # –î–∞–Ω–Ω—ã–µ —É–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                channel_data.get('verified', False),
                True,  # is_active
                user_db_id,
                current_time,
                current_time
            ))

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞
            if cursor.rowcount > 0:
                connection.commit()
                connection.close()

                logger.info(f"‚úÖ Channel @{cleaned_username} successfully added for user {telegram_user_id}")
                return jsonify({
                    'success': True,
                    'message': f'–ö–∞–Ω–∞–ª @{cleaned_username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!',
                    'channel': {
                        'username': cleaned_username,
                        'title': channel_data.get('title', ''),
                        'subscribers_count': channel_data.get('subscribers_count', 0)
                    }
                })
            else:
                connection.rollback()
                connection.close()
                return jsonify({
                    'success': False,
                    'error': '–ö–∞–Ω–∞–ª –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö'
                })

        except Exception as db_error:
            logger.error(f"Database error when adding channel: {db_error}")
            return jsonify({
                'success': False,
                'error': f'–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(db_error)}'
            })

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –¥–ª—è Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return jsonify({
            'success': False,
            'error': f'–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'
        }), 500


@app.route('/api/channels/my', methods=['GET'])
@require_telegram_auth
def get_my_channels():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¢–û–õ–¨–ö–û —Å–≤–æ–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø–æ Telegram ID —Å —É—Å–∏–ª–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
    try:
        telegram_user_id = get_current_user_id()
        logger.info(f"Getting channels for Telegram user: {telegram_user_id}")

        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
        user_db_id = ensure_user_exists(telegram_user_id, f'user_{telegram_user_id}', 'User')
        if not user_db_id:
            return jsonify({
                'success': False,
                'channels': [],
                'total': 0,
                'message': '–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
            }), 500

        # –°–¢–†–û–ì–û —Ñ–∏–ª—å—Ç—Ä—É–µ–º –∫–∞–Ω–∞–ª—ã –ø–æ –≤–ª–∞–¥–µ–ª—å—Ü—É (–¥–≤–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ Telegram User ID)
        channels = safe_execute_query("""
            SELECT c.*, u.username as owner_username, u.telegram_id as owner_telegram_id
            FROM channels c 
            JOIN users u ON c.owner_id = u.id
            WHERE c.owner_id = ? AND u.telegram_id = ? AND u.id = ?
            ORDER BY c.created_at DESC
        """, (user_db_id, telegram_user_id, user_db_id), fetch_all=True)

        logger.info(f"Found {len(channels) if channels else 0} channels for Telegram user {telegram_user_id}")

        if not channels:
            return jsonify({
                'success': True,
                'channels': [],
                'total': 0,
                'message': '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤',
                'telegram_user_info': {
                    'telegram_user_id': telegram_user_id,
                    'user_db_id': user_db_id
                }
            })

        enriched_channels = []
        for channel in channels:
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ –¥–∞–Ω–Ω—ã—Ö
            if channel['owner_telegram_id'] != telegram_user_id:
                logger.warning(
                    f"Security: Channel {channel['id']} owner mismatch. "
                    f"Expected: {telegram_user_id}, Got: {channel['owner_telegram_id']}")
                continue

            channel_data = dict(channel)

            # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–π –ø–æ–ª–µ–π
            if 'subscriber_count' in channel_data:
                channel_data['subscribers_count'] = channel_data['subscriber_count']
            elif 'subscribers_count' in channel_data:
                channel_data['subscriber_count'] = channel_data['subscribers_count']
            else:
                channel_data['subscriber_count'] = 0
                channel_data['subscribers_count'] = 0

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            if channel_data.get('created_at'):
                try:
                    if isinstance(channel_data['created_at'], str):
                        created_at = datetime.fromisoformat(channel_data['created_at'].replace('Z', '+00:00'))
                    else:
                        created_at = channel_data['created_at']
                    channel_data['created_at_formatted'] = created_at.strftime('%d.%m.%Y')
                except:
                    channel_data['created_at_formatted'] = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

            enriched_channels.append(channel_data)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        stats = {
            'total_channels': len(enriched_channels),
            'verified_channels': len([c for c in enriched_channels if c.get('is_verified')]),
            'active_channels': len([c for c in enriched_channels if c.get('is_active')]),
            'total_subscribers': sum(c.get('subscriber_count', 0) or 0 for c in enriched_channels)
        }

        return jsonify({
            'success': True,
            'channels': enriched_channels,
            'total': len(enriched_channels),
            'stats': stats,
            'telegram_user_info': {
                'telegram_user_id': telegram_user_id,
                'user_db_id': user_db_id
            }
        })

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return jsonify({
            'success': False,
            'channels': [],
            'error': str(e),
            'telegram_user_info': {
                'telegram_user_id': get_current_user_id() if get_current_user_id() else None
            }
        }), 500



@app.route('/api/channels/<int:channel_id>/refresh', methods=['POST'])
@require_telegram_auth
def refresh_channel_data(channel_id):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞ (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –ø–æ Telegram ID)"""
    try:
        telegram_user_id = get_current_user_id()
        logger.info(f"Refreshing channel {channel_id} for Telegram user {telegram_user_id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
        channel = safe_execute_query('''
            SELECT c.telegram_channel_id, c.username, c.title
            FROM channels c
            JOIN users u ON c.owner_id = u.id
            WHERE c.id = ? AND u.telegram_id = ?
        ''', (channel_id, telegram_user_id), fetch_one=True)

        if not channel:
            return jsonify({'success': False, 'error': '–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞'}), 404

        # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/user/telegram-info', methods=['GET'])
@require_telegram_auth
def get_telegram_user_info():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    try:
        telegram_user_id = get_current_user_id()

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –ë–î
        user_info = safe_execute_query('''
            SELECT id, telegram_id, username, first_name, created_at
            FROM users 
            WHERE telegram_id = ?
        ''', (telegram_user_id,), fetch_one=True)

        if not user_info:
            return jsonify({
                'success': False,
                'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }), 404

        # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞...

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500


@app.route('/api/channels/<int:channel_id>', methods=['DELETE'])
@require_telegram_auth
def delete_channel_secure(channel_id):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º (–ø–æ Telegram ID)"""
    try:
        telegram_user_id = get_current_user_id()
        logger.info(f"Deleting channel {channel_id} for Telegram user {telegram_user_id}")

        # –°–¢–†–û–ì–ê–Ø –ü–†–û–í–ï–†–ö–ê: –∫–∞–Ω–∞–ª –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        channel = safe_execute_query('''
            SELECT c.id, c.title, c.username 
            FROM channels c
            JOIN users u ON c.owner_id = u.id
            WHERE c.id = ? AND u.telegram_id = ?
        ''', (channel_id, telegram_user_id), fetch_one=True)

        if not channel:
            return jsonify({
                'success': False,
                'error': '–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏–µ'
            }), 404

        # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è...

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500



# === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï API ENDPOINTS ===
@app.route('/test')
def api_test():
    """–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return jsonify({
        'status': 'OK',
        'message': '–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!',
        'features': {
            'telegram_api': bool(BOT_TOKEN),
            'telegram_integration': TELEGRAM_INTEGRATION,
            'offers_system': OFFERS_SYSTEM_ENABLED,
            'responses_system': RESPONSES_SYSTEM_ENABLED,
            'database': 'SQLite',
            'real_channel_search': True,
            'production_mode': True
        },
        'config': {
            'bot_token_configured': bool(BOT_TOKEN),
            'database_path': DATABASE_PATH,
            'database_exists': os.path.exists(DATABASE_PATH),
            'your_telegram_id': YOUR_TELEGRAM_ID
        },
        'timestamp': datetime.now().isoformat()
    })


@app.route('/health')
def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        # –¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT 1')
        result = cursor.fetchone()
        conn.close()

        # –¢–µ—Å—Ç Telegram API
        telegram_status = run_async_in_sync(telegram_service.test_connection())

        return jsonify({
            'status': 'healthy',
            'database': 'connected',
            'database_type': 'SQLite',
            'database_path': DATABASE_PATH,
            'database_size': f"{os.path.getsize(DATABASE_PATH) / 1024:.1f} KB" if os.path.exists(
                DATABASE_PATH) else 'N/A',
            'telegram_api': 'connected' if telegram_status['success'] else 'error',
            'telegram_integration': 'enabled' if TELEGRAM_INTEGRATION else 'disabled',
            'offers_system': 'enabled' if OFFERS_SYSTEM_ENABLED else 'disabled',
            'responses_system': 'enabled' if RESPONSES_SYSTEM_ENABLED else 'disabled',
            'bot_token_configured': bool(BOT_TOKEN),
            'production_mode': True,
            'timestamp': datetime.now().isoformat()
        })

    except Exception as e:
        return jsonify({
            'status': 'unhealthy',
            'database': 'disconnected',
            'error': str(e),
            'timestamp': datetime.now().isoformat()
        }), 500


@app.route('/api/database-info')
def api_database_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü
        tables_result = safe_execute_query("""
            SELECT name FROM sqlite_master 
            WHERE type='table' AND name NOT LIKE 'sqlite_%'
            ORDER BY name
        """, fetch_all=True)

        tables = [table['name'] for table in tables_result] if tables_result else []

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü–µ
        table_info = {}
        for table_name in tables:
            count_result = safe_execute_query(f"SELECT COUNT(*) as count FROM {table_name}", fetch_one=True)
            table_info[table_name] = count_result['count'] if count_result else 0

        return jsonify({
            'database_type': 'SQLite',
            'database_path': DATABASE_PATH,
            'database_exists': os.path.exists(DATABASE_PATH),
            'database_size': f"{os.path.getsize(DATABASE_PATH) / 1024:.1f} KB" if os.path.exists(
                DATABASE_PATH) else 'N/A',
            'status': 'Connected',
            'tables_count': len(tables),
            'tables': tables,
            'table_info': table_info,
            'sqlite_version': sqlite3.sqlite_version,
            'production_mode': True
        })

    except Exception as e:
        return jsonify({
            'database_type': 'SQLite',
            'status': f'Error: {str(e)}',
            'tables_count': 0
        }), 500


# === ERROR HANDLERS ===
@app.errorhandler(429)
def rate_limit_handler(e):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    client_ip = get_client_ip()

    log_security_event('RATE_LIMIT_ERROR', {
        'ip': client_ip,
        'path': request.path,
        'user_agent': request.headers.get('User-Agent', '')
    })

    return jsonify({
        'error': '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤',
        'retry_after': 3600
    }), 429


@app.errorhandler(403)
def forbidden_handler(e):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∑–∞–ø—Ä–µ—â–µ–Ω"""
    return jsonify({'error': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403


@app.errorhandler(413)
def request_too_large_handler(e):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    return jsonify({'error': '–ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π'}), 413


@app.errorhandler(500)
def handle_500(error):
    logger.error(f"500 Error: {error}")
    return jsonify({'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}), 500


@app.errorhandler(404)
def page_not_found(error):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏ 404"""
    error_info = {
        'error': '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
        'requested_url': request.url,
        'available_routes': [rule.rule for rule in app.url_map.iter_rules()],
        'message': '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å URL –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞–≤–∏–≥–∞—Ü–∏—é'
    }

    # –ï—Å–ª–∏ —ç—Ç–æ API –∑–∞–ø—Ä–æ—Å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º JSON
    if request.path.startswith('/api/'):
        return jsonify(error_info), 404

    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –º–æ–∂–Ω–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é
    return render_template_string('''
    <!DOCTYPE html>
    <html>
    <head>
        <title>–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</title>
        <meta charset="UTF-8">
        <style>
            body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
            .error-container { max-width: 600px; margin: 0 auto; }
            .btn { padding: 10px 20px; background: #007bff; color: white; text-decoration: none; border-radius: 5px; }
        </style>
    </head>
    <body>
        <div class="error-container">
            <h1>üö´ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</h1>
            <p>–ó–∞–ø—Ä–æ—à–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: <code>{{ request.path }}</code></p>
            <p>–í–æ–∑–º–æ–∂–Ω–æ, —Å—Å—ã–ª–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫—É.</p>
            <a href="/" class="btn">‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é</a>
            <br><br>
            <details>
                <summary>–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</summary>
                <pre>{{ error_info | tojson(indent=2) }}</pre>
            </details>
        </div>
    </body>
    </html>
    ''', error_info=error_info), 404

@app.after_request
def security_headers_middleware(response):
    """Middleware –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    response.headers['X-Content-Type-Options'] = 'nosniff'
    response.headers['X-Frame-Options'] = 'DENY'
    response.headers['X-XSS-Protection'] = '1; mode=block'
    response.headers['Referrer-Policy'] = 'strict-origin-when-cross-origin'

    # Content Security Policy
    csp = (
        "default-src 'self'; "
        "script-src 'self' 'unsafe-inline' https://telegram.org https://cdnjs.cloudflare.com; "
        "style-src 'self' 'unsafe-inline'; "
        "img-src 'self' data: https:; "
        "connect-src 'self' https://api.telegram.org; "
        "frame-ancestors 'none'"
    )
    response.headers['Content-Security-Policy'] = csp

    # –£–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ
    response.headers.pop('Server', None)

    return response


# === SYSTEM RECOMMENDATIONS API ===

@app.route('/api/offers/channel-recommendations', methods=['POST'])
def get_channel_recommendations():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ñ—Ñ–µ—Ä–∞"""
    try:
        from app.api.channel_recommendations import get_channel_recommendations_api

        data = request.get_json()
        if not data:
            return jsonify({'error': '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞'}), 400

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        title = data.get('title', '').strip()
        description = data.get('description', '').strip()

        if not title and not description:
            return jsonify({'error': '–£–∫–∞–∂–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞'}), 400

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        target_audience = data.get('target_audience', '').strip()
        price = float(data.get('price', 0))
        limit = min(int(data.get('limit', 10)), 20)  # –ú–∞–∫—Å–∏–º—É–º 20 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        result = get_channel_recommendations_api(
            title=title,
            description=description,
            target_audience=target_audience,
            price=price,
            limit=limit
        )

        if result['success']:
            logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(result['recommendations'])} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –æ—Ñ—Ñ–µ—Ä–∞ '{title[:50]}'")

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
            for rec in result['recommendations']:
                rec['estimated_reach'] = estimate_channel_reach(rec)
                rec['price_comparison'] = compare_price_with_market(rec.get('price_per_post', 0), price)

        return jsonify(result)

    except ValueError as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}'}), 400
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∫–∞–Ω–∞–ª–æ–≤: {e}")
        return jsonify({'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}), 500


def estimate_channel_reach(channel: Dict[str, Any]) -> Dict[str, Any]:
    """–û—Ü–µ–Ω–∫–∞ –æ—Ö–≤–∞—Ç–∞ –∫–∞–Ω–∞–ª–∞"""
    try:
        subscribers = channel.get('subscriber_count', 0)
        avg_rating = float(channel.get('avg_rating', 4.0))

        # –ë–∞–∑–æ–≤—ã–π –æ—Ö–≤–∞—Ç (–æ–±—ã—á–Ω–æ 10-30% –æ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤)
        base_reach_rate = 0.15 + (avg_rating - 3.0) * 0.05  # –û—Ç 10% –¥–æ 25%
        estimated_views = int(subscribers * base_reach_rate)

        # –û—Ü–µ–Ω–∫–∞ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏
        engagement_rate = min(base_reach_rate * 0.1, 0.05)  # 1-5%
        estimated_engagement = int(estimated_views * engagement_rate)

        return {
            'estimated_views': estimated_views,
            'estimated_engagement': estimated_engagement,
            'reach_rate': round(base_reach_rate * 100, 1)
        }
    except:
        return {
            'estimated_views': 0,
            'estimated_engagement': 0,
            'reach_rate': 15.0
        }


def compare_price_with_market(channel_price: float, offer_price: float) -> Dict[str, Any]:
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∫–∞–Ω–∞–ª–∞ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–π —Ü–µ–Ω–æ–π"""
    try:
        if channel_price <= 0:
            return {
                'status': 'unknown',
                'message': '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞',
                'ratio': 0
            }

        ratio = offer_price / channel_price

        if ratio >= 1.2:
            return {
                'status': 'above_market',
                'message': f'–ù–∞ {int((ratio - 1) * 100)}% –≤—ã—à–µ –æ–±—ã—á–Ω–æ–π —Ü–µ–Ω—ã',
                'ratio': ratio
            }
        elif ratio >= 0.8:
            return {
                'status': 'market_rate',
                'message': '–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω–µ',
                'ratio': ratio
            }
        else:
            return {
                'status': 'below_market',
                'message': f'–ù–∞ {int((1 - ratio) * 100)}% –Ω–∏–∂–µ –æ–±—ã—á–Ω–æ–π —Ü–µ–Ω—ã',
                'ratio': ratio
            }
    except:
        return {
            'status': 'unknown',
            'message': '–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ä–∞–≤–Ω–∏—Ç—å —Ü–µ–Ω—ã',
            'ratio': 0
        }


@app.route('/api/offers/quick-analysis', methods=['POST'])
def quick_offer_analysis():
    """–ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ñ—Ñ–µ—Ä–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    try:
        from app.api.channel_recommendations import get_channel_recommendations_api

        data = request.get_json()
        if not data:
            return jsonify({'error': '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞'}), 400

        title = data.get('title', '').strip()
        description = data.get('description', '').strip()
        target_audience = data.get('target_audience', '').strip()

        if not title and not description:
            return jsonify({'error': '–£–∫–∞–∂–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ'}), 400

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        analysis = analyze_offer_content(title, description, target_audience)

        # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        category_stats = {}
        if analysis.get('primary_category'):
            category_stats = get_category_statistics(analysis['primary_category'])

        return jsonify({
            'success': True,
            'analysis': analysis,
            'category_stats': category_stats,
            'suggestions': generate_quick_suggestions(analysis)
        })

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ñ—Ñ–µ—Ä–∞: {e}")
        return jsonify({'error': '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞'}), 500


def get_category_statistics(category: str) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        stats = safe_execute_query('''
                                   SELECT COUNT(*)              as total_channels,
                                          AVG(subscriber_count) as avg_subscribers,
                                          AVG(price_per_post)   as avg_price,
                                          MIN(price_per_post)   as min_price,
                                          MAX(price_per_post)   as max_price
                                   FROM channels
                                   WHERE category = ?
                                     AND is_active = 1
                                     AND price_per_post > 0
                                   ''', (category,), fetch_one=True)

        if stats and stats['total_channels'] > 0:
            return {
                'total_channels': stats['total_channels'],
                'avg_subscribers': int(stats['avg_subscribers'] or 0),
                'avg_price': round(float(stats['avg_price'] or 0), 2),
                'price_range': {
                    'min': round(float(stats['min_price'] or 0), 2),
                    'max': round(float(stats['max_price'] or 0), 2)
                }
            }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}: {e}")

    return {
        'total_channels': 0,
        'avg_subscribers': 0,
        'avg_price': 0,
        'price_range': {'min': 0, 'max': 0}
    }


def generate_quick_suggestions(analysis: Dict[str, Any]) -> List[str]:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±—ã—Å—Ç—Ä—ã—Ö —Å–æ–≤–µ—Ç–æ–≤ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –æ—Ñ—Ñ–µ—Ä–∞"""
    suggestions = []

    try:
        categories = analysis.get('categories', [])
        keywords = analysis.get('keywords', [])

        if not categories:
            suggestions.append("–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–º–∞—Ç–∏–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–¥–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤")

        if len(keywords) < 3:
            suggestions.append("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª—å—à–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥–∞")

        urgency = analysis.get('urgency', 'normal')
        if urgency == 'high':
            suggestions.append("–ü—Ä–∏ —Å—Ä–æ—á–Ω–æ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã —Å –±—ã—Å—Ç—Ä—ã–º –æ—Ç–∫–ª–∏–∫–æ–º")

        if analysis.get('audience'):
            suggestions.append("–£–∫–∞–∑–∞–Ω–∞ —Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è - —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∫–∞–Ω–∞–ª—ã")
        else:
            suggestions.append("–£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–≤–µ—Ç–æ–≤: {e}")

    return suggestions


# === –ü–†–û–î–í–ò–ù–£–¢–´–ô –ê–õ–ì–û–†–ò–¢–ú –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–Ø ===
@app.route('/api/offers/advanced-channel-offers/<int:channel_id>')
def api_advanced_channel_offers(channel_id):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–æ–≤ —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –æ—Ü–µ–Ω–∫–æ–π"""
    try:
        telegram_user_id = get_current_user_id()
        if not telegram_user_id:
            return jsonify({'error': '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}), 401

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞–Ω–∞–ª–∞
        channel = safe_execute_query('''
                                     SELECT c.id, c.owner_id, u.telegram_id
                                     FROM channels c
                                              JOIN users u ON c.owner_id = u.id
                                     WHERE c.id = ?
                                     ''', (channel_id,), fetch_one=True)

        if not channel:
            return jsonify({'error': '–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404

        if channel['telegram_id'] != telegram_user_id:
            return jsonify({'error': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ñ—Ñ–µ—Ä—ã —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –æ—Ü–µ–Ω–∫–æ–π
        if ADVANCED_MATCHING_ENABLED:
            limit = min(int(request.args.get('limit', 10)), 20)
            offers = get_advanced_suitable_offers_for_channel(channel_id, limit)
        else:
            # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
            from offer_responses import get_suitable_offers_for_channel
            offers = get_suitable_offers_for_channel(channel_id, 10)

        return jsonify({
            'success': True,
            'channel_id': channel_id,
            'offers': offers,
            'total_count': len(offers),
            'algorithm_version': 'advanced_v2.0' if ADVANCED_MATCHING_ENABLED else 'legacy_v1.0'
        })

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
        return jsonify({'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}), 500


@app.route('/api/compatibility-analysis', methods=['POST'])
def api_compatibility_analysis():
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –æ—Ñ—Ñ–µ—Ä–∞ –∏ –∫–∞–Ω–∞–ª–∞"""
    try:
        telegram_user_id = get_current_user_id()
        if not telegram_user_id:
            return jsonify({'error': '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}), 401

        data = request.get_json()
        if not data:
            return jsonify({'error': '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ'}), 400

        offer_id = data.get('offer_id')
        channel_id = data.get('channel_id')

        if not offer_id or not channel_id:
            return jsonify({'error': '–£–∫–∞–∂–∏—Ç–µ offer_id –∏ channel_id'}), 400

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É
        channel = safe_execute_query('''
                                     SELECT c.id, u.telegram_id
                                     FROM channels c
                                              JOIN users u ON c.owner_id = u.id
                                     WHERE c.id = ?
                                     ''', (channel_id,), fetch_one=True)

        if not channel or channel['telegram_id'] != telegram_user_id:
            return jsonify({'error': '–î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        if ADVANCED_MATCHING_ENABLED:
            analysis = analyze_offer_channel_compatibility(offer_id, channel_id)
        else:
            analysis = {'error': '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}

        return jsonify(analysis)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {e}")
        return jsonify({'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}), 500


@app.route('/api/algorithm-comparison/<int:channel_id>')
def api_algorithm_comparison(channel_id):
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –∏ –Ω–æ–≤–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤"""
    try:
        telegram_user_id = get_current_user_id()
        if not telegram_user_id:
            return jsonify({'error': '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}), 401

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
        channel = safe_execute_query('''
                                     SELECT c.id, u.telegram_id
                                     FROM channels c
                                              JOIN users u ON c.owner_id = u.id
                                     WHERE c.id = ?
                                     ''', (channel_id,), fetch_one=True)

        if not channel or channel['telegram_id'] != telegram_user_id:
            return jsonify({'error': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ç–∞—Ä–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
        if RESPONSES_SYSTEM_ENABLED:
            old_offers = get_suitable_offers_for_channel(channel_id, 10)
        else:
            old_offers = []

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–æ–≤–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
        if ADVANCED_MATCHING_ENABLED:
            new_offers = get_advanced_suitable_offers_for_channel(channel_id, 10)
        else:
            new_offers = []

        # –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        comparison = {
            'channel_id': channel_id,
            'old_algorithm': {
                'total_offers': len(old_offers),
                'avg_score': sum(offer.get('suitability_score', 0) for offer in old_offers) / len(
                    old_offers) if old_offers else 0,
                'offers': old_offers
            },
            'new_algorithm': {
                'total_offers': len(new_offers),
                'avg_score': sum(offer.get('suitability_score', 0) for offer in new_offers) / len(
                    new_offers) if new_offers else 0,
                'offers': new_offers
            }
        }

        return jsonify({
            'success': True,
            'comparison': comparison
        })

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
        return jsonify({'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}), 500


def add_user_matching_settings_table():
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è"""
    try:
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()

        cursor.execute('''
                       CREATE TABLE IF NOT EXISTS user_matching_settings
                       (
                           id
                           INTEGER
                           PRIMARY
                           KEY
                           AUTOINCREMENT,
                           user_id
                           INTEGER
                           NOT
                           NULL,
                           algorithm_version
                           TEXT
                           DEFAULT
                           'advanced_v2.0',
                           custom_weights
                           TEXT, -- JSON —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –≤–µ—Å–∞–º–∏
                           filters
                           TEXT, -- JSON —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
                           created_at
                           TIMESTAMP
                           DEFAULT
                           CURRENT_TIMESTAMP,
                           updated_at
                           TIMESTAMP
                           DEFAULT
                           CURRENT_TIMESTAMP,
                           FOREIGN
                           KEY
                       (
                           user_id
                       ) REFERENCES users
                       (
                           id
                       ),
                           UNIQUE
                       (
                           user_id
                       )
                           )
                       ''')

        cursor.execute('''
                       CREATE INDEX IF NOT EXISTS idx_user_matching_settings_user_id
                           ON user_matching_settings(user_id)
                       ''')

        conn.commit()
        conn.close()
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ user_matching_settings —Å–æ–∑–¥–∞–Ω–∞")
        return True

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        return False


def initialize_advanced_matching():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞"""
    try:
        logger.info("üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è...")

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
        table_created = add_user_matching_settings_table()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥—É–ª—è
        if ADVANCED_MATCHING_ENABLED:
            engine = AdvancedMatchingEngine(DATABASE_PATH)
            logger.info("‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            return True
        else:
            logger.error("‚ùå –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞: {e}")
        return False


@app.route('/api/analytics/system-status')
def api_analytics_system_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    try:
        telegram_user_id = get_current_user_id()

        # –ë–∞–∑–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        status = {
            'timestamp': datetime.now().isoformat(),
            'database_connected': os.path.exists(DATABASE_PATH),
            'user_authenticated': bool(telegram_user_id),
            'telegram_user_id': telegram_user_id,
            'systems': {
                'basic_analytics': ANALYTICS_SYSTEM_ENABLED,
                'placement_tracking': PLACEMENT_TRACKING_ENABLED,
                'ai_recommendations': AI_RECOMMENDATIONS_ENABLED
            },
            'features': [],
            'quick_stats': {}
        }

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∞–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç
        if hasattr(app, 'analytics_status'):
            status['systems_runtime'] = app.analytics_status

        # –ü–æ–ª—É—á–∞–µ–º –±—ã—Å—Ç—Ä—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        if telegram_user_id and ANALYTICS_SYSTEM_ENABLED:
            try:
                analytics_engine = AnalyticsEngine(DATABASE_PATH)
                quick_metrics = analytics_engine.get_user_metrics(telegram_user_id, '7d')

                status['quick_stats'] = {
                    'revenue_7d': quick_metrics.get('total_revenue', 0),
                    'channels': quick_metrics.get('total_audience', 0) > 0,
                    'conversion_rate': quick_metrics.get('conversion_rate', 0),
                    'response_time': quick_metrics.get('avg_response_time', 0)
                }

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
                features = ['üìä –î–∞—à–±–æ—Ä–¥ –º–µ—Ç—Ä–∏–∫', 'üìà –ì—Ä–∞—Ñ–∏–∫–∏ –¥–∏–Ω–∞–º–∏–∫–∏']

                if PLACEMENT_TRACKING_ENABLED:
                    features.append('üéØ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–π')

                if AI_RECOMMENDATIONS_ENABLED:
                    features.append('ü§ñ AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏')

                status['features'] = features

            except Exception as e:
                logger.error(f"Error getting quick stats: {e}")
                status['quick_stats_error'] = str(e)

        return jsonify({
            'success': True,
            'status': status
        })

    except Exception as e:
        logger.error(f"Analytics system status error: {e}")
        return jsonify({
            'success': False,
            'error': str(e),
            'status': {
                'database_connected': False,
                'user_authenticated': False,
                'systems': {
                    'basic_analytics': False,
                    'placement_tracking': False,
                    'ai_recommendations': False
                }
            }
        }), 500


@app.route('/api/analytics/dashboard-data')
@require_telegram_auth
def api_analytics_dashboard_data():
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    try:
        telegram_user_id = get_current_user_id()
        range_type = request.args.get('range', '30d')

        dashboard_data = {
            'timestamp': datetime.now().isoformat(),
            'range': range_type,
            'user_id': telegram_user_id,
            'metrics': {},
            'charts': {},
            'performance': [],
            'recommendations': [],
            'tracking_summary': {},
            'ai_insights': {}
        }

        # 1. –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        if ANALYTICS_SYSTEM_ENABLED:
            try:
                analytics_engine = AnalyticsEngine(DATABASE_PATH)
                dashboard_data['metrics'] = analytics_engine.get_user_metrics(telegram_user_id, range_type)
                dashboard_data['charts'] = analytics_engine.get_chart_data(telegram_user_id, range_type)
                dashboard_data['performance'] = analytics_engine.get_performance_data(telegram_user_id, range_type)
            except Exception as e:
                logger.error(f"Basic analytics error: {e}")
                dashboard_data['analytics_error'] = str(e)

        # 2. –î–∞–Ω–Ω—ã–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏–π
        if PLACEMENT_TRACKING_ENABLED:
            try:
                placement_tracker = PlacementTracker(DATABASE_PATH)
                dashboard_data['tracking_summary'] = placement_tracker.get_performance_summary(
                    telegram_user_id,
                    {'7d': 7, '30d': 30, '90d': 90}.get(range_type, 30)
                )
            except Exception as e:
                logger.error(f"Placement tracking error: {e}")
                dashboard_data['tracking_error'] = str(e)

        # 3. AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if AI_RECOMMENDATIONS_ENABLED:
            try:
                ai_engine = AIRecommendationEngine(DATABASE_PATH)
                recommendations = ai_engine.generate_recommendations(
                    telegram_user_id,
                    {'7d': 7, '30d': 30, '90d': 90}.get(range_type, 30)
                )

                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ JSON
                dashboard_data['recommendations'] = []
                for rec in recommendations[:4]:  # –¢–æ–ø-4 –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
                    dashboard_data['recommendations'].append({
                        'type': rec.type,
                        'priority': rec.priority,
                        'title': rec.title,
                        'description': rec.description,
                        'impact': rec.impact_description,
                        'confidence': rec.confidence
                    })

            except Exception as e:
                logger.error(f"AI recommendations error: {e}")
                dashboard_data['ai_error'] = str(e)

        # 4. –°–≤–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        dashboard_data['summary'] = {
            'total_systems': 3,
            'active_systems': sum([
                ANALYTICS_SYSTEM_ENABLED,
                PLACEMENT_TRACKING_ENABLED,
                AI_RECOMMENDATIONS_ENABLED
            ]),
            'data_quality': 'good' if len(dashboard_data.get('performance', [])) > 0 else 'limited',
            'last_updated': datetime.now().isoformat()
        }

        return jsonify({
            'success': True,
            'dashboard_data': dashboard_data
        })

    except Exception as e:
        logger.error(f"Dashboard data API error: {e}")
        return jsonify({
            'success': False,
            'error': str(e),
            'dashboard_data': {
                'summary': {'error': True, 'message': '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö'}
            }
        }), 500

'''@app.route('/api/analytics/create-demo-data', methods=['POST'])
@require_telegram_auth
def api_create_demo_analytics_data():
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    try:
        telegram_user_id = get_current_user_id()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if telegram_user_id != YOUR_TELEGRAM_ID:
            return jsonify({
                'success': False,
                'error': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.'
            }), 403

        created_items = {
            'demo_placement': None,
            'demo_events': 0,
            'demo_offers': 0
        }

        # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-—Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
        if PLACEMENT_TRACKING_ENABLED:
            try:
                # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-—Ä–∞–∑–º–µ—â–µ–Ω–∏–µ
                from placement_tracking import create_demo_placement
                placement_id = create_demo_placement(DATABASE_PATH)

                if placement_id:
                    created_items['demo_placement'] = placement_id
                    created_items['demo_events'] = 50  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π

                    logger.info(f"–°–æ–∑–¥–∞–Ω–æ –¥–µ–º–æ-—Ä–∞–∑–º–µ—â–µ–Ω–∏–µ {placement_id}")

            except Exception as e:
                logger.error(f"Error creating demo placement: {e}")

        # –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ñ—Ñ–µ—Ä–æ–≤
        try:
            # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            user_db_id = ensure_user_exists(telegram_user_id)

            if user_db_id and OFFERS_SYSTEM_ENABLED:
                # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–µ–º–æ-–æ—Ñ—Ñ–µ—Ä–æ–≤
                demo_offers = [
                    {
                        'title': '–î–µ–º–æ-–æ—Ñ—Ñ–µ—Ä: –ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞–ø–∞',
                        'description': '–†–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ IT-–ø—Ä–æ–¥—É–∫—Ç–∞',
                        'content': '–ò—â–µ–º –∫–∞–Ω–∞–ª—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã –Ω–∞—à–µ–≥–æ –Ω–æ–≤–æ–≥–æ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ì–æ—Ç–æ–≤—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤—ã–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞.',
                        'price': 5000,
                        'currency': 'RUB',
                        'category': 'technology'
                    },
                    {
                        'title': '–î–µ–º–æ-–æ—Ñ—Ñ–µ—Ä: –†–µ–∫–ª–∞–º–∞ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫—É—Ä—Å–∞',
                        'description': '–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å–∞ –ø–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É',
                        'content': '–ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –∫—É—Ä—Å –ø–æ —Ü–∏—Ñ—Ä–æ–≤–æ–º—É –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É. –ò—â–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã —Å –∞–∫—Ç–∏–≤–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π.',
                        'price': 3500,
                        'currency': 'RUB',
                        'category': 'education'
                    }
                ]

                for offer_data in demo_offers:
                    result = add_offer(telegram_user_id, offer_data)
                    if result.get('success'):
                        created_items['demo_offers'] += 1

        except Exception as e:
            logger.error(f"Error creating demo offers: {e}")

        return jsonify({
            'success': True,
            'message': '–î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã',
            'created_items': created_items,
            'note': '–î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –ø–æ–º–æ–≥—É—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏'
        })

    except Exception as e:
        logger.error(f"Create demo data error: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500'''


@app.route('/payments-dashboard')
def payments_dashboard():
    """–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞–º–∏"""
    return render_template('payments_dashboard.html')


@app.route('/api/payments/stats')
def payments_stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π"""
    try:
        telegram_user_id = get_current_user_id()
        if not telegram_user_id:
            return jsonify({'success': False, 'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}), 401

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = safe_execute_query('''
                                   SELECT COUNT(*)                                                 as total_payments,
                                          SUM(CASE WHEN status = 'paid' THEN amount ELSE 0 END)    as total_paid,
                                          SUM(CASE WHEN status = 'pending' THEN amount ELSE 0 END) as pending_amount,
                                          COUNT(CASE WHEN status = 'paid' THEN 1 END)              as successful_payments
                                   FROM payments p
                                            JOIN offers o ON p.offer_id = o.id
                                            JOIN users u ON o.created_by = u.id
                                   WHERE u.telegram_id = ?
                                   ''', (telegram_user_id,), fetch_one=True)

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —ç—Å–∫—Ä–æ—É
        escrow_stats = safe_execute_query('''
                                          SELECT COUNT(*)                                                        as total_escrows,
                                                 SUM(CASE WHEN status = 'funds_held' THEN amount ELSE 0 END)     as held_amount,
                                                 SUM(CASE WHEN status = 'funds_released' THEN amount ELSE 0 END) as released_amount,
                                                 COUNT(CASE WHEN status = 'disputed' THEN 1 END)                 as disputed_count
                                          FROM escrow_transactions et
                                                   JOIN offers o ON et.offer_id = o.id
                                                   JOIN users u ON o.created_by = u.id
                                          WHERE u.telegram_id = ?
                                          ''', (telegram_user_id,), fetch_one=True)

        return jsonify({
            'success': True,
            'payments': stats or {},
            'escrow': escrow_stats or {}
        })

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500


def setup_payout_routes():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –≤—ã–ø–ª–∞—Ç"""
    global payout_manager

    if not PAYOUT_SYSTEM_ENABLED:
        logger.warning("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –≤—ã–ø–ª–∞—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∞")
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –≤—ã–ø–ª–∞—Ç
    payout_manager = PayoutManager()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
    register_payout_routes(app)


    # === API –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –í–´–ü–õ–ê–¢–ê–ú–ò ===

    @app.route('/api/payouts/trigger-escrow-release', methods=['POST'])
    def trigger_escrow_release():
        """API –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –∏–∑ —ç—Å–∫—Ä–æ—É —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –≤—ã–ø–ª–∞—Ç—ã"""
        try:
            data = request.get_json()
            offer_id = data.get('offer_id')
            user_id = get_current_user_id()

            if not offer_id:
                return jsonify({'success': False, 'error': 'offer_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'}), 400

            # –ù–∞—Ö–æ–¥–∏–º —ç—Å–∫—Ä–æ—É –¥–ª—è –æ—Ñ—Ñ–µ—Ä–∞
            escrow = safe_execute_query('''
                                        SELECT *
                                        FROM escrow_transactions
                                        WHERE offer_id = ?
                                          AND status = 'funds_held'
                                        ''', (offer_id,), fetch_one=True)

            if not escrow:
                return jsonify({
                    'success': False,
                    'error': '–≠—Å–∫—Ä–æ—É –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ —É–∂–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã'
                }), 404

            # –°–æ–∑–¥–∞–µ–º –≤—ã–ø–ª–∞—Ç—É
            result = payout_manager.create_manual_payout(
                escrow['id'],
                trigger_type='offer_completed'
            )

            if result['success']:
                return jsonify({
                    'success': True,
                    'message': '–í—ã–ø–ª–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å',
                    'payout_id': result['payout_id'],
                    'amount': result['amount']
                })
            else:
                return jsonify(result), 400

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —ç—Å–∫—Ä–æ—É: {e}")
            return jsonify({'success': False, 'error': str(e)}), 500

    @app.route('/api/payouts/pending', methods=['GET'])
    def get_pending_payouts():
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–∂–∏–¥–∞—é—â–∏—Ö –≤—ã–ø–ª–∞—Ç"""
        try:
            user_id = get_current_user_id()

            # –ü–æ–ª—É—á–∞–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ –≤—ã–ø–ª–∞—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            pending_payouts = safe_execute_query('''
                                                 SELECT p.*,
                                                        et.offer_id,
                                                        o.title as offer_title,
                                                        u.username,
                                                        u.telegram_id
                                                 FROM payouts p
                                                          JOIN users u ON p.recipient_id = u.id
                                                          LEFT JOIN escrow_transactions et ON p.escrow_id = et.id
                                                          LEFT JOIN offers o ON et.offer_id = o.id
                                                 WHERE p.status IN ('pending', 'retry')
                                                   AND (u.telegram_id = ? OR ? = ?)
                                                 ORDER BY p.scheduled_at ASC
                                                 ''', (user_id, user_id, YOUR_TELEGRAM_ID), fetch_all=True)

            return jsonify({
                'success': True,
                'payouts': pending_payouts or []
            })

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–∂–∏–¥–∞—é—â–∏—Ö –≤—ã–ø–ª–∞—Ç: {e}")
            return jsonify({'success': False, 'error': str(e)}), 500

    @app.route('/api/payouts/failed', methods=['GET'])
    def get_failed_payouts():
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–ø–ª–∞—Ç —Å –æ—à–∏–±–∫–∞–º–∏"""
        try:
            user_id = get_current_user_id()

            failed_payouts = safe_execute_query('''
                                                SELECT p.*,
                                                       et.offer_id,
                                                       o.title as offer_title,
                                                       u.username,
                                                       u.telegram_id
                                                FROM payouts p
                                                         JOIN users u ON p.recipient_id = u.id
                                                         LEFT JOIN escrow_transactions et ON p.escrow_id = et.id
                                                         LEFT JOIN offers o ON et.offer_id = o.id
                                                WHERE p.status = 'failed'
                                                  AND (u.telegram_id = ? OR ? = ?)
                                                ORDER BY p.updated_at DESC LIMIT 50
                                                ''', (user_id, user_id, YOUR_TELEGRAM_ID), fetch_all=True)

            return jsonify({
                'success': True,
                'payouts': failed_payouts or []
            })

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–ø–ª–∞—Ç —Å –æ—à–∏–±–∫–∞–º–∏: {e}")
            return jsonify({'success': False, 'error': str(e)}), 500

    @app.route('/api/escrow/ready', methods=['GET'])
    def get_ready_escrows():
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç—Å–∫—Ä–æ—É –≥–æ—Ç–æ–≤—ã—Ö –∫ –≤—ã–ø–ª–∞—Ç–µ"""
        try:
            user_id = get_current_user_id()

            ready_escrows = safe_execute_query('''
                                               SELECT et.*,
                                                      u.username,
                                                      u.telegram_id,
                                                      o.title as offer_title,
                                                      o.price
                                               FROM escrow_transactions et
                                                        JOIN users u ON et.recipient_id = u.id
                                                        JOIN offers o ON et.offer_id = o.id
                                               WHERE et.status = 'funds_held'
                                                 AND et.expires_at <= ?
                                                 AND et.id NOT IN (SELECT DISTINCT escrow_id
                                                                   FROM payouts
                                                                   WHERE escrow_id IS NOT NULL)
                                                 AND (u.telegram_id = ? OR ? = ?)
                                               ORDER BY et.expires_at ASC
                                               ''', (datetime.now(), user_id, user_id, YOUR_TELEGRAM_ID),
                                               fetch_all=True)

            return jsonify({
                'success': True,
                'escrows': ready_escrows or []
            })

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ç–æ–≤—ã—Ö —ç—Å–∫—Ä–æ—É: {e}")
            return jsonify({'success': False, 'error': str(e)}), 500

    @app.route('/api/payouts/process-ready-escrows', methods=['POST'])
    def process_ready_escrows():
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤—ã–ø–ª–∞—Ç –¥–ª—è –≤—Å–µ—Ö –≥–æ—Ç–æ–≤—ã—Ö —ç—Å–∫—Ä–æ—É"""
        try:
            user_id = get_current_user_id()

            # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ç–æ–≤—ã–µ —ç—Å–∫—Ä–æ—É
            ready_escrows = safe_execute_query('''
                                               SELECT et.*
                                               FROM escrow_transactions et
                                                        JOIN users u ON et.recipient_id = u.id
                                               WHERE et.status = 'funds_held'
                                                 AND et.expires_at <= ?
                                                 AND et.id NOT IN (SELECT DISTINCT escrow_id
                                                                   FROM payouts
                                                                   WHERE escrow_id IS NOT NULL)
                                                 AND (u.telegram_id = ? OR ? = ?)
                                               ''', (datetime.now(), user_id, user_id, YOUR_TELEGRAM_ID),
                                               fetch_all=True)

            created_payouts = []
            errors = []

            for escrow in ready_escrows:
                try:
                    result = payout_manager.create_manual_payout(
                        escrow['id'],
                        trigger_type='auto_time'
                    )

                    if result['success']:
                        created_payouts.append({
                            'escrow_id': escrow['id'],
                            'payout_id': result['payout_id'],
                            'amount': result['amount']
                        })
                    else:
                        errors.append({
                            'escrow_id': escrow['id'],
                            'error': result['error']
                        })

                except Exception as e:
                    errors.append({
                        'escrow_id': escrow['id'],
                        'error': str(e)
                    })

            return jsonify({
                'success': True,
                'created_payouts': created_payouts,
                'errors': errors,
                'message': f'–°–æ–∑–¥–∞–Ω–æ {len(created_payouts)} –≤—ã–ø–ª–∞—Ç, {len(errors)} –æ—à–∏–±–æ–∫'
            })

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–ø–ª–∞—Ç –¥–ª—è –≥–æ—Ç–æ–≤—ã—Ö —ç—Å–∫—Ä–æ—É: {e}")
            return jsonify({'success': False, 'error': str(e)}), 500

    @app.route('/api/payouts/retry-failed', methods=['POST'])
    def retry_failed_payouts():
        """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–ª—è –≤—ã–ø–ª–∞—Ç —Å –æ—à–∏–±–∫–∞–º–∏"""
        try:
            data = request.get_json()
            payout_ids = data.get('payout_ids', [])

            if not payout_ids:
                # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã ID, –±–µ—Ä–µ–º –≤—Å–µ –Ω–µ—É–¥–∞—á–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_id = get_current_user_id()
                failed_payouts = safe_execute_query('''
                                                    SELECT p.id
                                                    FROM payouts p
                                                             JOIN users u ON p.recipient_id = u.id
                                                    WHERE p.status = 'failed'
                                                      AND p.retry_count < ?
                                                      AND (u.telegram_id = ? OR ? = ?)
                                                    ''', (MAX_RETRY_ATTEMPTS, user_id, user_id, YOUR_TELEGRAM_ID),
                                                    fetch_all=True)

                payout_ids = [p['id'] for p in failed_payouts]

            if not payout_ids:
                return jsonify({
                    'success': True,
                    'message': '–ù–µ—Ç –≤—ã–ø–ª–∞—Ç –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞'
                })

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ retry
            updated_count = 0
            for payout_id in payout_ids:
                result = safe_execute_query('''
                                            UPDATE payouts
                                            SET status       = 'retry',
                                                scheduled_at = ?,
                                                updated_at   = ?
                                            WHERE id = ?
                                              AND status = 'failed'
                                              AND retry_count < ?
                                            ''', (datetime.now(), datetime.now(), payout_id, MAX_RETRY_ATTEMPTS))

                if result is not None:
                    updated_count += 1

            return jsonify({
                'success': True,
                'message': f'–ü–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ {updated_count} –≤—ã–ø–ª–∞—Ç'
            })

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–∞ –≤—ã–ø–ª–∞—Ç: {e}")
            return jsonify({'success': False, 'error': str(e)}), 500

    # === –ê–í–¢–û–ó–ê–ü–£–°–ö –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê ===
    @app.route('/api/payouts/scheduler/start', methods=['POST'])
    def start_payout_scheduler():
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤—ã–ø–ª–∞—Ç"""
        try:
            if payout_manager:
                payout_manager.start_auto_payouts()
                return jsonify({
                    'success': True,
                    'message': '–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤—ã–ø–ª–∞—Ç –∑–∞–ø—É—â–µ–Ω'
                })
            else:
                return jsonify({
                    'success': False,
                    'error': '–ú–µ–Ω–µ–¥–∂–µ—Ä –≤—ã–ø–ª–∞—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'
                }), 500
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
            return jsonify({'success': False, 'error': str(e)}), 500

    @app.route('/api/payouts/scheduler/stop', methods=['POST'])
    def stop_payout_scheduler():
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤—ã–ø–ª–∞—Ç"""
        try:
            if payout_manager:
                payout_manager.stop_auto_payouts()
                return jsonify({
                    'success': True,
                    'message': '–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤—ã–ø–ª–∞—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
                })
            else:
                return jsonify({
                    'success': False,
                    'error': '–ú–µ–Ω–µ–¥–∂–µ—Ä –≤—ã–ø–ª–∞—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'
                }), 500
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
            return jsonify({'success': False, 'error': str(e)}), 500


@app.route('/payments')
def payments_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞–º–∏"""
    try:
        telegram_user_id = get_current_user_id()
        logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_user_id}")

        # –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω
        return render_template('payments.html', telegram_user_id=telegram_user_id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
        return render_template('payments.html', error=str(e))


@app.route('/api/payments/stats', methods=['GET'])
def api_payment_stats():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        telegram_user_id = get_current_user_id()

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞—Ç–µ–∂–µ–π
        payment_stats = safe_execute_query('''
                                           SELECT COUNT(*)                                                   as total_count,
                                                  SUM(CASE WHEN status = 'completed' THEN amount ELSE 0 END) as total_amount,
                                                  COUNT(CASE WHEN status = 'pending' THEN 1 END)             as pending_count,
                                                  COUNT(CASE WHEN status = 'completed' THEN 1 END)           as completed_count,
                                                  COUNT(CASE WHEN status = 'failed' THEN 1 END)              as failed_count
                                           FROM payouts p
                                                    JOIN users u ON p.recipient_id = u.id
                                           WHERE u.telegram_id = ?
                                           ''', (telegram_user_id,), fetch_one=True)

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —ç—Å–∫—Ä–æ—É
        escrow_stats = safe_execute_query('''
                                          SELECT COUNT(*)                                                        as total_escrows,
                                                 SUM(CASE WHEN status = 'funds_held' THEN amount ELSE 0 END)     as held_amount,
                                                 SUM(CASE WHEN status = 'funds_released' THEN amount ELSE 0 END) as released_amount,
                                                 COUNT(CASE WHEN status = 'disputed' THEN 1 END)                 as disputed_count
                                          FROM escrow_transactions et
                                                   JOIN offers o ON et.offer_id = o.id
                                                   JOIN users u ON o.created_by = u.id
                                          WHERE u.telegram_id = ?
                                          ''', (telegram_user_id,), fetch_one=True)

        return jsonify({
            'success': True,
            'payments': payment_stats or {},
            'escrow': escrow_stats or {}
        })

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500


@app.route('/api/payments/<payment_type>', methods=['GET'])
def api_get_payments(payment_type):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ —Ç–∏–ø—É (incoming/outgoing/escrow/history)"""
    try:
        telegram_user_id = get_current_user_id()
        limit = int(request.args.get('limit', 20))
        offset = int(request.args.get('offset', 0))

        if payment_type == 'incoming':
            # –í—Ö–æ–¥—è—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏ (–º–Ω–µ –ø–ª–∞—Ç—è—Ç)
            payments = safe_execute_query('''
                                          SELECT p.*,
                                                 o.title           as offer_title,
                                                 u_sender.username as sender_username,
                                                 p.created_at,
                                                 p.amount,
                                                 p.status
                                          FROM payouts p
                                                   JOIN users u_recipient ON p.recipient_id = u_recipient.id
                                                   LEFT JOIN escrow_transactions et ON p.escrow_id = et.id
                                                   LEFT JOIN offers o ON et.offer_id = o.id
                                                   LEFT JOIN users u_sender ON o.created_by = u_sender.id
                                          WHERE u_recipient.telegram_id = ?
                                          ORDER BY p.created_at DESC LIMIT ?
                                          OFFSET ?
                                          ''', (telegram_user_id, limit, offset), fetch_all=True)

        elif payment_type == 'outgoing':
            # –ò—Å—Ö–æ–¥—è—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏ (—è –ø–ª–∞—á—É)
            payments = safe_execute_query('''
                                          SELECT et.*,
                                                 o.title              as offer_title,
                                                 u_recipient.username as recipient_username,
                                                 et.created_at,
                                                 et.amount,
                                                 et.status,
                                                 CASE
                                                     WHEN et.status = 'funds_held' THEN 'pending'
                                                     WHEN et.status = 'funds_released' THEN 'completed'
                                                     WHEN et.status = 'disputed' THEN 'failed'
                                                     ELSE et.status
                                                     END              as payment_status
                                          FROM escrow_transactions et
                                                   JOIN offers o ON et.offer_id = o.id
                                                   JOIN users u_creator ON o.created_by = u_creator.id
                                                   LEFT JOIN users u_recipient ON et.recipient_id = u_recipient.id
                                          WHERE u_creator.telegram_id = ?
                                          ORDER BY et.created_at DESC LIMIT ?
                                          OFFSET ?
                                          ''', (telegram_user_id, limit, offset), fetch_all=True)

        elif payment_type == 'escrow':
            # –°—Ä–µ–¥—Å—Ç–≤–∞ –≤ —ç—Å–∫—Ä–æ—É
            payments = safe_execute_query('''
                                          SELECT et.*,
                                                 o.title              as offer_title,
                                                 u_recipient.username as recipient_username,
                                                 et.created_at,
                                                 et.amount,
                                                 et.status
                                          FROM escrow_transactions et
                                                   JOIN offers o ON et.offer_id = o.id
                                                   JOIN users u_creator ON o.created_by = u_creator.id
                                                   LEFT JOIN users u_recipient ON et.recipient_id = u_recipient.id
                                          WHERE (u_creator.telegram_id = ? OR EXISTS(SELECT 1
                                                                                     FROM users u_r
                                                                                     WHERE u_r.id = et.recipient_id
                                                                                       AND u_r.telegram_id = ?))
                                            AND et.status = 'funds_held'
                                          ORDER BY et.created_at DESC LIMIT ?
                                          OFFSET ?
                                          ''', (telegram_user_id, telegram_user_id, limit, offset), fetch_all=True)

        else:  # history
            # –í—Å—è –∏—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π
            payments = safe_execute_query('''
                                          SELECT p.*,
                                                 o.title  as offer_title,
                                                 'payout' as transaction_type,
                                                 p.created_at,
                                                 p.amount,
                                                 p.status
                                          FROM payouts p
                                                   JOIN users u ON p.recipient_id = u.id
                                                   LEFT JOIN escrow_transactions et ON p.escrow_id = et.id
                                                   LEFT JOIN offers o ON et.offer_id = o.id
                                          WHERE u.telegram_id = ?

                                          UNION ALL

                                          SELECT et.id,
                                                 et.offer_id,
                                                 o.title  as offer_title,
                                                 'escrow' as transaction_type,
                                                 et.created_at,
                                                 et.amount,
                                                 et.status
                                          FROM escrow_transactions et
                                                   JOIN offers o ON et.offer_id = o.id
                                                   JOIN users u ON o.created_by = u.id
                                          WHERE u.telegram_id = ?

                                          ORDER BY created_at DESC LIMIT ?
                                          OFFSET ?
                                          ''', (telegram_user_id, telegram_user_id, limit, offset), fetch_all=True)

        return jsonify({
            'success': True,
            'payments': payments or [],
            'count': len(payments) if payments else 0
        })

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π {payment_type}: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500


@app.route('/api/payments/create-escrow', methods=['POST'])
def api_create_escrow():
    """API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç—Å–∫—Ä–æ—É-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    try:
        telegram_user_id = get_current_user_id()
        data = request.get_json()

        offer_id = data.get('offer_id')
        amount = float(data.get('amount', 0))
        recipient_user_id = data.get('recipient_user_id')

        if not all([offer_id, amount > 0, recipient_user_id]):
            return jsonify({
                'success': False,
                'error': '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã: offer_id, amount, recipient_user_id'
            }), 400

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ñ—Ñ–µ—Ä –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        offer = safe_execute_query('''
                                   SELECT o.*, u.telegram_id
                                   FROM offers o
                                            JOIN users u ON o.created_by = u.id
                                   WHERE o.id = ?
                                     AND u.telegram_id = ?
                                   ''', (offer_id, telegram_user_id), fetch_one=True)

        if not offer:
            return jsonify({
                'success': False,
                'error': '–û—Ñ—Ñ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞'
            }), 404

        # –°–æ–∑–¥–∞–µ–º —ç—Å–∫—Ä–æ—É-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        from datetime import datetime, timedelta

        escrow_id = safe_execute_query('''
                                       INSERT INTO escrow_transactions (offer_id, recipient_id, amount, status,
                                                                        created_at, expires_at)
                                       VALUES (?, ?, ?, 'funds_held', ?, ?)
                                       ''', (
                                           offer_id,
                                           recipient_user_id,
                                           amount,
                                           datetime.now(),
                                           datetime.now() + timedelta(days=7)
                                       # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π
                                       ))

        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ —ç—Å–∫—Ä–æ—É-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {escrow_id} –¥–ª—è –æ—Ñ—Ñ–µ—Ä–∞ {offer_id}")

        return jsonify({
            'success': True,
            'escrow_id': escrow_id,
            'message': '–≠—Å–∫—Ä–æ—É-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ'
        })

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç—Å–∫—Ä–æ—É: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500


@app.route('/api/payments/telegram-payment', methods=['POST'])
def api_process_telegram_payment():
    """API –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ Telegram"""
    try:
        telegram_user_id = get_current_user_id()
        data = request.get_json()

        offer_id = data.get('offer_id')
        amount = float(data.get('amount', 0))
        payment_payload = data.get('payment_payload')

        if not all([offer_id, amount > 0]):
            return jsonify({
                'success': False,
                'error': '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã: offer_id, amount'
            }), 400

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ñ—Ñ–µ—Ä–µ
        offer_info = safe_execute_query('''
                                        SELECT o.*, u.telegram_id as owner_telegram_id
                                        FROM offers o
                                                 JOIN users u ON o.created_by = u.id
                                        WHERE o.id = ?
                                        ''', (offer_id,), fetch_one=True)

        if not offer_info:
            return jsonify({
                'success': False,
                'error': '–û—Ñ—Ñ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }), 404

        # –°–æ–∑–¥–∞–µ–º invoice –¥–ª—è Telegram Payments
        invoice_data = {
            'title': f'–û–ø–ª–∞—Ç–∞ –æ—Ñ—Ñ–µ—Ä–∞: {offer_info["title"]}',
            'description': f'–†–µ–∫–ª–∞–º–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ',
            'payload': json.dumps({
                'offer_id': offer_id,
                'user_id': telegram_user_id,
                'amount': amount
            }),
            'provider_token': TELEGRAM_PAYMENT_TOKEN,  # –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤ .env
            'currency': 'RUB',
            'prices': [{
                'label': '–†–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã',
                'amount': int(amount * 100)  # –í –∫–æ–ø–µ–π–∫–∞—Ö
            }]
        }

        return jsonify({
            'success': True,
            'invoice': invoice_data,
            'message': 'Invoice —Å–æ–∑–¥–∞–Ω –¥–ª—è Telegram Payments'
        })

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Telegram –ø–ª–∞—Ç–µ–∂–∞: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500


@app.route('/api/payments/webhook', methods=['POST'])
def payment_webhook():
    """Webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–ª–∞—Ç–µ–∂–∞—Ö –æ—Ç Telegram"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ webhook (–≤–∞–∂–Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
        signature = request.headers.get('X-Telegram-Bot-Api-Secret-Token')
        if signature != WEBHOOK_SECRET:
            logger.warning("–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å webhook")
            return jsonify({'error': 'Invalid signature'}), 401

        data = request.get_json()

        if 'successful_payment' in data.get('message', {}):
            payment_data = data['message']['successful_payment']
            payload = json.loads(payment_data['invoice_payload'])

            offer_id = payload.get('offer_id')
            user_id = payload.get('user_id')
            amount = payload.get('amount')

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –ë–î
            # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
            logger.info(f"–£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è –æ—Ñ—Ñ–µ—Ä–∞ {offer_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

            # –ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —ç—Å–∫—Ä–æ—É –∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞
            # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏

        return jsonify({'success': True})

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500


@app.route('/api/payments/bulk-status', methods=['POST'])
def api_bulk_payment_status():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤"""
    try:
        telegram_user_id = get_current_user_id()
        data = request.get_json()
        offer_ids = data.get('offer_ids', [])

        if not offer_ids:
            return jsonify({'success': True, 'statuses': {}})

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –≤—Å–µ—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤
        placeholders = ','.join(['?' for _ in offer_ids])

        statuses_query = f'''
            SELECT 
                o.id as offer_id,
                o.created_by,
                u_creator.telegram_id as creator_telegram_id,
                CASE 
                    WHEN et.status = 'funds_held' THEN 'escrow'
                    WHEN et.status = 'funds_released' THEN 'paid'
                    WHEN EXISTS(SELECT 1 FROM offer_responses WHERE offer_id = o.id AND status = 'accepted') THEN 'pending_payment'
                    ELSE 'active'
                END as payment_status,
                et.amount as escrow_amount,
                et.expires_at as escrow_expires,
                CASE WHEN u_creator.telegram_id = ? THEN 1 ELSE 0 END as can_pay,
                CASE WHEN u_creator.telegram_id = ? AND et.status = 'funds_held' THEN 1 ELSE 0 END as can_release
            FROM offers o
            JOIN users u_creator ON o.created_by = u_creator.id
            LEFT JOIN escrow_transactions et ON o.id = et.offer_id
            WHERE o.id IN ({placeholders})
        '''

        params = [telegram_user_id, telegram_user_id] + offer_ids
        results = safe_execute_query(statuses_query, params, fetch_all=True)

        statuses = {}
        for result in results or []:
            statuses[str(result['offer_id'])] = {
                'status': result['payment_status'],
                'can_pay': bool(result['can_pay']),
                'can_release': bool(result['can_release']),
                'escrow_amount': result['escrow_amount'],
                'escrow_expires': result['escrow_expires']
            }

        return jsonify({
            'success': True,
            'statuses': statuses
        })

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è bulk —Å—Ç–∞—Ç—É—Å–æ–≤: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500


@app.route('/api/payments/release-escrow', methods=['POST'])
def api_release_escrow():
    """API –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –∏–∑ —ç—Å–∫—Ä–æ—É"""
    try:
        telegram_user_id = get_current_user_id()
        data = request.get_json()
        offer_id = data.get('offer_id')

        if not offer_id:
            return jsonify({'success': False, 'error': 'offer_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'}), 400

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        offer = safe_execute_query('''
                                   SELECT o.*, u.telegram_id
                                   FROM offers o
                                            JOIN users u ON o.created_by = u.id
                                   WHERE o.id = ?
                                     AND u.telegram_id = ?
                                   ''', (offer_id, telegram_user_id), fetch_one=True)

        if not offer:
            return jsonify({'success': False, 'error': '–û—Ñ—Ñ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞'}), 404

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º—É –≤—ã–ø–ª–∞—Ç –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —ç—Å–∫—Ä–æ—É
        if PAYOUT_SYSTEM_ENABLED and payout_manager:
            # –ù–∞—Ö–æ–¥–∏–º —ç—Å–∫—Ä–æ—É –¥–ª—è —ç—Ç–æ–≥–æ –æ—Ñ—Ñ–µ—Ä–∞
            escrow = safe_execute_query('''
                                        SELECT *
                                        FROM escrow_transactions
                                        WHERE offer_id = ?
                                          AND status = 'funds_held'
                                        ''', (offer_id,), fetch_one=True)

            if not escrow:
                return jsonify({'success': False, 'error': '–ê–∫—Ç–∏–≤–Ω–æ–µ —ç—Å–∫—Ä–æ—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}), 404

            # –°–æ–∑–¥–∞–µ–º —Ä—É—á–Ω—É—é –≤—ã–ø–ª–∞—Ç—É
            result = payout_manager.create_manual_payout(
                escrow['id'],
                'manual_release'
            )

            if result['success']:
                logger.info(f"–û—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏–∑ —ç—Å–∫—Ä–æ—É {escrow['id']} –¥–ª—è –æ—Ñ—Ñ–µ—Ä–∞ {offer_id}")
                return jsonify({
                    'success': True,
                    'message': '–°—Ä–µ–¥—Å—Ç–≤–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã –∏–∑ —ç—Å–∫—Ä–æ—É',
                    'payout_id': result['payout_id']
                })
            else:
                return jsonify({'success': False, 'error': result['error']})
        else:
            return jsonify({'success': False, 'error': '–°–∏—Å—Ç–µ–º–∞ –≤—ã–ø–ª–∞—Ç –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞'}), 503

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —ç—Å–∫—Ä–æ—É: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500


@app.route('/api/payments/dispute', methods=['POST'])
def api_create_payment_dispute():
    """API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–æ—Ä–∞ –ø–æ –ø–ª–∞—Ç–µ–∂—É"""
    try:
        telegram_user_id = get_current_user_id()
        data = request.get_json()

        offer_id = data.get('offer_id')
        reason = data.get('reason', '').strip()
        description = data.get('description', '').strip()
        evidence_urls = data.get('evidence_urls', [])

        if not all([offer_id, reason, description]):
            return jsonify({
                'success': False,
                'error': '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã: offer_id, reason, description'
            }), 400

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —ç—Å–∫—Ä–æ—É –¥–ª—è –æ—Ñ—Ñ–µ—Ä–∞
        escrow = safe_execute_query('''
                                    SELECT et.*, o.title, u.telegram_id as creator_telegram_id
                                    FROM escrow_transactions et
                                             JOIN offers o ON et.offer_id = o.id
                                             JOIN users u ON o.created_by = u.id
                                    WHERE et.offer_id = ?
                                      AND et.status = 'funds_held'
                                    ''', (offer_id,), fetch_one=True)

        if not escrow:
            return jsonify({
                'success': False,
                'error': '–ê–∫—Ç–∏–≤–Ω–æ–µ —ç—Å–∫—Ä–æ—É –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –æ—Ñ—Ñ–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
            }), 404

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Å–¥–µ–ª–∫–∏)
        is_participant = safe_execute_query('''
                                            SELECT 1
                                            FROM (SELECT u.telegram_id
                                                  FROM offers o
                                                           JOIN users u ON o.created_by = u.id
                                                  WHERE o.id = ?

                                                  UNION

                                                  SELECT u.telegram_id
                                                  FROM escrow_transactions et
                                                           JOIN users u ON et.recipient_id = u.id
                                                  WHERE et.offer_id = ?) participants
                                            WHERE telegram_id = ?
                                            ''', (offer_id, offer_id, telegram_user_id), fetch_one=True)

        if not is_participant:
            return jsonify({
                'success': False,
                'error': '–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –¥–∞–Ω–Ω–æ–π —Å–¥–µ–ª–∫–∏'
            }), 403

        # –°–æ–∑–¥–∞–µ–º —Å–ø–æ—Ä
        dispute_id = safe_execute_query('''
                                        INSERT INTO payment_disputes (escrow_id, created_by, reason, description,
                                                                      evidence_urls, status, created_at)
                                        VALUES (?, (SELECT id FROM users WHERE telegram_id = ?), ?, ?, ?, 'open', ?)
                                        ''', (
                                            escrow['id'], telegram_user_id, reason, description,
                                            json.dumps(evidence_urls), datetime.now()
                                        ))

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —ç—Å–∫—Ä–æ—É
        safe_execute_query('''
                           UPDATE escrow_transactions
                           SET status     = 'disputed',
                               updated_at = ?
                           WHERE id = ?
                           ''', (datetime.now(), escrow['id']))

        logger.info(f"–°–æ–∑–¥–∞–Ω —Å–ø–æ—Ä {dispute_id} –¥–ª—è —ç—Å–∫—Ä–æ—É {escrow['id']}")

        return jsonify({
            'success': True,
            'dispute_id': dispute_id,
            'message': '–°–ø–æ—Ä —Å–æ–∑–¥–∞–Ω. –°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞–º–æ—Ä–æ–∂–µ–Ω—ã –¥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è.'
        })

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–æ—Ä–∞: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500


@app.route('/api/payments/transactions/<int:offer_id>', methods=['GET'])
def api_get_offer_transactions(offer_id):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ –æ—Ñ—Ñ–µ—Ä—É"""
    try:
        telegram_user_id = get_current_user_id()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Ñ—Ñ–µ—Ä—É
        access_check = safe_execute_query('''
                                          SELECT 1
                                          FROM (
                                                   -- –°–æ–∑–¥–∞—Ç–µ–ª—å –æ—Ñ—Ñ–µ—Ä–∞
                                                   SELECT u.telegram_id
                                                   FROM offers o
                                                            JOIN users u ON o.created_by = u.id
                                                   WHERE o.id = ?

                                                   UNION

                                                   -- –ü–æ–ª—É—á–∞—Ç–µ–ª—å —Å—Ä–µ–¥—Å—Ç–≤
                                                   SELECT u.telegram_id
                                                   FROM escrow_transactions et
                                                            JOIN users u ON et.recipient_id = u.id
                                                   WHERE et.offer_id = ?) participants
                                          WHERE telegram_id = ?
                                          ''', (offer_id, offer_id, telegram_user_id), fetch_one=True)

        if not access_check:
            return jsonify({
                'success': False,
                'error': '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–º—É –æ—Ñ—Ñ–µ—Ä—É'
            }), 403

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        transactions = safe_execute_query('''
                                          SELECT 'escrow'             as type,
                                                 et.id,
                                                 et.amount,
                                                 et.status,
                                                 et.created_at,
                                                 et.expires_at,
                                                 '–°–æ–∑–¥–∞–Ω–∏–µ —ç—Å–∫—Ä–æ—É'    as description,
                                                 u_recipient.username as participant
                                          FROM escrow_transactions et
                                                   LEFT JOIN users u_recipient ON et.recipient_id = u_recipient.id
                                          WHERE et.offer_id = ?

                                          UNION ALL

                                          SELECT 'payout'             as type,
                                                 p.id,
                                                 p.amount,
                                                 p.status,
                                                 p.created_at,
                                                 p.scheduled_at       as expires_at,
                                                 '–í—ã–ø–ª–∞—Ç–∞'            as description,
                                                 u_recipient.username as participant
                                          FROM payouts p
                                                   JOIN escrow_transactions et ON p.escrow_id = et.id
                                                   LEFT JOIN users u_recipient ON p.recipient_id = u_recipient.id
                                          WHERE et.offer_id = ?

                                          UNION ALL

                                          SELECT 'dispute'                   as type,
                                                 pd.id,
                                                 NULL                        as amount,
                                                 pd.status,
                                                 pd.created_at,
                                                 NULL                        as expires_at,
                                                 CONCAT('–°–ø–æ—Ä: ', pd.reason) as description,
                                                 u_creator.username          as participant
                                          FROM payment_disputes pd
                                                   JOIN escrow_transactions et ON pd.escrow_id = et.id
                                                   LEFT JOIN users u_creator ON pd.created_by = u_creator.id
                                          WHERE et.offer_id = ?

                                          ORDER BY created_at DESC
                                          ''', (offer_id, offer_id, offer_id), fetch_all=True)

        return jsonify({
            'success': True,
            'transactions': transactions or [],
            'offer_id': offer_id
        })

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500


# === –û–ë–ù–û–í–õ–ï–ù–ò–ï –ù–ê–í–ò–ì–ê–¶–ò–ò ===
# –î–æ–±–∞–≤–∏—Ç—å –≤ base.html –∏–ª–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —à–∞–±–ª–æ–Ω –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

@app.route('/api/navigation/menu', methods=['GET'])
def api_navigation_menu():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É–Ω–∫—Ç–æ–≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –ø–ª–∞—Ç–µ–∂–µ–π"""
    try:
        telegram_user_id = get_current_user_id()

        # –ü–æ–ª—É—á–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        stats = safe_execute_query('''
                                   SELECT (SELECT COUNT(*)
                                           FROM offers o
                                                    JOIN users u ON o.created_by = u.id
                                           WHERE u.telegram_id = ?)        as my_offers_count,
                                          (SELECT COUNT(*)
                                           FROM channels c
                                                    JOIN users u ON c.owner_id = u.id
                                           WHERE u.telegram_id = ?)        as my_channels_count,
                                          (SELECT COUNT(*)
                                           FROM payouts p
                                                    JOIN users u ON p.recipient_id = u.id
                                           WHERE u.telegram_id = ?
                                             AND p.status = 'pending')     as pending_payments_count,
                                          (SELECT COUNT(*)
                                           FROM escrow_transactions et
                                                    JOIN offers o ON et.offer_id = o.id
                                                    JOIN users u ON o.created_by = u.id
                                           WHERE u.telegram_id = ?
                                             AND et.status = 'funds_held') as escrow_count
                                   ''', (telegram_user_id, telegram_user_id, telegram_user_id, telegram_user_id),
                                   fetch_one=True)

        menu_items = [
            {
                'id': 'dashboard',
                'title': 'üè† –ì–ª–∞–≤–Ω–∞—è',
                'url': '/',
                'badge': None
            },
            {
                'id': 'channels',
                'title': 'üì∫ –ú–æ–∏ –∫–∞–Ω–∞–ª—ã',
                'url': '/channels-enhanced',
                'badge': stats.get('my_channels_count') if stats and stats.get('my_channels_count', 0) > 0 else None
            },
            {
                'id': 'offers',
                'title': 'üì® –û—Ñ—Ñ–µ—Ä—ã',
                'url': '/offers',
                'badge': stats.get('my_offers_count') if stats and stats.get('my_offers_count', 0) > 0 else None
            },
            {
                'id': 'payments',
                'title': 'üí≥ –ü–ª–∞—Ç–µ–∂–∏',
                'url': '/payments',
                'badge': (stats.get('pending_payments_count', 0) + stats.get('escrow_count', 0)) if stats else None
            },
            {
                'id': 'analytics',
                'title': 'üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞',
                'url': '/analytics',
                'badge': None
            }
        ]

        return jsonify({
            'success': True,
            'menu_items': menu_items,
            'stats': stats or {}
        })

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500


# === –î–û–ë–ê–í–ò–¢–¨ –í –ö–û–ù–ï–¶ –§–ê–ô–õ–ê –ü–ï–†–ï–î if __name__ == '__main__': ===

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
def validate_startup_requirements():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –¥–ª—è –∑–∞–ø—É—Å–∫–∞"""
    errors = []

    if not BOT_TOKEN:
        errors.append("BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

    if not TELEGRAM_INTEGRATION:
        errors.append("Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

    if not OFFERS_SYSTEM_ENABLED:
        errors.append("–°–∏—Å—Ç–µ–º–∞ –æ—Ñ—Ñ–µ—Ä–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

    if errors:
        logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∑–∞–ø—É—Å–∫–∞:")
        for error in errors:
            logger.error(f"  - {error}")
        return False

    return True

# === –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ===
if __name__ == '__main__':
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
        if not validate_startup_requirements():
            logger.error("‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
            sys.exit(1)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º
        initialize_systems(app)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∂–∏–º–∞ –∑–∞–ø—É—Å–∫–∞
        debug_mode = os.environ.get('DEBUG', 'True').lower() == 'true'
        port = int(os.environ.get('PORT', 5000))
        host = os.environ.get('HOST', '0.0.0.0')

        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ Telegram Mini App –Ω–∞ {host}:{port}")
        logger.info(f"üì± BOT_TOKEN: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if BOT_TOKEN else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
        logger.info(f"üîß –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: {debug_mode}")

        # –ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app.run(
            host=host,
            port=port,
            debug=debug_mode,
            threaded=True,
            use_reloader=debug_mode
        )

    except KeyboardInterrupt:
        logger.info("üõë –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–∞: {e}")
        sys.exit(1)