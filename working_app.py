#!/usr/bin/env python3
"""
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Telegram Mini App
–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
"""

import os
import sys
import logging
from typing import Optional, Dict, Any
from datetime import datetime
import os
from dotenv import load_dotenv
load_dotenv()
os.environ['BOT_TOKEN'] = '6712109516:AAHL23ltolowG5kYTfkTKDadg2Io1Rd0WT8'

try:
    from app.services.telegram_verification import verification_service
except ImportError:
    verification_service = None

import requests

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))
APP_PATH = os.path.join(PROJECT_ROOT, 'app')

for path in [PROJECT_ROOT, APP_PATH]:
    if path not in sys.path:
        sys.path.insert(0, path)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
try:
    from dotenv import load_dotenv

    load_dotenv()
except ImportError:
    print("‚ö†Ô∏è python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")

# Flask –∏–º–ø–æ—Ä—Ç—ã
from flask import Flask, jsonify, request, render_template


# === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===
class AppConfig:
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""

    # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    SECRET_KEY = os.environ.get('SECRET_KEY', 'dev-secret-key-change-in-production')
    DEBUG = os.environ.get('DEBUG', 'True').lower() == 'true'

    # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    DATABASE_URL = os.environ.get('DATABASE_URL', 'sqlite:///telegram_mini_app.db')
    DATABASE_PATH = os.path.join(PROJECT_ROOT, 'telegram_mini_app.db')

    # Telegram
    BOT_TOKEN = os.environ.get('BOT_TOKEN', '6712109516:AAHL23ltolowG5kYTfkTKDadg2Io1Rd0WT8')
    TELEGRAM_PAYMENT_TOKEN = os.environ.get('TELEGRAM_PAYMENT_TOKEN')
    YOUR_TELEGRAM_ID = int(os.environ.get('YOUR_TELEGRAM_ID', 373086959))

    # –í–µ–±-—Ö—É–∫–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    WEBHOOK_SECRET = os.environ.get('WEBHOOK_SECRET', 'your-webhook-secret')
    WEBAPP_URL = os.environ.get('WEBAPP_URL', 'http://localhost:5000')

    # –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    FEATURES = {
        'telegram_integration': os.environ.get('TELEGRAM_INTEGRATION', 'True').lower() == 'true',
        'offers_system': os.environ.get('OFFERS_SYSTEM_ENABLED', 'True').lower() == 'true',
        'payments_system': os.environ.get('PAYMENTS_SYSTEM_ENABLED', 'True').lower() == 'true',
        'analytics_system': os.environ.get('ANALYTICS_SYSTEM_ENABLED', 'True').lower() == 'true',
    }

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    MAX_CONTENT_LENGTH = 16 * 1024 * 1024  # 16MB
    JSON_SORT_KEYS = False
    JSONIFY_PRETTYPRINT_REGULAR = DEBUG

    @classmethod
    def validate(cls) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        errors = []

        if not cls.BOT_TOKEN or cls.BOT_TOKEN == 'your-bot-token':
            errors.append("BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

        if not os.path.exists(cls.DATABASE_PATH):
            errors.append(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {cls.DATABASE_PATH}")

        if errors:
            for error in errors:
                print(f"‚ùå {error}")
            return False

        return True


# === –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ===
def setup_logging() -> logging.Logger:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logging.basicConfig(
        level=logging.INFO if not AppConfig.DEBUG else logging.DEBUG,
        format='%(asctime)s | %(name)-12s | %(levelname)-8s | %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )

    logger = logging.getLogger('TelegramApp')
    logger.info("üìã –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    return logger


# === –ù–ê–°–¢–†–û–ô–ö–ê TELEGRAM WEBHOOK ===
def setup_telegram_webhook():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è Telegram –±–æ—Ç–∞"""
    import requests

    bot_token = AppConfig.BOT_TOKEN
    webhook_url = f"{AppConfig.WEBAPP_URL}/api/channels/webhook"

    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
        url = f"https://api.telegram.org/bot{bot_token}/setWebhook"
        response = requests.post(url, json={
            'url': webhook_url,
            'allowed_updates': ['channel_post', 'message']
        })

        if response.status_code == 200:
            result = response.json()
            if result.get('ok'):
                logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {result.get('description')}")
        else:
            logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook: {e}")

# === –°–û–ó–î–ê–ù–ò–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ===
def create_app() -> Flask:
    """–§–∞–±—Ä–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π"""

    app = Flask(__name__)
    app.config.from_object(AppConfig)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    app.json.ensure_ascii = False
    app.json.sort_keys = AppConfig.JSON_SORT_KEYS

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    init_database(app)
    register_blueprints(app)  # –í–∫–ª—é—á–∞–µ—Ç main_router.py —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
    register_middleware(app)
    register_error_handlers(app)
    register_system_routes(app)  # –¢–æ–ª—å–∫–æ —Å–ª—É–∂–µ–±–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã

    return app


# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–• ===
def init_database(app: Flask) -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ë–î
        if not os.path.exists(AppConfig.DATABASE_PATH):
            logger.warning("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é...")
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ë–î

        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        raise


# === –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø BLUEPRINTS ===
def register_blueprints(app: Flask) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö Blueprint'–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""

    blueprints_registered = 0

    try:
        # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å app.routers, –Ω–æ –ë–ï–ó –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ channel_router
        print("üì¶ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Blueprint'–æ–≤...")

        # –†—É—á–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö Blueprint'–æ–≤
        blueprint_modules = [
            ('app.routers.main_router', 'main_bp', ''),  # –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞
            ('app.routers.api_router', 'api_bp', '/api'),
            #('app.routers.channel_router', 'channel_bp', '/api/channels'),
            ('app.routers.offer_router', 'offer_bp', '/api/offers'),
            ('app.routers.analytics_router', 'analytics_bp', '/api/analytics'),
            ('app.routers.payment_router', 'payment_bp', '/api/payments'),
        ]

        for module_name, blueprint_name, url_prefix in blueprint_modules:
            try:
                module = __import__(module_name, fromlist=[blueprint_name])
                blueprint = getattr(module, blueprint_name)
                app.register_blueprint(blueprint, url_prefix=url_prefix)
                blueprints_registered += 1
                prefix_display = url_prefix if url_prefix else "/"
                logger.debug(f"‚úÖ Blueprint –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {blueprint_name} -> {prefix_display}")

            except (ImportError, AttributeError) as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {module_name}: {e}")

        logger.info(f"üì¶ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ Blueprint'–æ–≤: {blueprints_registered}")

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Blueprint'–æ–≤: {e}")
        raise

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π channels_bp –∏–∑ app.api.channels
    try:
        from app.api.channels import channels_bp
        app.register_blueprint(channels_bp, url_prefix='/api/channels')
        logger.info("‚úÖ channels_bp –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ /api/channels")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ channels_bp: {e}")
        # –ù–µ –ø–æ–¥–Ω–∏–º–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É


# === MIDDLEWARE ===
def register_middleware(app: Flask) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware"""

    @app.before_request
    def security_middleware():
        """–ë–∞–∑–æ–≤–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"""
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞
        if request.content_length and request.content_length > AppConfig.MAX_CONTENT_LENGTH:
            return jsonify({'error': 'Request too large'}), 413

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–ø—Ä–æ—Å–æ–≤
        if request.path.startswith('/api/'):
            logger.debug(f"API: {request.method} {request.path} from {request.remote_addr}")

    @app.after_request
    def security_headers(response):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        response.headers.update({
            'X-Content-Type-Options': 'nosniff',
            'X-Frame-Options': 'SAMEORIGIN',
            'X-XSS-Protection': '1; mode=block',
            'Strict-Transport-Security': 'max-age=31536000; includeSubDomains',
        })
        return response

    logger.info("üõ°Ô∏è Middleware –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–®–ò–ë–û–ö ===
def register_error_handlers(app: Flask) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫"""

    @app.errorhandler(404)
    def not_found(error):
        if request.path.startswith('/api/'):
            return jsonify({
                'error': 'Endpoint not found',
                'path': request.path,
                'method': request.method
            }), 404
        return render_template('error.html', message='–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'), 404

    @app.errorhandler(500)
    def internal_error(error):
        logger.error(f"Internal error: {error}")
        if request.path.startswith('/api/'):
            return jsonify({'error': 'Internal server error'}), 500
        return render_template('error.html', message='–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'), 500

    @app.errorhandler(413)
    def request_too_large(error):
        return jsonify({'error': 'Request entity too large'}), 413

    logger.info("üö® –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")


# === –°–õ–£–ñ–ï–ë–ù–´–ï –ú–ê–†–®–†–£–¢–´ ===
def register_system_routes(app: Flask) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ (–Ω–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü)"""

    @app.route('/api/channels/<int:channel_id>/verify', methods=['PUT'])
    def verify_channel_endpoint(channel_id):
        """Endpoint –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤"""
        from flask import jsonify, request

        try:
            logger.info(f"üîç –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞ {channel_id}")

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            telegram_user_id = request.headers.get('X-Telegram-User-Id', 'unknown')
            telegram_username = request.headers.get('X-Telegram-Username', 'unknown')

            logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_username} ({telegram_user_id})")

            # –ò–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
            result = {
                'success': True,
                'message': f'‚úÖ –ö–∞–Ω–∞–ª {channel_id} —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!',
                'channel': {
                    'id': channel_id,
                    'channel_name': f'Channel {channel_id}',
                    'is_verified': True,
                    'verified_by': telegram_username,
                    'verified_at': datetime.utcnow().isoformat()
                }
            }

            logger.info(f"‚úÖ –ö–∞–Ω–∞–ª {channel_id} –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
            return jsonify(result)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
            return jsonify({
                'success': False,
                'error': str(e)
            }), 400

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ endpoints –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤
    @app.route('/api/channels', methods=['GET'])
    def get_channels_endpoint():
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤"""
        from flask import jsonify, request

        try:
            telegram_user_id = request.headers.get('X-Telegram-User-Id', 'unknown')
            logger.info(f"üìã –ó–∞–ø—Ä–æ—Å –∫–∞–Ω–∞–ª–æ–≤ –æ—Ç {telegram_user_id}")

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            channels = [
                {
                    'id': 10,
                    'title': '–ú–æ–π –∫–∞–Ω–∞–ª',
                    'username': 'my_channel',
                    'subscriber_count': 1200,
                    'is_verified': False,
                    'category': 'technology',
                    'status': 'pending'
                }
            ]

            return jsonify({
                'success': True,
                'channels': channels
            })

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤: {e}")
            return jsonify({
                'success': False,
                'error': str(e)
            }), 400

    @app.route('/api/channels', methods=['POST'])
    def create_channel_endpoint():
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª"""
        from flask import jsonify, request
        import random
        import string

        try:
            data = request.get_json() or {}
            telegram_user_id = request.headers.get('X-Telegram-User-Id', 'unknown')

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
            verification_code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))

            channel = {
                'id': random.randint(100, 999),
                'title': data.get('title', '–ù–æ–≤—ã–π –∫–∞–Ω–∞–ª'),
                'username': data.get('channel_url', '').replace('@', '').replace('https://t.me/', ''),
                'subscriber_count': data.get('subscriber_count', 0),
                'is_verified': False,
                'verification_code': verification_code,
                'status': 'pending'
            }

            logger.info(f"üì∫ –°–æ–∑–¥–∞–Ω –∫–∞–Ω–∞–ª {channel['id']} –¥–ª—è {telegram_user_id}")

            return jsonify({
                'success': True,
                'message': '–ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ',
                'channel': channel,
                'verification_code': verification_code
            }), 201

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {e}")
            return jsonify({
                'success': False,
                'error': str(e)
            }), 400

    logger.info("üîß Endpoints –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω—ã")


# === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –ú–û–ù–ò–¢–û–†–ò–ù–ì ===
class AppStats:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""

    def __init__(self):
        self.start_time = datetime.utcnow()
        self.request_count = 0
        self.error_count = 0

    def increment_requests(self):
        self.request_count += 1

    def increment_errors(self):
        self.error_count += 1

    def get_stats(self) -> Dict[str, Any]:
        uptime = datetime.utcnow() - self.start_time
        return {
            'uptime_seconds': int(uptime.total_seconds()),
            'requests_total': self.request_count,
            'errors_total': self.error_count,
            'start_time': self.start_time.isoformat()
        }

# === –ë–ê–ó–ê –î–ê–ù–ù–´–• –î–õ–Ø –ö–ê–ù–ê–õ–û–í ===
class ChannelDatabase:
    """–ü—Ä–æ—Å—Ç–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤ (–≤ –ø–∞–º—è—Ç–∏)"""

    def __init__(self):
        self.channels = {}  # {channel_id: channel_data}
        self.next_id = 1

    def create_channel(self, user_id, channel_data):
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª"""
        import random
        import string

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        verification_code = 'VERIFY_' + ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))

        channel = {
            'id': self.next_id,
            'user_id': user_id,
            'title': channel_data.get('title', '–ù–æ–≤—ã–π –∫–∞–Ω–∞–ª'),
            'username': channel_data.get('username', ''),
            'telegram_id': channel_data.get('telegram_id', ''),
            'category': channel_data.get('category', 'other'),
            'subscriber_count': channel_data.get('subscriber_count', 0),
            'verification_code': verification_code,
            'is_verified': False,
            'status': 'pending',
            'created_at': datetime.now().isoformat(),
            'verified_at': None
        }

        self.channels[self.next_id] = channel
        self.next_id += 1

        return channel

    def get_channel(self, channel_id):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª –ø–æ ID"""
        return self.channels.get(channel_id)

    def update_channel(self, channel_id, updates):
        """–û–±–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª"""
        if channel_id in self.channels:
            self.channels[channel_id].update(updates)
            return self.channels[channel_id]
        return None

    def get_user_channels(self, user_id):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return [channel for channel in self.channels.values() if channel['user_id'] == user_id]




# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
logger = setup_logging()
app = create_app()
stats = AppStats()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–ª—É–∂–µ–±–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ (–æ—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –≤ app/routers/main_router.py)
#register_system_routes(app)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å—Ç–∞—Ä—Ç–∞
app.start_time = stats.start_time.isoformat()

# === –ì–õ–û–ë–ê–õ–¨–ù–´–ï –û–ë–™–ï–ö–¢–´ ===
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
telegram_service = None
channel_db = ChannelDatabase()

# === ENDPOINT'–´ –î–õ–Ø –ö–ê–ù–ê–õ–û–í ===
@app.route('/api/channels/<int:channel_id>/verify', methods=['PUT', 'POST'])
def verify_channel_unified(channel_id):
    """–ï–¥–∏–Ω—ã–π endpoint –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤"""
    try:
        logger.info(f"üîç –ó–∞–ø—Ä–æ—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞ {channel_id}")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        telegram_user_id = request.headers.get('X-Telegram-User-Id', 'unknown')
        telegram_username = request.headers.get('X-Telegram-Username', 'unknown')

        logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_username} (ID: {telegram_user_id})")

        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª –∏–∑ –±–∞–∑—ã
        channel = channel_db.get_channel(channel_id)
        if not channel:
            return jsonify({
                'success': False,
                'error': '–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }), 404

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if str(channel['user_id']) != str(telegram_user_id):
            return jsonify({
                'success': False,
                'error': '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É'
            }), 403

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ
        if channel['is_verified']:
            return jsonify({
                'success': True,
                'message': '–ö–∞–Ω–∞–ª —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω',
                'channel': channel
            })

        # –û–°–ù–û–í–ù–ê–Ø –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø –ß–ï–†–ï–ó –ï–î–ò–ù–´–ô –°–ï–†–í–ò–° üéØ
        verification_code = channel['verification_code']
        channel_telegram_id = channel.get('telegram_id') or channel.get('username')

        if not channel_telegram_id:
            return jsonify({
                'success': False,
                'error': '–ù–µ —É–∫–∞–∑–∞–Ω ID –∏–ª–∏ username –∫–∞–Ω–∞–ª–∞'
            }), 400

        # –í–´–ó–´–í–ê–ï–ú –ï–î–ò–ù–´–ô –°–ï–†–í–ò–°!
        if verification_service:
            verification_result = verification_service.verify_channel_ownership(
                channel_telegram_id,
                verification_code
            )
        else:
            # Fallback –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
            verification_result = {
                'success': True,
                'found': True,  # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                'message': '–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º - –∫–∞–Ω–∞–ª –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω',
                'details': {'mode': 'fallback'}
            }

        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {verification_result}")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if verification_result['success'] and verification_result['found']:
            # –ö–û–î –ù–ê–ô–î–ï–ù - –í–ï–†–ò–§–ò–¶–ò–†–£–ï–ú –ö–ê–ù–ê–õ! ‚úÖ
            updates = {
                'is_verified': True,
                'status': 'verified',
                'verified_at': datetime.now().isoformat()
            }
            updated_channel = channel_db.update_channel(channel_id, updates)

            logger.info(f"‚úÖ –ö–∞–Ω–∞–ª {channel_id} —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")

            return jsonify({
                'success': True,
                'message': f'‚úÖ –ö–∞–Ω–∞–ª "{channel["title"]}" —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!',
                'channel': updated_channel,
                'verification_details': verification_result['details']
            })

        else:
            # –ö–û–î –ù–ï –ù–ê–ô–î–ï–ù ‚ùå
            error_message = verification_result.get('message', '–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω')

            return jsonify({
                'success': False,
                'error': f'‚ùå {error_message}',
                'verification_code': verification_code,
                'instructions': [
                    f'1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≤–∞—à –∫–∞–Ω–∞–ª @{channel.get("username", "your_channel")}',
                    f'2. –û–ø—É–±–ª–∏–∫—É–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º: {verification_code}',
                    f'3. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 1-2 –º–∏–Ω—É—Ç—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
                    f'4. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å" —Å–Ω–æ–≤–∞'
                ],
                'channel': channel,
                'verification_details': verification_result.get('details', {})
            })

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
        return jsonify({
            'success': False,
            'error': f'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}',
            'details': {
                'channel_id': channel_id,
                'timestamp': datetime.now().isoformat(),
                'error_type': type(e).__name__
            }
        }), 500


@app.route('/api/channels', methods=['GET'])
def get_channels_real():
    """–ü–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        telegram_user_id = request.headers.get('X-Telegram-User-Id', 'unknown')

        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_channels = channel_db.get_user_channels(telegram_user_id)

        return jsonify({
            'success': True,
            'channels': user_channels,
            'total': len(user_channels)
        })

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500



@app.route('/api/channels', methods=['POST'])
def create_channel_real():
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª"""
    try:
        data = request.get_json() or {}
        telegram_user_id = request.headers.get('X-Telegram-User-Id', 'unknown')

        # –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª
        channel = channel_db.create_channel(telegram_user_id, {
            'title': data.get('title', '–ù–æ–≤—ã–π –∫–∞–Ω–∞–ª'),
            'username': data.get('channel_url', '').replace('@', '').replace('https://t.me/', ''),
            'telegram_id': data.get('telegram_id', ''),
            'category': data.get('category', 'other'),
            'subscriber_count': data.get('subscriber_count', 0)
        })

        logger.info(f"üì∫ –°–æ–∑–¥–∞–Ω –∫–∞–Ω–∞–ª {channel['id']} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_user_id}")

        return jsonify({
            'success': True,
            'message': '–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω',
            'channel': channel,
            'verification_instructions': [
                f'–î–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:',
                f'1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≤–∞—à –∫–∞–Ω–∞–ª @{channel["username"]}',
                f'2. –û–ø—É–±–ª–∏–∫—É–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º: {channel["verification_code"]}',
                f'3. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å" –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ'
            ]
        }), 201

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500


# === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô ENDPOINT –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===
@app.route('/api/verification/test', methods=['GET'])
def test_verification_service():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    try:
        if verification_service:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ñ–µ–π–∫–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            test_result = verification_service.verify_channel_ownership(
                "@test_channel",
                "VERIFY_TEST123"
            )

            return jsonify({
                'success': True,
                'service_available': True,
                'test_result': test_result,
                'bot_token_configured': bool(verification_service.bot_token)
            })
        else:
            return jsonify({
                'success': False,
                'service_available': False,
                'error': '–°–µ—Ä–≤–∏—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω'
            })

    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500


logger.info("üîß –°–∏—Å—Ç–µ–º–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
# === –¢–û–ß–ö–ê –í–•–û–î–ê ===
def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if not AppConfig.validate():
        logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        sys.exit(1)

    setup_telegram_webhook()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—É—Å–∫–∞
    host = os.environ.get('HOST', '0.0.0.0')
    port = int(os.environ.get('PORT', 5000))

    logger.info("=" * 60)
    logger.info("üöÄ TELEGRAM MINI APP v2.0")
    logger.info("=" * 60)
    logger.info(f"üì± BOT_TOKEN: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if AppConfig.BOT_TOKEN else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
    logger.info(f"üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {AppConfig.DATABASE_PATH}")
    logger.info(f"üåê –ó–∞–ø—É—Å–∫ –Ω–∞: http://{host}:{port}")
    logger.info(f"üîß –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: {AppConfig.DEBUG}")
    logger.info(f"‚öôÔ∏è –§—É–Ω–∫—Ü–∏–∏: {sum(AppConfig.FEATURES.values())}/{len(AppConfig.FEATURES)} –≤–∫–ª—é—á–µ–Ω—ã")
    logger.info("=" * 60)

    try:
        app.run(
            host=host,
            port=port,
            debug=AppConfig.DEBUG,
            threaded=True,
            use_reloader=AppConfig.DEBUG
        )
    except KeyboardInterrupt:
        logger.info("üõë –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == '__main__':
    main()