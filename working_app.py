#!/usr/bin/env python3
"""
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Telegram Mini App
–§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø - —É–±—Ä–∞–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
"""

import os
import sqlite3
import sys
import logging
from typing import Optional, Dict, Any
from datetime import datetime
from app.models.database import get_user_id_from_request, execute_db_query
from app.config.telegram_config import AppConfig
from app.api.offers import offers_bp
from app.routers.main_router import main_bp
from app.api.channels import channels_bp
import requests
from flask import Flask, jsonify, request, render_template
from app.api.channel_analyzer import analyzer_bp
from app.api.offers_management import offers_management_bp
from app.api.proposals_management import proposals_management_bp
from app.api.monitoring_statistics import monitoring_statistics_bp
from app.telegram.telegram_bot_commands import TelegramBotExtension
from app.telegram.telegram_channel_parser import TelegramChannelParser
from app.telegram.telegram_notifications import TelegramNotificationService






# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
try:
    from dotenv import load_dotenv

    load_dotenv()
except ImportError:
    print("‚ö†Ô∏è python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")

# === –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ===
def setup_logging() -> logging.Logger:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logging.basicConfig(
        level=logging.INFO if not AppConfig.DEBUG else logging.DEBUG,
        format='%(asctime)s | %(name)-12s | %(levelname)-8s | %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )

    logger = logging.getLogger('TelegramApp')
    logger.info("üìã –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    return logger

# === –°–û–ó–î–ê–ù–ò–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ===
def create_app() -> Flask:
    """–§–∞–±—Ä–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"""

    app = Flask(__name__, static_folder= 'app/static', template_folder='templates')
    app.config.from_object(AppConfig)
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    app.json.ensure_ascii = False
    app.json.sort_keys = AppConfig.JSON_SORT_KEYS

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    register_blueprints(app)
    register_middleware(app)
    register_error_handlers(app)
    register_system_routes(app)

    logger.info("‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    if AppConfig.TELEGRAM_INTEGRATION and AppConfig.BOT_TOKEN:
        try:
            app.telegram_notifications = TelegramNotificationService()
            app.telegram_parser = TelegramChannelParser()
            app.telegram_bot = TelegramBotExtension()   
            logger.info("‚úÖ Telegram —Å–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram: {e}") 
    else:
        logger.warning("‚ö†Ô∏è Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∏–ª–∏ BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
    return app

# === –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø BLUEPRINTS ===
def register_blueprints(app: Flask) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Blueprint'–æ–≤"""
    app.register_blueprint(offers_bp, url_prefix='/api/offers')
    app.register_blueprint(main_bp)
    app.register_blueprint(channels_bp, url_prefix='/api/channels')
    app.register_blueprint(analyzer_bp, url_prefix='/api/analyzer')
    app.register_blueprint(offers_management_bp, url_prefix='/api/offers_management')
    app.register_blueprint(proposals_management_bp)
    app.register_blueprint(monitoring_statistics_bp, url_prefix='/api/monitoring_statistics')
                           


# === MIDDLEWARE ===
def register_middleware(app: Flask) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware"""

    @app.before_request
    def security_middleware():
        if request.content_length and request.content_length > AppConfig.MAX_CONTENT_LENGTH:
            return jsonify({'error': 'Request too large'}), 413

    @app.after_request
    def security_headers(response):
        response.headers.update({
            'X-Content-Type-Options': 'nosniff',
            'X-Frame-Options': 'SAMEORIGIN',
            'X-XSS-Protection': '1; mode=block',
        })
        return response


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–®–ò–ë–û–ö ===
def register_error_handlers(app: Flask) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫"""

    @app.errorhandler(400)
    def bad_request(error):
        logger.warning(f"Bad request: {error} | Path: {request.path}")
        if request.path.startswith('/api/'):
            return jsonify({
                'error': 'Bad request',
                'message': '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞',
                'path': request.path
            }), 400
        return render_template('error.html', 
                             message='–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞', 
                             code=400), 400

    @app.errorhandler(401)
    def unauthorized(error):
        logger.warning(f"Unauthorized access: {request.path} | User-Agent: {request.headers.get('User-Agent')}")
        if request.path.startswith('/api/'):
            return jsonify({
                'error': 'Unauthorized',
                'message': '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
                'path': request.path
            }), 401
        return render_template('error.html', 
                             message='–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram', 
                             code=401), 401

    @app.errorhandler(403)
    def forbidden(error):
        logger.warning(f"Forbidden access: {request.path} | Headers: {dict(request.headers)}")
        if request.path.startswith('/api/'):
            return jsonify({
                'error': 'Forbidden',
                'message': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞',
                'path': request.path
            }), 403
        return render_template('error.html', 
                             message='–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞', 
                             code=403), 403

    @app.errorhandler(404)
    def not_found(error):
        logger.info(f"Not found: {request.path} | Method: {request.method}")
        if request.path.startswith('/api/'):
            return jsonify({
                'error': 'Endpoint not found', 
                'path': request.path,
                'method': request.method
            }), 404
        return render_template('error.html', 
                             message='–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 
                             code=404), 404

    @app.errorhandler(405)
    def method_not_allowed(error):
        logger.warning(f"Method not allowed: {request.method} {request.path}")
        if request.path.startswith('/api/'):
            return jsonify({
                'error': 'Method not allowed',
                'message': f'–ú–µ—Ç–æ–¥ {request.method} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è',
                'path': request.path,
                'allowed_methods': error.valid_methods if hasattr(error, 'valid_methods') else []
            }), 405
        return render_template('error.html', 
                             message=f'–ú–µ—Ç–æ–¥ {request.method} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è', 
                             code=405), 405

    @app.errorhandler(413)
    def request_entity_too_large(error):
        logger.warning(f"Request too large: {request.path} | Content-Length: {request.content_length}")
        if request.path.startswith('/api/'):
            return jsonify({
                'error': 'Request too large',
                'message': '–†–∞–∑–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–π',
                'max_size': f"{AppConfig.MAX_CONTENT_LENGTH // (1024*1024)}MB"
            }), 413
        return render_template('error.html', 
                             message='–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π', 
                             code=413), 413

    @app.errorhandler(429)
    def rate_limit_exceeded(error):
        logger.warning(f"Rate limit exceeded: {request.path} | IP: {request.remote_addr}")
        if request.path.startswith('/api/'):
            return jsonify({
                'error': 'Rate limit exceeded',
                'message': '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤',
                'retry_after': getattr(error, 'retry_after', 60)
            }), 429
        return render_template('error.html', 
                             message='–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', 
                             code=429), 429

    @app.errorhandler(500)
    def internal_error(error):
        logger.error(f"Internal error: {error} | Path: {request.path} | Method: {request.method}")
        if request.path.startswith('/api/'):
            return jsonify({
                'error': 'Internal server error',
                'message': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
            }), 500
        return render_template('error.html', 
                             message='–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', 
                             code=500), 500

    @app.errorhandler(502)
    def bad_gateway(error):
        logger.error(f"Bad gateway: {error} | Path: {request.path}")
        if request.path.startswith('/api/'):
            return jsonify({
                'error': 'Bad gateway',
                'message': '–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
            }), 502
        return render_template('error.html', 
                             message='–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', 
                             code=502), 502

    @app.errorhandler(503)
    def service_unavailable(error):
        logger.error(f"Service unavailable: {error} | Path: {request.path}")
        if request.path.startswith('/api/'):
            return jsonify({
                'error': 'Service unavailable',
                'message': '–°–µ—Ä–≤–∏—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏'
            }), 503
        return render_template('error.html', 
                             message='–°–µ—Ä–≤–∏—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏', 
                             code=503), 503

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ SQLite –æ—à–∏–±–æ–∫
    @app.errorhandler(sqlite3.Error)
    def database_error(error):
        logger.error(f"Database error: {error} | Path: {request.path} | Query context available")
        if request.path.startswith('/api/'):
            return jsonify({
                'error': 'Database error',
                'message': '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö'
            }), 500
        return render_template('error.html', 
                             message='–í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', 
                             code=500), 500

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ JSON –æ—à–∏–±–æ–∫
    @app.errorhandler(400)
    def handle_json_error(error):
        if 'application/json' in request.content_type:
            logger.warning(f"Invalid JSON: {request.path} | Error: {error}")
            return jsonify({
                'error': 'Invalid JSON',
                'message': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –¥–∞–Ω–Ω—ã—Ö'
            }), 400
        return bad_request(error)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
    try:
        from werkzeug.exceptions import UnprocessableEntity
        
        @app.errorhandler(422)
        def validation_error(error):
            logger.warning(f"Validation error: {error} | Path: {request.path}")
            if request.path.startswith('/api/'):
                return jsonify({
                    'error': 'Validation failed',
                    'message': '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö',
                    'details': getattr(error, 'data', {})
                }), 422
            return render_template('error.html', 
                                 message='–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö', 
                                 code=422), 422
    except ImportError:
        pass

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Telegram API (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
    try:
        import telegram
        
        @app.errorhandler(telegram.error.TelegramError)
        def telegram_error(error):
            logger.error(f"Telegram API error: {error} | Path: {request.path}")
            if request.path.startswith('/api/'):
                return jsonify({
                    'error': 'Telegram API error',
                    'message': '–û—à–∏–±–∫–∞ Telegram API'
                }), 503
            return render_template('error.html', 
                                 message='–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å Telegram', 
                                 code=503), 503
    except ImportError:
        pass

    # –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    @app.errorhandler(Exception)
    def handle_unexpected_error(error):
        logger.error(f"Unexpected error: {type(error).__name__}: {error} | Path: {request.path}")
        logger.error(f"Traceback: ", exc_info=True)
        
        if request.path.startswith('/api/'):
            return jsonify({
                'error': 'Unexpected error',
                'message': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞'
            }), 500
        return render_template('error.html', 
                             message='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞', 
                             code=500), 500

    logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")


# === –°–õ–£–ñ–ï–ë–ù–´–ï –ú–ê–†–®–†–£–¢–´ ===
def register_system_routes(app: Flask) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–ª—É–∂–µ–±–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤"""

    # === –ú–ê–†–®–†–£–¢–´ –ó–î–û–†–û–í–¨–Ø –°–ò–°–¢–ï–ú–´ ===
    
    @app.route('/health')
    @app.route('/api/health')
    def health_check():
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ë–î
            db_status = 'healthy'
            try:
                execute_db_query("SELECT 1", fetch_one=True)
            except Exception as e:
                db_status = f'unhealthy: {str(e)}'
                logger.error(f"Database health check failed: {e}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
            fs_status = 'healthy' if os.path.exists(AppConfig.DATABASE_PATH) else 'database_missing'

            status = {
                'status': 'healthy' if db_status == 'healthy' else 'degraded',
                'timestamp': datetime.utcnow().isoformat(),
                'version': '1.0.0',
                'telegram_webapp': True,
                'services': {
                    'database': db_status,
                    'filesystem': fs_status,
                    'bot_configured': bool(AppConfig.BOT_TOKEN)
                }
            }

            status_code = 200 if status['status'] == 'healthy' else 503
            return jsonify(status), status_code

        except Exception as e:
            logger.error(f"Health check failed: {e}")
            return jsonify({
                'status': 'unhealthy',
                'error': str(e),
                'timestamp': datetime.utcnow().isoformat()
            }), 503

    # === –ú–ê–†–®–†–£–¢–´ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ===

    @app.route('/api/config')
    def get_app_config():
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            config = {
                'app_name': 'Telegram Mini App',
                'version': '1.0.0',
                'api_version': 'v1',
                'features': {
                    'channels': True,
                    'offers': True,
                    'analytics': True,
                    'payments': True,
                    'notifications': True
                },
                'limits': {
                    'max_channels_per_user': 10,
                    'max_offers_per_user': 50,
                    'max_file_size': AppConfig.MAX_CONTENT_LENGTH,
                    'supported_file_types': ['jpg', 'jpeg', 'png', 'gif', 'mp4']
                },
                'telegram': {
                    'webapp_url': AppConfig.WEBAPP_URL,
                    'bot_configured': bool(AppConfig.BOT_TOKEN)
                }
            }

            return jsonify({
                'success': True,
                'config': config,
                'timestamp': datetime.utcnow().isoformat()
            })

        except Exception as e:
            logger.error(f"Config fetch failed: {e}")
            return jsonify({'success': False, 'error': str(e)}), 500


    # === –ú–ê–†–®–†–£–¢–´ –°–¢–ê–¢–ò–°–¢–ò–ö–ò ===

    @app.route('/api/stats/global')
    def get_global_stats():
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            stats = {
                'channels': 0,
                'users': 0,
                'offers': 0,
                'revenue': 0
            }

            # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            try:
                result = execute_db_query("SELECT COUNT(*) as count FROM channels WHERE is_active = 1", fetch_one=True)
                stats['channels'] = result['count'] if result else 0
            except:
                pass

            try:
                result = execute_db_query("SELECT COUNT(*) as count FROM users WHERE is_active = 1", fetch_one=True)
                stats['users'] = result['count'] if result else 0
            except:
                pass

            try:
                result = execute_db_query("SELECT COUNT(*) as count FROM offers WHERE status = 'active'", fetch_one=True)
                stats['offers'] = result['count'] if result else 0
            except:
                pass

            try:
                result = execute_db_query("SELECT COALESCE(SUM(price), 0) as total FROM offers WHERE status = 'active'", fetch_one=True)
                stats['revenue'] = float(result['total']) if result and result['total'] else 0
            except:
                pass

            return jsonify({
                'success': True,
                'stats': stats,
                'timestamp': datetime.utcnow().isoformat()
            })

        except Exception as e:
            logger.error(f"Global stats failed: {e}")
            return jsonify({'success': False, 'error': str(e)}), 500

    # === WEBHOOK –ú–ê–†–®–†–£–¢–´ ===

    @app.route('/webhook/telegram', methods=['POST'])
    def webhook():
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç Telegram"""
        try:
            update = request.get_json()
            
            if not update:
                logger.warning("üö´ –ü—É—Å—Ç–æ–π webhook")
                return jsonify({'ok': True})
            
            logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω webhook: {update.get('update_id', 'unknown')}")
            
            # === –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–ï–ù–ò–ô ===
            if 'message' in update:
                message = update['message']
                telegram_id = message.get('from', {}).get('id')
                text = message.get('text', '')
                
                if not telegram_id:
                    return jsonify({'ok': True})
                
                # === –ö–û–ú–ê–ù–î–ê /start ===
                if text == '/start':
                    return handle_start_command(update)    
                            
                # –ü–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
                if 'forward_from_chat' in message:
                    logger.info("üì§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                    return handle_forwarded_message(update)     
                           
                # === –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ê–ù–î ===
                if text.startswith('/'):
                    return handle_command(telegram_id, text)
                                

            
            # === –û–ë–†–ê–ë–û–¢–ö–ê CALLBACK QUERY ===
            if 'callback_query' in update:
                logger.info("üîò –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback query")
                return handle_callback_query(update)
            
            # –ï—Å–ª–∏ —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω - –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º OK
            logger.info(f"‚ùì –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {list(update.keys())}")
            return jsonify({'ok': True})

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ webhook: {e}")
            return jsonify({'ok': True})  # –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ok –¥–ª—è Telegram

    def handle_command(telegram_id: int, text: str) -> dict:
        """–ù–æ–≤—ã–π —Ä–æ—É—Ç–µ—Ä –∫–æ–º–∞–Ω–¥"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É (—É–±–∏—Ä–∞–µ–º / –∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)
            command = text.strip().split()[0][1:]  # –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª "/"
            
            logger.info(f"üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É: /{command} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ telegram_bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
            if not hasattr(app, 'telegram_bot'):
                logger.error("‚ùå telegram_bot –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return jsonify({'ok': True})
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ TelegramBotExtension
            response_data = app.telegram_bot.process_command(command, telegram_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            success = app.telegram_bot.send_telegram_message(telegram_id, response_data)
            
            if success:
                logger.info(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ /{command} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /{command}")
            
            return jsonify({'ok': True})
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã {text}: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                error_response = {
                    'text': "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    'parse_mode': 'HTML'
                }
                app.telegram_bot.send_telegram_message(telegram_id, error_response)
            except:
                pass
            
            return jsonify({'ok': True})


    def handle_start_command(update):
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram
            if isinstance(update, dict):
                telegram_id = update.get('message', {}).get('from', {}).get('id')
                first_name = update.get('message', {}).get('from', {}).get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
                last_name = update.get('message', {}).get('from', {}).get('last_name')  # ‚Üê –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ–∞–º–∏–ª–∏—è
                username = update.get('message', {}).get('from', {}).get('username')
            else:
                telegram_id = update.effective_user.id
                first_name = update.effective_user.first_name or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
                last_name = update.effective_user.last_name  # ‚Üê –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ–∞–º–∏–ª–∏—è
                username = update.effective_user.username
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = execute_db_query(
                'SELECT * FROM users WHERE telegram_id = ?',
                (telegram_id,),
                fetch_one=True
            )
            
            if not user:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                execute_db_query(
                    'INSERT INTO users (telegram_id, first_name, last_name, username) VALUES (?, ?, ?, ?)',
                    (telegram_id, first_name, last_name, username)
                )
                user = execute_db_query(
                    'SELECT * FROM users WHERE telegram_id = ?',
                    (telegram_id,),
                    fetch_one=True
                )
            else:
                # –û–ë–ù–û–í–õ–Ø–ï–ú —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Telegram
                execute_db_query(
                    'UPDATE users SET first_name = ?, last_name = ?, username = ? WHERE telegram_id = ?',
                    (first_name, last_name, username, telegram_id)
                )
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = execute_db_query(
                    'SELECT * FROM users WHERE telegram_id = ?',
                    (telegram_id,),
                    fetch_one=True
                )
            
            # –¢–µ–ø–µ—Ä—å user —Å–æ–¥–µ—Ä–∂–∏—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–≤–∫–ª—é—á–∞—è —Ñ–∞–º–∏–ª–∏—é)
            TelegramNotificationService.send_welcome_notification(user)
            
            return {'ok': True}
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            print(f"‚ùå Update: {update}")
            return {'ok': False}
        
    @app.route('/api/telegram/set_commands', methods=['POST'])
    def set_telegram_commands():
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –≤ –º–µ–Ω—é Telegram –±–æ—Ç–∞"""
        try:
            if not hasattr(app, 'telegram_bot') or not app.telegram_bot.bot_token:
                return jsonify({'error': 'BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}), 400
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
            commands = app.telegram_bot.get_commands_list()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è Telegram API
            telegram_commands = [
                {"command": cmd["command"], "description": cmd["description"]}
                for cmd in commands
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
            telegram_commands.insert(0, {"command": "start", "description": "üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"})
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram API
            url = f"https://api.telegram.org/bot{app.telegram_bot.bot_token}/setMyCommands"
            data = {"commands": telegram_commands}
            
            response = requests.post(url, json=data, timeout=10)
            
            if response.status_code == 200 and response.json().get('ok'):
                logger.info(f"‚úÖ –ö–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ Telegram: {len(telegram_commands)} —à—Ç.")
                return jsonify({
                    'success': True,
                    'message': f'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(telegram_commands)} –∫–æ–º–∞–Ω–¥',
                    'commands': telegram_commands
                })
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥: {response.text}")
                return jsonify({'error': '–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥ –≤ Telegram'}), 500
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥: {e}")
            return jsonify({'error': str(e)}), 500   
             
    def handle_forwarded_message(update):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤"""
        try:
           
            message = update['message']
            text = message.get('text', '')
            forward_from_chat = message.get('forward_from_chat', {})
            
            if not forward_from_chat:
                return jsonify({'ok': True})
            
            channel_id = str(forward_from_chat.get('id', ''))
            channel_username = forward_from_chat.get('username', '')
            
            logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
            logger.info(f"  üîπ –¢–µ–∫—Å—Ç: {text}")
            logger.info(f"  üîπ forward_from_chat: {forward_from_chat}")
            
            # –ò—â–µ–º –∫–∞–Ω–∞–ª –ø–æ telegram_id
            logger.info(f"üîç –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª –ø–æ telegram_id = {channel_id}")
            result = execute_db_query(
                "SELECT * FROM channels WHERE telegram_id = ? AND is_verified = 0 AND verification_code IS NOT NULL",
                (channel_id,),
                fetch_one=True
            )
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ ID, –∏—â–µ–º –ø–æ username
            if not result and channel_username:
                logger.info(f"üîç –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª –ø–æ username = {channel_username}")
                result = execute_db_query(
                    "SELECT * FROM channels WHERE username = ? AND is_verified = 0 AND verification_code IS NOT NULL",
                    (channel_username,),
                    fetch_one=True
                )
            
            if result and result['verification_code'] in text:
                # –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª
                execute_db_query(
                    "UPDATE channels SET is_verified = 1, verified_at = ? WHERE id = ?",
                    (datetime.utcnow().isoformat(), result['id'])
                )
                
                logger.info(f"‚úÖ –ö–∞–Ω–∞–ª {result['id']} —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ –ø–µ—Ä–µ—Å—ã–ª–∫—É")
                
                # ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú –û–¢–ü–†–ê–í–ö–£ –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞–Ω–∞–ª–∞
                    owner = execute_db_query(
                        "SELECT * FROM users WHERE id = ?",
                        (result['owner_id'],),
                        fetch_one=True
                    )
                    
                    if owner:
                        logger.info(f"üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É –∫–∞–Ω–∞–ª–∞ {result['id']}")
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
                        notification_result = TelegramNotificationService.send_channel_notification(
                            user=owner,
                            channel=result,
                            notification_type='verified'
                        )
                        
                        if notification_result:
                            logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –∫–∞–Ω–∞–ª–∞ {result['id']}")
                        else:
                            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É –∫–∞–Ω–∞–ª–∞ {result['id']}")
                    else:
                        logger.warning(f"‚ö†Ô∏è –í–ª–∞–¥–µ–ª–µ—Ü –∫–∞–Ω–∞–ª–∞ {result['id']} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                        
                except Exception as notification_error:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {notification_error}")
            
            return jsonify({'ok': True})
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return jsonify({'ok': True})



    def handle_callback_query(update):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–æ–∫"""
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É inline –∫–Ω–æ–ø–æ–∫
            return jsonify({'ok': True})
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ callback: {e}")
            return jsonify({'ok': True})


    # === –°–õ–£–ñ–ï–ë–ù–´–ï –ú–ê–†–®–†–£–¢–´ ===

    @app.route('/api/system/info')
    def system_info():
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ"""
        try:
            import platform
            import sys

            info = {
                'python_version': sys.version,
                'platform': platform.platform(),
                'architecture': platform.architecture(),
                'hostname': platform.node(),
                'app_config': {
                    'debug': AppConfig.DEBUG,
                    'database_path': AppConfig.DATABASE_PATH,
                    'webapp_url': AppConfig.WEBAPP_URL
                }
            }

            return jsonify({
                'success': True,
                'system_info': info,
                'timestamp': datetime.utcnow().isoformat()
            })

        except Exception as e:
            logger.error(f"System info failed: {e}")
            return jsonify({'success': False, 'error': str(e)}), 500

    @app.route('/api/test/connection')
    def test_connection():
        """–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            tests = {
                'database': False,
                'filesystem': False,
                'config': False
            }

            # –¢–µ—Å—Ç –ë–î
            try:
                execute_db_query("SELECT 1", fetch_one=True)
                tests['database'] = True
            except:
                pass

            # –¢–µ—Å—Ç —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
            try:
                tests['filesystem'] = os.path.exists(AppConfig.DATABASE_PATH)
            except:
                pass

            # –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            try:
                tests['config'] = bool(AppConfig.BOT_TOKEN)
            except:
                pass

            success = all(tests.values())

            return jsonify({
                'success': success,
                'tests': tests,
                'message': 'All tests passed' if success else 'Some tests failed',
                'timestamp': datetime.utcnow().isoformat()
            })

        except Exception as e:
            logger.error(f"Connection test failed: {e}")
            return jsonify({'success': False, 'error': str(e)}), 500

    # === –°–õ–£–ñ–ï–ë–ù–´–ï –°–¢–†–ê–ù–ò–¶–´ ===

    @app.route('/robots.txt')
    def robots_txt():
        """Robots.txt –¥–ª—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º"""
        return """User-agent: *
Disallow: /api/
Disallow: /admin/
Allow: /
""", 200, {'Content-Type': 'text/plain'}

    @app.route('/favicon.ico')
    def favicon():
        """Favicon redirect"""
        return '', 204

    logger.info("‚úÖ –°–ª—É–∂–µ–±–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")




# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
logger = setup_logging()
app = create_app()

# === –¢–û–ß–ö–ê –í–•–û–î–ê ===
def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""

    if not AppConfig.validate():
        logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        sys.exit(1)
    host = os.environ.get('HOST', '0.0.0.0')
    port = int(os.environ.get('PORT', 5000))

    logger.info("=" * 60)
    logger.info("üöÄ TELEGRAM MINI APP - –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø")
    logger.info("=" * 60)
    logger.info(f"üì± BOT_TOKEN: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if AppConfig.BOT_TOKEN else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
    logger.info(f"üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {AppConfig.DATABASE_PATH}")
    logger.info(f"üåê –ó–∞–ø—É—Å–∫ –Ω–∞: http://{host}:{port}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ä—à—Ä—É—Ç–æ–≤
    total_routes = len(list(app.url_map.iter_rules()))
    offers_routes = len([r for r in app.url_map.iter_rules() if '/api/offers' in r.rule])
    logger.info(f"üìä –í—Å–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤: {total_routes} (offers: {offers_routes})")
    logger.info("=" * 60)
    logger.info(f"üì° WEBAPP_URL = {AppConfig.WEBAPP_URL}")

    # === –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Webhook –¥–ª—è Telegram ===
    try:
        bot_token = AppConfig.BOT_TOKEN
        webhook_url = f"{AppConfig.WEBAPP_URL}/webhook/telegram"

        response = requests.get(
            f"https://api.telegram.org/bot{bot_token}/setWebhook",
            params={'url': webhook_url},
            timeout=10
        )

        if response.status_code == 200 and response.json().get("ok"):
            logger.info(f"‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
        else:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook: {response.text}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")

    try:
        app.run(
            host=host,
            port=port,
            debug=AppConfig.DEBUG,
            threaded=True,
            use_reloader=AppConfig.DEBUG
        )
    except KeyboardInterrupt:
        logger.info("üõë –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == '__main__':
    main()