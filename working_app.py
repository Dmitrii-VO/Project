#!/usr/bin/env python3
"""
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Telegram Mini App
–§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø - —É–±—Ä–∞–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
"""

import os
import sqlite3
import sys
import logging
from typing import Optional, Dict, Any
from datetime import datetime
import requests

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))
APP_PATH = os.path.join(PROJECT_ROOT, 'app')

for path in [PROJECT_ROOT, APP_PATH]:
    if path not in sys.path:
        sys.path.insert(0, path)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
try:
    from dotenv import load_dotenv

    load_dotenv()
except ImportError:
    print("‚ö†Ô∏è python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")

# Flask –∏–º–ø–æ—Ä—Ç—ã
from flask import Flask, jsonify, request, render_template

# –ò–º–ø–æ—Ä—Ç add_offer –¥–ª—è API —Ñ—É–Ω–∫—Ü–∏–π
try:
    import add_offer

    print("‚úÖ add_offer –º–æ–¥—É–ª—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ add_offer: {e}")
    add_offer = None


# === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===
class AppConfig:
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""

    SECRET_KEY = os.environ.get('SECRET_KEY', 'dev-secret-key')
    DEBUG = os.environ.get('DEBUG', 'True').lower() == 'true'
    BOT_TOKEN = os.getenv("BOT_TOKEN")
    DATABASE_PATH = os.path.join(PROJECT_ROOT, 'telegram_mini_app.db')
    WEBAPP_URL = os.environ.get('WEBAPP_URL', 'http://localhost:5000')

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    MAX_CONTENT_LENGTH = 16 * 1024 * 1024  # 16MB
    JSON_SORT_KEYS = False
    JSONIFY_PRETTYPRINT_REGULAR = DEBUG

    @classmethod
    def validate(cls) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        errors = []

        if not cls.BOT_TOKEN or cls.BOT_TOKEN == 'your-bot-token':
            errors.append("BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

        if not os.path.exists(cls.DATABASE_PATH):
            errors.append(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {cls.DATABASE_PATH}")

        if errors:
            for error in errors:
                print(f"‚ùå {error}")
            return False

        return True


# === –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ===
def setup_logging() -> logging.Logger:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logging.basicConfig(
        level=logging.INFO if not AppConfig.DEBUG else logging.DEBUG,
        format='%(asctime)s | %(name)-12s | %(levelname)-8s | %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )

    logger = logging.getLogger('TelegramApp')
    logger.info("üìã –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    return logger


# === –£–¢–ò–õ–ò–¢–´ ===
def get_user_id_from_request():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ user_id –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∑–∞–ø—Ä–æ—Å–∞"""
    user_id = request.headers.get('X-Telegram-User-Id')
    if user_id:
        try:
            return int(user_id)
        except (ValueError, TypeError):
            pass

    # Fallback –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    fallback_id = os.environ.get('YOUR_TELEGRAM_ID', '373086959')
    try:
        return int(fallback_id)
    except (ValueError, TypeError):
        return 373086959


def execute_db_query(query: str, params: tuple = (), fetch_one: bool = False, fetch_all: bool = False):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î"""
    try:
        conn = sqlite3.connect(AppConfig.DATABASE_PATH)
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()

        cursor.execute(query, params)

        if fetch_one:
            result = cursor.fetchone()
            conn.close()
            return dict(result) if result else None
        elif fetch_all:
            result = cursor.fetchall()
            conn.close()
            return [dict(row) for row in result] if result else []
        else:
            conn.commit()
            lastrowid = cursor.lastrowid
            conn.close()
            return lastrowid

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
        if 'conn' in locals():
            conn.close()
        raise


# === –°–û–ó–î–ê–ù–ò–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ===
def create_app() -> Flask:
    """–§–∞–±—Ä–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"""

    app = Flask(__name__, static_folder='app/static', template_folder='templates')
    app.config.from_object(AppConfig)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    app.json.ensure_ascii = False
    app.json.sort_keys = AppConfig.JSON_SORT_KEYS

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    register_blueprints(app)
    register_middleware(app)
    register_error_handlers(app)
    register_offers_api(app)  # üéØ –ï–¥–∏–Ω—ã–π API –¥–ª—è offers
    register_system_routes(app)

    return app


# === –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø OFFERS API ===
def register_offers_api(app: Flask) -> None:
    """–ï–¥–∏–Ω—ã–π API –¥–ª—è offers - —É—Å—Ç—Ä–∞–Ω—è–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–∂–¥—É working_app.py –∏ offers.py"""

    if not add_offer:
        logger.error("‚ùå add_offer –º–æ–¥—É–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
        return

    try:
        logger.info("üéØ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è offers API...")

        # === –ú–û–ò –û–§–§–ï–†–´ ===
        @app.route('/api/offers/my', methods=['GET'])
        def get_my_offers():
            """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
            try:
                telegram_user_id = get_user_id_from_request()
                logger.info(f"üìã –ó–∞–ø—Ä–æ—Å –æ—Ñ—Ñ–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_user_id}")

                # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
                user = execute_db_query(
                    'SELECT id FROM users WHERE telegram_id = ?',
                    (telegram_user_id,),
                    fetch_one=True
                )

                if not user:
                    return jsonify({'success': False, 'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404

                # –ü–æ–ª—É—á–∞–µ–º –æ—Ñ—Ñ–µ—Ä—ã —Å –æ—Ç–∫–ª–∏–∫–∞–º–∏ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
                offers = execute_db_query("""
                                          SELECT o.*,
                                                 COUNT(or_resp.id)                                       as response_count,
                                                 COUNT(CASE WHEN or_resp.status = 'accepted' THEN 1 END) as accepted_count
                                          FROM offers o
                                                   LEFT JOIN offer_responses or_resp ON o.id = or_resp.offer_id
                                          WHERE o.created_by = ?
                                          GROUP BY o.id
                                          ORDER BY o.created_at DESC
                                          """, (user['id'],), fetch_all=True)

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
                formatted_offers = []
                for offer in offers:
                    formatted_offers.append({
                        'id': offer['id'],
                        'title': offer['title'],
                        'description': offer['description'],
                        'content': offer['content'],
                        'price': float(offer['price']) if offer['price'] else 0,
                        'currency': offer['currency'] or 'RUB',
                        'category': offer['category'] or 'general',
                        'status': offer['status'] or 'active',
                        'created_at': offer['created_at'],
                        'updated_at': offer['updated_at'],
                        'response_count': offer['response_count'] or 0,
                        'accepted_count': offer['accepted_count'] or 0,
                        'budget_total': float(offer.get('budget_total', 0)) if offer.get('budget_total') else 0,
                        'duration_days': offer.get('duration_days', 30),
                        'min_subscribers': offer.get('min_subscribers', 1),
                        'max_subscribers': offer.get('max_subscribers', 100000000),
                        'target_audience': offer.get('target_audience', ''),
                        'requirements': offer.get('requirements', ''),
                        'deadline': offer.get('deadline', '')
                    })

                return jsonify({
                    'success': True,
                    'offers': formatted_offers,
                    'total': len(formatted_offers)
                })

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–æ–≤: {e}")
                return jsonify({'success': False, 'error': str(e)}), 500

        # === –°–û–ó–î–ê–ù–ò–ï –û–§–§–ï–†–ê ===
        @app.route('/api/offers', methods=['POST'])
        def create_offer():
            """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ—Ñ—Ñ–µ—Ä–∞"""
            try:
                telegram_user_id = get_user_id_from_request()
                data = request.get_json()

                if not data:
                    return jsonify({'success': False, 'error': '–î–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã'}), 400

                logger.info(f"‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {telegram_user_id}")

                result = add_offer.add_offer(telegram_user_id, data)

                if result['success']:
                    return jsonify(result), 201
                else:
                    return jsonify(result), 400

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞: {e}")
                return jsonify({'success': False, 'error': str(e)}), 500

        # === –î–û–°–¢–£–ü–ù–´–ï –û–§–§–ï–†–´ ===
        @app.route('/api/offers/available', methods=['GET'])
        def get_available_offers():
            """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
            try:
                telegram_user_id = get_user_id_from_request()

                filters = {
                    'search': request.args.get('search', '').strip(),
                    'category': request.args.get('category', '').strip(),
                    'min_budget': request.args.get('min_budget'),
                    'max_budget': request.args.get('max_budget'),
                    'min_subscribers': request.args.get('min_subscribers'),
                    'limit': int(request.args.get('limit', 50)),
                    'exclude_user_id': telegram_user_id
                }

                # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
                filters = {k: v for k, v in filters.items() if v not in [None, '', 'None']}

                offers = add_offer.get_available_offers(filters)

                return jsonify({
                    'success': True,
                    'offers': offers,
                    'total': len(offers)
                })

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤: {e}")
                return jsonify({'success': False, 'error': str(e)}), 500

        # === –£–ü–†–ê–í–õ–ï–ù–ò–ï –û–§–§–ï–†–û–ú ===
        @app.route('/api/offers/<int:offer_id>/status', methods=['PATCH'])
        def update_offer_status(offer_id):
            """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ñ—Ñ–µ—Ä–∞"""
            try:
                telegram_user_id = get_user_id_from_request()
                data = request.get_json()

                new_status = data.get('status')
                reason = data.get('reason', '')

                if not new_status:
                    return jsonify({'success': False, 'error': '–°—Ç–∞—Ç—É—Å –Ω–µ —É–∫–∞–∑–∞–Ω'}), 400

                result = add_offer.update_offer_status_by_id(offer_id, telegram_user_id, new_status, reason)
                return jsonify(result)

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—Ñ—Ñ–µ—Ä–∞: {e}")
                return jsonify({'success': False, 'error': str(e)}), 500

        @app.route('/api/offers/<int:offer_id>', methods=['DELETE'])
        def delete_offer_route(offer_id):
            """–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞"""
            try:
                telegram_user_id = get_user_id_from_request()
                result = add_offer.delete_offer_by_id(offer_id, telegram_user_id)
                return jsonify(result)

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞: {e}")
                return jsonify({'success': False, 'error': str(e)}), 500

        # === –û–¢–ö–õ–ò–ö–ò ===
        @app.route('/api/offers/<int:offer_id>/respond', methods=['POST'])
        def respond_to_offer(offer_id):
            """–û—Ç–∫–ª–∏–∫ –Ω–∞ –æ—Ñ—Ñ–µ—Ä"""
            try:
                telegram_user_id = get_user_id_from_request()
                data = request.get_json()

                channel_id = data.get('channel_id')
                message = data.get('message', '').strip()

                if not channel_id or not message:
                    return jsonify({'success': False, 'error': '–ö–∞–Ω–∞–ª –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'}), 400

                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∫–ª–∏–∫–∞
                user = execute_db_query('SELECT id FROM users WHERE telegram_id = ?', (telegram_user_id,),
                                        fetch_one=True)
                if not user:
                    return jsonify({'success': False, 'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 400

                channel = execute_db_query("""
                                           SELECT *
                                           FROM channels
                                           WHERE id = ?
                                             AND owner_id = ?
                                             AND is_verified = 1
                                           """, (channel_id, user['id']), fetch_one=True)

                if not channel:
                    return jsonify({'success': False, 'error': '–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'}), 400

                # –°–æ–∑–¥–∞–µ–º –æ—Ç–∫–ª–∏–∫
                response_id = execute_db_query("""
                                               INSERT INTO offer_responses (offer_id, user_id, message, status,
                                                                            channel_title, channel_username,
                                                                            channel_subscribers,
                                                                            created_at, updated_at)
                                               VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                                               """, (
                                                   offer_id, user['id'], message, 'pending',
                                                   channel['title'], channel['username'],
                                                   channel.get('subscriber_count', 0),
                                                   datetime.now().isoformat(), datetime.now().isoformat()
                                               ))

                return jsonify({
                    'success': True,
                    'message': '–û—Ç–∫–ª–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è.',
                    'response_id': response_id
                })

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –æ—Ñ—Ñ–µ—Ä: {e}")
                return jsonify({'success': False, 'error': str(e)}), 500

        @app.route('/api/offers/<int:offer_id>/responses', methods=['GET'])
        def get_offer_responses(offer_id):
            """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–∞ –æ—Ñ—Ñ–µ—Ä"""
            try:
                telegram_user_id = get_user_id_from_request()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Ñ—Ñ–µ—Ä—É
                offer = execute_db_query("""
                                         SELECT o.*, u.telegram_id as owner_telegram_id
                                         FROM offers o
                                                  JOIN users u ON o.created_by = u.id
                                         WHERE o.id = ?
                                         """, (offer_id,), fetch_one=True)

                if not offer:
                    return jsonify({'success': False, 'error': '–û—Ñ—Ñ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404

                if offer['owner_telegram_id'] != telegram_user_id:
                    return jsonify({'success': False, 'error': '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –æ—Ñ—Ñ–µ—Ä—É'}), 403

                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫–ª–∏–∫–∏
                responses = execute_db_query("""
                                             SELECT or_resp.*,
                                                    u.first_name || ' ' || COALESCE(u.last_name, '') as channel_owner_name,
                                                    u.username                                       as channel_owner_username,
                                                    u.telegram_id                                    as channel_owner_telegram_id
                                             FROM offer_responses or_resp
                                                      JOIN users u ON or_resp.user_id = u.id
                                             WHERE or_resp.offer_id = ?
                                             ORDER BY or_resp.created_at DESC
                                             """, (offer_id,), fetch_all=True)

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–∫–ª–∏–∫–∏
                formatted_responses = []
                for response in responses:
                    formatted_responses.append({
                        'id': response['id'],
                        'offer_id': response['offer_id'],
                        'status': response['status'],
                        'message': response['message'],
                        'created_at': response['created_at'],
                        'updated_at': response['updated_at'],
                        'channel_title': response.get('channel_title', '–ö–∞–Ω–∞–ª –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                        'channel_username': response.get('channel_username', 'unknown'),
                        'channel_subscribers': response.get('channel_subscribers', 0),
                        'channel_owner_name': response['channel_owner_name'].strip() or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                        'channel_owner_username': response['channel_owner_username'] or '',
                        'channel_owner_telegram_id': response['channel_owner_telegram_id']
                    })

                return jsonify({
                    'success': True,
                    'responses': formatted_responses,
                    'count': len(formatted_responses),
                    'offer': {
                        'id': offer['id'],
                        'title': offer['title'],
                        'status': offer['status']
                    }
                })

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∫–ª–∏–∫–æ–≤: {e}")
                return jsonify({'success': False, 'error': str(e)}), 500

        @app.route('/api/offers/responses/<response_id>/status', methods=['PATCH'])
        def update_response_status_route(response_id):
            """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–∫–ª–∏–∫–∞"""
            try:
                telegram_user_id = get_user_id_from_request()
                data = request.get_json()

                status = data.get('status')
                message = data.get('message', '')

                if not status:
                    return jsonify({'success': False, 'error': '–°—Ç–∞—Ç—É—Å –Ω–µ —É–∫–∞–∑–∞–Ω'}), 400

                result = add_offer.update_response_status(response_id, status, telegram_user_id, message)
                return jsonify(result)

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–∫–ª–∏–∫–∞: {e}")
                return jsonify({'success': False, 'error': str(e)}), 500

        # === –ö–û–ù–¢–†–ê–ö–¢–´ ===
        @app.route('/api/offers/contracts', methods=['GET'])
        def get_user_contracts():
            """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
            try:
                telegram_user_id = get_user_id_from_request()

                user = execute_db_query('SELECT id FROM users WHERE telegram_id = ?', (telegram_user_id,),
                                        fetch_one=True)
                if not user:
                    return jsonify({'success': False, 'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'})

                contracts = execute_db_query("""
                                             SELECT c.*,
                                                    o.title          as offer_title,
                                                    u_adv.first_name as advertiser_name,
                                                    u_pub.first_name as publisher_name,
                                                    or_resp.channel_title,
                                                    or_resp.channel_username
                                             FROM contracts c
                                                      JOIN offers o ON c.offer_id = o.id
                                                      JOIN users u_adv ON c.advertiser_id = u_adv.id
                                                      JOIN users u_pub ON c.publisher_id = u_pub.id
                                                      JOIN offer_responses or_resp ON c.response_id = or_resp.id
                                             WHERE c.advertiser_id = ?
                                                OR c.publisher_id = ?
                                             ORDER BY c.created_at DESC
                                             """, (user['id'], user['id']), fetch_all=True)

                contracts_list = []
                for contract in contracts:
                    contracts_list.append({
                        'id': contract['id'],
                        'offer_title': contract['offer_title'],
                        'price': float(contract['price']),
                        'status': contract['status'],
                        'role': 'advertiser' if contract['advertiser_id'] == user['id'] else 'publisher',
                        'advertiser_name': contract['advertiser_name'],
                        'publisher_name': contract['publisher_name'],
                        'channel_title': contract['channel_title'],
                        'channel_username': contract['channel_username'],
                        'placement_deadline': contract['placement_deadline'],
                        'monitoring_end': contract['monitoring_end'],
                        'verification_passed': bool(contract.get('verification_passed')),
                        'verification_details': contract.get('verification_details', ''),
                        'violation_reason': contract.get('violation_reason', ''),
                        'created_at': contract['created_at']
                    })

                return jsonify({
                    'success': True,
                    'contracts': contracts_list,
                    'total': len(contracts_list)
                })

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤: {e}")
                return jsonify({'success': False, 'error': str(e)}), 500

        # === –†–ê–ó–ú–ï–©–ï–ù–ò–ï –ò –ü–†–û–í–ï–†–ö–ê ===
        @app.route('/api/offers/contracts/<contract_id>/placement', methods=['POST'])
        def submit_placement_api(contract_id):
            """–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ —Ä–µ–∫–ª–∞–º—ã"""
            try:
                telegram_user_id = get_user_id_from_request()
                data = request.get_json()

                if not data or 'post_url' not in data:
                    return jsonify({'success': False, 'error': '–ù–µ —É–∫–∞–∑–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç'}), 400

                post_url = data['post_url'].strip()
                result = add_offer.submit_placement(contract_id, post_url, telegram_user_id)

                return jsonify(result)

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏: {e}")
                return jsonify({'success': False, 'error': str(e)}), 500

        # === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ù–¢–†–ê–ö–¢–ê–ú–ò ===
        @app.route('/api/offers/contracts/<contract_id>/cancel', methods=['POST'])
        def cancel_contract_api(contract_id):
            """–û—Ç–º–µ–Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞"""
            try:
                telegram_user_id = get_user_id_from_request()
                data = request.get_json() or {}
                reason = data.get('reason', '–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º')

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                contract = execute_db_query("""
                                            SELECT c.*,
                                                   u_adv.telegram_id as advertiser_telegram_id,
                                                   u_pub.telegram_id as publisher_telegram_id
                                            FROM contracts c
                                                     JOIN users u_adv ON c.advertiser_id = u_adv.id
                                                     JOIN users u_pub ON c.publisher_id = u_pub.id
                                            WHERE c.id = ?
                                              AND (u_adv.telegram_id = ? OR u_pub.telegram_id = ?)
                                            """, (contract_id, telegram_user_id, telegram_user_id), fetch_one=True)

                if not contract:
                    return jsonify({'success': False, 'error': '–ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞'}), 404

                if contract['status'] in ['completed', 'cancelled']:
                    return jsonify({'success': False, 'error': '–ö–æ–Ω—Ç—Ä–∞–∫—Ç —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω'}), 400

                execute_db_query("""
                                 UPDATE contracts
                                 SET status           = 'cancelled',
                                     violation_reason = ?,
                                     updated_at       = ?
                                 WHERE id = ?
                                 """, (reason, datetime.now().isoformat(), contract_id))

                return jsonify({
                    'success': True,
                    'message': '–ö–æ–Ω—Ç—Ä–∞–∫—Ç –æ—Ç–º–µ–Ω–µ–Ω. –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–ª—É—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.'
                })

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {e}")
                return jsonify({'success': False, 'error': str(e)}), 500

        @app.route('/api/offers/contracts/<contract_id>', methods=['DELETE'])
        def delete_contract_api(contract_id):
            """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞"""
            try:
                telegram_user_id = get_user_id_from_request()
                result = add_offer.delete_finished_contract(contract_id, telegram_user_id)
                return jsonify(result)

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {e}")
                return jsonify({'success': False, 'error': str(e)}), 500

        logger.info("‚úÖ Offers API –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")

        # –ü–æ–¥—Å—á–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
        offers_routes_count = len([rule for rule in app.url_map.iter_rules() if '/api/offers' in rule.rule])
        logger.info(f"üìä –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ offers –º–∞—Ä—à—Ä—É—Ç–æ–≤: {offers_routes_count}")

    except Exception as e:
        logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ offers API: {e}")
        raise


# === –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø BLUEPRINTS ===
def register_blueprints(app: Flask) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Blueprint'–æ–≤ (–∏—Å–∫–ª—é—á–∞—è offers - –æ–Ω —Ç–µ–ø–µ—Ä—å –≤ API)"""

    try:
        blueprint_modules = [
            ('app.routers.main_router', 'main_bp', ''),
            ('app.api.channels', 'channels_bp', '/api/channels'),
        ]

        for module_name, blueprint_name, url_prefix in blueprint_modules:
            try:
                if module_name == 'app.api.channels':
                    from app.api.channels import channels_bp as blueprint
                elif module_name == 'app.routers.main_router':
                    from app.routers.main_router import main_bp as blueprint
                else:
                    continue

                app.register_blueprint(blueprint, url_prefix=url_prefix)
                logger.info(f"‚úÖ {blueprint_name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")

            except ImportError:
                logger.warning(f"‚ö†Ô∏è –ú–æ–¥—É–ª—å {module_name} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Blueprint'–æ–≤: {e}")


# === MIDDLEWARE ===
def register_middleware(app: Flask) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware"""

    @app.before_request
    def security_middleware():
        if request.content_length and request.content_length > AppConfig.MAX_CONTENT_LENGTH:
            return jsonify({'error': 'Request too large'}), 413

    @app.after_request
    def security_headers(response):
        response.headers.update({
            'X-Content-Type-Options': 'nosniff',
            'X-Frame-Options': 'SAMEORIGIN',
            'X-XSS-Protection': '1; mode=block',
        })
        return response


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–®–ò–ë–û–ö ===
def register_error_handlers(app: Flask) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫"""

    @app.errorhandler(404)
    def not_found(error):
        if request.path.startswith('/api/'):
            return jsonify({'error': 'Endpoint not found', 'path': request.path}), 404
        return render_template('error.html', message='–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'), 404

    @app.errorhandler(500)
    def internal_error(error):
        logger.error(f"Internal error: {error}")
        if request.path.startswith('/api/'):
            return jsonify({'error': 'Internal server error'}), 500
        return render_template('error.html', message='–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'), 500


# === –°–õ–£–ñ–ï–ë–ù–´–ï –ú–ê–†–®–†–£–¢–´ ===
def register_system_routes(app: Flask) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–ª—É–∂–µ–±–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤"""

    @app.route('/debug/routes')
    def debug_routes():
        routes = []
        for rule in app.url_map.iter_rules():
            routes.append({
                'endpoint': rule.endpoint,
                'methods': list(rule.methods),
                'rule': rule.rule
            })
        return jsonify(routes)

    @app.route('/debug/offers-status')
    def debug_offers_status():
        offers_routes = [r for r in app.url_map.iter_rules() if '/api/offers' in r.rule]
        return jsonify({
            'add_offer_imported': add_offer is not None,
            'offers_routes_count': len(offers_routes),
            'offers_routes': [{'rule': r.rule, 'methods': list(r.methods)} for r in offers_routes]
        })

    # –ë–∞–∑–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã endpoints –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    @app.route('/api/channels/<int:channel_id>/verify', methods=['PUT', 'POST'])
    def verify_channel_unified(channel_id):
        """–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞"""
        try:
            telegram_user_id = get_user_id_from_request()

            result = {
                'success': True,
                'message': f'‚úÖ –ö–∞–Ω–∞–ª {channel_id} —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!',
                'channel': {
                    'id': channel_id,
                    'is_verified': True,
                    'verified_at': datetime.utcnow().isoformat()
                }
            }

            return jsonify(result)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞: {e}")
            return jsonify({'success': False, 'error': str(e)}), 400


# ===== TELEGRAM WEBHOOK =====
def setup_telegram_webhook():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è Telegram –±–æ—Ç–∞"""
    try:
        bot_token = AppConfig.BOT_TOKEN
        if not bot_token:
            return

        webhook_url = f"{AppConfig.WEBAPP_URL}/api/channels/webhook"
        url = f"https://api.telegram.org/bot{bot_token}/setWebhook"

        response = requests.post(url, json={
            'url': webhook_url,
            'allowed_updates': ['channel_post', 'message', 'edited_message', 'edited_channel_post'],
            'drop_pending_updates': False
        })

        if response.status_code == 200 and response.json().get('ok'):
            logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook: {e}")


# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
logger = setup_logging()
app = create_app()


# === –¢–û–ß–ö–ê –í–•–û–î–ê ===
def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""

    if not AppConfig.validate():
        logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        sys.exit(1)

    setup_telegram_webhook()

    host = os.environ.get('HOST', '0.0.0.0')
    port = int(os.environ.get('PORT', 5000))

    logger.info("=" * 60)
    logger.info("üöÄ TELEGRAM MINI APP - –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø")
    logger.info("=" * 60)
    logger.info(f"üì± BOT_TOKEN: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if AppConfig.BOT_TOKEN else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
    logger.info(f"üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {AppConfig.DATABASE_PATH}")
    logger.info(f"üåê –ó–∞–ø—É—Å–∫ –Ω–∞: http://{host}:{port}")
    logger.info(f"üì¶ add_offer –º–æ–¥—É–ª—å: {'‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω' if add_offer else '‚ùå –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω'}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ä—à—Ä—É—Ç–æ–≤
    total_routes = len(list(app.url_map.iter_rules()))
    offers_routes = len([r for r in app.url_map.iter_rules() if '/api/offers' in r.rule])
    logger.info(f"üìä –í—Å–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤: {total_routes} (offers: {offers_routes})")
    logger.info("=" * 60)

    try:
        app.run(
            host=host,
            port=port,
            debug=AppConfig.DEBUG,
            threaded=True,
            use_reloader=AppConfig.DEBUG
        )
    except KeyboardInterrupt:
        logger.info("üõë –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == '__main__':
    main()