#!/usr/bin/env python3
"""
–î–æ–±–∞–≤–ª–µ–Ω–∏–µ webhook endpoint –≤ app/api/channels.py
–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–±–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
"""

import os
import re

def add_webhook_to_channels_api():
    """–î–æ–±–∞–≤–ª—è–µ—Ç webhook endpoint –≤ —Ñ–∞–π–ª app/api/channels.py"""
    
    channels_api_path = 'app/api/channels.py'
    
    if not os.path.exists(channels_api_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {channels_api_path}")
        return False
    
    # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
    with open(channels_api_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ webhook
    if '/webhook' in content and 'telegram_webhook' in content:
        print("‚ÑπÔ∏è Webhook endpoint —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ñ–∞–π–ª–µ")
        return True
    
    # Webhook –∫–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    webhook_code = '''

@channels_bp.route('/webhook', methods=['POST'])
def telegram_webhook():
    """Webhook –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤"""
    try:
        from datetime import datetime
        import logging
        
        logger = logging.getLogger(__name__)
        data = request.get_json()
        
        if not data:
            return jsonify({'ok': True})
        
        logger.info(f"üì® Webhook –ø–æ–ª—É—á–µ–Ω: {data.get('update_id', 'N/A')}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–∞—Ö
        if 'channel_post' in data:
            message = data['channel_post']
            chat = message.get('chat', {})
            chat_id = str(chat.get('id'))
            text = message.get('text', '')
            
            logger.info(f"üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ {chat_id}: {text[:50]}...")
            
            # –ò—â–µ–º –∫–∞–Ω–∞–ª—ã —Å –∫–æ–¥–∞–º–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
            channels = db_manager.execute_query("""
                SELECT id, username, verification_code, telegram_id
                FROM channels 
                WHERE status = 'pending_verification' 
                AND verification_code IS NOT NULL
            """, fetch_all=True)
            
            verification_found = False
            
            for channel in channels:
                verification_code = channel['verification_code']
                if verification_code and verification_code in text:
                    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∫–∞–Ω–∞–ª
                    success = db_manager.execute_query("""
                        UPDATE channels 
                        SET status = 'verified', verified_at = ?, is_verified = 1
                        WHERE id = ?
                    """, (datetime.now().isoformat(), channel['id']))
                    
                    if success:
                        logger.info(f"‚úÖ –ö–∞–Ω–∞–ª {channel['username']} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω —Å –∫–æ–¥–æ–º {verification_code}!")
                        verification_found = True
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ {channel['id']}")
            
            if verification_found:
                logger.info("üéâ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
        return jsonify({'ok': True})
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ webhook: {e}")
        import traceback
        traceback.print_exc()
        return jsonify({'ok': True})  # –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ok –¥–ª—è Telegram
'''

    # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ (–ø–µ—Ä–µ–¥ –ø–æ—Å–ª–µ–¥–Ω–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º –∏–ª–∏ –≤ –∫–æ–Ω—Ü–µ)
    insert_position = len(content)
    
    # –ò—â–µ–º –º–µ—Å—Ç–æ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
    if 'def ' in content:
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ñ—É–Ω–∫—Ü–∏—é
        last_func_match = None
        for match in re.finditer(r'\ndef [^:]+:', content):
            last_func_match = match
        
        if last_func_match:
            # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
            start_pos = last_func_match.start()
            remaining_content = content[start_pos:]
            
            # –ò—â–µ–º —Å–ª–µ–¥—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–ª–∏ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
            next_func = re.search(r'\n\ndef ', remaining_content)
            if next_func:
                insert_position = start_pos + next_func.start()
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Å–ª–µ–¥—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏, –≤—Å—Ç–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü
                insert_position = len(content)
    
    # –í—Å—Ç–∞–≤–ª—è–µ–º webhook –∫–æ–¥
    new_content = content[:insert_position] + webhook_code + content[insert_position:]
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_path = f"{channels_api_path}.backup"
    with open(backup_path, 'w', encoding='utf-8') as f:
        f.write(content)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open(channels_api_path, 'w', encoding='utf-8') as f:
        f.write(new_content)
    
    print(f"‚úÖ Webhook endpoint –¥–æ–±–∞–≤–ª–µ–Ω –≤ {channels_api_path}")
    print(f"üìÑ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
    
    return True

def update_channels_api_imports():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–º–ø–æ—Ä—Ç—ã –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞"""
    
    channels_api_path = 'app/api/channels.py'
    
    if not os.path.exists(channels_api_path):
        return False
    
    with open(channels_api_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
    imports_to_add = []
    
    if 'from datetime import datetime' not in content:
        imports_to_add.append('from datetime import datetime')
    
    if 'import logging' not in content:
        imports_to_add.append('import logging')
    
    if imports_to_add:
        # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∏–º–ø–æ—Ä—Ç–æ–≤ (–ø–æ—Å–ª–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤)
        import_lines = []
        lines = content.split('\n')
        
        insert_line = 0
        for i, line in enumerate(lines):
            if line.strip().startswith(('import ', 'from ')) and not line.strip().startswith('#'):
                insert_line = i + 1
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã
        for imp in imports_to_add:
            lines.insert(insert_line, imp)
            insert_line += 1
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        new_content = '\n'.join(lines)
        with open(channels_api_path, 'w', encoding='utf-8') as f:
            f.write(new_content)
        
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –∏–º–ø–æ—Ä—Ç—ã: {', '.join(imports_to_add)}")
    
    return True

def test_webhook_endpoint():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π endpoint"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook endpoint...")
    
    import requests
    
    try:
        url = "https://lesson-bed-cent-concentration.trycloudflare.com/api/channels/webhook"
        
        test_data = {
            "update_id": 123456789,
            "channel_post": {
                "message_id": 1,
                "chat": {
                    "id": "-1001000000999",
                    "type": "channel",
                    "title": "–¢–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª"
                },
                "date": 1640995200,
                "text": "#addtest123 - –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"
            }
        }
        
        response = requests.post(url, json=test_data, timeout=10)
        
        if response.status_code == 200:
            result = response.json()
            if result.get('ok'):
                print("‚úÖ Webhook endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                return True
            else:
                print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {result}")
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 60)
    print("üîß –î–û–ë–ê–í–õ–ï–ù–ò–ï WEBHOOK –í API –ö–ê–ù–ê–õ–û–í")
    print("=" * 60)
    
    # 1. –û–±–Ω–æ–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
    if update_channels_api_imports():
        print("‚úÖ –ò–º–ø–æ—Ä—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
    
    # 2. –î–æ–±–∞–≤–ª—è–µ–º webhook endpoint
    if add_webhook_to_channels_api():
        print("‚úÖ Webhook endpoint –¥–æ–±–∞–≤–ª–µ–Ω")
        
        # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º endpoint
        print("\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 3 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞...")
        import time
        time.sleep(3)
        
        test_webhook_endpoint()
        
        print("\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: python working_app.py")
        print("2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ webhook: python setup_webhook.py")
        print("3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞")
        
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å webhook endpoint")

if __name__ == '__main__':
    main()
