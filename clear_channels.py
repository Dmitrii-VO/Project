#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –∫–∞–Ω–∞–ª–æ–≤
–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏
"""

import os
import sqlite3
from datetime import datetime

DATABASE_PATH = 'telegram_mini_app.db'


def clear_channels_table():
    """–û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –∫–∞–Ω–∞–ª–æ–≤"""

    print("üóëÔ∏è –û–ß–ò–°–¢–ö–ê –¢–ê–ë–õ–ò–¶–´ –ö–ê–ù–ê–õ–û–í")
    print("=" * 50)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if not os.path.exists(DATABASE_PATH):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {DATABASE_PATH}")
        return False

    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()

        # –í–∫–ª—é—á–∞–µ–º foreign keys
        cursor.execute('PRAGMA foreign_keys = ON')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤ –¥–æ —É–¥–∞–ª–µ–Ω–∏—è
        cursor.execute("SELECT COUNT(*) FROM channels")
        channels_before = cursor.fetchone()[0]

        print(f"üìä –ö–∞–Ω–∞–ª–æ–≤ –≤ –±–∞–∑–µ –¥–æ –æ—á–∏—Å—Ç–∫–∏: {channels_before}")

        if channels_before == 0:
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –∫–∞–Ω–∞–ª–æ–≤ —É–∂–µ –ø—É—Å—Ç–∞")
            conn.close()
            return True

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–∞—Ö –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        cursor.execute("""
                       SELECT id, telegram_id, title, is_verified
                       FROM channels
                       ORDER BY created_at
                       """)
        channels_info = cursor.fetchall()

        print("\nüìã –ö–ê–ù–ê–õ–´ –î–õ–Ø –£–î–ê–õ–ï–ù–ò–Ø:")
        print("-" * 50)
        for channel in channels_info:
            status = "‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω" if channel[3] else "‚è≥ –ù–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω"
            telegram_id = channel[1] if channel[1] else "–ù–µ—Ç ID"
            title = channel[2] if channel[2] else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            print(f"  ID: {channel[0]:<3} | {telegram_id:<15} | {title:<20} | {status}")

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        print(f"\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ {channels_before} –∫–∞–Ω–∞–ª–æ–≤!")
        print("–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.")

        confirm = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ").lower().strip()

        if confirm not in ['y', 'yes', '–¥–∞']:
            print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            conn.close()
            return False

        # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        print("\nüîÑ –£–¥–∞–ª–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")

        # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏ –∫–∞–Ω–∞–ª–æ–≤ —Å –æ—Ñ—Ñ–µ—Ä–∞–º–∏ (–ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã)
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='channel_offers'")
        if cursor.fetchone():
            cursor.execute("DELETE FROM channel_offers WHERE channel_id IN (SELECT id FROM channels)")
            deleted_channel_offers = cursor.rowcount
            print(f"  üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Å–≤—è–∑–µ–π —Å –æ—Ñ—Ñ–µ—Ä–∞–º–∏: {deleted_channel_offers}")
        else:
            print("  ‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ channel_offers –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            deleted_channel_offers = 0

        # –£–¥–∞–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Ñ—Ñ–µ—Ä—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫–∞–Ω–∞–ª–∞–º–∏
        cursor.execute("""
                       DELETE
                       FROM offer_responses
                       WHERE offer_id IN (SELECT id
                                          FROM offers
                                          WHERE channel_id IN (SELECT id FROM channels))
                       """)
        deleted_responses = cursor.rowcount
        print(f"  üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ—Ñ—Ñ–µ—Ä—ã: {deleted_responses}")

        # –£–¥–∞–ª—è–µ–º –æ—Ñ—Ñ–µ—Ä—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫–∞–Ω–∞–ª–∞–º–∏
        cursor.execute("DELETE FROM offers WHERE channel_id IN (SELECT id FROM channels)")
        deleted_offers = cursor.rowcount
        print(f"  üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –æ—Ñ—Ñ–µ—Ä–æ–≤: {deleted_offers}")

        # –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫–∞–Ω–∞–ª–∞–º–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        try:
            cursor.execute("""
                           DELETE
                           FROM notifications
                           WHERE data LIKE '%channel_id%'
                             AND json_extract(data, '$.channel_id') IN (SELECT id FROM channels)
                           """)
            deleted_notifications = cursor.rowcount
            print(f"  üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {deleted_notifications}")
        except:
            print("  ‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã
        print("\nüóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤...")
        cursor.execute("DELETE FROM channels")
        deleted_channels = cursor.rowcount

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç
        cursor.execute("DELETE FROM sqlite_sequence WHERE name='channels'")

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cursor.execute("SELECT COUNT(*) FROM channels")
        channels_after = cursor.fetchone()[0]

        print(f"\n‚úÖ –û–ü–ï–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")
        print("=" * 50)
        print(f"üìä –ö–∞–Ω–∞–ª–æ–≤ —É–¥–∞–ª–µ–Ω–æ: {deleted_channels}")
        print(f"üìä –ö–∞–Ω–∞–ª–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: {channels_after}")
        print(f"üìä –°–≤—è–∑–∞–Ω–Ω—ã—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤ —É–¥–∞–ª–µ–Ω–æ: {deleted_offers}")
        print(f"üìä –û—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ—Ñ—Ñ–µ—Ä—ã —É–¥–∞–ª–µ–Ω–æ: {deleted_responses}")
        print(f"üìä –°–≤—è–∑–µ–π —Å –æ—Ñ—Ñ–µ—Ä–∞–º–∏ —É–¥–∞–ª–µ–Ω–æ: {deleted_channel_offers}")

        if channels_after == 0:
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –∫–∞–Ω–∞–ª–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞")
            print("\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
            print("1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: python working_app.py")
            print("2. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
            print("3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
        else:
            print(f"‚ö†Ô∏è –û—Å—Ç–∞–ª–∏—Å—å –∫–∞–Ω–∞–ª—ã: {channels_after}")

        conn.close()
        return True

    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ SQLite: {e}")
        if 'conn' in locals():
            conn.rollback()
            conn.close()
        return False

    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        if 'conn' in locals():
            conn.close()
        return False


def verify_cleanup():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—á–∏—Å—Ç–∫–∏"""
    print("\nüîç –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("=" * 50)

    try:
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        tables_to_check = [
            ('channels', '–ö–∞–Ω–∞–ª—ã'),
            ('offers', '–û—Ñ—Ñ–µ—Ä—ã'),
            ('offer_responses', '–û—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Ñ—Ñ–µ—Ä—ã'),
            ('channel_offers', '–°–≤—è–∑–∏ –∫–∞–Ω–∞–ª–æ–≤ —Å –æ—Ñ—Ñ–µ—Ä–∞–º–∏'),
            ('notifications', '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'),
            ('users', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏')
        ]

        for table_name, table_desc in tables_to_check:
            try:
                cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
                count = cursor.fetchone()[0]
                print(f"üìä {table_desc:<25}: {count} –∑–∞–ø–∏—Å–µ–π")
            except sqlite3.Error:
                print(f"‚ö†Ô∏è {table_desc:<25}: —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        conn.close()

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîÑ –°–ö–†–ò–ü–¢ –û–ß–ò–°–¢–ö–ò –ö–ê–ù–ê–õ–û–í")
    print("–í–µ—Ä—Å–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
    print("=" * 70)

    # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∫–∞–Ω–∞–ª–æ–≤
    success = clear_channels_table()

    if success:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        verify_cleanup()

        print(f"\nüéâ –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print("=" * 70)
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
        print("‚úÖ –í—Å–µ –∫–∞–Ω–∞–ª—ã —É–¥–∞–ª–µ–Ω—ã")
        print("‚úÖ –°–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
        print("\nüìù –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        print("‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
        print("‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏")

    else:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –û–ß–ò–°–¢–ö–ò")
        print("=" * 70)
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –≤—ã—à–µ")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏")


if __name__ == '__main__':
    main()